/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./TtsQuestV3Voicevox.js":
/*!*******************************!*\
  !*** ./TtsQuestV3Voicevox.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TtsQuestV3Voicevox": function() { return /* binding */ TtsQuestV3Voicevox; }
/* harmony export */ });
// TtsQuestV3Voicevox.js

class TtsQuestV3Voicevox extends Audio {
    constructor(speakerId, text, ttsQuestApiKey) {
        super();
        var params = {};
        params['key'] = ttsQuestApiKey;
        params['speaker'] = speakerId;
        params['text'] = text;
        const query = new URLSearchParams(params);
        this.#main(this, query);
    }

    #main(owner, query) {
        if (owner.src.length > 0) return;
        var apiUrl = 'https://api.tts.quest/v3/voicevox/synthesis';
        fetch(apiUrl + '?' + query.toString())
            .then(response => response.json())
            .then(response => {
                if (typeof response.retryAfter !== 'undefined') {
                    // setTimeout(owner.#main, 1000 * (1 + response.retryAfter), owner, query);
                    setTimeout(() => owner.#main(owner, query), 1000 * (1 + response.retryAfter));
                } else if (response.success === true) {
                    // Success:trueの場合に特定の処理を実行
                    console.log("APIからデータを取得しました。");
                    // ここにSuccess:trueの場合に行いたい処理を追加
                    // 例えば、生成した音声を再生するなど

                    // mp3StreamingUrlが存在するか確認してから再生するなどの処理も追加できます
                    if (typeof response.mp3StreamingUrl !== 'undefined') {
                        owner.handleSuccess(response); // 成功時の処理を呼び出す
                    }
                } else if (typeof response.errorMessage !== 'undefined') {
                    throw new Error(response.errorMessage);
                } else {
                    throw new Error("serverError");
                }
            });
    }

    // 成功時の処理を追加
    handleSuccess(response) {
        // 成功時の処理を記述
        console.log("音声合成に成功しました。いつでも再生できます。");
        // ここでフラグをTrueにするか、他の処理を追加できます。
        this.src = response.mp3StreamingUrl;
        // owner.play(); // 生成した音声を再生
    }
}

// TypeScriptで利用するためにエクスポート



/***/ }),

/***/ "../../../Framework/src/cubismdefaultparameterid.ts":
/*!**********************************************************!*\
  !*** ../../../Framework/src/cubismdefaultparameterid.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismDefaultParameterId = void 0;
exports.CubismDefaultParameterId = Object.freeze({
    HitAreaPrefix: 'HitArea',
    HitAreaHead: 'Head',
    HitAreaBody: 'Body',
    PartsIdCore: 'Parts01Core',
    PartsArmPrefix: 'Parts01Arm_',
    PartsArmLPrefix: 'Parts01ArmL_',
    PartsArmRPrefix: 'Parts01ArmR_',
    ParamAngleX: 'ParamAngleX',
    ParamAngleY: 'ParamAngleY',
    ParamAngleZ: 'ParamAngleZ',
    ParamEyeLOpen: 'ParamEyeLOpen',
    ParamEyeLSmile: 'ParamEyeLSmile',
    ParamEyeROpen: 'ParamEyeROpen',
    ParamEyeRSmile: 'ParamEyeRSmile',
    ParamEyeBallX: 'ParamEyeBallX',
    ParamEyeBallY: 'ParamEyeBallY',
    ParamEyeBallForm: 'ParamEyeBallForm',
    ParamBrowLY: 'ParamBrowLY',
    ParamBrowRY: 'ParamBrowRY',
    ParamBrowLX: 'ParamBrowLX',
    ParamBrowRX: 'ParamBrowRX',
    ParamBrowLAngle: 'ParamBrowLAngle',
    ParamBrowRAngle: 'ParamBrowRAngle',
    ParamBrowLForm: 'ParamBrowLForm',
    ParamBrowRForm: 'ParamBrowRForm',
    ParamMouthForm: 'ParamMouthForm',
    ParamMouthOpenY: 'ParamMouthOpenY',
    ParamCheek: 'ParamCheek',
    ParamBodyAngleX: 'ParamBodyAngleX',
    ParamBodyAngleY: 'ParamBodyAngleY',
    ParamBodyAngleZ: 'ParamBodyAngleZ',
    ParamBreath: 'ParamBreath',
    ParamArmLA: 'ParamArmLA',
    ParamArmRA: 'ParamArmRA',
    ParamArmLB: 'ParamArmLB',
    ParamArmRB: 'ParamArmRB',
    ParamHandL: 'ParamHandL',
    ParamHandR: 'ParamHandR',
    ParamHairFront: 'ParamHairFront',
    ParamHairSide: 'ParamHairSide',
    ParamHairBack: 'ParamHairBack',
    ParamHairFluffy: 'ParamHairFluffy',
    ParamShoulderY: 'ParamShoulderY',
    ParamBustX: 'ParamBustX',
    ParamBustY: 'ParamBustY',
    ParamBaseX: 'ParamBaseX',
    ParamBaseY: 'ParamBaseY',
    ParamNONE: 'NONE:',
});
var $ = __importStar(__webpack_require__(/*! ./cubismdefaultparameterid */ "../../../Framework/src/cubismdefaultparameterid.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.HitAreaBody = $.CubismDefaultParameterId.HitAreaBody;
    Live2DCubismFramework.HitAreaHead = $.CubismDefaultParameterId.HitAreaHead;
    Live2DCubismFramework.HitAreaPrefix = $.CubismDefaultParameterId.HitAreaPrefix;
    Live2DCubismFramework.ParamAngleX = $.CubismDefaultParameterId.ParamAngleX;
    Live2DCubismFramework.ParamAngleY = $.CubismDefaultParameterId.ParamAngleY;
    Live2DCubismFramework.ParamAngleZ = $.CubismDefaultParameterId.ParamAngleZ;
    Live2DCubismFramework.ParamArmLA = $.CubismDefaultParameterId.ParamArmLA;
    Live2DCubismFramework.ParamArmLB = $.CubismDefaultParameterId.ParamArmLB;
    Live2DCubismFramework.ParamArmRA = $.CubismDefaultParameterId.ParamArmRA;
    Live2DCubismFramework.ParamArmRB = $.CubismDefaultParameterId.ParamArmRB;
    Live2DCubismFramework.ParamBaseX = $.CubismDefaultParameterId.ParamBaseX;
    Live2DCubismFramework.ParamBaseY = $.CubismDefaultParameterId.ParamBaseY;
    Live2DCubismFramework.ParamBodyAngleX = $.CubismDefaultParameterId.ParamBodyAngleX;
    Live2DCubismFramework.ParamBodyAngleY = $.CubismDefaultParameterId.ParamBodyAngleY;
    Live2DCubismFramework.ParamBodyAngleZ = $.CubismDefaultParameterId.ParamBodyAngleZ;
    Live2DCubismFramework.ParamBreath = $.CubismDefaultParameterId.ParamBreath;
    Live2DCubismFramework.ParamBrowLAngle = $.CubismDefaultParameterId.ParamBrowLAngle;
    Live2DCubismFramework.ParamBrowLForm = $.CubismDefaultParameterId.ParamBrowLForm;
    Live2DCubismFramework.ParamBrowLX = $.CubismDefaultParameterId.ParamBrowLX;
    Live2DCubismFramework.ParamBrowLY = $.CubismDefaultParameterId.ParamBrowLY;
    Live2DCubismFramework.ParamBrowRAngle = $.CubismDefaultParameterId.ParamBrowRAngle;
    Live2DCubismFramework.ParamBrowRForm = $.CubismDefaultParameterId.ParamBrowRForm;
    Live2DCubismFramework.ParamBrowRX = $.CubismDefaultParameterId.ParamBrowRX;
    Live2DCubismFramework.ParamBrowRY = $.CubismDefaultParameterId.ParamBrowRY;
    Live2DCubismFramework.ParamBustX = $.CubismDefaultParameterId.ParamBustX;
    Live2DCubismFramework.ParamBustY = $.CubismDefaultParameterId.ParamBustY;
    Live2DCubismFramework.ParamCheek = $.CubismDefaultParameterId.ParamCheek;
    Live2DCubismFramework.ParamEyeBallForm = $.CubismDefaultParameterId.ParamEyeBallForm;
    Live2DCubismFramework.ParamEyeBallX = $.CubismDefaultParameterId.ParamEyeBallX;
    Live2DCubismFramework.ParamEyeBallY = $.CubismDefaultParameterId.ParamEyeBallY;
    Live2DCubismFramework.ParamEyeLOpen = $.CubismDefaultParameterId.ParamEyeLOpen;
    Live2DCubismFramework.ParamEyeLSmile = $.CubismDefaultParameterId.ParamEyeLSmile;
    Live2DCubismFramework.ParamEyeROpen = $.CubismDefaultParameterId.ParamEyeROpen;
    Live2DCubismFramework.ParamEyeRSmile = $.CubismDefaultParameterId.ParamEyeRSmile;
    Live2DCubismFramework.ParamHairBack = $.CubismDefaultParameterId.ParamHairBack;
    Live2DCubismFramework.ParamHairFluffy = $.CubismDefaultParameterId.ParamHairFluffy;
    Live2DCubismFramework.ParamHairFront = $.CubismDefaultParameterId.ParamHairFront;
    Live2DCubismFramework.ParamHairSide = $.CubismDefaultParameterId.ParamHairSide;
    Live2DCubismFramework.ParamHandL = $.CubismDefaultParameterId.ParamHandL;
    Live2DCubismFramework.ParamHandR = $.CubismDefaultParameterId.ParamHandR;
    Live2DCubismFramework.ParamMouthForm = $.CubismDefaultParameterId.ParamMouthForm;
    Live2DCubismFramework.ParamMouthOpenY = $.CubismDefaultParameterId.ParamMouthOpenY;
    Live2DCubismFramework.ParamNONE = $.CubismDefaultParameterId.ParamNONE;
    Live2DCubismFramework.ParamShoulderY = $.CubismDefaultParameterId.ParamShoulderY;
    Live2DCubismFramework.PartsArmLPrefix = $.CubismDefaultParameterId.PartsArmLPrefix;
    Live2DCubismFramework.PartsArmPrefix = $.CubismDefaultParameterId.PartsArmPrefix;
    Live2DCubismFramework.PartsArmRPrefix = $.CubismDefaultParameterId.PartsArmRPrefix;
    Live2DCubismFramework.PartsIdCore = $.CubismDefaultParameterId.PartsIdCore;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/cubismframeworkconfig.ts":
/*!*******************************************************!*\
  !*** ../../../Framework/src/cubismframeworkconfig.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CSM_LOG_LEVEL = exports.CSM_LOG_LEVEL_OFF = exports.CSM_LOG_LEVEL_ERROR = exports.CSM_LOG_LEVEL_WARNING = exports.CSM_LOG_LEVEL_INFO = exports.CSM_LOG_LEVEL_DEBUG = exports.CSM_LOG_LEVEL_VERBOSE = void 0;
exports.CSM_LOG_LEVEL_VERBOSE = 0;
exports.CSM_LOG_LEVEL_DEBUG = 1;
exports.CSM_LOG_LEVEL_INFO = 2;
exports.CSM_LOG_LEVEL_WARNING = 3;
exports.CSM_LOG_LEVEL_ERROR = 4;
exports.CSM_LOG_LEVEL_OFF = 5;
exports.CSM_LOG_LEVEL = exports.CSM_LOG_LEVEL_VERBOSE;


/***/ }),

/***/ "../../../Framework/src/cubismmodelsettingjson.ts":
/*!********************************************************!*\
  !*** ../../../Framework/src/cubismmodelsettingjson.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismModelSettingJson = void 0;
var icubismmodelsetting_1 = __webpack_require__(/*! ./icubismmodelsetting */ "../../../Framework/src/icubismmodelsetting.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ./live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var csmvector_1 = __webpack_require__(/*! ./type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
var Version = 'Version';
var FileReferences = 'FileReferences';
var Groups = 'Groups';
var Layout = 'Layout';
var HitAreas = 'HitAreas';
var Moc = 'Moc';
var Textures = 'Textures';
var Physics = 'Physics';
var Pose = 'Pose';
var Expressions = 'Expressions';
var Motions = 'Motions';
var UserData = 'UserData';
var Name = 'Name';
var FilePath = 'File';
var Id = 'Id';
var Ids = 'Ids';
var Target = 'Target';
var Idle = 'Idle';
var TapBody = 'TapBody';
var PinchIn = 'PinchIn';
var PinchOut = 'PinchOut';
var Shake = 'Shake';
var FlickHead = 'FlickHead';
var Parameter = 'Parameter';
var SoundPath = 'Sound';
var FadeInTime = 'FadeInTime';
var FadeOutTime = 'FadeOutTime';
var CenterX = 'CenterX';
var CenterY = 'CenterY';
var X = 'X';
var Y = 'Y';
var Width = 'Width';
var Height = 'Height';
var LipSync = 'LipSync';
var EyeBlink = 'EyeBlink';
var InitParameter = 'init_param';
var InitPartsVisible = 'init_parts_visible';
var Val = 'val';
var FrequestNode;
(function (FrequestNode) {
    FrequestNode[FrequestNode["FrequestNode_Groups"] = 0] = "FrequestNode_Groups";
    FrequestNode[FrequestNode["FrequestNode_Moc"] = 1] = "FrequestNode_Moc";
    FrequestNode[FrequestNode["FrequestNode_Motions"] = 2] = "FrequestNode_Motions";
    FrequestNode[FrequestNode["FrequestNode_Expressions"] = 3] = "FrequestNode_Expressions";
    FrequestNode[FrequestNode["FrequestNode_Textures"] = 4] = "FrequestNode_Textures";
    FrequestNode[FrequestNode["FrequestNode_Physics"] = 5] = "FrequestNode_Physics";
    FrequestNode[FrequestNode["FrequestNode_Pose"] = 6] = "FrequestNode_Pose";
    FrequestNode[FrequestNode["FrequestNode_HitAreas"] = 7] = "FrequestNode_HitAreas";
})(FrequestNode || (FrequestNode = {}));
var CubismModelSettingJson = (function (_super) {
    __extends(CubismModelSettingJson, _super);
    function CubismModelSettingJson(buffer, size) {
        var _this = _super.call(this) || this;
        _this._json = cubismjson_1.CubismJson.create(buffer, size);
        if (_this._json) {
            _this._jsonValue = new csmvector_1.csmVector();
            _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(Groups));
            _this._jsonValue.pushBack(_this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(Moc));
            _this._jsonValue.pushBack(_this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(Motions));
            _this._jsonValue.pushBack(_this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(Expressions));
            _this._jsonValue.pushBack(_this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(Textures));
            _this._jsonValue.pushBack(_this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(Physics));
            _this._jsonValue.pushBack(_this._json
                .getRoot()
                .getValueByString(FileReferences)
                .getValueByString(Pose));
            _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(HitAreas));
        }
        return _this;
    }
    CubismModelSettingJson.prototype.release = function () {
        cubismjson_1.CubismJson.delete(this._json);
        this._jsonValue = null;
    };
    CubismModelSettingJson.prototype.GetJson = function () {
        return this._json;
    };
    CubismModelSettingJson.prototype.getModelFileName = function () {
        if (!this.isExistModelFile()) {
            return '';
        }
        return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();
    };
    CubismModelSettingJson.prototype.getTextureCount = function () {
        if (!this.isExistTextureFiles()) {
            return 0;
        }
        return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();
    };
    CubismModelSettingJson.prototype.getTextureDirectory = function () {
        var texturePath = this._jsonValue
            .at(FrequestNode.FrequestNode_Textures)
            .getValueByIndex(0)
            .getRawString();
        var pathArray = texturePath.split('/');
        var arrayLength = pathArray.length - 1;
        var textureDirectoryStr = '';
        for (var i = 0; i < arrayLength; i++) {
            textureDirectoryStr += pathArray[i];
            if (i < arrayLength - 1) {
                textureDirectoryStr += '/';
            }
        }
        return textureDirectoryStr;
    };
    CubismModelSettingJson.prototype.getTextureFileName = function (index) {
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Textures)
            .getValueByIndex(index)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getHitAreasCount = function () {
        if (!this.isExistHitAreas()) {
            return 0;
        }
        return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();
    };
    CubismModelSettingJson.prototype.getHitAreaId = function (index) {
        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._jsonValue
            .at(FrequestNode.FrequestNode_HitAreas)
            .getValueByIndex(index)
            .getValueByString(Id)
            .getRawString());
    };
    CubismModelSettingJson.prototype.getHitAreaName = function (index) {
        return this._jsonValue
            .at(FrequestNode.FrequestNode_HitAreas)
            .getValueByIndex(index)
            .getValueByString(Name)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getPhysicsFileName = function () {
        if (!this.isExistPhysicsFile()) {
            return '';
        }
        return this._jsonValue.at(FrequestNode.FrequestNode_Physics).getRawString();
    };
    CubismModelSettingJson.prototype.getPoseFileName = function () {
        if (!this.isExistPoseFile()) {
            return '';
        }
        return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();
    };
    CubismModelSettingJson.prototype.getExpressionCount = function () {
        if (!this.isExistExpressionFile()) {
            return 0;
        }
        return this._jsonValue.at(FrequestNode.FrequestNode_Expressions).getSize();
    };
    CubismModelSettingJson.prototype.getExpressionName = function (index) {
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Expressions)
            .getValueByIndex(index)
            .getValueByString(Name)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getExpressionFileName = function (index) {
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Expressions)
            .getValueByIndex(index)
            .getValueByString(FilePath)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getMotionGroupCount = function () {
        if (!this.isExistMotionGroups()) {
            return 0;
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getKeys()
            .getSize();
    };
    CubismModelSettingJson.prototype.getMotionGroupName = function (index) {
        if (!this.isExistMotionGroups()) {
            return null;
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getKeys()
            .at(index);
    };
    CubismModelSettingJson.prototype.getMotionCount = function (groupName) {
        if (!this.isExistMotionGroupName(groupName)) {
            return 0;
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getSize();
    };
    CubismModelSettingJson.prototype.getMotionFileName = function (groupName, index) {
        if (!this.isExistMotionGroupName(groupName)) {
            return '';
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(FilePath)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getMotionSoundFileName = function (groupName, index) {
        if (!this.isExistMotionSoundFile(groupName, index)) {
            return '';
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(SoundPath)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getMotionFadeInTimeValue = function (groupName, index) {
        if (!this.isExistMotionFadeIn(groupName, index)) {
            return -1.0;
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(FadeInTime)
            .toFloat();
    };
    CubismModelSettingJson.prototype.getMotionFadeOutTimeValue = function (groupName, index) {
        if (!this.isExistMotionFadeOut(groupName, index)) {
            return -1.0;
        }
        return this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(FadeOutTime)
            .toFloat();
    };
    CubismModelSettingJson.prototype.getUserDataFile = function () {
        if (!this.isExistUserDataFile()) {
            return '';
        }
        return this._json
            .getRoot()
            .getValueByString(FileReferences)
            .getValueByString(UserData)
            .getRawString();
    };
    CubismModelSettingJson.prototype.getLayoutMap = function (outLayoutMap) {
        var map = this._json
            .getRoot()
            .getValueByString(Layout)
            .getMap();
        if (map == null) {
            return false;
        }
        var ret = false;
        for (var ite = map.begin(); ite.notEqual(map.end()); ite.preIncrement()) {
            outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());
            ret = true;
        }
        return ret;
    };
    CubismModelSettingJson.prototype.getEyeBlinkParameterCount = function () {
        if (!this.isExistEyeBlinkParameters()) {
            return 0;
        }
        var num = 0;
        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
            var refI = this._jsonValue
                .at(FrequestNode.FrequestNode_Groups)
                .getValueByIndex(i);
            if (refI.isNull() || refI.isError()) {
                continue;
            }
            if (refI.getValueByString(Name).getRawString() == EyeBlink) {
                num = refI.getValueByString(Ids).getVector().getSize();
                break;
            }
        }
        return num;
    };
    CubismModelSettingJson.prototype.getEyeBlinkParameterId = function (index) {
        if (!this.isExistEyeBlinkParameters()) {
            return null;
        }
        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
            var refI = this._jsonValue
                .at(FrequestNode.FrequestNode_Groups)
                .getValueByIndex(i);
            if (refI.isNull() || refI.isError()) {
                continue;
            }
            if (refI.getValueByString(Name).getRawString() == EyeBlink) {
                return live2dcubismframework_1.CubismFramework.getIdManager().getId(refI.getValueByString(Ids).getValueByIndex(index).getRawString());
            }
        }
        return null;
    };
    CubismModelSettingJson.prototype.getLipSyncParameterCount = function () {
        if (!this.isExistLipSyncParameters()) {
            return 0;
        }
        var num = 0;
        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
            var refI = this._jsonValue
                .at(FrequestNode.FrequestNode_Groups)
                .getValueByIndex(i);
            if (refI.isNull() || refI.isError()) {
                continue;
            }
            if (refI.getValueByString(Name).getRawString() == LipSync) {
                num = refI.getValueByString(Ids).getVector().getSize();
                break;
            }
        }
        return num;
    };
    CubismModelSettingJson.prototype.getLipSyncParameterId = function (index) {
        if (!this.isExistLipSyncParameters()) {
            return null;
        }
        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {
            var refI = this._jsonValue
                .at(FrequestNode.FrequestNode_Groups)
                .getValueByIndex(i);
            if (refI.isNull() || refI.isError()) {
                continue;
            }
            if (refI.getValueByString(Name).getRawString() == LipSync) {
                return live2dcubismframework_1.CubismFramework.getIdManager().getId(refI.getValueByString(Ids).getValueByIndex(index).getRawString());
            }
        }
        return null;
    };
    CubismModelSettingJson.prototype.isExistModelFile = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_Moc);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistTextureFiles = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_Textures);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistHitAreas = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistPhysicsFile = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_Physics);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistPoseFile = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_Pose);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistExpressionFile = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_Expressions);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistMotionGroups = function () {
        var node = this._jsonValue.at(FrequestNode.FrequestNode_Motions);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistMotionGroupName = function (groupName) {
        var node = this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistMotionSoundFile = function (groupName, index) {
        var node = this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(SoundPath);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistMotionFadeIn = function (groupName, index) {
        var node = this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(FadeInTime);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistMotionFadeOut = function (groupName, index) {
        var node = this._jsonValue
            .at(FrequestNode.FrequestNode_Motions)
            .getValueByString(groupName)
            .getValueByIndex(index)
            .getValueByString(FadeOutTime);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistUserDataFile = function () {
        var node = this._json
            .getRoot()
            .getValueByString(FileReferences)
            .getValueByString(UserData);
        return !node.isNull() && !node.isError();
    };
    CubismModelSettingJson.prototype.isExistEyeBlinkParameters = function () {
        if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||
            this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {
            return false;
        }
        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {
            if (this._jsonValue
                .at(FrequestNode.FrequestNode_Groups)
                .getValueByIndex(i)
                .getValueByString(Name)
                .getRawString() == EyeBlink) {
                return true;
            }
        }
        return false;
    };
    CubismModelSettingJson.prototype.isExistLipSyncParameters = function () {
        if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||
            this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {
            return false;
        }
        for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {
            if (this._jsonValue
                .at(FrequestNode.FrequestNode_Groups)
                .getValueByIndex(i)
                .getValueByString(Name)
                .getRawString() == LipSync) {
                return true;
            }
        }
        return false;
    };
    return CubismModelSettingJson;
}(icubismmodelsetting_1.ICubismModelSetting));
exports.CubismModelSettingJson = CubismModelSettingJson;
var $ = __importStar(__webpack_require__(/*! ./cubismmodelsettingjson */ "../../../Framework/src/cubismmodelsettingjson.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismModelSettingJson = $.CubismModelSettingJson;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/effect/cubismbreath.ts":
/*!*****************************************************!*\
  !*** ../../../Framework/src/effect/cubismbreath.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.BreathParameterData = exports.CubismBreath = void 0;
var CubismBreath = (function () {
    function CubismBreath() {
        this._currentTime = 0.0;
    }
    CubismBreath.create = function () {
        return new CubismBreath();
    };
    CubismBreath.delete = function (instance) {
        if (instance != null) {
            instance = null;
        }
    };
    CubismBreath.prototype.setParameters = function (breathParameters) {
        this._breathParameters = breathParameters;
    };
    CubismBreath.prototype.getParameters = function () {
        return this._breathParameters;
    };
    CubismBreath.prototype.updateParameters = function (model, deltaTimeSeconds) {
        this._currentTime += deltaTimeSeconds;
        var t = this._currentTime * 2.0 * 3.14159;
        for (var i = 0; i < this._breathParameters.getSize(); ++i) {
            var data = this._breathParameters.at(i);
            model.addParameterValueById(data.parameterId, data.offset + data.peak * Math.sin(t / data.cycle), data.weight);
        }
    };
    return CubismBreath;
}());
exports.CubismBreath = CubismBreath;
var BreathParameterData = (function () {
    function BreathParameterData(parameterId, offset, peak, cycle, weight) {
        this.parameterId = parameterId == undefined ? null : parameterId;
        this.offset = offset == undefined ? 0.0 : offset;
        this.peak = peak == undefined ? 0.0 : peak;
        this.cycle = cycle == undefined ? 0.0 : cycle;
        this.weight = weight == undefined ? 0.0 : weight;
    }
    return BreathParameterData;
}());
exports.BreathParameterData = BreathParameterData;
var $ = __importStar(__webpack_require__(/*! ./cubismbreath */ "../../../Framework/src/effect/cubismbreath.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.BreathParameterData = $.BreathParameterData;
    Live2DCubismFramework.CubismBreath = $.CubismBreath;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/effect/cubismeyeblink.ts":
/*!*******************************************************!*\
  !*** ../../../Framework/src/effect/cubismeyeblink.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.EyeState = exports.CubismEyeBlink = void 0;
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var CubismEyeBlink = exports.CubismEyeBlink = (function () {
    function CubismEyeBlink(modelSetting) {
        this._blinkingState = EyeState.EyeState_First;
        this._nextBlinkingTime = 0.0;
        this._stateStartTimeSeconds = 0.0;
        this._blinkingIntervalSeconds = 4.0;
        this._closingSeconds = 0.1;
        this._closedSeconds = 0.05;
        this._openingSeconds = 0.15;
        this._userTimeSeconds = 0.0;
        this._parameterIds = new csmvector_1.csmVector();
        if (modelSetting == null) {
            return;
        }
        for (var i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {
            this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));
        }
    }
    CubismEyeBlink.create = function (modelSetting) {
        if (modelSetting === void 0) { modelSetting = null; }
        return new CubismEyeBlink(modelSetting);
    };
    CubismEyeBlink.delete = function (eyeBlink) {
        if (eyeBlink != null) {
            eyeBlink = null;
        }
    };
    CubismEyeBlink.prototype.setBlinkingInterval = function (blinkingInterval) {
        this._blinkingIntervalSeconds = blinkingInterval;
    };
    CubismEyeBlink.prototype.setBlinkingSetting = function (closing, closed, opening) {
        this._closingSeconds = closing;
        this._closedSeconds = closed;
        this._openingSeconds = opening;
    };
    CubismEyeBlink.prototype.setParameterIds = function (parameterIds) {
        this._parameterIds = parameterIds;
    };
    CubismEyeBlink.prototype.getParameterIds = function () {
        return this._parameterIds;
    };
    CubismEyeBlink.prototype.updateParameters = function (model, deltaTimeSeconds) {
        this._userTimeSeconds += deltaTimeSeconds;
        var parameterValue;
        var t = 0.0;
        switch (this._blinkingState) {
            case EyeState.EyeState_Closing:
                t =
                    (this._userTimeSeconds - this._stateStartTimeSeconds) /
                        this._closingSeconds;
                if (t >= 1.0) {
                    t = 1.0;
                    this._blinkingState = EyeState.EyeState_Closed;
                    this._stateStartTimeSeconds = this._userTimeSeconds;
                }
                parameterValue = 1.0 - t;
                break;
            case EyeState.EyeState_Closed:
                t =
                    (this._userTimeSeconds - this._stateStartTimeSeconds) /
                        this._closedSeconds;
                if (t >= 1.0) {
                    this._blinkingState = EyeState.EyeState_Opening;
                    this._stateStartTimeSeconds = this._userTimeSeconds;
                }
                parameterValue = 0.0;
                break;
            case EyeState.EyeState_Opening:
                t =
                    (this._userTimeSeconds - this._stateStartTimeSeconds) /
                        this._openingSeconds;
                if (t >= 1.0) {
                    t = 1.0;
                    this._blinkingState = EyeState.EyeState_Interval;
                    this._nextBlinkingTime = this.determinNextBlinkingTiming();
                }
                parameterValue = t;
                break;
            case EyeState.EyeState_Interval:
                if (this._nextBlinkingTime < this._userTimeSeconds) {
                    this._blinkingState = EyeState.EyeState_Closing;
                    this._stateStartTimeSeconds = this._userTimeSeconds;
                }
                parameterValue = 1.0;
                break;
            case EyeState.EyeState_First:
            default:
                this._blinkingState = EyeState.EyeState_Interval;
                this._nextBlinkingTime = this.determinNextBlinkingTiming();
                parameterValue = 1.0;
                break;
        }
        if (!CubismEyeBlink.CloseIfZero) {
            parameterValue = -parameterValue;
        }
        for (var i = 0; i < this._parameterIds.getSize(); ++i) {
            model.setParameterValueById(this._parameterIds.at(i), parameterValue);
        }
    };
    CubismEyeBlink.prototype.determinNextBlinkingTiming = function () {
        var r = Math.random();
        return (this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0));
    };
    CubismEyeBlink.CloseIfZero = true;
    return CubismEyeBlink;
}());
var EyeState;
(function (EyeState) {
    EyeState[EyeState["EyeState_First"] = 0] = "EyeState_First";
    EyeState[EyeState["EyeState_Interval"] = 1] = "EyeState_Interval";
    EyeState[EyeState["EyeState_Closing"] = 2] = "EyeState_Closing";
    EyeState[EyeState["EyeState_Closed"] = 3] = "EyeState_Closed";
    EyeState[EyeState["EyeState_Opening"] = 4] = "EyeState_Opening";
})(EyeState = exports.EyeState || (exports.EyeState = {}));
var $ = __importStar(__webpack_require__(/*! ./cubismeyeblink */ "../../../Framework/src/effect/cubismeyeblink.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismEyeBlink = $.CubismEyeBlink;
    Live2DCubismFramework.EyeState = $.EyeState;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/effect/cubismpose.ts":
/*!***************************************************!*\
  !*** ../../../Framework/src/effect/cubismpose.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.PartData = exports.CubismPose = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
var Epsilon = 0.001;
var DefaultFadeInSeconds = 0.5;
var FadeIn = 'FadeInTime';
var Link = 'Link';
var Groups = 'Groups';
var Id = 'Id';
var CubismPose = (function () {
    function CubismPose() {
        this._fadeTimeSeconds = DefaultFadeInSeconds;
        this._lastModel = null;
        this._partGroups = new csmvector_1.csmVector();
        this._partGroupCounts = new csmvector_1.csmVector();
    }
    CubismPose.create = function (pose3json, size) {
        var ret = new CubismPose();
        var json = cubismjson_1.CubismJson.create(pose3json, size);
        var root = json.getRoot();
        if (!root.getValueByString(FadeIn).isNull()) {
            ret._fadeTimeSeconds = root
                .getValueByString(FadeIn)
                .toFloat(DefaultFadeInSeconds);
            if (ret._fadeTimeSeconds <= 0.0) {
                ret._fadeTimeSeconds = DefaultFadeInSeconds;
            }
        }
        var poseListInfo = root.getValueByString(Groups);
        var poseCount = poseListInfo.getSize();
        for (var poseIndex = 0; poseIndex < poseCount; ++poseIndex) {
            var idListInfo = poseListInfo.getValueByIndex(poseIndex);
            var idCount = idListInfo.getSize();
            var groupCount = 0;
            for (var groupIndex = 0; groupIndex < idCount; ++groupIndex) {
                var partInfo = idListInfo.getValueByIndex(groupIndex);
                var partData = new PartData();
                var parameterId = live2dcubismframework_1.CubismFramework.getIdManager().getId(partInfo.getValueByString(Id).getRawString());
                partData.partId = parameterId;
                if (!partInfo.getValueByString(Link).isNull()) {
                    var linkListInfo = partInfo.getValueByString(Link);
                    var linkCount = linkListInfo.getSize();
                    for (var linkIndex = 0; linkIndex < linkCount; ++linkIndex) {
                        var linkPart = new PartData();
                        var linkId = live2dcubismframework_1.CubismFramework.getIdManager().getId(linkListInfo.getValueByIndex(linkIndex).getString());
                        linkPart.partId = linkId;
                        partData.link.pushBack(linkPart);
                    }
                }
                ret._partGroups.pushBack(partData.clone());
                ++groupCount;
            }
            ret._partGroupCounts.pushBack(groupCount);
        }
        cubismjson_1.CubismJson.delete(json);
        return ret;
    };
    CubismPose.delete = function (pose) {
        if (pose != null) {
            pose = null;
        }
    };
    CubismPose.prototype.updateParameters = function (model, deltaTimeSeconds) {
        if (model != this._lastModel) {
            this.reset(model);
        }
        this._lastModel = model;
        if (deltaTimeSeconds < 0.0) {
            deltaTimeSeconds = 0.0;
        }
        var beginIndex = 0;
        for (var i = 0; i < this._partGroupCounts.getSize(); i++) {
            var partGroupCount = this._partGroupCounts.at(i);
            this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);
            beginIndex += partGroupCount;
        }
        this.copyPartOpacities(model);
    };
    CubismPose.prototype.reset = function (model) {
        var beginIndex = 0;
        for (var i = 0; i < this._partGroupCounts.getSize(); ++i) {
            var groupCount = this._partGroupCounts.at(i);
            for (var j = beginIndex; j < beginIndex + groupCount; ++j) {
                this._partGroups.at(j).initialize(model);
                var partsIndex = this._partGroups.at(j).partIndex;
                var paramIndex = this._partGroups.at(j).parameterIndex;
                if (partsIndex < 0) {
                    continue;
                }
                model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);
                model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);
                for (var k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {
                    this._partGroups.at(j).link.at(k).initialize(model);
                }
            }
            beginIndex += groupCount;
        }
    };
    CubismPose.prototype.copyPartOpacities = function (model) {
        for (var groupIndex = 0; groupIndex < this._partGroups.getSize(); ++groupIndex) {
            var partData = this._partGroups.at(groupIndex);
            if (partData.link.getSize() == 0) {
                continue;
            }
            var partIndex = this._partGroups.at(groupIndex).partIndex;
            var opacity = model.getPartOpacityByIndex(partIndex);
            for (var linkIndex = 0; linkIndex < partData.link.getSize(); ++linkIndex) {
                var linkPart = partData.link.at(linkIndex);
                var linkPartIndex = linkPart.partIndex;
                if (linkPartIndex < 0) {
                    continue;
                }
                model.setPartOpacityByIndex(linkPartIndex, opacity);
            }
        }
    };
    CubismPose.prototype.doFade = function (model, deltaTimeSeconds, beginIndex, partGroupCount) {
        var visiblePartIndex = -1;
        var newOpacity = 1.0;
        var phi = 0.5;
        var backOpacityThreshold = 0.15;
        for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {
            var partIndex = this._partGroups.at(i).partIndex;
            var paramIndex = this._partGroups.at(i).parameterIndex;
            if (model.getParameterValueByIndex(paramIndex) > Epsilon) {
                if (visiblePartIndex >= 0) {
                    break;
                }
                visiblePartIndex = i;
                newOpacity = model.getPartOpacityByIndex(partIndex);
                newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;
                if (newOpacity > 1.0) {
                    newOpacity = 1.0;
                }
            }
        }
        if (visiblePartIndex < 0) {
            visiblePartIndex = 0;
            newOpacity = 1.0;
        }
        for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {
            var partsIndex = this._partGroups.at(i).partIndex;
            if (visiblePartIndex == i) {
                model.setPartOpacityByIndex(partsIndex, newOpacity);
            }
            else {
                var opacity = model.getPartOpacityByIndex(partsIndex);
                var a1 = void 0;
                if (newOpacity < phi) {
                    a1 = (newOpacity * (phi - 1)) / phi + 1.0;
                }
                else {
                    a1 = ((1 - newOpacity) * phi) / (1.0 - phi);
                }
                var backOpacity = (1.0 - a1) * (1.0 - newOpacity);
                if (backOpacity > backOpacityThreshold) {
                    a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);
                }
                if (opacity > a1) {
                    opacity = a1;
                }
                model.setPartOpacityByIndex(partsIndex, opacity);
            }
        }
    };
    return CubismPose;
}());
exports.CubismPose = CubismPose;
var PartData = (function () {
    function PartData(v) {
        this.parameterIndex = 0;
        this.partIndex = 0;
        this.link = new csmvector_1.csmVector();
        if (v != undefined) {
            this.partId = v.partId;
            for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {
                this.link.pushBack(ite.ptr().clone());
            }
        }
    }
    PartData.prototype.assignment = function (v) {
        this.partId = v.partId;
        for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {
            this.link.pushBack(ite.ptr().clone());
        }
        return this;
    };
    PartData.prototype.initialize = function (model) {
        this.parameterIndex = model.getParameterIndex(this.partId);
        this.partIndex = model.getPartIndex(this.partId);
        model.setParameterValueByIndex(this.parameterIndex, 1);
    };
    PartData.prototype.clone = function () {
        var clonePartData = new PartData();
        clonePartData.partId = this.partId;
        clonePartData.parameterIndex = this.parameterIndex;
        clonePartData.partIndex = this.partIndex;
        clonePartData.link = new csmvector_1.csmVector();
        for (var ite = this.link.begin(); ite.notEqual(this.link.end()); ite.increment()) {
            clonePartData.link.pushBack(ite.ptr().clone());
        }
        return clonePartData;
    };
    return PartData;
}());
exports.PartData = PartData;
var $ = __importStar(__webpack_require__(/*! ./cubismpose */ "../../../Framework/src/effect/cubismpose.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismPose = $.CubismPose;
    Live2DCubismFramework.PartData = $.PartData;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/icubismmodelsetting.ts":
/*!*****************************************************!*\
  !*** ../../../Framework/src/icubismmodelsetting.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.ICubismModelSetting = void 0;
var ICubismModelSetting = (function () {
    function ICubismModelSetting() {
    }
    return ICubismModelSetting;
}());
exports.ICubismModelSetting = ICubismModelSetting;
var $ = __importStar(__webpack_require__(/*! ./icubismmodelsetting */ "../../../Framework/src/icubismmodelsetting.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.ICubismModelSetting = $.ICubismModelSetting;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/id/cubismid.ts":
/*!*********************************************!*\
  !*** ../../../Framework/src/id/cubismid.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismId = void 0;
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "../../../Framework/src/type/csmstring.ts");
var CubismId = (function () {
    function CubismId(id) {
        if (typeof id === 'string') {
            this._id = new csmstring_1.csmString(id);
            return;
        }
        this._id = id;
    }
    CubismId.prototype.getString = function () {
        return this._id;
    };
    CubismId.prototype.isEqual = function (c) {
        if (typeof c === 'string') {
            return this._id.isEqual(c);
        }
        else if (c instanceof csmstring_1.csmString) {
            return this._id.isEqual(c.s);
        }
        else if (c instanceof CubismId) {
            return this._id.isEqual(c._id.s);
        }
        return false;
    };
    CubismId.prototype.isNotEqual = function (c) {
        if (typeof c == 'string') {
            return !this._id.isEqual(c);
        }
        else if (c instanceof csmstring_1.csmString) {
            return !this._id.isEqual(c.s);
        }
        else if (c instanceof CubismId) {
            return !this._id.isEqual(c._id.s);
        }
        return false;
    };
    return CubismId;
}());
exports.CubismId = CubismId;
var $ = __importStar(__webpack_require__(/*! ./cubismid */ "../../../Framework/src/id/cubismid.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismId = $.CubismId;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/id/cubismidmanager.ts":
/*!****************************************************!*\
  !*** ../../../Framework/src/id/cubismidmanager.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismIdManager = void 0;
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var cubismid_1 = __webpack_require__(/*! ./cubismid */ "../../../Framework/src/id/cubismid.ts");
var CubismIdManager = (function () {
    function CubismIdManager() {
        this._ids = new csmvector_1.csmVector();
    }
    CubismIdManager.prototype.release = function () {
        for (var i = 0; i < this._ids.getSize(); ++i) {
            this._ids.set(i, void 0);
        }
        this._ids = null;
    };
    CubismIdManager.prototype.registerIds = function (ids) {
        for (var i = 0; i < ids.length; i++) {
            this.registerId(ids[i]);
        }
    };
    CubismIdManager.prototype.registerId = function (id) {
        var result = null;
        if ('string' == typeof id) {
            if ((result = this.findId(id)) != null) {
                return result;
            }
            result = new cubismid_1.CubismId(id);
            this._ids.pushBack(result);
        }
        else {
            return this.registerId(id.s);
        }
        return result;
    };
    CubismIdManager.prototype.getId = function (id) {
        return this.registerId(id);
    };
    CubismIdManager.prototype.isExist = function (id) {
        if ('string' == typeof id) {
            return this.findId(id) != null;
        }
        return this.isExist(id.s);
    };
    CubismIdManager.prototype.findId = function (id) {
        for (var i = 0; i < this._ids.getSize(); ++i) {
            if (this._ids.at(i).getString().isEqual(id)) {
                return this._ids.at(i);
            }
        }
        return null;
    };
    return CubismIdManager;
}());
exports.CubismIdManager = CubismIdManager;
var $ = __importStar(__webpack_require__(/*! ./cubismidmanager */ "../../../Framework/src/id/cubismidmanager.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismIdManager = $.CubismIdManager;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/live2dcubismframework.ts":
/*!*******************************************************!*\
  !*** ../../../Framework/src/live2dcubismframework.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.LogLevel = exports.Option = exports.CubismFramework = exports.csmDelete = exports.Constant = exports.strtod = void 0;
var cubismidmanager_1 = __webpack_require__(/*! ./id/cubismidmanager */ "../../../Framework/src/id/cubismidmanager.ts");
var cubismrenderer_1 = __webpack_require__(/*! ./rendering/cubismrenderer */ "../../../Framework/src/rendering/cubismrenderer.ts");
var cubismdebug_1 = __webpack_require__(/*! ./utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
var cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
function strtod(s, endPtr) {
    var index = 0;
    for (var i = 1;; i++) {
        var testC = s.slice(i - 1, i);
        if (testC == 'e' || testC == '-' || testC == 'E') {
            continue;
        }
        var test = s.substring(0, i);
        var number = Number(test);
        if (isNaN(number)) {
            break;
        }
        index = i;
    }
    var d = parseFloat(s);
    if (isNaN(d)) {
        d = NaN;
    }
    endPtr[0] = s.slice(index);
    return d;
}
exports.strtod = strtod;
var s_isStarted = false;
var s_isInitialized = false;
var s_option = null;
var s_cubismIdManager = null;
exports.Constant = Object.freeze({
    vertexOffset: 0,
    vertexStep: 2,
});
function csmDelete(address) {
    if (!address) {
        return;
    }
    address = void 0;
}
exports.csmDelete = csmDelete;
var CubismFramework = (function () {
    function CubismFramework() {
    }
    CubismFramework.startUp = function (option) {
        if (option === void 0) { option = null; }
        if (s_isStarted) {
            (0, cubismdebug_1.CubismLogInfo)('CubismFramework.startUp() is already done.');
            return s_isStarted;
        }
        s_option = option;
        if (s_option != null) {
            Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);
        }
        s_isStarted = true;
        if (s_isStarted) {
            var version = Live2DCubismCore.Version.csmGetVersion();
            var major = (version & 0xff000000) >> 24;
            var minor = (version & 0x00ff0000) >> 16;
            var patch = version & 0x0000ffff;
            var versionNumber = version;
            (0, cubismdebug_1.CubismLogInfo)("Live2D Cubism Core version: {0}.{1}.{2} ({3})", ('00' + major).slice(-2), ('00' + minor).slice(-2), ('0000' + patch).slice(-4), versionNumber);
        }
        (0, cubismdebug_1.CubismLogInfo)('CubismFramework.startUp() is complete.');
        return s_isStarted;
    };
    CubismFramework.cleanUp = function () {
        s_isStarted = false;
        s_isInitialized = false;
        s_option = null;
        s_cubismIdManager = null;
    };
    CubismFramework.initialize = function (memorySize) {
        if (memorySize === void 0) { memorySize = 0; }
        (0, cubismdebug_1.CSM_ASSERT)(s_isStarted);
        if (!s_isStarted) {
            (0, cubismdebug_1.CubismLogWarning)('CubismFramework is not started.');
            return;
        }
        if (s_isInitialized) {
            (0, cubismdebug_1.CubismLogWarning)('CubismFramework.initialize() skipped, already initialized.');
            return;
        }
        cubismjson_1.Value.staticInitializeNotForClientCall();
        s_cubismIdManager = new cubismidmanager_1.CubismIdManager();
        Live2DCubismCore.Memory.initializeAmountOfMemory(memorySize);
        s_isInitialized = true;
        (0, cubismdebug_1.CubismLogInfo)('CubismFramework.initialize() is complete.');
    };
    CubismFramework.dispose = function () {
        (0, cubismdebug_1.CSM_ASSERT)(s_isStarted);
        if (!s_isStarted) {
            (0, cubismdebug_1.CubismLogWarning)('CubismFramework is not started.');
            return;
        }
        if (!s_isInitialized) {
            (0, cubismdebug_1.CubismLogWarning)('CubismFramework.dispose() skipped, not initialized.');
            return;
        }
        cubismjson_1.Value.staticReleaseNotForClientCall();
        s_cubismIdManager.release();
        s_cubismIdManager = null;
        cubismrenderer_1.CubismRenderer.staticRelease();
        s_isInitialized = false;
        (0, cubismdebug_1.CubismLogInfo)('CubismFramework.dispose() is complete.');
    };
    CubismFramework.isStarted = function () {
        return s_isStarted;
    };
    CubismFramework.isInitialized = function () {
        return s_isInitialized;
    };
    CubismFramework.coreLogFunction = function (message) {
        if (!Live2DCubismCore.Logging.csmGetLogFunction()) {
            return;
        }
        Live2DCubismCore.Logging.csmGetLogFunction()(message);
    };
    CubismFramework.getLoggingLevel = function () {
        if (s_option != null) {
            return s_option.loggingLevel;
        }
        return LogLevel.LogLevel_Off;
    };
    CubismFramework.getIdManager = function () {
        return s_cubismIdManager;
    };
    return CubismFramework;
}());
exports.CubismFramework = CubismFramework;
var Option = (function () {
    function Option() {
    }
    return Option;
}());
exports.Option = Option;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["LogLevel_Verbose"] = 0] = "LogLevel_Verbose";
    LogLevel[LogLevel["LogLevel_Debug"] = 1] = "LogLevel_Debug";
    LogLevel[LogLevel["LogLevel_Info"] = 2] = "LogLevel_Info";
    LogLevel[LogLevel["LogLevel_Warning"] = 3] = "LogLevel_Warning";
    LogLevel[LogLevel["LogLevel_Error"] = 4] = "LogLevel_Error";
    LogLevel[LogLevel["LogLevel_Off"] = 5] = "LogLevel_Off";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var $ = __importStar(__webpack_require__(/*! ./live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.Constant = $.Constant;
    Live2DCubismFramework.csmDelete = $.csmDelete;
    Live2DCubismFramework.CubismFramework = $.CubismFramework;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/math/cubismmath.ts":
/*!*************************************************!*\
  !*** ../../../Framework/src/math/cubismmath.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMath = void 0;
var cubismvector2_1 = __webpack_require__(/*! ./cubismvector2 */ "../../../Framework/src/math/cubismvector2.ts");
var CubismMath = exports.CubismMath = (function () {
    function CubismMath() {
    }
    CubismMath.range = function (value, min, max) {
        if (value < min) {
            value = min;
        }
        else if (value > max) {
            value = max;
        }
        return value;
    };
    CubismMath.sin = function (x) {
        return Math.sin(x);
    };
    CubismMath.cos = function (x) {
        return Math.cos(x);
    };
    CubismMath.abs = function (x) {
        return Math.abs(x);
    };
    CubismMath.sqrt = function (x) {
        return Math.sqrt(x);
    };
    CubismMath.cbrt = function (x) {
        if (x === 0) {
            return x;
        }
        var cx = x;
        var isNegativeNumber = cx < 0;
        if (isNegativeNumber) {
            cx = -cx;
        }
        var ret;
        if (cx === Infinity) {
            ret = Infinity;
        }
        else {
            ret = Math.exp(Math.log(cx) / 3);
            ret = (cx / (ret * ret) + 2 * ret) / 3;
        }
        return isNegativeNumber ? -ret : ret;
    };
    CubismMath.getEasingSine = function (value) {
        if (value < 0.0) {
            return 0.0;
        }
        else if (value > 1.0) {
            return 1.0;
        }
        return 0.5 - 0.5 * this.cos(value * Math.PI);
    };
    CubismMath.max = function (left, right) {
        return left > right ? left : right;
    };
    CubismMath.min = function (left, right) {
        return left > right ? right : left;
    };
    CubismMath.degreesToRadian = function (degrees) {
        return (degrees / 180.0) * Math.PI;
    };
    CubismMath.radianToDegrees = function (radian) {
        return (radian * 180.0) / Math.PI;
    };
    CubismMath.directionToRadian = function (from, to) {
        var q1 = Math.atan2(to.y, to.x);
        var q2 = Math.atan2(from.y, from.x);
        var ret = q1 - q2;
        while (ret < -Math.PI) {
            ret += Math.PI * 2.0;
        }
        while (ret > Math.PI) {
            ret -= Math.PI * 2.0;
        }
        return ret;
    };
    CubismMath.directionToDegrees = function (from, to) {
        var radian = this.directionToRadian(from, to);
        var degree = this.radianToDegrees(radian);
        if (to.x - from.x > 0.0) {
            degree = -degree;
        }
        return degree;
    };
    CubismMath.radianToDirection = function (totalAngle) {
        var ret = new cubismvector2_1.CubismVector2();
        ret.x = this.sin(totalAngle);
        ret.y = this.cos(totalAngle);
        return ret;
    };
    CubismMath.quadraticEquation = function (a, b, c) {
        if (this.abs(a) < CubismMath.Epsilon) {
            if (this.abs(b) < CubismMath.Epsilon) {
                return -c;
            }
            return -c / b;
        }
        return -(b + this.sqrt(b * b - 4.0 * a * c)) / (2.0 * a);
    };
    CubismMath.cardanoAlgorithmForBezier = function (a, b, c, d) {
        if (this.sqrt(a) < CubismMath.Epsilon) {
            return this.range(this.quadraticEquation(b, c, d), 0.0, 1.0);
        }
        var ba = b / a;
        var ca = c / a;
        var da = d / a;
        var p = (3.0 * ca - ba * ba) / 3.0;
        var p3 = p / 3.0;
        var q = (2.0 * ba * ba * ba - 9.0 * ba * ca + 27.0 * da) / 27.0;
        var q2 = q / 2.0;
        var discriminant = q2 * q2 + p3 * p3 * p3;
        var center = 0.5;
        var threshold = center + 0.01;
        if (discriminant < 0.0) {
            var mp3 = -p / 3.0;
            var mp33 = mp3 * mp3 * mp3;
            var r = this.sqrt(mp33);
            var t = -q / (2.0 * r);
            var cosphi = this.range(t, -1.0, 1.0);
            var phi = Math.acos(cosphi);
            var crtr = this.cbrt(r);
            var t1 = 2.0 * crtr;
            var root1_1 = t1 * this.cos(phi / 3.0) - ba / 3.0;
            if (this.abs(root1_1 - center) < threshold) {
                return this.range(root1_1, 0.0, 1.0);
            }
            var root2 = t1 * this.cos((phi + 2.0 * Math.PI) / 3.0) - ba / 3.0;
            if (this.abs(root2 - center) < threshold) {
                return this.range(root2, 0.0, 1.0);
            }
            var root3 = t1 * this.cos((phi + 4.0 * Math.PI) / 3.0) - ba / 3.0;
            return this.range(root3, 0.0, 1.0);
        }
        if (discriminant == 0.0) {
            var u1_1;
            if (q2 < 0.0) {
                u1_1 = this.cbrt(-q2);
            }
            else {
                u1_1 = -this.cbrt(q2);
            }
            var root1_2 = 2.0 * u1_1 - ba / 3.0;
            if (this.abs(root1_2 - center) < threshold) {
                return this.range(root1_2, 0.0, 1.0);
            }
            var root2 = -u1_1 - ba / 3.0;
            return this.range(root2, 0.0, 1.0);
        }
        var sd = this.sqrt(discriminant);
        var u1 = this.cbrt(sd - q2);
        var v1 = this.cbrt(sd + q2);
        var root1 = u1 - v1 - ba / 3.0;
        return this.range(root1, 0.0, 1.0);
    };
    CubismMath.Epsilon = 0.00001;
    return CubismMath;
}());
var $ = __importStar(__webpack_require__(/*! ./cubismmath */ "../../../Framework/src/math/cubismmath.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMath = $.CubismMath;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/math/cubismmatrix44.ts":
/*!*****************************************************!*\
  !*** ../../../Framework/src/math/cubismmatrix44.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMatrix44 = void 0;
var CubismMatrix44 = (function () {
    function CubismMatrix44() {
        this._tr = new Float32Array(16);
        this.loadIdentity();
    }
    CubismMatrix44.multiply = function (a, b, dst) {
        var c = new Float32Array([
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0,
        ]);
        var n = 4;
        for (var i = 0; i < n; ++i) {
            for (var j = 0; j < n; ++j) {
                for (var k = 0; k < n; ++k) {
                    c[j + i * 4] += a[k + i * 4] * b[j + k * 4];
                }
            }
        }
        for (var i = 0; i < 16; ++i) {
            dst[i] = c[i];
        }
    };
    CubismMatrix44.prototype.loadIdentity = function () {
        var c = new Float32Array([
            1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
            1.0,
        ]);
        this.setMatrix(c);
    };
    CubismMatrix44.prototype.setMatrix = function (tr) {
        for (var i = 0; i < 16; ++i) {
            this._tr[i] = tr[i];
        }
    };
    CubismMatrix44.prototype.getArray = function () {
        return this._tr;
    };
    CubismMatrix44.prototype.getScaleX = function () {
        return this._tr[0];
    };
    CubismMatrix44.prototype.getScaleY = function () {
        return this._tr[5];
    };
    CubismMatrix44.prototype.getTranslateX = function () {
        return this._tr[12];
    };
    CubismMatrix44.prototype.getTranslateY = function () {
        return this._tr[13];
    };
    CubismMatrix44.prototype.transformX = function (src) {
        return this._tr[0] * src + this._tr[12];
    };
    CubismMatrix44.prototype.transformY = function (src) {
        return this._tr[5] * src + this._tr[13];
    };
    CubismMatrix44.prototype.invertTransformX = function (src) {
        return (src - this._tr[12]) / this._tr[0];
    };
    CubismMatrix44.prototype.invertTransformY = function (src) {
        return (src - this._tr[13]) / this._tr[5];
    };
    CubismMatrix44.prototype.translateRelative = function (x, y) {
        var tr1 = new Float32Array([
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            x,
            y,
            0.0,
            1.0,
        ]);
        CubismMatrix44.multiply(tr1, this._tr, this._tr);
    };
    CubismMatrix44.prototype.translate = function (x, y) {
        this._tr[12] = x;
        this._tr[13] = y;
    };
    CubismMatrix44.prototype.translateX = function (x) {
        this._tr[12] = x;
    };
    CubismMatrix44.prototype.translateY = function (y) {
        this._tr[13] = y;
    };
    CubismMatrix44.prototype.scaleRelative = function (x, y) {
        var tr1 = new Float32Array([
            x,
            0.0,
            0.0,
            0.0,
            0.0,
            y,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
        ]);
        CubismMatrix44.multiply(tr1, this._tr, this._tr);
    };
    CubismMatrix44.prototype.scale = function (x, y) {
        this._tr[0] = x;
        this._tr[5] = y;
    };
    CubismMatrix44.prototype.multiplyByMatrix = function (m) {
        CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);
    };
    CubismMatrix44.prototype.clone = function () {
        var cloneMatrix = new CubismMatrix44();
        for (var i = 0; i < this._tr.length; i++) {
            cloneMatrix._tr[i] = this._tr[i];
        }
        return cloneMatrix;
    };
    return CubismMatrix44;
}());
exports.CubismMatrix44 = CubismMatrix44;
var $ = __importStar(__webpack_require__(/*! ./cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMatrix44 = $.CubismMatrix44;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/math/cubismmodelmatrix.ts":
/*!********************************************************!*\
  !*** ../../../Framework/src/math/cubismmodelmatrix.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismModelMatrix = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts");
var CubismModelMatrix = (function (_super) {
    __extends(CubismModelMatrix, _super);
    function CubismModelMatrix(w, h) {
        var _this = _super.call(this) || this;
        _this._width = w !== undefined ? w : 0.0;
        _this._height = h !== undefined ? h : 0.0;
        _this.setHeight(2.0);
        return _this;
    }
    CubismModelMatrix.prototype.setWidth = function (w) {
        var scaleX = w / this._width;
        var scaleY = scaleX;
        this.scale(scaleX, scaleY);
    };
    CubismModelMatrix.prototype.setHeight = function (h) {
        var scaleX = h / this._height;
        var scaleY = scaleX;
        this.scale(scaleX, scaleY);
    };
    CubismModelMatrix.prototype.setPosition = function (x, y) {
        this.translate(x, y);
    };
    CubismModelMatrix.prototype.setCenterPosition = function (x, y) {
        this.centerX(x);
        this.centerY(y);
    };
    CubismModelMatrix.prototype.top = function (y) {
        this.setY(y);
    };
    CubismModelMatrix.prototype.bottom = function (y) {
        var h = this._height * this.getScaleY();
        this.translateY(y - h);
    };
    CubismModelMatrix.prototype.left = function (x) {
        this.setX(x);
    };
    CubismModelMatrix.prototype.right = function (x) {
        var w = this._width * this.getScaleX();
        this.translateX(x - w);
    };
    CubismModelMatrix.prototype.centerX = function (x) {
        var w = this._width * this.getScaleX();
        this.translateX(x - w / 2.0);
    };
    CubismModelMatrix.prototype.setX = function (x) {
        this.translateX(x);
    };
    CubismModelMatrix.prototype.centerY = function (y) {
        var h = this._height * this.getScaleY();
        this.translateY(y - h / 2.0);
    };
    CubismModelMatrix.prototype.setY = function (y) {
        this.translateY(y);
    };
    CubismModelMatrix.prototype.setupFromLayout = function (layout) {
        var keyWidth = 'width';
        var keyHeight = 'height';
        var keyX = 'x';
        var keyY = 'y';
        var keyCenterX = 'center_x';
        var keyCenterY = 'center_y';
        var keyTop = 'top';
        var keyBottom = 'bottom';
        var keyLeft = 'left';
        var keyRight = 'right';
        for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {
            var key = ite.ptr().first;
            var value = ite.ptr().second;
            if (key == keyWidth) {
                this.setWidth(value);
            }
            else if (key == keyHeight) {
                this.setHeight(value);
            }
        }
        for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {
            var key = ite.ptr().first;
            var value = ite.ptr().second;
            if (key == keyX) {
                this.setX(value);
            }
            else if (key == keyY) {
                this.setY(value);
            }
            else if (key == keyCenterX) {
                this.centerX(value);
            }
            else if (key == keyCenterY) {
                this.centerY(value);
            }
            else if (key == keyTop) {
                this.top(value);
            }
            else if (key == keyBottom) {
                this.bottom(value);
            }
            else if (key == keyLeft) {
                this.left(value);
            }
            else if (key == keyRight) {
                this.right(value);
            }
        }
    };
    return CubismModelMatrix;
}(cubismmatrix44_1.CubismMatrix44));
exports.CubismModelMatrix = CubismModelMatrix;
var $ = __importStar(__webpack_require__(/*! ./cubismmodelmatrix */ "../../../Framework/src/math/cubismmodelmatrix.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismModelMatrix = $.CubismModelMatrix;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/math/cubismtargetpoint.ts":
/*!********************************************************!*\
  !*** ../../../Framework/src/math/cubismtargetpoint.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismTargetPoint = void 0;
var cubismmath_1 = __webpack_require__(/*! ./cubismmath */ "../../../Framework/src/math/cubismmath.ts");
var FrameRate = 30;
var Epsilon = 0.01;
var CubismTargetPoint = (function () {
    function CubismTargetPoint() {
        this._faceTargetX = 0.0;
        this._faceTargetY = 0.0;
        this._faceX = 0.0;
        this._faceY = 0.0;
        this._faceVX = 0.0;
        this._faceVY = 0.0;
        this._lastTimeSeconds = 0.0;
        this._userTimeSeconds = 0.0;
    }
    CubismTargetPoint.prototype.update = function (deltaTimeSeconds) {
        this._userTimeSeconds += deltaTimeSeconds;
        var faceParamMaxV = 40.0 / 10.0;
        var maxV = (faceParamMaxV * 1.0) / FrameRate;
        if (this._lastTimeSeconds == 0.0) {
            this._lastTimeSeconds = this._userTimeSeconds;
            return;
        }
        var deltaTimeWeight = (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;
        this._lastTimeSeconds = this._userTimeSeconds;
        var timeToMaxSpeed = 0.15;
        var frameToMaxSpeed = timeToMaxSpeed * FrameRate;
        var maxA = (deltaTimeWeight * maxV) / frameToMaxSpeed;
        var dx = this._faceTargetX - this._faceX;
        var dy = this._faceTargetY - this._faceY;
        if (cubismmath_1.CubismMath.abs(dx) <= Epsilon && cubismmath_1.CubismMath.abs(dy) <= Epsilon) {
            return;
        }
        var d = cubismmath_1.CubismMath.sqrt(dx * dx + dy * dy);
        var vx = (maxV * dx) / d;
        var vy = (maxV * dy) / d;
        var ax = vx - this._faceVX;
        var ay = vy - this._faceVY;
        var a = cubismmath_1.CubismMath.sqrt(ax * ax + ay * ay);
        if (a < -maxA || a > maxA) {
            ax *= maxA / a;
            ay *= maxA / a;
        }
        this._faceVX += ax;
        this._faceVY += ay;
        {
            var maxV_1 = 0.5 *
                (cubismmath_1.CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) -
                    maxA);
            var curV = cubismmath_1.CubismMath.sqrt(this._faceVX * this._faceVX + this._faceVY * this._faceVY);
            if (curV > maxV_1) {
                this._faceVX *= maxV_1 / curV;
                this._faceVY *= maxV_1 / curV;
            }
        }
        this._faceX += this._faceVX;
        this._faceY += this._faceVY;
    };
    CubismTargetPoint.prototype.getX = function () {
        return this._faceX;
    };
    CubismTargetPoint.prototype.getY = function () {
        return this._faceY;
    };
    CubismTargetPoint.prototype.set = function (x, y) {
        this._faceTargetX = x;
        this._faceTargetY = y;
    };
    return CubismTargetPoint;
}());
exports.CubismTargetPoint = CubismTargetPoint;
var $ = __importStar(__webpack_require__(/*! ./cubismtargetpoint */ "../../../Framework/src/math/cubismtargetpoint.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismTargetPoint = $.CubismTargetPoint;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/math/cubismvector2.ts":
/*!****************************************************!*\
  !*** ../../../Framework/src/math/cubismvector2.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismVector2 = void 0;
var CubismVector2 = (function () {
    function CubismVector2(x, y) {
        this.x = x;
        this.y = y;
        this.x = x == undefined ? 0.0 : x;
        this.y = y == undefined ? 0.0 : y;
    }
    CubismVector2.prototype.add = function (vector2) {
        var ret = new CubismVector2(0.0, 0.0);
        ret.x = this.x + vector2.x;
        ret.y = this.y + vector2.y;
        return ret;
    };
    CubismVector2.prototype.substract = function (vector2) {
        var ret = new CubismVector2(0.0, 0.0);
        ret.x = this.x - vector2.x;
        ret.y = this.y - vector2.y;
        return ret;
    };
    CubismVector2.prototype.multiply = function (vector2) {
        var ret = new CubismVector2(0.0, 0.0);
        ret.x = this.x * vector2.x;
        ret.y = this.y * vector2.y;
        return ret;
    };
    CubismVector2.prototype.multiplyByScaler = function (scalar) {
        return this.multiply(new CubismVector2(scalar, scalar));
    };
    CubismVector2.prototype.division = function (vector2) {
        var ret = new CubismVector2(0.0, 0.0);
        ret.x = this.x / vector2.x;
        ret.y = this.y / vector2.y;
        return ret;
    };
    CubismVector2.prototype.divisionByScalar = function (scalar) {
        return this.division(new CubismVector2(scalar, scalar));
    };
    CubismVector2.prototype.getLength = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    };
    CubismVector2.prototype.getDistanceWith = function (a) {
        return Math.sqrt((this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y));
    };
    CubismVector2.prototype.dot = function (a) {
        return this.x * a.x + this.y * a.y;
    };
    CubismVector2.prototype.normalize = function () {
        var length = Math.pow(this.x * this.x + this.y * this.y, 0.5);
        this.x = this.x / length;
        this.y = this.y / length;
    };
    CubismVector2.prototype.isEqual = function (rhs) {
        return this.x == rhs.x && this.y == rhs.y;
    };
    CubismVector2.prototype.isNotEqual = function (rhs) {
        return !this.isEqual(rhs);
    };
    return CubismVector2;
}());
exports.CubismVector2 = CubismVector2;
var $ = __importStar(__webpack_require__(/*! ./cubismvector2 */ "../../../Framework/src/math/cubismvector2.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismVector2 = $.CubismVector2;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/math/cubismviewmatrix.ts":
/*!*******************************************************!*\
  !*** ../../../Framework/src/math/cubismviewmatrix.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismViewMatrix = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts");
var CubismViewMatrix = (function (_super) {
    __extends(CubismViewMatrix, _super);
    function CubismViewMatrix() {
        var _this = _super.call(this) || this;
        _this._screenLeft = 0.0;
        _this._screenRight = 0.0;
        _this._screenTop = 0.0;
        _this._screenBottom = 0.0;
        _this._maxLeft = 0.0;
        _this._maxRight = 0.0;
        _this._maxTop = 0.0;
        _this._maxBottom = 0.0;
        _this._maxScale = 0.0;
        _this._minScale = 0.0;
        return _this;
    }
    CubismViewMatrix.prototype.adjustTranslate = function (x, y) {
        if (this._tr[0] * this._maxLeft + (this._tr[12] + x) > this._screenLeft) {
            x = this._screenLeft - this._tr[0] * this._maxLeft - this._tr[12];
        }
        if (this._tr[0] * this._maxRight + (this._tr[12] + x) < this._screenRight) {
            x = this._screenRight - this._tr[0] * this._maxRight - this._tr[12];
        }
        if (this._tr[5] * this._maxTop + (this._tr[13] + y) < this._screenTop) {
            y = this._screenTop - this._tr[5] * this._maxTop - this._tr[13];
        }
        if (this._tr[5] * this._maxBottom + (this._tr[13] + y) >
            this._screenBottom) {
            y = this._screenBottom - this._tr[5] * this._maxBottom - this._tr[13];
        }
        var tr1 = new Float32Array([
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            x,
            y,
            0.0,
            1.0,
        ]);
        cubismmatrix44_1.CubismMatrix44.multiply(tr1, this._tr, this._tr);
    };
    CubismViewMatrix.prototype.adjustScale = function (cx, cy, scale) {
        var maxScale = this.getMaxScale();
        var minScale = this.getMinScale();
        var targetScale = scale * this._tr[0];
        if (targetScale < minScale) {
            if (this._tr[0] > 0.0) {
                scale = minScale / this._tr[0];
            }
        }
        else if (targetScale > maxScale) {
            if (this._tr[0] > 0.0) {
                scale = maxScale / this._tr[0];
            }
        }
        var tr1 = new Float32Array([
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            cx,
            cy,
            0.0,
            1.0,
        ]);
        var tr2 = new Float32Array([
            scale,
            0.0,
            0.0,
            0.0,
            0.0,
            scale,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
        ]);
        var tr3 = new Float32Array([
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            0.0,
            0.0,
            0.0,
            1.0,
            0.0,
            -cx,
            -cy,
            0.0,
            1.0,
        ]);
        cubismmatrix44_1.CubismMatrix44.multiply(tr3, this._tr, this._tr);
        cubismmatrix44_1.CubismMatrix44.multiply(tr2, this._tr, this._tr);
        cubismmatrix44_1.CubismMatrix44.multiply(tr1, this._tr, this._tr);
    };
    CubismViewMatrix.prototype.setScreenRect = function (left, right, bottom, top) {
        this._screenLeft = left;
        this._screenRight = right;
        this._screenBottom = bottom;
        this._screenTop = top;
    };
    CubismViewMatrix.prototype.setMaxScreenRect = function (left, right, bottom, top) {
        this._maxLeft = left;
        this._maxRight = right;
        this._maxTop = top;
        this._maxBottom = bottom;
    };
    CubismViewMatrix.prototype.setMaxScale = function (maxScale) {
        this._maxScale = maxScale;
    };
    CubismViewMatrix.prototype.setMinScale = function (minScale) {
        this._minScale = minScale;
    };
    CubismViewMatrix.prototype.getMaxScale = function () {
        return this._maxScale;
    };
    CubismViewMatrix.prototype.getMinScale = function () {
        return this._minScale;
    };
    CubismViewMatrix.prototype.isMaxScale = function () {
        return this.getScaleX() >= this._maxScale;
    };
    CubismViewMatrix.prototype.isMinScale = function () {
        return this.getScaleX() <= this._minScale;
    };
    CubismViewMatrix.prototype.getScreenLeft = function () {
        return this._screenLeft;
    };
    CubismViewMatrix.prototype.getScreenRight = function () {
        return this._screenRight;
    };
    CubismViewMatrix.prototype.getScreenBottom = function () {
        return this._screenBottom;
    };
    CubismViewMatrix.prototype.getScreenTop = function () {
        return this._screenTop;
    };
    CubismViewMatrix.prototype.getMaxLeft = function () {
        return this._maxLeft;
    };
    CubismViewMatrix.prototype.getMaxRight = function () {
        return this._maxRight;
    };
    CubismViewMatrix.prototype.getMaxBottom = function () {
        return this._maxBottom;
    };
    CubismViewMatrix.prototype.getMaxTop = function () {
        return this._maxTop;
    };
    return CubismViewMatrix;
}(cubismmatrix44_1.CubismMatrix44));
exports.CubismViewMatrix = CubismViewMatrix;
var $ = __importStar(__webpack_require__(/*! ./cubismviewmatrix */ "../../../Framework/src/math/cubismviewmatrix.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismViewMatrix = $.CubismViewMatrix;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/model/cubismmoc.ts":
/*!*************************************************!*\
  !*** ../../../Framework/src/model/cubismmoc.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMoc = void 0;
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
var cubismmodel_1 = __webpack_require__(/*! ./cubismmodel */ "../../../Framework/src/model/cubismmodel.ts");
var CubismMoc = (function () {
    function CubismMoc(moc) {
        this._moc = moc;
        this._modelCount = 0;
        this._mocVersion = 0;
    }
    CubismMoc.create = function (mocBytes, shouldCheckMocConsistency) {
        var cubismMoc = null;
        if (shouldCheckMocConsistency) {
            var consistency = this.hasMocConsistency(mocBytes);
            if (!consistency) {
                (0, cubismdebug_1.CubismLogError)("Inconsistent MOC3.");
                return cubismMoc;
            }
        }
        var moc = Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);
        if (moc) {
            cubismMoc = new CubismMoc(moc);
            cubismMoc._mocVersion = Live2DCubismCore.Version.csmGetMocVersion(moc, mocBytes);
        }
        return cubismMoc;
    };
    CubismMoc.delete = function (moc) {
        moc._moc._release();
        moc._moc = null;
        moc = null;
    };
    CubismMoc.prototype.createModel = function () {
        var cubismModel = null;
        var model = Live2DCubismCore.Model.fromMoc(this._moc);
        if (model) {
            cubismModel = new cubismmodel_1.CubismModel(model);
            cubismModel.initialize();
            ++this._modelCount;
        }
        return cubismModel;
    };
    CubismMoc.prototype.deleteModel = function (model) {
        if (model != null) {
            model.release();
            model = null;
            --this._modelCount;
        }
    };
    CubismMoc.prototype.release = function () {
        (0, cubismdebug_1.CSM_ASSERT)(this._modelCount == 0);
        this._moc._release();
        this._moc = null;
    };
    CubismMoc.prototype.getLatestMocVersion = function () {
        return Live2DCubismCore.Version.csmGetLatestMocVersion();
    };
    CubismMoc.prototype.getMocVersion = function () {
        return this._mocVersion;
    };
    CubismMoc.hasMocConsistency = function (mocBytes) {
        var isConsistent = Live2DCubismCore.Moc.prototype.hasMocConsistency(mocBytes);
        return isConsistent === 1 ? true : false;
    };
    return CubismMoc;
}());
exports.CubismMoc = CubismMoc;
var $ = __importStar(__webpack_require__(/*! ./cubismmoc */ "../../../Framework/src/model/cubismmoc.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMoc = $.CubismMoc;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/model/cubismmodel.ts":
/*!***************************************************!*\
  !*** ../../../Framework/src/model/cubismmodel.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismModel = exports.DrawableCullingData = exports.PartColorData = exports.DrawableColorData = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var cubismrenderer_1 = __webpack_require__(/*! ../rendering/cubismrenderer */ "../../../Framework/src/rendering/cubismrenderer.ts");
var csmmap_1 = __webpack_require__(/*! ../type/csmmap */ "../../../Framework/src/type/csmmap.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
var DrawableColorData = (function () {
    function DrawableColorData(isOverwritten, color) {
        if (isOverwritten === void 0) { isOverwritten = false; }
        if (color === void 0) { color = new cubismrenderer_1.CubismTextureColor(); }
        this.isOverwritten = isOverwritten;
        this.Color = color;
    }
    return DrawableColorData;
}());
exports.DrawableColorData = DrawableColorData;
var PartColorData = (function () {
    function PartColorData(isOverwritten, color) {
        if (isOverwritten === void 0) { isOverwritten = false; }
        if (color === void 0) { color = new cubismrenderer_1.CubismTextureColor(); }
        this.isOverwritten = isOverwritten;
        this.Color = color;
    }
    return PartColorData;
}());
exports.PartColorData = PartColorData;
var DrawableCullingData = (function () {
    function DrawableCullingData(isOverwritten, isCulling) {
        if (isOverwritten === void 0) { isOverwritten = false; }
        if (isCulling === void 0) { isCulling = false; }
        this.isOverwritten = isOverwritten;
        this.isCulling = isCulling;
    }
    return DrawableCullingData;
}());
exports.DrawableCullingData = DrawableCullingData;
var CubismModel = (function () {
    function CubismModel(model) {
        this._model = model;
        this._parameterValues = null;
        this._parameterMaximumValues = null;
        this._parameterMinimumValues = null;
        this._partOpacities = null;
        this._savedParameters = new csmvector_1.csmVector();
        this._parameterIds = new csmvector_1.csmVector();
        this._drawableIds = new csmvector_1.csmVector();
        this._partIds = new csmvector_1.csmVector();
        this._isOverwrittenModelMultiplyColors = false;
        this._isOverwrittenModelScreenColors = false;
        this._isOverwrittenCullings = false;
        this._modelOpacity = 1.0;
        this._userMultiplyColors = new csmvector_1.csmVector();
        this._userScreenColors = new csmvector_1.csmVector();
        this._userCullings = new csmvector_1.csmVector();
        this._userPartMultiplyColors = new csmvector_1.csmVector();
        this._userPartScreenColors = new csmvector_1.csmVector();
        this._partChildDrawables = new csmvector_1.csmVector();
        this._notExistPartId = new csmmap_1.csmMap();
        this._notExistParameterId = new csmmap_1.csmMap();
        this._notExistParameterValues = new csmmap_1.csmMap();
        this._notExistPartOpacities = new csmmap_1.csmMap();
    }
    CubismModel.prototype.update = function () {
        this._model.update();
        this._model.drawables.resetDynamicFlags();
    };
    CubismModel.prototype.getPixelsPerUnit = function () {
        if (this._model == null) {
            return 0.0;
        }
        return this._model.canvasinfo.PixelsPerUnit;
    };
    CubismModel.prototype.getCanvasWidth = function () {
        if (this._model == null) {
            return 0.0;
        }
        return (this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit);
    };
    CubismModel.prototype.getCanvasHeight = function () {
        if (this._model == null) {
            return 0.0;
        }
        return (this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit);
    };
    CubismModel.prototype.saveParameters = function () {
        var parameterCount = this._model.parameters.count;
        var savedParameterCount = this._savedParameters.getSize();
        for (var i = 0; i < parameterCount; ++i) {
            if (i < savedParameterCount) {
                this._savedParameters.set(i, this._parameterValues[i]);
            }
            else {
                this._savedParameters.pushBack(this._parameterValues[i]);
            }
        }
    };
    CubismModel.prototype.getMultiplyColor = function (index) {
        if (this.getOverwriteFlagForModelMultiplyColors() ||
            this.getOverwriteFlagForDrawableMultiplyColors(index)) {
            return this._userMultiplyColors.at(index).Color;
        }
        var color = this.getDrawableMultiplyColor(index);
        return color;
    };
    CubismModel.prototype.getScreenColor = function (index) {
        if (this.getOverwriteFlagForModelScreenColors() ||
            this.getOverwriteFlagForDrawableScreenColors(index)) {
            return this._userScreenColors.at(index).Color;
        }
        var color = this.getDrawableScreenColor(index);
        return color;
    };
    CubismModel.prototype.setMultiplyColorByTextureColor = function (index, color) {
        this.setMultiplyColorByRGBA(index, color.R, color.G, color.B, color.A);
    };
    CubismModel.prototype.setMultiplyColorByRGBA = function (index, r, g, b, a) {
        if (a === void 0) { a = 1.0; }
        this._userMultiplyColors.at(index).Color.R = r;
        this._userMultiplyColors.at(index).Color.G = g;
        this._userMultiplyColors.at(index).Color.B = b;
        this._userMultiplyColors.at(index).Color.A = a;
    };
    CubismModel.prototype.setScreenColorByTextureColor = function (index, color) {
        this.setScreenColorByRGBA(index, color.R, color.G, color.B, color.A);
    };
    CubismModel.prototype.setScreenColorByRGBA = function (index, r, g, b, a) {
        if (a === void 0) { a = 1.0; }
        this._userScreenColors.at(index).Color.R = r;
        this._userScreenColors.at(index).Color.G = g;
        this._userScreenColors.at(index).Color.B = b;
        this._userScreenColors.at(index).Color.A = a;
    };
    CubismModel.prototype.getPartMultiplyColor = function (partIndex) {
        return this._userPartMultiplyColors.at(partIndex).Color;
    };
    CubismModel.prototype.getPartScreenColor = function (partIndex) {
        return this._userPartScreenColors.at(partIndex).Color;
    };
    CubismModel.prototype.setPartColor = function (partIndex, r, g, b, a, partColors, drawableColors) {
        partColors.at(partIndex).Color.R = r;
        partColors.at(partIndex).Color.G = g;
        partColors.at(partIndex).Color.B = b;
        partColors.at(partIndex).Color.A = a;
        if (partColors.at(partIndex).isOverwritten) {
            for (var i = 0; i < this._partChildDrawables.at(partIndex).getSize(); ++i) {
                var drawableIndex = this._partChildDrawables.at(partIndex).at(i);
                drawableColors.at(drawableIndex).Color.R = r;
                drawableColors.at(drawableIndex).Color.G = g;
                drawableColors.at(drawableIndex).Color.B = b;
                drawableColors.at(drawableIndex).Color.A = a;
            }
        }
    };
    CubismModel.prototype.setPartMultiplyColorByTextureColor = function (partIndex, color) {
        this.setPartMultiplyColorByRGBA(partIndex, color.R, color.G, color.B, color.A);
    };
    CubismModel.prototype.setPartMultiplyColorByRGBA = function (partIndex, r, g, b, a) {
        this.setPartColor(partIndex, r, g, b, a, this._userPartMultiplyColors, this._userMultiplyColors);
    };
    CubismModel.prototype.setPartScreenColorByTextureColor = function (partIndex, color) {
        this.setPartScreenColorByRGBA(partIndex, color.R, color.G, color.B, color.A);
    };
    CubismModel.prototype.setPartScreenColorByRGBA = function (partIndex, r, g, b, a) {
        this.setPartColor(partIndex, r, g, b, a, this._userPartScreenColors, this._userScreenColors);
    };
    CubismModel.prototype.getOverwriteFlagForModelMultiplyColors = function () {
        return this._isOverwrittenModelMultiplyColors;
    };
    CubismModel.prototype.getOverwriteFlagForModelScreenColors = function () {
        return this._isOverwrittenModelScreenColors;
    };
    CubismModel.prototype.setOverwriteFlagForModelMultiplyColors = function (value) {
        this._isOverwrittenModelMultiplyColors = value;
    };
    CubismModel.prototype.setOverwriteFlagForModelScreenColors = function (value) {
        this._isOverwrittenModelScreenColors = value;
    };
    CubismModel.prototype.getOverwriteFlagForDrawableMultiplyColors = function (drawableindex) {
        return this._userMultiplyColors.at(drawableindex).isOverwritten;
    };
    CubismModel.prototype.getOverwriteFlagForDrawableScreenColors = function (drawableindex) {
        return this._userScreenColors.at(drawableindex).isOverwritten;
    };
    CubismModel.prototype.setOverwriteFlagForDrawableMultiplyColors = function (drawableindex, value) {
        this._userMultiplyColors.at(drawableindex).isOverwritten = value;
    };
    CubismModel.prototype.setOverwriteFlagForDrawableScreenColors = function (drawableindex, value) {
        this._userScreenColors.at(drawableindex).isOverwritten = value;
    };
    CubismModel.prototype.getOverwriteColorForPartMultiplyColors = function (partIndex) {
        return this._userPartMultiplyColors.at(partIndex).isOverwritten;
    };
    CubismModel.prototype.getOverwriteColorForPartScreenColors = function (partIndex) {
        return this._userPartScreenColors.at(partIndex).isOverwritten;
    };
    CubismModel.prototype.setOverwriteColorForPartColors = function (partIndex, value, partColors, drawableColors) {
        partColors.at(partIndex).isOverwritten = value;
        for (var i = 0; i < this._partChildDrawables.at(partIndex).getSize(); ++i) {
            var drawableIndex = this._partChildDrawables.at(partIndex).at(i);
            drawableColors.at(drawableIndex).isOverwritten = value;
            if (value) {
                drawableColors.at(drawableIndex).Color.R =
                    partColors.at(partIndex).Color.R;
                drawableColors.at(drawableIndex).Color.G =
                    partColors.at(partIndex).Color.G;
                drawableColors.at(drawableIndex).Color.B =
                    partColors.at(partIndex).Color.B;
                drawableColors.at(drawableIndex).Color.A =
                    partColors.at(partIndex).Color.A;
            }
        }
    };
    CubismModel.prototype.setOverwriteColorForPartMultiplyColors = function (partIndex, value) {
        this._userPartMultiplyColors.at(partIndex).isOverwritten = value;
        this.setOverwriteColorForPartColors(partIndex, value, this._userPartMultiplyColors, this._userMultiplyColors);
    };
    CubismModel.prototype.setOverwriteColorForPartScreenColors = function (partIndex, value) {
        this._userPartScreenColors.at(partIndex).isOverwritten = value;
        this.setOverwriteColorForPartColors(partIndex, value, this._userPartScreenColors, this._userScreenColors);
    };
    CubismModel.prototype.getDrawableCulling = function (drawableIndex) {
        if (this.getOverwriteFlagForModelCullings() ||
            this.getOverwriteFlagForDrawableCullings(drawableIndex)) {
            return this._userCullings.at(drawableIndex).isCulling;
        }
        var constantFlags = this._model.drawables.constantFlags;
        return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(constantFlags[drawableIndex]);
    };
    CubismModel.prototype.setDrawableCulling = function (drawableIndex, isCulling) {
        this._userCullings.at(drawableIndex).isCulling = isCulling;
    };
    CubismModel.prototype.getOverwriteFlagForModelCullings = function () {
        return this._isOverwrittenCullings;
    };
    CubismModel.prototype.setOverwriteFlagForModelCullings = function (isOverwrittenCullings) {
        this._isOverwrittenCullings = isOverwrittenCullings;
    };
    CubismModel.prototype.getOverwriteFlagForDrawableCullings = function (drawableIndex) {
        return this._userCullings.at(drawableIndex).isOverwritten;
    };
    CubismModel.prototype.setOverwriteFlagForDrawableCullings = function (drawableIndex, isOverwrittenCullings) {
        this._userCullings.at(drawableIndex).isOverwritten = isOverwrittenCullings;
    };
    CubismModel.prototype.getModelOapcity = function () {
        return this._modelOpacity;
    };
    CubismModel.prototype.setModelOapcity = function (value) {
        this._modelOpacity = value;
    };
    CubismModel.prototype.getModel = function () {
        return this._model;
    };
    CubismModel.prototype.getPartIndex = function (partId) {
        var partIndex;
        var partCount = this._model.parts.count;
        for (partIndex = 0; partIndex < partCount; ++partIndex) {
            if (partId == this._partIds.at(partIndex)) {
                return partIndex;
            }
        }
        if (this._notExistPartId.isExist(partId)) {
            return this._notExistPartId.getValue(partId);
        }
        partIndex = partCount + this._notExistPartId.getSize();
        this._notExistPartId.setValue(partId, partIndex);
        this._notExistPartOpacities.appendKey(partIndex);
        return partIndex;
    };
    CubismModel.prototype.getPartId = function (partIndex) {
        var partId = this._model.parts.ids[partIndex];
        return live2dcubismframework_1.CubismFramework.getIdManager().getId(partId);
    };
    CubismModel.prototype.getPartCount = function () {
        var partCount = this._model.parts.count;
        return partCount;
    };
    CubismModel.prototype.setPartOpacityByIndex = function (partIndex, opacity) {
        if (this._notExistPartOpacities.isExist(partIndex)) {
            this._notExistPartOpacities.setValue(partIndex, opacity);
            return;
        }
        (0, cubismdebug_1.CSM_ASSERT)(0 <= partIndex && partIndex < this.getPartCount());
        this._partOpacities[partIndex] = opacity;
    };
    CubismModel.prototype.setPartOpacityById = function (partId, opacity) {
        var index = this.getPartIndex(partId);
        if (index < 0) {
            return;
        }
        this.setPartOpacityByIndex(index, opacity);
    };
    CubismModel.prototype.getPartOpacityByIndex = function (partIndex) {
        if (this._notExistPartOpacities.isExist(partIndex)) {
            return this._notExistPartOpacities.getValue(partIndex);
        }
        (0, cubismdebug_1.CSM_ASSERT)(0 <= partIndex && partIndex < this.getPartCount());
        return this._partOpacities[partIndex];
    };
    CubismModel.prototype.getPartOpacityById = function (partId) {
        var index = this.getPartIndex(partId);
        if (index < 0) {
            return 0;
        }
        return this.getPartOpacityByIndex(index);
    };
    CubismModel.prototype.getParameterIndex = function (parameterId) {
        var parameterIndex;
        var idCount = this._model.parameters.count;
        for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {
            if (parameterId != this._parameterIds.at(parameterIndex)) {
                continue;
            }
            return parameterIndex;
        }
        if (this._notExistParameterId.isExist(parameterId)) {
            return this._notExistParameterId.getValue(parameterId);
        }
        parameterIndex =
            this._model.parameters.count + this._notExistParameterId.getSize();
        this._notExistParameterId.setValue(parameterId, parameterIndex);
        this._notExistParameterValues.appendKey(parameterIndex);
        return parameterIndex;
    };
    CubismModel.prototype.getParameterCount = function () {
        return this._model.parameters.count;
    };
    CubismModel.prototype.getParameterType = function (parameterIndex) {
        return this._model.parameters.types[parameterIndex];
    };
    CubismModel.prototype.getParameterMaximumValue = function (parameterIndex) {
        return this._model.parameters.maximumValues[parameterIndex];
    };
    CubismModel.prototype.getParameterMinimumValue = function (parameterIndex) {
        return this._model.parameters.minimumValues[parameterIndex];
    };
    CubismModel.prototype.getParameterDefaultValue = function (parameterIndex) {
        return this._model.parameters.defaultValues[parameterIndex];
    };
    CubismModel.prototype.getParameterValueByIndex = function (parameterIndex) {
        if (this._notExistParameterValues.isExist(parameterIndex)) {
            return this._notExistParameterValues.getValue(parameterIndex);
        }
        (0, cubismdebug_1.CSM_ASSERT)(0 <= parameterIndex && parameterIndex < this.getParameterCount());
        return this._parameterValues[parameterIndex];
    };
    CubismModel.prototype.getParameterValueById = function (parameterId) {
        var parameterIndex = this.getParameterIndex(parameterId);
        return this.getParameterValueByIndex(parameterIndex);
    };
    CubismModel.prototype.setParameterValueByIndex = function (parameterIndex, value, weight) {
        if (weight === void 0) { weight = 1.0; }
        if (this._notExistParameterValues.isExist(parameterIndex)) {
            this._notExistParameterValues.setValue(parameterIndex, weight == 1
                ? value
                : this._notExistParameterValues.getValue(parameterIndex) *
                    (1 - weight) +
                    value * weight);
            return;
        }
        (0, cubismdebug_1.CSM_ASSERT)(0 <= parameterIndex && parameterIndex < this.getParameterCount());
        if (this._model.parameters.maximumValues[parameterIndex] < value) {
            value = this._model.parameters.maximumValues[parameterIndex];
        }
        if (this._model.parameters.minimumValues[parameterIndex] > value) {
            value = this._model.parameters.minimumValues[parameterIndex];
        }
        this._parameterValues[parameterIndex] =
            weight == 1
                ? value
                : (this._parameterValues[parameterIndex] =
                    this._parameterValues[parameterIndex] * (1 - weight) +
                        value * weight);
    };
    CubismModel.prototype.setParameterValueById = function (parameterId, value, weight) {
        if (weight === void 0) { weight = 1.0; }
        var index = this.getParameterIndex(parameterId);
        this.setParameterValueByIndex(index, value, weight);
    };
    CubismModel.prototype.addParameterValueByIndex = function (parameterIndex, value, weight) {
        if (weight === void 0) { weight = 1.0; }
        this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) + value * weight);
    };
    CubismModel.prototype.addParameterValueById = function (parameterId, value, weight) {
        if (weight === void 0) { weight = 1.0; }
        var index = this.getParameterIndex(parameterId);
        this.addParameterValueByIndex(index, value, weight);
    };
    CubismModel.prototype.multiplyParameterValueById = function (parameterId, value, weight) {
        if (weight === void 0) { weight = 1.0; }
        var index = this.getParameterIndex(parameterId);
        this.multiplyParameterValueByIndex(index, value, weight);
    };
    CubismModel.prototype.multiplyParameterValueByIndex = function (parameterIndex, value, weight) {
        if (weight === void 0) { weight = 1.0; }
        this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) *
            (1.0 + (value - 1.0) * weight));
    };
    CubismModel.prototype.getDrawableIndex = function (drawableId) {
        var drawableCount = this._model.drawables.count;
        for (var drawableIndex = 0; drawableIndex < drawableCount; ++drawableIndex) {
            if (this._drawableIds.at(drawableIndex) == drawableId) {
                return drawableIndex;
            }
        }
        return -1;
    };
    CubismModel.prototype.getDrawableCount = function () {
        var drawableCount = this._model.drawables.count;
        return drawableCount;
    };
    CubismModel.prototype.getDrawableId = function (drawableIndex) {
        var parameterIds = this._model.drawables.ids;
        return live2dcubismframework_1.CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);
    };
    CubismModel.prototype.getDrawableRenderOrders = function () {
        var renderOrders = this._model.drawables.renderOrders;
        return renderOrders;
    };
    CubismModel.prototype.getDrawableTextureIndices = function (drawableIndex) {
        return this.getDrawableTextureIndex(drawableIndex);
    };
    CubismModel.prototype.getDrawableTextureIndex = function (drawableIndex) {
        var textureIndices = this._model.drawables.textureIndices;
        return textureIndices[drawableIndex];
    };
    CubismModel.prototype.getDrawableDynamicFlagVertexPositionsDidChange = function (drawableIndex) {
        var dynamicFlags = this._model.drawables.dynamicFlags;
        return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(dynamicFlags[drawableIndex]);
    };
    CubismModel.prototype.getDrawableVertexIndexCount = function (drawableIndex) {
        var indexCounts = this._model.drawables.indexCounts;
        return indexCounts[drawableIndex];
    };
    CubismModel.prototype.getDrawableVertexCount = function (drawableIndex) {
        var vertexCounts = this._model.drawables.vertexCounts;
        return vertexCounts[drawableIndex];
    };
    CubismModel.prototype.getDrawableVertices = function (drawableIndex) {
        return this.getDrawableVertexPositions(drawableIndex);
    };
    CubismModel.prototype.getDrawableVertexIndices = function (drawableIndex) {
        var indicesArray = this._model.drawables.indices;
        return indicesArray[drawableIndex];
    };
    CubismModel.prototype.getDrawableVertexPositions = function (drawableIndex) {
        var verticesArray = this._model.drawables.vertexPositions;
        return verticesArray[drawableIndex];
    };
    CubismModel.prototype.getDrawableVertexUvs = function (drawableIndex) {
        var uvsArray = this._model.drawables.vertexUvs;
        return uvsArray[drawableIndex];
    };
    CubismModel.prototype.getDrawableOpacity = function (drawableIndex) {
        var opacities = this._model.drawables.opacities;
        return opacities[drawableIndex];
    };
    CubismModel.prototype.getDrawableMultiplyColor = function (drawableIndex) {
        var multiplyColors = this._model.drawables.multiplyColors;
        var index = drawableIndex * 4;
        var multiplyColor = new cubismrenderer_1.CubismTextureColor();
        multiplyColor.R = multiplyColors[index];
        multiplyColor.G = multiplyColors[index + 1];
        multiplyColor.B = multiplyColors[index + 2];
        multiplyColor.A = multiplyColors[index + 3];
        return multiplyColor;
    };
    CubismModel.prototype.getDrawableScreenColor = function (drawableIndex) {
        var screenColors = this._model.drawables.screenColors;
        var index = drawableIndex * 4;
        var screenColor = new cubismrenderer_1.CubismTextureColor();
        screenColor.R = screenColors[index];
        screenColor.G = screenColors[index + 1];
        screenColor.B = screenColors[index + 2];
        screenColor.A = screenColors[index + 3];
        return screenColor;
    };
    CubismModel.prototype.getDrawableParentPartIndex = function (drawableIndex) {
        return this._model.drawables.parentPartIndices[drawableIndex];
    };
    CubismModel.prototype.getDrawableBlendMode = function (drawableIndex) {
        var constantFlags = this._model.drawables.constantFlags;
        return Live2DCubismCore.Utils.hasBlendAdditiveBit(constantFlags[drawableIndex])
            ? cubismrenderer_1.CubismBlendMode.CubismBlendMode_Additive
            : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(constantFlags[drawableIndex])
                ? cubismrenderer_1.CubismBlendMode.CubismBlendMode_Multiplicative
                : cubismrenderer_1.CubismBlendMode.CubismBlendMode_Normal;
    };
    CubismModel.prototype.getDrawableInvertedMaskBit = function (drawableIndex) {
        var constantFlags = this._model.drawables.constantFlags;
        return Live2DCubismCore.Utils.hasIsInvertedMaskBit(constantFlags[drawableIndex]);
    };
    CubismModel.prototype.getDrawableMasks = function () {
        var masks = this._model.drawables.masks;
        return masks;
    };
    CubismModel.prototype.getDrawableMaskCounts = function () {
        var maskCounts = this._model.drawables.maskCounts;
        return maskCounts;
    };
    CubismModel.prototype.isUsingMasking = function () {
        for (var d = 0; d < this._model.drawables.count; ++d) {
            if (this._model.drawables.maskCounts[d] <= 0) {
                continue;
            }
            return true;
        }
        return false;
    };
    CubismModel.prototype.getDrawableDynamicFlagIsVisible = function (drawableIndex) {
        var dynamicFlags = this._model.drawables.dynamicFlags;
        return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);
    };
    CubismModel.prototype.getDrawableDynamicFlagVisibilityDidChange = function (drawableIndex) {
        var dynamicFlags = this._model.drawables.dynamicFlags;
        return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(dynamicFlags[drawableIndex]);
    };
    CubismModel.prototype.getDrawableDynamicFlagOpacityDidChange = function (drawableIndex) {
        var dynamicFlags = this._model.drawables.dynamicFlags;
        return Live2DCubismCore.Utils.hasOpacityDidChangeBit(dynamicFlags[drawableIndex]);
    };
    CubismModel.prototype.getDrawableDynamicFlagRenderOrderDidChange = function (drawableIndex) {
        var dynamicFlags = this._model.drawables.dynamicFlags;
        return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(dynamicFlags[drawableIndex]);
    };
    CubismModel.prototype.getDrawableDynamicFlagBlendColorDidChange = function (drawableIndex) {
        var dynamicFlags = this._model.drawables.dynamicFlags;
        return Live2DCubismCore.Utils.hasBlendColorDidChangeBit(dynamicFlags[drawableIndex]);
    };
    CubismModel.prototype.loadParameters = function () {
        var parameterCount = this._model.parameters.count;
        var savedParameterCount = this._savedParameters.getSize();
        if (parameterCount > savedParameterCount) {
            parameterCount = savedParameterCount;
        }
        for (var i = 0; i < parameterCount; ++i) {
            this._parameterValues[i] = this._savedParameters.at(i);
        }
    };
    CubismModel.prototype.initialize = function () {
        (0, cubismdebug_1.CSM_ASSERT)(this._model);
        this._parameterValues = this._model.parameters.values;
        this._partOpacities = this._model.parts.opacities;
        this._parameterMaximumValues = this._model.parameters.maximumValues;
        this._parameterMinimumValues = this._model.parameters.minimumValues;
        {
            var parameterIds = this._model.parameters.ids;
            var parameterCount = this._model.parameters.count;
            this._parameterIds.prepareCapacity(parameterCount);
            for (var i = 0; i < parameterCount; ++i) {
                this._parameterIds.pushBack(live2dcubismframework_1.CubismFramework.getIdManager().getId(parameterIds[i]));
            }
        }
        var partCount = this._model.parts.count;
        {
            var partIds = this._model.parts.ids;
            this._partIds.prepareCapacity(partCount);
            for (var i = 0; i < partCount; ++i) {
                this._partIds.pushBack(live2dcubismframework_1.CubismFramework.getIdManager().getId(partIds[i]));
            }
            this._userPartMultiplyColors.prepareCapacity(partCount);
            this._userPartScreenColors.prepareCapacity(partCount);
            this._partChildDrawables.prepareCapacity(partCount);
        }
        {
            var drawableIds = this._model.drawables.ids;
            var drawableCount = this._model.drawables.count;
            this._userMultiplyColors.prepareCapacity(drawableCount);
            this._userScreenColors.prepareCapacity(drawableCount);
            this._userCullings.prepareCapacity(drawableCount);
            var userCulling = new DrawableCullingData(false, false);
            {
                for (var i = 0; i < partCount; ++i) {
                    var multiplyColor = new cubismrenderer_1.CubismTextureColor(1.0, 1.0, 1.0, 1.0);
                    var screenColor = new cubismrenderer_1.CubismTextureColor(0.0, 0.0, 0.0, 1.0);
                    var userMultiplyColor = new PartColorData(false, multiplyColor);
                    var userScreenColor = new PartColorData(false, screenColor);
                    this._userPartMultiplyColors.pushBack(userMultiplyColor);
                    this._userPartScreenColors.pushBack(userScreenColor);
                    this._partChildDrawables.pushBack(new csmvector_1.csmVector());
                    this._partChildDrawables.at(i).prepareCapacity(drawableCount);
                }
            }
            {
                for (var i = 0; i < drawableCount; ++i) {
                    var multiplyColor = new cubismrenderer_1.CubismTextureColor(1.0, 1.0, 1.0, 1.0);
                    var screenColor = new cubismrenderer_1.CubismTextureColor(0.0, 0.0, 0.0, 1.0);
                    var userMultiplyColor = new DrawableColorData(false, multiplyColor);
                    var userScreenColor = new DrawableColorData(false, screenColor);
                    this._drawableIds.pushBack(live2dcubismframework_1.CubismFramework.getIdManager().getId(drawableIds[i]));
                    this._userMultiplyColors.pushBack(userMultiplyColor);
                    this._userScreenColors.pushBack(userScreenColor);
                    this._userCullings.pushBack(userCulling);
                    var parentIndex = this.getDrawableParentPartIndex(i);
                    if (parentIndex >= 0) {
                        this._partChildDrawables.at(parentIndex).pushBack(i);
                    }
                }
            }
        }
    };
    CubismModel.prototype.release = function () {
        this._model.release();
        this._model = null;
    };
    return CubismModel;
}());
exports.CubismModel = CubismModel;
var $ = __importStar(__webpack_require__(/*! ./cubismmodel */ "../../../Framework/src/model/cubismmodel.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismModel = $.CubismModel;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/model/cubismmodeluserdata.ts":
/*!***********************************************************!*\
  !*** ../../../Framework/src/model/cubismmodeluserdata.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismModelUserData = exports.CubismModelUserDataNode = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "../../../Framework/src/type/csmstring.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var cubismmodeluserdatajson_1 = __webpack_require__(/*! ./cubismmodeluserdatajson */ "../../../Framework/src/model/cubismmodeluserdatajson.ts");
var ArtMesh = 'ArtMesh';
var CubismModelUserDataNode = (function () {
    function CubismModelUserDataNode() {
    }
    return CubismModelUserDataNode;
}());
exports.CubismModelUserDataNode = CubismModelUserDataNode;
var CubismModelUserData = (function () {
    function CubismModelUserData() {
        this._userDataNodes = new csmvector_1.csmVector();
        this._artMeshUserDataNode = new csmvector_1.csmVector();
    }
    CubismModelUserData.create = function (buffer, size) {
        var ret = new CubismModelUserData();
        ret.parseUserData(buffer, size);
        return ret;
    };
    CubismModelUserData.delete = function (modelUserData) {
        if (modelUserData != null) {
            modelUserData.release();
            modelUserData = null;
        }
    };
    CubismModelUserData.prototype.getArtMeshUserDatas = function () {
        return this._artMeshUserDataNode;
    };
    CubismModelUserData.prototype.parseUserData = function (buffer, size) {
        var json = new cubismmodeluserdatajson_1.CubismModelUserDataJson(buffer, size);
        var typeOfArtMesh = live2dcubismframework_1.CubismFramework.getIdManager().getId(ArtMesh);
        var nodeCount = json.getUserDataCount();
        for (var i = 0; i < nodeCount; i++) {
            var addNode = new CubismModelUserDataNode();
            addNode.targetId = json.getUserDataId(i);
            addNode.targetType = live2dcubismframework_1.CubismFramework.getIdManager().getId(json.getUserDataTargetType(i));
            addNode.value = new csmstring_1.csmString(json.getUserDataValue(i));
            this._userDataNodes.pushBack(addNode);
            if (addNode.targetType == typeOfArtMesh) {
                this._artMeshUserDataNode.pushBack(addNode);
            }
        }
        json.release();
        json = void 0;
    };
    CubismModelUserData.prototype.release = function () {
        for (var i = 0; i < this._userDataNodes.getSize(); ++i) {
            this._userDataNodes.set(i, null);
        }
        this._userDataNodes = null;
    };
    return CubismModelUserData;
}());
exports.CubismModelUserData = CubismModelUserData;
var $ = __importStar(__webpack_require__(/*! ./cubismmodeluserdata */ "../../../Framework/src/model/cubismmodeluserdata.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismModelUserData = $.CubismModelUserData;
    Live2DCubismFramework.CubismModelUserDataNode = $.CubismModelUserDataNode;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/model/cubismmodeluserdatajson.ts":
/*!***************************************************************!*\
  !*** ../../../Framework/src/model/cubismmodeluserdatajson.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismModelUserDataJson = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
var Meta = 'Meta';
var UserDataCount = 'UserDataCount';
var TotalUserDataSize = 'TotalUserDataSize';
var UserData = 'UserData';
var Target = 'Target';
var Id = 'Id';
var Value = 'Value';
var CubismModelUserDataJson = (function () {
    function CubismModelUserDataJson(buffer, size) {
        this._json = cubismjson_1.CubismJson.create(buffer, size);
    }
    CubismModelUserDataJson.prototype.release = function () {
        cubismjson_1.CubismJson.delete(this._json);
    };
    CubismModelUserDataJson.prototype.getUserDataCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(UserDataCount)
            .toInt();
    };
    CubismModelUserDataJson.prototype.getTotalUserDataSize = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(TotalUserDataSize)
            .toInt();
    };
    CubismModelUserDataJson.prototype.getUserDataTargetType = function (i) {
        return this._json
            .getRoot()
            .getValueByString(UserData)
            .getValueByIndex(i)
            .getValueByString(Target)
            .getRawString();
    };
    CubismModelUserDataJson.prototype.getUserDataId = function (i) {
        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json
            .getRoot()
            .getValueByString(UserData)
            .getValueByIndex(i)
            .getValueByString(Id)
            .getRawString());
    };
    CubismModelUserDataJson.prototype.getUserDataValue = function (i) {
        return this._json
            .getRoot()
            .getValueByString(UserData)
            .getValueByIndex(i)
            .getValueByString(Value)
            .getRawString();
    };
    return CubismModelUserDataJson;
}());
exports.CubismModelUserDataJson = CubismModelUserDataJson;
var $ = __importStar(__webpack_require__(/*! ./cubismmodeluserdatajson */ "../../../Framework/src/model/cubismmodeluserdatajson.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismModelUserDataJson = $.CubismModelUserDataJson;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/model/cubismusermodel.ts":
/*!*******************************************************!*\
  !*** ../../../Framework/src/model/cubismusermodel.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismUserModel = void 0;
var cubismbreath_1 = __webpack_require__(/*! ../effect/cubismbreath */ "../../../Framework/src/effect/cubismbreath.ts");
var cubismeyeblink_1 = __webpack_require__(/*! ../effect/cubismeyeblink */ "../../../Framework/src/effect/cubismeyeblink.ts");
var cubismpose_1 = __webpack_require__(/*! ../effect/cubismpose */ "../../../Framework/src/effect/cubismpose.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var cubismmodelmatrix_1 = __webpack_require__(/*! ../math/cubismmodelmatrix */ "../../../Framework/src/math/cubismmodelmatrix.ts");
var cubismtargetpoint_1 = __webpack_require__(/*! ../math/cubismtargetpoint */ "../../../Framework/src/math/cubismtargetpoint.ts");
var cubismexpressionmotion_1 = __webpack_require__(/*! ../motion/cubismexpressionmotion */ "../../../Framework/src/motion/cubismexpressionmotion.ts");
var cubismmotion_1 = __webpack_require__(/*! ../motion/cubismmotion */ "../../../Framework/src/motion/cubismmotion.ts");
var cubismmotionmanager_1 = __webpack_require__(/*! ../motion/cubismmotionmanager */ "../../../Framework/src/motion/cubismmotionmanager.ts");
var cubismphysics_1 = __webpack_require__(/*! ../physics/cubismphysics */ "../../../Framework/src/physics/cubismphysics.ts");
var cubismrenderer_webgl_1 = __webpack_require__(/*! ../rendering/cubismrenderer_webgl */ "../../../Framework/src/rendering/cubismrenderer_webgl.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
var cubismmoc_1 = __webpack_require__(/*! ./cubismmoc */ "../../../Framework/src/model/cubismmoc.ts");
var cubismmodeluserdata_1 = __webpack_require__(/*! ./cubismmodeluserdata */ "../../../Framework/src/model/cubismmodeluserdata.ts");
var CubismUserModel = (function () {
    function CubismUserModel() {
        this.loadMotion = function (buffer, size, name, onFinishedMotionHandler) { return cubismmotion_1.CubismMotion.create(buffer, size, onFinishedMotionHandler); };
        this._moc = null;
        this._model = null;
        this._motionManager = null;
        this._expressionManager = null;
        this._eyeBlink = null;
        this._breath = null;
        this._modelMatrix = null;
        this._pose = null;
        this._dragManager = null;
        this._physics = null;
        this._modelUserData = null;
        this._initialized = false;
        this._updating = false;
        this._opacity = 1.0;
        this._lipsync = true;
        this._lastLipSyncValue = 0.0;
        this._dragX = 0.0;
        this._dragY = 0.0;
        this._accelerationX = 0.0;
        this._accelerationY = 0.0;
        this._accelerationZ = 0.0;
        this._mocConsistency = false;
        this._debugMode = false;
        this._renderer = null;
        this._motionManager = new cubismmotionmanager_1.CubismMotionManager();
        this._motionManager.setEventCallback(CubismUserModel.cubismDefaultMotionEventCallback, this);
        this._expressionManager = new cubismmotionmanager_1.CubismMotionManager();
        this._dragManager = new cubismtargetpoint_1.CubismTargetPoint();
    }
    CubismUserModel.prototype.isInitialized = function () {
        return this._initialized;
    };
    CubismUserModel.prototype.setInitialized = function (v) {
        this._initialized = v;
    };
    CubismUserModel.prototype.isUpdating = function () {
        return this._updating;
    };
    CubismUserModel.prototype.setUpdating = function (v) {
        this._updating = v;
    };
    CubismUserModel.prototype.setDragging = function (x, y) {
        this._dragManager.set(x, y);
    };
    CubismUserModel.prototype.setAcceleration = function (x, y, z) {
        this._accelerationX = x;
        this._accelerationY = y;
        this._accelerationZ = z;
    };
    CubismUserModel.prototype.getModelMatrix = function () {
        return this._modelMatrix;
    };
    CubismUserModel.prototype.setOpacity = function (a) {
        this._opacity = a;
    };
    CubismUserModel.prototype.getOpacity = function () {
        return this._opacity;
    };
    CubismUserModel.prototype.loadModel = function (buffer, shouldCheckMocConsistency) {
        if (shouldCheckMocConsistency === void 0) { shouldCheckMocConsistency = false; }
        this._moc = cubismmoc_1.CubismMoc.create(buffer, shouldCheckMocConsistency);
        if (this._moc == null) {
            (0, cubismdebug_1.CubismLogError)('Failed to CubismMoc.create().');
            return;
        }
        this._model = this._moc.createModel();
        if (this._model == null) {
            (0, cubismdebug_1.CubismLogError)('Failed to CreateModel().');
            return;
        }
        this._model.saveParameters();
        this._modelMatrix = new cubismmodelmatrix_1.CubismModelMatrix(this._model.getCanvasWidth(), this._model.getCanvasHeight());
    };
    CubismUserModel.prototype.loadExpression = function (buffer, size, name) {
        return cubismexpressionmotion_1.CubismExpressionMotion.create(buffer, size);
    };
    CubismUserModel.prototype.loadPose = function (buffer, size) {
        this._pose = cubismpose_1.CubismPose.create(buffer, size);
    };
    CubismUserModel.prototype.loadUserData = function (buffer, size) {
        this._modelUserData = cubismmodeluserdata_1.CubismModelUserData.create(buffer, size);
    };
    CubismUserModel.prototype.loadPhysics = function (buffer, size) {
        this._physics = cubismphysics_1.CubismPhysics.create(buffer, size);
    };
    CubismUserModel.prototype.isHit = function (drawableId, pointX, pointY) {
        var drawIndex = this._model.getDrawableIndex(drawableId);
        if (drawIndex < 0) {
            return false;
        }
        var count = this._model.getDrawableVertexCount(drawIndex);
        var vertices = this._model.getDrawableVertices(drawIndex);
        var left = vertices[0];
        var right = vertices[0];
        var top = vertices[1];
        var bottom = vertices[1];
        for (var j = 1; j < count; ++j) {
            var x = vertices[live2dcubismframework_1.Constant.vertexOffset + j * live2dcubismframework_1.Constant.vertexStep];
            var y = vertices[live2dcubismframework_1.Constant.vertexOffset + j * live2dcubismframework_1.Constant.vertexStep + 1];
            if (x < left) {
                left = x;
            }
            if (x > right) {
                right = x;
            }
            if (y < top) {
                top = y;
            }
            if (y > bottom) {
                bottom = y;
            }
        }
        var tx = this._modelMatrix.invertTransformX(pointX);
        var ty = this._modelMatrix.invertTransformY(pointY);
        return left <= tx && tx <= right && top <= ty && ty <= bottom;
    };
    CubismUserModel.prototype.getModel = function () {
        return this._model;
    };
    CubismUserModel.prototype.getRenderer = function () {
        return this._renderer;
    };
    CubismUserModel.prototype.createRenderer = function (maskBufferCount) {
        if (maskBufferCount === void 0) { maskBufferCount = 1; }
        if (this._renderer) {
            this.deleteRenderer();
        }
        this._renderer = new cubismrenderer_webgl_1.CubismRenderer_WebGL();
        this._renderer.initialize(this._model, maskBufferCount);
    };
    CubismUserModel.prototype.deleteRenderer = function () {
        if (this._renderer != null) {
            this._renderer.release();
            this._renderer = null;
        }
    };
    CubismUserModel.prototype.motionEventFired = function (eventValue) {
        (0, cubismdebug_1.CubismLogInfo)('{0}', eventValue.s);
    };
    CubismUserModel.cubismDefaultMotionEventCallback = function (caller, eventValue, customData) {
        var model = customData;
        if (model != null) {
            model.motionEventFired(eventValue);
        }
    };
    CubismUserModel.prototype.release = function () {
        if (this._motionManager != null) {
            this._motionManager.release();
            this._motionManager = null;
        }
        if (this._expressionManager != null) {
            this._expressionManager.release();
            this._expressionManager = null;
        }
        if (this._moc != null) {
            this._moc.deleteModel(this._model);
            this._moc.release();
            this._moc = null;
        }
        this._modelMatrix = null;
        cubismpose_1.CubismPose.delete(this._pose);
        cubismeyeblink_1.CubismEyeBlink.delete(this._eyeBlink);
        cubismbreath_1.CubismBreath.delete(this._breath);
        this._dragManager = null;
        cubismphysics_1.CubismPhysics.delete(this._physics);
        cubismmodeluserdata_1.CubismModelUserData.delete(this._modelUserData);
        this.deleteRenderer();
    };
    return CubismUserModel;
}());
exports.CubismUserModel = CubismUserModel;
var $ = __importStar(__webpack_require__(/*! ./cubismusermodel */ "../../../Framework/src/model/cubismusermodel.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismUserModel = $.CubismUserModel;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/motion/acubismmotion.ts":
/*!******************************************************!*\
  !*** ../../../Framework/src/motion/acubismmotion.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.ACubismMotion = void 0;
var cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ "../../../Framework/src/math/cubismmath.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
var ACubismMotion = (function () {
    function ACubismMotion() {
        var _this = this;
        this.setFinishedMotionHandler = function (onFinishedMotionHandler) { return (_this._onFinishedMotion = onFinishedMotionHandler); };
        this.getFinishedMotionHandler = function () { return _this._onFinishedMotion; };
        this._fadeInSeconds = -1.0;
        this._fadeOutSeconds = -1.0;
        this._weight = 1.0;
        this._offsetSeconds = 0.0;
        this._firedEventValues = new csmvector_1.csmVector();
    }
    ACubismMotion.delete = function (motion) {
        motion.release();
        motion = null;
    };
    ACubismMotion.prototype.release = function () {
        this._weight = 0.0;
    };
    ACubismMotion.prototype.updateParameters = function (model, motionQueueEntry, userTimeSeconds) {
        if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {
            return;
        }
        if (!motionQueueEntry.isStarted()) {
            motionQueueEntry.setIsStarted(true);
            motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds);
            motionQueueEntry.setFadeInStartTime(userTimeSeconds);
            var duration = this.getDuration();
            if (motionQueueEntry.getEndTime() < 0) {
                motionQueueEntry.setEndTime(duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration);
            }
        }
        var fadeWeight = this._weight;
        var fadeIn = this._fadeInSeconds == 0.0
            ? 1.0
            : cubismmath_1.CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /
                this._fadeInSeconds);
        var fadeOut = this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0
            ? 1.0
            : cubismmath_1.CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /
                this._fadeOutSeconds);
        fadeWeight = fadeWeight * fadeIn * fadeOut;
        motionQueueEntry.setState(userTimeSeconds, fadeWeight);
        (0, cubismdebug_1.CSM_ASSERT)(0.0 <= fadeWeight && fadeWeight <= 1.0);
        this.doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry);
        if (motionQueueEntry.getEndTime() > 0 &&
            motionQueueEntry.getEndTime() < userTimeSeconds) {
            motionQueueEntry.setIsFinished(true);
        }
    };
    ACubismMotion.prototype.setFadeInTime = function (fadeInSeconds) {
        this._fadeInSeconds = fadeInSeconds;
    };
    ACubismMotion.prototype.setFadeOutTime = function (fadeOutSeconds) {
        this._fadeOutSeconds = fadeOutSeconds;
    };
    ACubismMotion.prototype.getFadeOutTime = function () {
        return this._fadeOutSeconds;
    };
    ACubismMotion.prototype.getFadeInTime = function () {
        return this._fadeInSeconds;
    };
    ACubismMotion.prototype.setWeight = function (weight) {
        this._weight = weight;
    };
    ACubismMotion.prototype.getWeight = function () {
        return this._weight;
    };
    ACubismMotion.prototype.getDuration = function () {
        return -1.0;
    };
    ACubismMotion.prototype.getLoopDuration = function () {
        return -1.0;
    };
    ACubismMotion.prototype.setOffsetTime = function (offsetSeconds) {
        this._offsetSeconds = offsetSeconds;
    };
    ACubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {
        return this._firedEventValues;
    };
    ACubismMotion.prototype.isExistModelOpacity = function () {
        return false;
    };
    ACubismMotion.prototype.getModelOpacityIndex = function () {
        return -1;
    };
    ACubismMotion.prototype.getModelOpacityId = function (index) {
        return null;
    };
    ACubismMotion.prototype.getModelOpacityValue = function () {
        return 1.0;
    };
    return ACubismMotion;
}());
exports.ACubismMotion = ACubismMotion;
var $ = __importStar(__webpack_require__(/*! ./acubismmotion */ "../../../Framework/src/motion/acubismmotion.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.ACubismMotion = $.ACubismMotion;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/motion/cubismexpressionmotion.ts":
/*!***************************************************************!*\
  !*** ../../../Framework/src/motion/cubismexpressionmotion.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.ExpressionParameter = exports.ExpressionBlendType = exports.CubismExpressionMotion = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
var acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ "../../../Framework/src/motion/acubismmotion.ts");
var ExpressionKeyFadeIn = 'FadeInTime';
var ExpressionKeyFadeOut = 'FadeOutTime';
var ExpressionKeyParameters = 'Parameters';
var ExpressionKeyId = 'Id';
var ExpressionKeyValue = 'Value';
var ExpressionKeyBlend = 'Blend';
var BlendValueAdd = 'Add';
var BlendValueMultiply = 'Multiply';
var BlendValueOverwrite = 'Overwrite';
var DefaultFadeTime = 1.0;
var CubismExpressionMotion = (function (_super) {
    __extends(CubismExpressionMotion, _super);
    function CubismExpressionMotion() {
        var _this = _super.call(this) || this;
        _this._parameters = new csmvector_1.csmVector();
        return _this;
    }
    CubismExpressionMotion.create = function (buffer, size) {
        var expression = new CubismExpressionMotion();
        expression.parse(buffer, size);
        return expression;
    };
    CubismExpressionMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, weight, motionQueueEntry) {
        for (var i = 0; i < this._parameters.getSize(); ++i) {
            var parameter = this._parameters.at(i);
            switch (parameter.blendType) {
                case ExpressionBlendType.ExpressionBlendType_Add: {
                    model.addParameterValueById(parameter.parameterId, parameter.value, weight);
                    break;
                }
                case ExpressionBlendType.ExpressionBlendType_Multiply: {
                    model.multiplyParameterValueById(parameter.parameterId, parameter.value, weight);
                    break;
                }
                case ExpressionBlendType.ExpressionBlendType_Overwrite: {
                    model.setParameterValueById(parameter.parameterId, parameter.value, weight);
                    break;
                }
                default:
                    break;
            }
        }
    };
    CubismExpressionMotion.prototype.parse = function (buffer, size) {
        var json = cubismjson_1.CubismJson.create(buffer, size);
        var root = json.getRoot();
        this.setFadeInTime(root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime));
        this.setFadeOutTime(root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime));
        var parameterCount = root
            .getValueByString(ExpressionKeyParameters)
            .getSize();
        this._parameters.prepareCapacity(parameterCount);
        for (var i = 0; i < parameterCount; ++i) {
            var param = root
                .getValueByString(ExpressionKeyParameters)
                .getValueByIndex(i);
            var parameterId = live2dcubismframework_1.CubismFramework.getIdManager().getId(param.getValueByString(ExpressionKeyId).getRawString());
            var value = param
                .getValueByString(ExpressionKeyValue)
                .toFloat();
            var blendType = void 0;
            if (param.getValueByString(ExpressionKeyBlend).isNull() ||
                param.getValueByString(ExpressionKeyBlend).getString() == BlendValueAdd) {
                blendType = ExpressionBlendType.ExpressionBlendType_Add;
            }
            else if (param.getValueByString(ExpressionKeyBlend).getString() ==
                BlendValueMultiply) {
                blendType = ExpressionBlendType.ExpressionBlendType_Multiply;
            }
            else if (param.getValueByString(ExpressionKeyBlend).getString() ==
                BlendValueOverwrite) {
                blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;
            }
            else {
                blendType = ExpressionBlendType.ExpressionBlendType_Add;
            }
            var item = new ExpressionParameter();
            item.parameterId = parameterId;
            item.blendType = blendType;
            item.value = value;
            this._parameters.pushBack(item);
        }
        cubismjson_1.CubismJson.delete(json);
    };
    return CubismExpressionMotion;
}(acubismmotion_1.ACubismMotion));
exports.CubismExpressionMotion = CubismExpressionMotion;
var ExpressionBlendType;
(function (ExpressionBlendType) {
    ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Add"] = 0] = "ExpressionBlendType_Add";
    ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Multiply"] = 1] = "ExpressionBlendType_Multiply";
    ExpressionBlendType[ExpressionBlendType["ExpressionBlendType_Overwrite"] = 2] = "ExpressionBlendType_Overwrite";
})(ExpressionBlendType = exports.ExpressionBlendType || (exports.ExpressionBlendType = {}));
var ExpressionParameter = (function () {
    function ExpressionParameter() {
    }
    return ExpressionParameter;
}());
exports.ExpressionParameter = ExpressionParameter;
var $ = __importStar(__webpack_require__(/*! ./cubismexpressionmotion */ "../../../Framework/src/motion/cubismexpressionmotion.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismExpressionMotion = $.CubismExpressionMotion;
    Live2DCubismFramework.ExpressionBlendType = $.ExpressionBlendType;
    Live2DCubismFramework.ExpressionParameter = $.ExpressionParameter;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/motion/cubismmotion.ts":
/*!*****************************************************!*\
  !*** ../../../Framework/src/motion/cubismmotion.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMotion = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ "../../../Framework/src/math/cubismmath.ts");
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "../../../Framework/src/type/csmstring.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
var acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ "../../../Framework/src/motion/acubismmotion.ts");
var cubismmotioninternal_1 = __webpack_require__(/*! ./cubismmotioninternal */ "../../../Framework/src/motion/cubismmotioninternal.ts");
var cubismmotionjson_1 = __webpack_require__(/*! ./cubismmotionjson */ "../../../Framework/src/motion/cubismmotionjson.ts");
var EffectNameEyeBlink = 'EyeBlink';
var EffectNameLipSync = 'LipSync';
var TargetNameModel = 'Model';
var TargetNameParameter = 'Parameter';
var TargetNamePartOpacity = 'PartOpacity';
var IdNameOpacity = 'Opacity';
var UseOldBeziersCurveMotion = false;
function lerpPoints(a, b, t) {
    var result = new cubismmotioninternal_1.CubismMotionPoint();
    result.time = a.time + (b.time - a.time) * t;
    result.value = a.value + (b.value - a.value) * t;
    return result;
}
function linearEvaluate(points, time) {
    var t = (time - points[0].time) / (points[1].time - points[0].time);
    if (t < 0.0) {
        t = 0.0;
    }
    return points[0].value + (points[1].value - points[0].value) * t;
}
function bezierEvaluate(points, time) {
    var t = (time - points[0].time) / (points[3].time - points[0].time);
    if (t < 0.0) {
        t = 0.0;
    }
    var p01 = lerpPoints(points[0], points[1], t);
    var p12 = lerpPoints(points[1], points[2], t);
    var p23 = lerpPoints(points[2], points[3], t);
    var p012 = lerpPoints(p01, p12, t);
    var p123 = lerpPoints(p12, p23, t);
    return lerpPoints(p012, p123, t).value;
}
function bezierEvaluateBinarySearch(points, time) {
    var x_error = 0.01;
    var x = time;
    var x1 = points[0].time;
    var x2 = points[3].time;
    var cx1 = points[1].time;
    var cx2 = points[2].time;
    var ta = 0.0;
    var tb = 1.0;
    var t = 0.0;
    var i = 0;
    for (var var33 = true; i < 20; ++i) {
        if (x < x1 + x_error) {
            t = ta;
            break;
        }
        if (x2 - x_error < x) {
            t = tb;
            break;
        }
        var centerx = (cx1 + cx2) * 0.5;
        cx1 = (x1 + cx1) * 0.5;
        cx2 = (x2 + cx2) * 0.5;
        var ctrlx12 = (cx1 + centerx) * 0.5;
        var ctrlx21 = (cx2 + centerx) * 0.5;
        centerx = (ctrlx12 + ctrlx21) * 0.5;
        if (x < centerx) {
            tb = (ta + tb) * 0.5;
            if (centerx - x_error < x) {
                t = tb;
                break;
            }
            x2 = centerx;
            cx2 = ctrlx12;
        }
        else {
            ta = (ta + tb) * 0.5;
            if (x < centerx + x_error) {
                t = ta;
                break;
            }
            x1 = centerx;
            cx1 = ctrlx21;
        }
    }
    if (i == 20) {
        t = (ta + tb) * 0.5;
    }
    if (t < 0.0) {
        t = 0.0;
    }
    if (t > 1.0) {
        t = 1.0;
    }
    var p01 = lerpPoints(points[0], points[1], t);
    var p12 = lerpPoints(points[1], points[2], t);
    var p23 = lerpPoints(points[2], points[3], t);
    var p012 = lerpPoints(p01, p12, t);
    var p123 = lerpPoints(p12, p23, t);
    return lerpPoints(p012, p123, t).value;
}
function bezierEvaluateCardanoInterpretation(points, time) {
    var x = time;
    var x1 = points[0].time;
    var x2 = points[3].time;
    var cx1 = points[1].time;
    var cx2 = points[2].time;
    var a = x2 - 3.0 * cx2 + 3.0 * cx1 - x1;
    var b = 3.0 * cx2 - 6.0 * cx1 + 3.0 * x1;
    var c = 3.0 * cx1 - 3.0 * x1;
    var d = x1 - x;
    var t = cubismmath_1.CubismMath.cardanoAlgorithmForBezier(a, b, c, d);
    var p01 = lerpPoints(points[0], points[1], t);
    var p12 = lerpPoints(points[1], points[2], t);
    var p23 = lerpPoints(points[2], points[3], t);
    var p012 = lerpPoints(p01, p12, t);
    var p123 = lerpPoints(p12, p23, t);
    return lerpPoints(p012, p123, t).value;
}
function steppedEvaluate(points, time) {
    return points[0].value;
}
function inverseSteppedEvaluate(points, time) {
    return points[1].value;
}
function evaluateCurve(motionData, index, time) {
    var curve = motionData.curves.at(index);
    var target = -1;
    var totalSegmentCount = curve.baseSegmentIndex + curve.segmentCount;
    var pointPosition = 0;
    for (var i = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {
        pointPosition =
            motionData.segments.at(i).basePointIndex +
                (motionData.segments.at(i).segmentType ==
                    cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Bezier
                    ? 3
                    : 1);
        if (motionData.points.at(pointPosition).time > time) {
            target = i;
            break;
        }
    }
    if (target == -1) {
        return motionData.points.at(pointPosition).value;
    }
    var segment = motionData.segments.at(target);
    return segment.evaluate(motionData.points.get(segment.basePointIndex), time);
}
var CubismMotion = (function (_super) {
    __extends(CubismMotion, _super);
    function CubismMotion() {
        var _this = _super.call(this) || this;
        _this._sourceFrameRate = 30.0;
        _this._loopDurationSeconds = -1.0;
        _this._isLoop = false;
        _this._isLoopFadeIn = true;
        _this._lastWeight = 0.0;
        _this._motionData = null;
        _this._modelCurveIdEyeBlink = null;
        _this._modelCurveIdLipSync = null;
        _this._modelCurveIdOpacity = null;
        _this._eyeBlinkParameterIds = null;
        _this._lipSyncParameterIds = null;
        _this._modelOpacity = 1.0;
        return _this;
    }
    CubismMotion.create = function (buffer, size, onFinishedMotionHandler) {
        var ret = new CubismMotion();
        ret.parse(buffer, size);
        ret._sourceFrameRate = ret._motionData.fps;
        ret._loopDurationSeconds = ret._motionData.duration;
        ret._onFinishedMotion = onFinishedMotionHandler;
        return ret;
    };
    CubismMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, fadeWeight, motionQueueEntry) {
        if (this._modelCurveIdEyeBlink == null) {
            this._modelCurveIdEyeBlink =
                live2dcubismframework_1.CubismFramework.getIdManager().getId(EffectNameEyeBlink);
        }
        if (this._modelCurveIdLipSync == null) {
            this._modelCurveIdLipSync =
                live2dcubismframework_1.CubismFramework.getIdManager().getId(EffectNameLipSync);
        }
        if (this._modelCurveIdOpacity == null) {
            this._modelCurveIdOpacity =
                live2dcubismframework_1.CubismFramework.getIdManager().getId(IdNameOpacity);
        }
        var timeOffsetSeconds = userTimeSeconds - motionQueueEntry.getStartTime();
        if (timeOffsetSeconds < 0.0) {
            timeOffsetSeconds = 0.0;
        }
        var lipSyncValue = Number.MAX_VALUE;
        var eyeBlinkValue = Number.MAX_VALUE;
        var MaxTargetSize = 64;
        var lipSyncFlags = 0;
        var eyeBlinkFlags = 0;
        if (this._eyeBlinkParameterIds.getSize() > MaxTargetSize) {
            (0, cubismdebug_1.CubismLogDebug)('too many eye blink targets : {0}', this._eyeBlinkParameterIds.getSize());
        }
        if (this._lipSyncParameterIds.getSize() > MaxTargetSize) {
            (0, cubismdebug_1.CubismLogDebug)('too many lip sync targets : {0}', this._lipSyncParameterIds.getSize());
        }
        var tmpFadeIn = this._fadeInSeconds <= 0.0
            ? 1.0
            : cubismmath_1.CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /
                this._fadeInSeconds);
        var tmpFadeOut = this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0
            ? 1.0
            : cubismmath_1.CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /
                this._fadeOutSeconds);
        var value;
        var c, parameterIndex;
        var time = timeOffsetSeconds;
        if (this._isLoop) {
            while (time > this._motionData.duration) {
                time -= this._motionData.duration;
            }
        }
        var curves = this._motionData.curves;
        for (c = 0; c < this._motionData.curveCount &&
            curves.at(c).type ==
                cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Model; ++c) {
            value = evaluateCurve(this._motionData, c, time);
            if (curves.at(c).id == this._modelCurveIdEyeBlink) {
                eyeBlinkValue = value;
            }
            else if (curves.at(c).id == this._modelCurveIdLipSync) {
                lipSyncValue = value;
            }
            else if (curves.at(c).id == this._modelCurveIdOpacity) {
                this._modelOpacity = value;
                model.setModelOapcity(this.getModelOpacityValue());
            }
        }
        var parameterMotionCurveCount = 0;
        for (; c < this._motionData.curveCount &&
            curves.at(c).type ==
                cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter; ++c) {
            parameterMotionCurveCount++;
            parameterIndex = model.getParameterIndex(curves.at(c).id);
            if (parameterIndex == -1) {
                continue;
            }
            var sourceValue = model.getParameterValueByIndex(parameterIndex);
            value = evaluateCurve(this._motionData, c, time);
            if (eyeBlinkValue != Number.MAX_VALUE) {
                for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {
                    if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {
                        value *= eyeBlinkValue;
                        eyeBlinkFlags |= 1 << i;
                        break;
                    }
                }
            }
            if (lipSyncValue != Number.MAX_VALUE) {
                for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {
                    if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {
                        value += lipSyncValue;
                        lipSyncFlags |= 1 << i;
                        break;
                    }
                }
            }
            var v = void 0;
            if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {
                v = sourceValue + (value - sourceValue) * fadeWeight;
            }
            else {
                var fin = void 0;
                var fout = void 0;
                if (curves.at(c).fadeInTime < 0.0) {
                    fin = tmpFadeIn;
                }
                else {
                    fin =
                        curves.at(c).fadeInTime == 0.0
                            ? 1.0
                            : cubismmath_1.CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /
                                curves.at(c).fadeInTime);
                }
                if (curves.at(c).fadeOutTime < 0.0) {
                    fout = tmpFadeOut;
                }
                else {
                    fout =
                        curves.at(c).fadeOutTime == 0.0 ||
                            motionQueueEntry.getEndTime() < 0.0
                            ? 1.0
                            : cubismmath_1.CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /
                                curves.at(c).fadeOutTime);
                }
                var paramWeight = this._weight * fin * fout;
                v = sourceValue + (value - sourceValue) * paramWeight;
            }
            model.setParameterValueByIndex(parameterIndex, v, 1.0);
        }
        {
            if (eyeBlinkValue != Number.MAX_VALUE) {
                for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {
                    var sourceValue = model.getParameterValueById(this._eyeBlinkParameterIds.at(i));
                    if ((eyeBlinkFlags >> i) & 0x01) {
                        continue;
                    }
                    var v = sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;
                    model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);
                }
            }
            if (lipSyncValue != Number.MAX_VALUE) {
                for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {
                    var sourceValue = model.getParameterValueById(this._lipSyncParameterIds.at(i));
                    if ((lipSyncFlags >> i) & 0x01) {
                        continue;
                    }
                    var v = sourceValue + (lipSyncValue - sourceValue) * fadeWeight;
                    model.setParameterValueById(this._lipSyncParameterIds.at(i), v);
                }
            }
        }
        for (; c < this._motionData.curveCount &&
            curves.at(c).type ==
                cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity; ++c) {
            parameterIndex = model.getParameterIndex(curves.at(c).id);
            if (parameterIndex == -1) {
                continue;
            }
            value = evaluateCurve(this._motionData, c, time);
            model.setParameterValueByIndex(parameterIndex, value);
        }
        if (timeOffsetSeconds >= this._motionData.duration) {
            if (this._isLoop) {
                motionQueueEntry.setStartTime(userTimeSeconds);
                if (this._isLoopFadeIn) {
                    motionQueueEntry.setFadeInStartTime(userTimeSeconds);
                }
            }
            else {
                if (this._onFinishedMotion) {
                    this._onFinishedMotion(this);
                }
                motionQueueEntry.setIsFinished(true);
            }
        }
        this._lastWeight = fadeWeight;
    };
    CubismMotion.prototype.setIsLoop = function (loop) {
        this._isLoop = loop;
    };
    CubismMotion.prototype.isLoop = function () {
        return this._isLoop;
    };
    CubismMotion.prototype.setIsLoopFadeIn = function (loopFadeIn) {
        this._isLoopFadeIn = loopFadeIn;
    };
    CubismMotion.prototype.isLoopFadeIn = function () {
        return this._isLoopFadeIn;
    };
    CubismMotion.prototype.getDuration = function () {
        return this._isLoop ? -1.0 : this._loopDurationSeconds;
    };
    CubismMotion.prototype.getLoopDuration = function () {
        return this._loopDurationSeconds;
    };
    CubismMotion.prototype.setParameterFadeInTime = function (parameterId, value) {
        var curves = this._motionData.curves;
        for (var i = 0; i < this._motionData.curveCount; ++i) {
            if (parameterId == curves.at(i).id) {
                curves.at(i).fadeInTime = value;
                return;
            }
        }
    };
    CubismMotion.prototype.setParameterFadeOutTime = function (parameterId, value) {
        var curves = this._motionData.curves;
        for (var i = 0; i < this._motionData.curveCount; ++i) {
            if (parameterId == curves.at(i).id) {
                curves.at(i).fadeOutTime = value;
                return;
            }
        }
    };
    CubismMotion.prototype.getParameterFadeInTime = function (parameterId) {
        var curves = this._motionData.curves;
        for (var i = 0; i < this._motionData.curveCount; ++i) {
            if (parameterId == curves.at(i).id) {
                return curves.at(i).fadeInTime;
            }
        }
        return -1;
    };
    CubismMotion.prototype.getParameterFadeOutTime = function (parameterId) {
        var curves = this._motionData.curves;
        for (var i = 0; i < this._motionData.curveCount; ++i) {
            if (parameterId == curves.at(i).id) {
                return curves.at(i).fadeOutTime;
            }
        }
        return -1;
    };
    CubismMotion.prototype.setEffectIds = function (eyeBlinkParameterIds, lipSyncParameterIds) {
        this._eyeBlinkParameterIds = eyeBlinkParameterIds;
        this._lipSyncParameterIds = lipSyncParameterIds;
    };
    CubismMotion.prototype.release = function () {
        this._motionData = void 0;
        this._motionData = null;
    };
    CubismMotion.prototype.parse = function (motionJson, size) {
        this._motionData = new cubismmotioninternal_1.CubismMotionData();
        var json = new cubismmotionjson_1.CubismMotionJson(motionJson, size);
        this._motionData.duration = json.getMotionDuration();
        this._motionData.loop = json.isMotionLoop();
        this._motionData.curveCount = json.getMotionCurveCount();
        this._motionData.fps = json.getMotionFps();
        this._motionData.eventCount = json.getEventCount();
        var areBeziersRestructed = json.getEvaluationOptionFlag(cubismmotionjson_1.EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted);
        if (json.isExistMotionFadeInTime()) {
            this._fadeInSeconds =
                json.getMotionFadeInTime() < 0.0 ? 1.0 : json.getMotionFadeInTime();
        }
        else {
            this._fadeInSeconds = 1.0;
        }
        if (json.isExistMotionFadeOutTime()) {
            this._fadeOutSeconds =
                json.getMotionFadeOutTime() < 0.0 ? 1.0 : json.getMotionFadeOutTime();
        }
        else {
            this._fadeOutSeconds = 1.0;
        }
        this._motionData.curves.updateSize(this._motionData.curveCount, cubismmotioninternal_1.CubismMotionCurve, true);
        this._motionData.segments.updateSize(json.getMotionTotalSegmentCount(), cubismmotioninternal_1.CubismMotionSegment, true);
        this._motionData.points.updateSize(json.getMotionTotalPointCount(), cubismmotioninternal_1.CubismMotionPoint, true);
        this._motionData.events.updateSize(this._motionData.eventCount, cubismmotioninternal_1.CubismMotionEvent, true);
        var totalPointCount = 0;
        var totalSegmentCount = 0;
        for (var curveCount = 0; curveCount < this._motionData.curveCount; ++curveCount) {
            if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {
                this._motionData.curves.at(curveCount).type =
                    cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Model;
            }
            else if (json.getMotionCurveTarget(curveCount) == TargetNameParameter) {
                this._motionData.curves.at(curveCount).type =
                    cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;
            }
            else if (json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity) {
                this._motionData.curves.at(curveCount).type =
                    cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;
            }
            else {
                (0, cubismdebug_1.CubismLogWarning)('Warning : Unable to get segment type from Curve! The number of "CurveCount" may be incorrect!');
            }
            this._motionData.curves.at(curveCount).id =
                json.getMotionCurveId(curveCount);
            this._motionData.curves.at(curveCount).baseSegmentIndex =
                totalSegmentCount;
            this._motionData.curves.at(curveCount).fadeInTime =
                json.isExistMotionCurveFadeInTime(curveCount)
                    ? json.getMotionCurveFadeInTime(curveCount)
                    : -1.0;
            this._motionData.curves.at(curveCount).fadeOutTime =
                json.isExistMotionCurveFadeOutTime(curveCount)
                    ? json.getMotionCurveFadeOutTime(curveCount)
                    : -1.0;
            for (var segmentPosition = 0; segmentPosition < json.getMotionCurveSegmentCount(curveCount);) {
                if (segmentPosition == 0) {
                    this._motionData.segments.at(totalSegmentCount).basePointIndex =
                        totalPointCount;
                    this._motionData.points.at(totalPointCount).time =
                        json.getMotionCurveSegment(curveCount, segmentPosition);
                    this._motionData.points.at(totalPointCount).value =
                        json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                    totalPointCount += 1;
                    segmentPosition += 2;
                }
                else {
                    this._motionData.segments.at(totalSegmentCount).basePointIndex =
                        totalPointCount - 1;
                }
                var segment = json.getMotionCurveSegment(curveCount, segmentPosition);
                switch (segment) {
                    case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Linear: {
                        this._motionData.segments.at(totalSegmentCount).segmentType =
                            cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Linear;
                        this._motionData.segments.at(totalSegmentCount).evaluate =
                            linearEvaluate;
                        this._motionData.points.at(totalPointCount).time =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                        this._motionData.points.at(totalPointCount).value =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                        totalPointCount += 1;
                        segmentPosition += 3;
                        break;
                    }
                    case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {
                        this._motionData.segments.at(totalSegmentCount).segmentType =
                            cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Bezier;
                        if (areBeziersRestructed || UseOldBeziersCurveMotion) {
                            this._motionData.segments.at(totalSegmentCount).evaluate =
                                bezierEvaluate;
                        }
                        else {
                            this._motionData.segments.at(totalSegmentCount).evaluate =
                                bezierEvaluateCardanoInterpretation;
                        }
                        this._motionData.points.at(totalPointCount).time =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                        this._motionData.points.at(totalPointCount).value =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                        this._motionData.points.at(totalPointCount + 1).time =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 3);
                        this._motionData.points.at(totalPointCount + 1).value =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 4);
                        this._motionData.points.at(totalPointCount + 2).time =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 5);
                        this._motionData.points.at(totalPointCount + 2).value =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 6);
                        totalPointCount += 3;
                        segmentPosition += 7;
                        break;
                    }
                    case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {
                        this._motionData.segments.at(totalSegmentCount).segmentType =
                            cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_Stepped;
                        this._motionData.segments.at(totalSegmentCount).evaluate =
                            steppedEvaluate;
                        this._motionData.points.at(totalPointCount).time =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                        this._motionData.points.at(totalPointCount).value =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                        totalPointCount += 1;
                        segmentPosition += 3;
                        break;
                    }
                    case cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {
                        this._motionData.segments.at(totalSegmentCount).segmentType =
                            cubismmotioninternal_1.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;
                        this._motionData.segments.at(totalSegmentCount).evaluate =
                            inverseSteppedEvaluate;
                        this._motionData.points.at(totalPointCount).time =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 1);
                        this._motionData.points.at(totalPointCount).value =
                            json.getMotionCurveSegment(curveCount, segmentPosition + 2);
                        totalPointCount += 1;
                        segmentPosition += 3;
                        break;
                    }
                    default: {
                        (0, cubismdebug_1.CSM_ASSERT)(0);
                        break;
                    }
                }
                ++this._motionData.curves.at(curveCount).segmentCount;
                ++totalSegmentCount;
            }
        }
        for (var userdatacount = 0; userdatacount < json.getEventCount(); ++userdatacount) {
            this._motionData.events.at(userdatacount).fireTime =
                json.getEventTime(userdatacount);
            this._motionData.events.at(userdatacount).value =
                json.getEventValue(userdatacount);
        }
        json.release();
        json = void 0;
        json = null;
    };
    CubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {
        this._firedEventValues.updateSize(0);
        for (var u = 0; u < this._motionData.eventCount; ++u) {
            if (this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds &&
                this._motionData.events.at(u).fireTime <= motionTimeSeconds) {
                this._firedEventValues.pushBack(new csmstring_1.csmString(this._motionData.events.at(u).value.s));
            }
        }
        return this._firedEventValues;
    };
    CubismMotion.prototype.isExistModelOpacity = function () {
        for (var i = 0; i < this._motionData.curveCount; i++) {
            var curve = this._motionData.curves.at(i);
            if (curve.type != cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Model) {
                continue;
            }
            if (curve.id.getString().s.localeCompare(IdNameOpacity) == 0) {
                return true;
            }
        }
        return false;
    };
    CubismMotion.prototype.getModelOpacityIndex = function () {
        if (this.isExistModelOpacity()) {
            for (var i = 0; i < this._motionData.curveCount; i++) {
                var curve = this._motionData.curves.at(i);
                if (curve.type != cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Model) {
                    continue;
                }
                if (curve.id.getString().s.localeCompare(IdNameOpacity) == 0) {
                    return i;
                }
            }
        }
        return -1;
    };
    CubismMotion.prototype.getModelOpacityId = function (index) {
        if (index != -1) {
            var curve = this._motionData.curves.at(index);
            if (curve.type == cubismmotioninternal_1.CubismMotionCurveTarget.CubismMotionCurveTarget_Model) {
                if (curve.id.getString().s.localeCompare(IdNameOpacity) == 0) {
                    return live2dcubismframework_1.CubismFramework.getIdManager().getId(curve.id.getString().s);
                }
            }
        }
        return null;
    };
    CubismMotion.prototype.getModelOpacityValue = function () {
        return this._modelOpacity;
    };
    return CubismMotion;
}(acubismmotion_1.ACubismMotion));
exports.CubismMotion = CubismMotion;
var $ = __importStar(__webpack_require__(/*! ./cubismmotion */ "../../../Framework/src/motion/cubismmotion.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMotion = $.CubismMotion;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/motion/cubismmotioninternal.ts":
/*!*************************************************************!*\
  !*** ../../../Framework/src/motion/cubismmotioninternal.ts ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMotionData = exports.CubismMotionEvent = exports.CubismMotionCurve = exports.CubismMotionSegment = exports.CubismMotionPoint = exports.CubismMotionSegmentType = exports.CubismMotionCurveTarget = void 0;
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var CubismMotionCurveTarget;
(function (CubismMotionCurveTarget) {
    CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_Model"] = 0] = "CubismMotionCurveTarget_Model";
    CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_Parameter"] = 1] = "CubismMotionCurveTarget_Parameter";
    CubismMotionCurveTarget[CubismMotionCurveTarget["CubismMotionCurveTarget_PartOpacity"] = 2] = "CubismMotionCurveTarget_PartOpacity";
})(CubismMotionCurveTarget = exports.CubismMotionCurveTarget || (exports.CubismMotionCurveTarget = {}));
var CubismMotionSegmentType;
(function (CubismMotionSegmentType) {
    CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Linear"] = 0] = "CubismMotionSegmentType_Linear";
    CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Bezier"] = 1] = "CubismMotionSegmentType_Bezier";
    CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_Stepped"] = 2] = "CubismMotionSegmentType_Stepped";
    CubismMotionSegmentType[CubismMotionSegmentType["CubismMotionSegmentType_InverseStepped"] = 3] = "CubismMotionSegmentType_InverseStepped";
})(CubismMotionSegmentType = exports.CubismMotionSegmentType || (exports.CubismMotionSegmentType = {}));
var CubismMotionPoint = (function () {
    function CubismMotionPoint() {
        this.time = 0.0;
        this.value = 0.0;
    }
    return CubismMotionPoint;
}());
exports.CubismMotionPoint = CubismMotionPoint;
var CubismMotionSegment = (function () {
    function CubismMotionSegment() {
        this.evaluate = null;
        this.basePointIndex = 0;
        this.segmentType = 0;
    }
    return CubismMotionSegment;
}());
exports.CubismMotionSegment = CubismMotionSegment;
var CubismMotionCurve = (function () {
    function CubismMotionCurve() {
        this.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;
        this.segmentCount = 0;
        this.baseSegmentIndex = 0;
        this.fadeInTime = 0.0;
        this.fadeOutTime = 0.0;
    }
    return CubismMotionCurve;
}());
exports.CubismMotionCurve = CubismMotionCurve;
var CubismMotionEvent = (function () {
    function CubismMotionEvent() {
        this.fireTime = 0.0;
    }
    return CubismMotionEvent;
}());
exports.CubismMotionEvent = CubismMotionEvent;
var CubismMotionData = (function () {
    function CubismMotionData() {
        this.duration = 0.0;
        this.loop = false;
        this.curveCount = 0;
        this.eventCount = 0;
        this.fps = 0.0;
        this.curves = new csmvector_1.csmVector();
        this.segments = new csmvector_1.csmVector();
        this.points = new csmvector_1.csmVector();
        this.events = new csmvector_1.csmVector();
    }
    return CubismMotionData;
}());
exports.CubismMotionData = CubismMotionData;
var $ = __importStar(__webpack_require__(/*! ./cubismmotioninternal */ "../../../Framework/src/motion/cubismmotioninternal.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMotionCurve = $.CubismMotionCurve;
    Live2DCubismFramework.CubismMotionCurveTarget = $.CubismMotionCurveTarget;
    Live2DCubismFramework.CubismMotionData = $.CubismMotionData;
    Live2DCubismFramework.CubismMotionEvent = $.CubismMotionEvent;
    Live2DCubismFramework.CubismMotionPoint = $.CubismMotionPoint;
    Live2DCubismFramework.CubismMotionSegment = $.CubismMotionSegment;
    Live2DCubismFramework.CubismMotionSegmentType = $.CubismMotionSegmentType;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/motion/cubismmotionjson.ts":
/*!*********************************************************!*\
  !*** ../../../Framework/src/motion/cubismmotionjson.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.EvaluationOptionFlag = exports.CubismMotionJson = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "../../../Framework/src/type/csmstring.ts");
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
var Meta = 'Meta';
var Duration = 'Duration';
var Loop = 'Loop';
var AreBeziersRestricted = 'AreBeziersRestricted';
var CurveCount = 'CurveCount';
var Fps = 'Fps';
var TotalSegmentCount = 'TotalSegmentCount';
var TotalPointCount = 'TotalPointCount';
var Curves = 'Curves';
var Target = 'Target';
var Id = 'Id';
var FadeInTime = 'FadeInTime';
var FadeOutTime = 'FadeOutTime';
var Segments = 'Segments';
var UserData = 'UserData';
var UserDataCount = 'UserDataCount';
var TotalUserDataSize = 'TotalUserDataSize';
var Time = 'Time';
var Value = 'Value';
var CubismMotionJson = (function () {
    function CubismMotionJson(buffer, size) {
        this._json = cubismjson_1.CubismJson.create(buffer, size);
    }
    CubismMotionJson.prototype.release = function () {
        cubismjson_1.CubismJson.delete(this._json);
    };
    CubismMotionJson.prototype.getMotionDuration = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(Duration)
            .toFloat();
    };
    CubismMotionJson.prototype.isMotionLoop = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(Loop)
            .toBoolean();
    };
    CubismMotionJson.prototype.getEvaluationOptionFlag = function (flagType) {
        if (EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted == flagType) {
            return this._json
                .getRoot()
                .getValueByString(Meta)
                .getValueByString(AreBeziersRestricted)
                .toBoolean();
        }
        return false;
    };
    CubismMotionJson.prototype.getMotionCurveCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(CurveCount)
            .toInt();
    };
    CubismMotionJson.prototype.getMotionFps = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(Fps)
            .toFloat();
    };
    CubismMotionJson.prototype.getMotionTotalSegmentCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(TotalSegmentCount)
            .toInt();
    };
    CubismMotionJson.prototype.getMotionTotalPointCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(TotalPointCount)
            .toInt();
    };
    CubismMotionJson.prototype.isExistMotionFadeInTime = function () {
        return !this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(FadeInTime)
            .isNull();
    };
    CubismMotionJson.prototype.isExistMotionFadeOutTime = function () {
        return !this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(FadeOutTime)
            .isNull();
    };
    CubismMotionJson.prototype.getMotionFadeInTime = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(FadeInTime)
            .toFloat();
    };
    CubismMotionJson.prototype.getMotionFadeOutTime = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(FadeOutTime)
            .toFloat();
    };
    CubismMotionJson.prototype.getMotionCurveTarget = function (curveIndex) {
        return this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(Target)
            .getRawString();
    };
    CubismMotionJson.prototype.getMotionCurveId = function (curveIndex) {
        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(Id)
            .getRawString());
    };
    CubismMotionJson.prototype.isExistMotionCurveFadeInTime = function (curveIndex) {
        return !this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(FadeInTime)
            .isNull();
    };
    CubismMotionJson.prototype.isExistMotionCurveFadeOutTime = function (curveIndex) {
        return !this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(FadeOutTime)
            .isNull();
    };
    CubismMotionJson.prototype.getMotionCurveFadeInTime = function (curveIndex) {
        return this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(FadeInTime)
            .toFloat();
    };
    CubismMotionJson.prototype.getMotionCurveFadeOutTime = function (curveIndex) {
        return this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(FadeOutTime)
            .toFloat();
    };
    CubismMotionJson.prototype.getMotionCurveSegmentCount = function (curveIndex) {
        return this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(Segments)
            .getVector()
            .getSize();
    };
    CubismMotionJson.prototype.getMotionCurveSegment = function (curveIndex, segmentIndex) {
        return this._json
            .getRoot()
            .getValueByString(Curves)
            .getValueByIndex(curveIndex)
            .getValueByString(Segments)
            .getValueByIndex(segmentIndex)
            .toFloat();
    };
    CubismMotionJson.prototype.getEventCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(UserDataCount)
            .toInt();
    };
    CubismMotionJson.prototype.getTotalEventValueSize = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(TotalUserDataSize)
            .toInt();
    };
    CubismMotionJson.prototype.getEventTime = function (userDataIndex) {
        return this._json
            .getRoot()
            .getValueByString(UserData)
            .getValueByIndex(userDataIndex)
            .getValueByString(Time)
            .toFloat();
    };
    CubismMotionJson.prototype.getEventValue = function (userDataIndex) {
        return new csmstring_1.csmString(this._json
            .getRoot()
            .getValueByString(UserData)
            .getValueByIndex(userDataIndex)
            .getValueByString(Value)
            .getRawString());
    };
    return CubismMotionJson;
}());
exports.CubismMotionJson = CubismMotionJson;
var EvaluationOptionFlag;
(function (EvaluationOptionFlag) {
    EvaluationOptionFlag[EvaluationOptionFlag["EvaluationOptionFlag_AreBeziersRistricted"] = 0] = "EvaluationOptionFlag_AreBeziersRistricted";
})(EvaluationOptionFlag = exports.EvaluationOptionFlag || (exports.EvaluationOptionFlag = {}));
var $ = __importStar(__webpack_require__(/*! ./cubismmotionjson */ "../../../Framework/src/motion/cubismmotionjson.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMotionJson = $.CubismMotionJson;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/motion/cubismmotionmanager.ts":
/*!************************************************************!*\
  !*** ../../../Framework/src/motion/cubismmotionmanager.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMotionManager = void 0;
var cubismmotionqueuemanager_1 = __webpack_require__(/*! ./cubismmotionqueuemanager */ "../../../Framework/src/motion/cubismmotionqueuemanager.ts");
var CubismMotionManager = (function (_super) {
    __extends(CubismMotionManager, _super);
    function CubismMotionManager() {
        var _this = _super.call(this) || this;
        _this._currentPriority = 0;
        _this._reservePriority = 0;
        return _this;
    }
    CubismMotionManager.prototype.getCurrentPriority = function () {
        return this._currentPriority;
    };
    CubismMotionManager.prototype.getReservePriority = function () {
        return this._reservePriority;
    };
    CubismMotionManager.prototype.setReservePriority = function (val) {
        this._reservePriority = val;
    };
    CubismMotionManager.prototype.startMotionPriority = function (motion, autoDelete, priority) {
        if (priority == this._reservePriority) {
            this._reservePriority = 0;
        }
        this._currentPriority = priority;
        return _super.prototype.startMotion.call(this, motion, autoDelete, this._userTimeSeconds);
    };
    CubismMotionManager.prototype.updateMotion = function (model, deltaTimeSeconds) {
        this._userTimeSeconds += deltaTimeSeconds;
        var updated = _super.prototype.doUpdateMotion.call(this, model, this._userTimeSeconds);
        if (this.isFinished()) {
            this._currentPriority = 0;
        }
        return updated;
    };
    CubismMotionManager.prototype.reserveMotion = function (priority) {
        if (priority <= this._reservePriority ||
            priority <= this._currentPriority) {
            return false;
        }
        this._reservePriority = priority;
        return true;
    };
    return CubismMotionManager;
}(cubismmotionqueuemanager_1.CubismMotionQueueManager));
exports.CubismMotionManager = CubismMotionManager;
var $ = __importStar(__webpack_require__(/*! ./cubismmotionmanager */ "../../../Framework/src/motion/cubismmotionmanager.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMotionManager = $.CubismMotionManager;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/motion/cubismmotionqueueentry.ts":
/*!***************************************************************!*\
  !*** ../../../Framework/src/motion/cubismmotionqueueentry.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismMotionQueueEntry = void 0;
var acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ "../../../Framework/src/motion/acubismmotion.ts");
var CubismMotionQueueEntry = (function () {
    function CubismMotionQueueEntry() {
        this._autoDelete = false;
        this._motion = null;
        this._available = true;
        this._finished = false;
        this._started = false;
        this._startTimeSeconds = -1.0;
        this._fadeInStartTimeSeconds = 0.0;
        this._endTimeSeconds = -1.0;
        this._stateTimeSeconds = 0.0;
        this._stateWeight = 0.0;
        this._lastEventCheckSeconds = 0.0;
        this._motionQueueEntryHandle = this;
        this._fadeOutSeconds = 0.0;
        this._isTriggeredFadeOut = false;
    }
    CubismMotionQueueEntry.prototype.release = function () {
        if (this._autoDelete && this._motion) {
            acubismmotion_1.ACubismMotion.delete(this._motion);
        }
    };
    CubismMotionQueueEntry.prototype.setFadeOut = function (fadeOutSeconds) {
        this._fadeOutSeconds = fadeOutSeconds;
        this._isTriggeredFadeOut = true;
    };
    CubismMotionQueueEntry.prototype.startFadeOut = function (fadeOutSeconds, userTimeSeconds) {
        var newEndTimeSeconds = userTimeSeconds + fadeOutSeconds;
        this._isTriggeredFadeOut = true;
        if (this._endTimeSeconds < 0.0 ||
            newEndTimeSeconds < this._endTimeSeconds) {
            this._endTimeSeconds = newEndTimeSeconds;
        }
    };
    CubismMotionQueueEntry.prototype.isFinished = function () {
        return this._finished;
    };
    CubismMotionQueueEntry.prototype.isStarted = function () {
        return this._started;
    };
    CubismMotionQueueEntry.prototype.getStartTime = function () {
        return this._startTimeSeconds;
    };
    CubismMotionQueueEntry.prototype.getFadeInStartTime = function () {
        return this._fadeInStartTimeSeconds;
    };
    CubismMotionQueueEntry.prototype.getEndTime = function () {
        return this._endTimeSeconds;
    };
    CubismMotionQueueEntry.prototype.setStartTime = function (startTime) {
        this._startTimeSeconds = startTime;
    };
    CubismMotionQueueEntry.prototype.setFadeInStartTime = function (startTime) {
        this._fadeInStartTimeSeconds = startTime;
    };
    CubismMotionQueueEntry.prototype.setEndTime = function (endTime) {
        this._endTimeSeconds = endTime;
    };
    CubismMotionQueueEntry.prototype.setIsFinished = function (f) {
        this._finished = f;
    };
    CubismMotionQueueEntry.prototype.setIsStarted = function (f) {
        this._started = f;
    };
    CubismMotionQueueEntry.prototype.isAvailable = function () {
        return this._available;
    };
    CubismMotionQueueEntry.prototype.setIsAvailable = function (v) {
        this._available = v;
    };
    CubismMotionQueueEntry.prototype.setState = function (timeSeconds, weight) {
        this._stateTimeSeconds = timeSeconds;
        this._stateWeight = weight;
    };
    CubismMotionQueueEntry.prototype.getStateTime = function () {
        return this._stateTimeSeconds;
    };
    CubismMotionQueueEntry.prototype.getStateWeight = function () {
        return this._stateWeight;
    };
    CubismMotionQueueEntry.prototype.getLastCheckEventSeconds = function () {
        return this._lastEventCheckSeconds;
    };
    CubismMotionQueueEntry.prototype.setLastCheckEventSeconds = function (checkSeconds) {
        this._lastEventCheckSeconds = checkSeconds;
    };
    CubismMotionQueueEntry.prototype.isTriggeredFadeOut = function () {
        return this._isTriggeredFadeOut;
    };
    CubismMotionQueueEntry.prototype.getFadeOutSeconds = function () {
        return this._fadeOutSeconds;
    };
    return CubismMotionQueueEntry;
}());
exports.CubismMotionQueueEntry = CubismMotionQueueEntry;
var $ = __importStar(__webpack_require__(/*! ./cubismmotionqueueentry */ "../../../Framework/src/motion/cubismmotionqueueentry.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMotionQueueEntry = $.CubismMotionQueueEntry;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/motion/cubismmotionqueuemanager.ts":
/*!*****************************************************************!*\
  !*** ../../../Framework/src/motion/cubismmotionqueuemanager.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.InvalidMotionQueueEntryHandleValue = exports.CubismMotionQueueManager = void 0;
var cubismmotionqueueentry_1 = __webpack_require__(/*! ./cubismmotionqueueentry */ "../../../Framework/src/motion/cubismmotionqueueentry.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var CubismMotionQueueManager = (function () {
    function CubismMotionQueueManager() {
        this._userTimeSeconds = 0.0;
        this._eventCallBack = null;
        this._eventCustomData = null;
        this._motions = new csmvector_1.csmVector();
    }
    CubismMotionQueueManager.prototype.release = function () {
        for (var i = 0; i < this._motions.getSize(); ++i) {
            if (this._motions.at(i)) {
                this._motions.at(i).release();
                this._motions.set(i, null);
            }
        }
        this._motions = null;
    };
    CubismMotionQueueManager.prototype.startMotion = function (motion, autoDelete, userTimeSeconds) {
        if (motion == null) {
            return exports.InvalidMotionQueueEntryHandleValue;
        }
        var motionQueueEntry = null;
        for (var i = 0; i < this._motions.getSize(); ++i) {
            motionQueueEntry = this._motions.at(i);
            if (motionQueueEntry == null) {
                continue;
            }
            motionQueueEntry.setFadeOut(motionQueueEntry._motion.getFadeOutTime());
        }
        motionQueueEntry = new cubismmotionqueueentry_1.CubismMotionQueueEntry();
        motionQueueEntry._autoDelete = autoDelete;
        motionQueueEntry._motion = motion;
        this._motions.pushBack(motionQueueEntry);
        return motionQueueEntry._motionQueueEntryHandle;
    };
    CubismMotionQueueManager.prototype.isFinished = function () {
        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
            var motionQueueEntry = ite.ptr();
            if (motionQueueEntry == null) {
                ite = this._motions.erase(ite);
                continue;
            }
            var motion = motionQueueEntry._motion;
            if (motion == null) {
                motionQueueEntry.release();
                motionQueueEntry = null;
                ite = this._motions.erase(ite);
                continue;
            }
            if (!motionQueueEntry.isFinished()) {
                return false;
            }
            else {
                ite.preIncrement();
            }
        }
        return true;
    };
    CubismMotionQueueManager.prototype.isFinishedByHandle = function (motionQueueEntryNumber) {
        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.increment()) {
            var motionQueueEntry = ite.ptr();
            if (motionQueueEntry == null) {
                continue;
            }
            if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber &&
                !motionQueueEntry.isFinished()) {
                return false;
            }
        }
        return true;
    };
    CubismMotionQueueManager.prototype.stopAllMotions = function () {
        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
            var motionQueueEntry = ite.ptr();
            if (motionQueueEntry == null) {
                ite = this._motions.erase(ite);
                continue;
            }
            motionQueueEntry.release();
            motionQueueEntry = null;
            ite = this._motions.erase(ite);
        }
    };
    CubismMotionQueueManager.prototype.getCubismMotionQueueEntry = function (motionQueueEntryNumber) {
        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.preIncrement()) {
            var motionQueueEntry = ite.ptr();
            if (motionQueueEntry == null) {
                continue;
            }
            if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber) {
                return motionQueueEntry;
            }
        }
        return null;
    };
    CubismMotionQueueManager.prototype.setEventCallback = function (callback, customData) {
        if (customData === void 0) { customData = null; }
        this._eventCallBack = callback;
        this._eventCustomData = customData;
    };
    CubismMotionQueueManager.prototype.doUpdateMotion = function (model, userTimeSeconds) {
        var updated = false;
        for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {
            var motionQueueEntry = ite.ptr();
            if (motionQueueEntry == null) {
                ite = this._motions.erase(ite);
                continue;
            }
            var motion = motionQueueEntry._motion;
            if (motion == null) {
                motionQueueEntry.release();
                motionQueueEntry = null;
                ite = this._motions.erase(ite);
                continue;
            }
            motion.updateParameters(model, motionQueueEntry, userTimeSeconds);
            updated = true;
            var firedList = motion.getFiredEvent(motionQueueEntry.getLastCheckEventSeconds() -
                motionQueueEntry.getStartTime(), userTimeSeconds - motionQueueEntry.getStartTime());
            for (var i = 0; i < firedList.getSize(); ++i) {
                this._eventCallBack(this, firedList.at(i), this._eventCustomData);
            }
            motionQueueEntry.setLastCheckEventSeconds(userTimeSeconds);
            if (motionQueueEntry.isFinished()) {
                motionQueueEntry.release();
                motionQueueEntry = null;
                ite = this._motions.erase(ite);
            }
            else {
                if (motionQueueEntry.isTriggeredFadeOut()) {
                    motionQueueEntry.startFadeOut(motionQueueEntry.getFadeOutSeconds(), userTimeSeconds);
                }
                ite.preIncrement();
            }
        }
        return updated;
    };
    return CubismMotionQueueManager;
}());
exports.CubismMotionQueueManager = CubismMotionQueueManager;
exports.InvalidMotionQueueEntryHandleValue = -1;
var $ = __importStar(__webpack_require__(/*! ./cubismmotionqueuemanager */ "../../../Framework/src/motion/cubismmotionqueuemanager.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismMotionQueueManager = $.CubismMotionQueueManager;
    Live2DCubismFramework.InvalidMotionQueueEntryHandleValue = $.InvalidMotionQueueEntryHandleValue;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/physics/cubismphysics.ts":
/*!*******************************************************!*\
  !*** ../../../Framework/src/physics/cubismphysics.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.PhysicsOutput = exports.Options = exports.CubismPhysics = void 0;
var cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ "../../../Framework/src/math/cubismmath.ts");
var cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ "../../../Framework/src/math/cubismvector2.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var cubismphysicsinternal_1 = __webpack_require__(/*! ./cubismphysicsinternal */ "../../../Framework/src/physics/cubismphysicsinternal.ts");
var cubismphysicsjson_1 = __webpack_require__(/*! ./cubismphysicsjson */ "../../../Framework/src/physics/cubismphysicsjson.ts");
var PhysicsTypeTagX = 'X';
var PhysicsTypeTagY = 'Y';
var PhysicsTypeTagAngle = 'Angle';
var AirResistance = 5.0;
var MaximumWeight = 100.0;
var MovementThreshold = 0.001;
var MaxDeltaTime = 5.0;
var CubismPhysics = (function () {
    function CubismPhysics() {
        this._physicsRig = null;
        this._options = new Options();
        this._options.gravity.y = -1.0;
        this._options.gravity.x = 0.0;
        this._options.wind.x = 0.0;
        this._options.wind.y = 0.0;
        this._currentRigOutputs = new csmvector_1.csmVector();
        this._previousRigOutputs = new csmvector_1.csmVector();
        this._currentRemainTime = 0.0;
        this._parameterCaches = null;
        this._parameterInputCaches = null;
    }
    CubismPhysics.create = function (buffer, size) {
        var ret = new CubismPhysics();
        ret.parse(buffer, size);
        ret._physicsRig.gravity.y = 0;
        return ret;
    };
    CubismPhysics.delete = function (physics) {
        if (physics != null) {
            physics.release();
            physics = null;
        }
    };
    CubismPhysics.prototype.parse = function (physicsJson, size) {
        this._physicsRig = new cubismphysicsinternal_1.CubismPhysicsRig();
        var json = new cubismphysicsjson_1.CubismPhysicsJson(physicsJson, size);
        this._physicsRig.gravity = json.getGravity();
        this._physicsRig.wind = json.getWind();
        this._physicsRig.subRigCount = json.getSubRigCount();
        this._physicsRig.fps = json.getFps();
        this._physicsRig.settings.updateSize(this._physicsRig.subRigCount, cubismphysicsinternal_1.CubismPhysicsSubRig, true);
        this._physicsRig.inputs.updateSize(json.getTotalInputCount(), cubismphysicsinternal_1.CubismPhysicsInput, true);
        this._physicsRig.outputs.updateSize(json.getTotalOutputCount(), cubismphysicsinternal_1.CubismPhysicsOutput, true);
        this._physicsRig.particles.updateSize(json.getVertexCount(), cubismphysicsinternal_1.CubismPhysicsParticle, true);
        this._currentRigOutputs.clear();
        this._previousRigOutputs.clear();
        var inputIndex = 0, outputIndex = 0, particleIndex = 0;
        for (var i = 0; i < this._physicsRig.settings.getSize(); ++i) {
            this._physicsRig.settings.at(i).normalizationPosition.minimum =
                json.getNormalizationPositionMinimumValue(i);
            this._physicsRig.settings.at(i).normalizationPosition.maximum =
                json.getNormalizationPositionMaximumValue(i);
            this._physicsRig.settings.at(i).normalizationPosition.defalut =
                json.getNormalizationPositionDefaultValue(i);
            this._physicsRig.settings.at(i).normalizationAngle.minimum =
                json.getNormalizationAngleMinimumValue(i);
            this._physicsRig.settings.at(i).normalizationAngle.maximum =
                json.getNormalizationAngleMaximumValue(i);
            this._physicsRig.settings.at(i).normalizationAngle.defalut =
                json.getNormalizationAngleDefaultValue(i);
            this._physicsRig.settings.at(i).inputCount = json.getInputCount(i);
            this._physicsRig.settings.at(i).baseInputIndex = inputIndex;
            for (var j = 0; j < this._physicsRig.settings.at(i).inputCount; ++j) {
                this._physicsRig.inputs.at(inputIndex + j).sourceParameterIndex = -1;
                this._physicsRig.inputs.at(inputIndex + j).weight = json.getInputWeight(i, j);
                this._physicsRig.inputs.at(inputIndex + j).reflect =
                    json.getInputReflect(i, j);
                if (json.getInputType(i, j) == PhysicsTypeTagX) {
                    this._physicsRig.inputs.at(inputIndex + j).type =
                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_X;
                    this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue =
                        getInputTranslationXFromNormalizedParameterValue;
                }
                else if (json.getInputType(i, j) == PhysicsTypeTagY) {
                    this._physicsRig.inputs.at(inputIndex + j).type =
                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Y;
                    this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue =
                        getInputTranslationYFromNormalizedParamterValue;
                }
                else if (json.getInputType(i, j) == PhysicsTypeTagAngle) {
                    this._physicsRig.inputs.at(inputIndex + j).type =
                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Angle;
                    this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue =
                        getInputAngleFromNormalizedParameterValue;
                }
                this._physicsRig.inputs.at(inputIndex + j).source.targetType =
                    cubismphysicsinternal_1.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;
                this._physicsRig.inputs.at(inputIndex + j).source.id =
                    json.getInputSourceId(i, j);
            }
            inputIndex += this._physicsRig.settings.at(i).inputCount;
            this._physicsRig.settings.at(i).outputCount = json.getOutputCount(i);
            this._physicsRig.settings.at(i).baseOutputIndex = outputIndex;
            var currentRigOutput = new PhysicsOutput();
            currentRigOutput.outputs.resize(this._physicsRig.settings.at(i).outputCount);
            var previousRigOutput = new PhysicsOutput();
            previousRigOutput.outputs.resize(this._physicsRig.settings.at(i).outputCount);
            for (var j = 0; j < this._physicsRig.settings.at(i).outputCount; ++j) {
                currentRigOutput.outputs.set(j, 0.0);
                previousRigOutput.outputs.set(j, 0.0);
                this._physicsRig.outputs.at(outputIndex + j).destinationParameterIndex =
                    -1;
                this._physicsRig.outputs.at(outputIndex + j).vertexIndex =
                    json.getOutputVertexIndex(i, j);
                this._physicsRig.outputs.at(outputIndex + j).angleScale =
                    json.getOutputAngleScale(i, j);
                this._physicsRig.outputs.at(outputIndex + j).weight =
                    json.getOutputWeight(i, j);
                this._physicsRig.outputs.at(outputIndex + j).destination.targetType =
                    cubismphysicsinternal_1.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;
                this._physicsRig.outputs.at(outputIndex + j).destination.id =
                    json.getOutputDestinationId(i, j);
                if (json.getOutputType(i, j) == PhysicsTypeTagX) {
                    this._physicsRig.outputs.at(outputIndex + j).type =
                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_X;
                    this._physicsRig.outputs.at(outputIndex + j).getValue =
                        getOutputTranslationX;
                    this._physicsRig.outputs.at(outputIndex + j).getScale =
                        getOutputScaleTranslationX;
                }
                else if (json.getOutputType(i, j) == PhysicsTypeTagY) {
                    this._physicsRig.outputs.at(outputIndex + j).type =
                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Y;
                    this._physicsRig.outputs.at(outputIndex + j).getValue =
                        getOutputTranslationY;
                    this._physicsRig.outputs.at(outputIndex + j).getScale =
                        getOutputScaleTranslationY;
                }
                else if (json.getOutputType(i, j) == PhysicsTypeTagAngle) {
                    this._physicsRig.outputs.at(outputIndex + j).type =
                        cubismphysicsinternal_1.CubismPhysicsSource.CubismPhysicsSource_Angle;
                    this._physicsRig.outputs.at(outputIndex + j).getValue =
                        getOutputAngle;
                    this._physicsRig.outputs.at(outputIndex + j).getScale =
                        getOutputScaleAngle;
                }
                this._physicsRig.outputs.at(outputIndex + j).reflect =
                    json.getOutputReflect(i, j);
            }
            this._currentRigOutputs.pushBack(currentRigOutput);
            this._previousRigOutputs.pushBack(previousRigOutput);
            outputIndex += this._physicsRig.settings.at(i).outputCount;
            this._physicsRig.settings.at(i).particleCount = json.getParticleCount(i);
            this._physicsRig.settings.at(i).baseParticleIndex = particleIndex;
            for (var j = 0; j < this._physicsRig.settings.at(i).particleCount; ++j) {
                this._physicsRig.particles.at(particleIndex + j).mobility =
                    json.getParticleMobility(i, j);
                this._physicsRig.particles.at(particleIndex + j).delay =
                    json.getParticleDelay(i, j);
                this._physicsRig.particles.at(particleIndex + j).acceleration =
                    json.getParticleAcceleration(i, j);
                this._physicsRig.particles.at(particleIndex + j).radius =
                    json.getParticleRadius(i, j);
                this._physicsRig.particles.at(particleIndex + j).position =
                    json.getParticlePosition(i, j);
            }
            particleIndex += this._physicsRig.settings.at(i).particleCount;
        }
        this.initialize();
        json.release();
        json = void 0;
        json = null;
    };
    CubismPhysics.prototype.stabilization = function (model) {
        var _a, _b, _c, _d;
        var totalAngle;
        var weight;
        var radAngle;
        var outputValue;
        var totalTranslation = new cubismvector2_1.CubismVector2();
        var currentSetting;
        var currentInputs;
        var currentOutputs;
        var currentParticles;
        var parameterValues;
        var parameterMaximumValues;
        var parameterMinimumValues;
        var parameterDefaultValues;
        parameterValues = model.getModel().parameters.values;
        parameterMaximumValues = model.getModel().parameters.maximumValues;
        parameterMinimumValues = model.getModel().parameters.minimumValues;
        parameterDefaultValues = model.getModel().parameters.defaultValues;
        if (((_b = (_a = this._parameterCaches) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) < model.getParameterCount()) {
            this._parameterCaches = new Float32Array(model.getParameterCount());
        }
        if (((_d = (_c = this._parameterInputCaches) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) < model.getParameterCount()) {
            this._parameterInputCaches = new Float32Array(model.getParameterCount());
        }
        for (var j = 0; j < model.getParameterCount(); ++j) {
            this._parameterCaches[j] = parameterValues[j];
            this._parameterInputCaches[j] = parameterValues[j];
        }
        for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
            totalAngle = { angle: 0.0 };
            totalTranslation.x = 0.0;
            totalTranslation.y = 0.0;
            currentSetting = this._physicsRig.settings.at(settingIndex);
            currentInputs = this._physicsRig.inputs.get(currentSetting.baseInputIndex);
            currentOutputs = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);
            currentParticles = this._physicsRig.particles.get(currentSetting.baseParticleIndex);
            for (var i = 0; i < currentSetting.inputCount; ++i) {
                weight = currentInputs[i].weight / MaximumWeight;
                if (currentInputs[i].sourceParameterIndex == -1) {
                    currentInputs[i].sourceParameterIndex = model.getParameterIndex(currentInputs[i].source.id);
                }
                currentInputs[i].getNormalizedParameterValue(totalTranslation, totalAngle, parameterValues[currentInputs[i].sourceParameterIndex], parameterMinimumValues[currentInputs[i].sourceParameterIndex], parameterMaximumValues[currentInputs[i].sourceParameterIndex], parameterDefaultValues[currentInputs[i].sourceParameterIndex], currentSetting.normalizationPosition, currentSetting.normalizationAngle, currentInputs[i].reflect, weight);
                this._parameterCaches[currentInputs[i].sourceParameterIndex] =
                    parameterValues[currentInputs[i].sourceParameterIndex];
            }
            radAngle = cubismmath_1.CubismMath.degreesToRadian(-totalAngle.angle);
            totalTranslation.x =
                totalTranslation.x * cubismmath_1.CubismMath.cos(radAngle) -
                    totalTranslation.y * cubismmath_1.CubismMath.sin(radAngle);
            totalTranslation.y =
                totalTranslation.x * cubismmath_1.CubismMath.sin(radAngle) +
                    totalTranslation.y * cubismmath_1.CubismMath.cos(radAngle);
            updateParticlesForStabilization(currentParticles, currentSetting.particleCount, totalTranslation, totalAngle.angle, this._options.wind, MovementThreshold * currentSetting.normalizationPosition.maximum);
            for (var i = 0; i < currentSetting.outputCount; ++i) {
                var particleIndex = currentOutputs[i].vertexIndex;
                if (currentOutputs[i].destinationParameterIndex == -1) {
                    currentOutputs[i].destinationParameterIndex = model.getParameterIndex(currentOutputs[i].destination.id);
                }
                if (particleIndex < 1 ||
                    particleIndex >= currentSetting.particleCount) {
                    continue;
                }
                var translation = new cubismvector2_1.CubismVector2();
                translation = currentParticles[particleIndex].position.substract(currentParticles[particleIndex - 1].position);
                outputValue = currentOutputs[i].getValue(translation, currentParticles, particleIndex, currentOutputs[i].reflect, this._options.gravity);
                this._currentRigOutputs.at(settingIndex).outputs.set(i, outputValue);
                this._previousRigOutputs.at(settingIndex).outputs.set(i, outputValue);
                var destinationParameterIndex = currentOutputs[i].destinationParameterIndex;
                var outParameterCaches = !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype
                    ? JSON.parse(JSON.stringify(parameterValues.subarray(destinationParameterIndex)))
                    : parameterValues.slice(destinationParameterIndex);
                updateOutputParameterValue(outParameterCaches, parameterMinimumValues[destinationParameterIndex], parameterMaximumValues[destinationParameterIndex], outputValue, currentOutputs[i]);
                for (var offset = destinationParameterIndex, outParamIndex = 0; offset < this._parameterCaches.length; offset++, outParamIndex++) {
                    parameterValues[offset] = this._parameterCaches[offset] =
                        outParameterCaches[outParamIndex];
                }
            }
        }
    };
    CubismPhysics.prototype.evaluate = function (model, deltaTimeSeconds) {
        var _a, _b, _c, _d;
        var totalAngle;
        var weight;
        var radAngle;
        var outputValue;
        var totalTranslation = new cubismvector2_1.CubismVector2();
        var currentSetting;
        var currentInputs;
        var currentOutputs;
        var currentParticles;
        if (0.0 >= deltaTimeSeconds) {
            return;
        }
        var parameterValues;
        var parameterMaximumValues;
        var parameterMinimumValues;
        var parameterDefaultValues;
        var physicsDeltaTime;
        this._currentRemainTime += deltaTimeSeconds;
        if (this._currentRemainTime > MaxDeltaTime) {
            this._currentRemainTime = 0.0;
        }
        parameterValues = model.getModel().parameters.values;
        parameterMaximumValues = model.getModel().parameters.maximumValues;
        parameterMinimumValues = model.getModel().parameters.minimumValues;
        parameterDefaultValues = model.getModel().parameters.defaultValues;
        if (((_b = (_a = this._parameterCaches) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) < model.getParameterCount()) {
            this._parameterCaches = new Float32Array(model.getParameterCount());
        }
        if (((_d = (_c = this._parameterInputCaches) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) < model.getParameterCount()) {
            this._parameterInputCaches = new Float32Array(model.getParameterCount());
            for (var j = 0; j < model.getParameterCount(); ++j) {
                this._parameterInputCaches[j] = parameterValues[j];
            }
        }
        if (this._physicsRig.fps > 0.0) {
            physicsDeltaTime = 1.0 / this._physicsRig.fps;
        }
        else {
            physicsDeltaTime = deltaTimeSeconds;
        }
        while (this._currentRemainTime >= physicsDeltaTime) {
            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
                currentSetting = this._physicsRig.settings.at(settingIndex);
                currentOutputs = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);
                for (var i = 0; i < currentSetting.outputCount; ++i) {
                    this._previousRigOutputs
                        .at(settingIndex)
                        .outputs.set(i, this._currentRigOutputs.at(settingIndex).outputs.at(i));
                }
            }
            var inputWeight = physicsDeltaTime / this._currentRemainTime;
            for (var j = 0; j < model.getParameterCount(); ++j) {
                this._parameterCaches[j] =
                    this._parameterInputCaches[j] * (1.0 - inputWeight) +
                        parameterValues[j] * inputWeight;
                this._parameterInputCaches[j] = this._parameterCaches[j];
            }
            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
                totalAngle = { angle: 0.0 };
                totalTranslation.x = 0.0;
                totalTranslation.y = 0.0;
                currentSetting = this._physicsRig.settings.at(settingIndex);
                currentInputs = this._physicsRig.inputs.get(currentSetting.baseInputIndex);
                currentOutputs = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);
                currentParticles = this._physicsRig.particles.get(currentSetting.baseParticleIndex);
                for (var i = 0; i < currentSetting.inputCount; ++i) {
                    weight = currentInputs[i].weight / MaximumWeight;
                    if (currentInputs[i].sourceParameterIndex == -1) {
                        currentInputs[i].sourceParameterIndex = model.getParameterIndex(currentInputs[i].source.id);
                    }
                    currentInputs[i].getNormalizedParameterValue(totalTranslation, totalAngle, this._parameterCaches[currentInputs[i].sourceParameterIndex], parameterMinimumValues[currentInputs[i].sourceParameterIndex], parameterMaximumValues[currentInputs[i].sourceParameterIndex], parameterDefaultValues[currentInputs[i].sourceParameterIndex], currentSetting.normalizationPosition, currentSetting.normalizationAngle, currentInputs[i].reflect, weight);
                }
                radAngle = cubismmath_1.CubismMath.degreesToRadian(-totalAngle.angle);
                totalTranslation.x =
                    totalTranslation.x * cubismmath_1.CubismMath.cos(radAngle) -
                        totalTranslation.y * cubismmath_1.CubismMath.sin(radAngle);
                totalTranslation.y =
                    totalTranslation.x * cubismmath_1.CubismMath.sin(radAngle) +
                        totalTranslation.y * cubismmath_1.CubismMath.cos(radAngle);
                updateParticles(currentParticles, currentSetting.particleCount, totalTranslation, totalAngle.angle, this._options.wind, MovementThreshold * currentSetting.normalizationPosition.maximum, physicsDeltaTime, AirResistance);
                for (var i = 0; i < currentSetting.outputCount; ++i) {
                    var particleIndex = currentOutputs[i].vertexIndex;
                    if (currentOutputs[i].destinationParameterIndex == -1) {
                        currentOutputs[i].destinationParameterIndex =
                            model.getParameterIndex(currentOutputs[i].destination.id);
                    }
                    if (particleIndex < 1 ||
                        particleIndex >= currentSetting.particleCount) {
                        continue;
                    }
                    var translation = new cubismvector2_1.CubismVector2();
                    translation.x =
                        currentParticles[particleIndex].position.x -
                            currentParticles[particleIndex - 1].position.x;
                    translation.y =
                        currentParticles[particleIndex].position.y -
                            currentParticles[particleIndex - 1].position.y;
                    outputValue = currentOutputs[i].getValue(translation, currentParticles, particleIndex, currentOutputs[i].reflect, this._options.gravity);
                    this._currentRigOutputs.at(settingIndex).outputs.set(i, outputValue);
                    var destinationParameterIndex = currentOutputs[i].destinationParameterIndex;
                    var outParameterCaches = !Float32Array.prototype.slice &&
                        'subarray' in Float32Array.prototype
                        ? JSON.parse(JSON.stringify(this._parameterCaches.subarray(destinationParameterIndex)))
                        : this._parameterCaches.slice(destinationParameterIndex);
                    updateOutputParameterValue(outParameterCaches, parameterMinimumValues[destinationParameterIndex], parameterMaximumValues[destinationParameterIndex], outputValue, currentOutputs[i]);
                    for (var offset = destinationParameterIndex, outParamIndex = 0; offset < this._parameterCaches.length; offset++, outParamIndex++) {
                        this._parameterCaches[offset] = outParameterCaches[outParamIndex];
                    }
                }
            }
            this._currentRemainTime -= physicsDeltaTime;
        }
        var alpha = this._currentRemainTime / physicsDeltaTime;
        this.interpolate(model, alpha);
    };
    CubismPhysics.prototype.interpolate = function (model, weight) {
        var currentOutputs;
        var currentSetting;
        var parameterValues;
        var parameterMaximumValues;
        var parameterMinimumValues;
        parameterValues = model.getModel().parameters.values;
        parameterMaximumValues = model.getModel().parameters.maximumValues;
        parameterMinimumValues = model.getModel().parameters.minimumValues;
        for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
            currentSetting = this._physicsRig.settings.at(settingIndex);
            currentOutputs = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);
            for (var i = 0; i < currentSetting.outputCount; ++i) {
                if (currentOutputs[i].destinationParameterIndex == -1) {
                    continue;
                }
                var destinationParameterIndex = currentOutputs[i].destinationParameterIndex;
                var outParameterValues = !Float32Array.prototype.slice && 'subarray' in Float32Array.prototype
                    ? JSON.parse(JSON.stringify(parameterValues.subarray(destinationParameterIndex)))
                    : parameterValues.slice(destinationParameterIndex);
                updateOutputParameterValue(outParameterValues, parameterMinimumValues[destinationParameterIndex], parameterMaximumValues[destinationParameterIndex], this._previousRigOutputs.at(settingIndex).outputs.at(i) *
                    (1 - weight) +
                    this._currentRigOutputs.at(settingIndex).outputs.at(i) * weight, currentOutputs[i]);
                for (var offset = destinationParameterIndex, outParamIndex = 0; offset < parameterValues.length; offset++, outParamIndex++) {
                    parameterValues[offset] = outParameterValues[outParamIndex];
                }
            }
        }
    };
    CubismPhysics.prototype.setOptions = function (options) {
        this._options = options;
    };
    CubismPhysics.prototype.getOption = function () {
        return this._options;
    };
    CubismPhysics.prototype.release = function () {
        this._physicsRig = void 0;
        this._physicsRig = null;
    };
    CubismPhysics.prototype.initialize = function () {
        var strand;
        var currentSetting;
        var radius;
        for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {
            currentSetting = this._physicsRig.settings.at(settingIndex);
            strand = this._physicsRig.particles.get(currentSetting.baseParticleIndex);
            strand[0].initialPosition = new cubismvector2_1.CubismVector2(0.0, 0.0);
            strand[0].lastPosition = new cubismvector2_1.CubismVector2(strand[0].initialPosition.x, strand[0].initialPosition.y);
            strand[0].lastGravity = new cubismvector2_1.CubismVector2(0.0, -1.0);
            strand[0].lastGravity.y *= -1.0;
            strand[0].velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);
            strand[0].force = new cubismvector2_1.CubismVector2(0.0, 0.0);
            for (var i = 1; i < currentSetting.particleCount; ++i) {
                radius = new cubismvector2_1.CubismVector2(0.0, 0.0);
                radius.y = strand[i].radius;
                strand[i].initialPosition = new cubismvector2_1.CubismVector2(strand[i - 1].initialPosition.x + radius.x, strand[i - 1].initialPosition.y + radius.y);
                strand[i].position = new cubismvector2_1.CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);
                strand[i].lastPosition = new cubismvector2_1.CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);
                strand[i].lastGravity = new cubismvector2_1.CubismVector2(0.0, -1.0);
                strand[i].lastGravity.y *= -1.0;
                strand[i].velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);
                strand[i].force = new cubismvector2_1.CubismVector2(0.0, 0.0);
            }
        }
    };
    return CubismPhysics;
}());
exports.CubismPhysics = CubismPhysics;
var Options = (function () {
    function Options() {
        this.gravity = new cubismvector2_1.CubismVector2(0, 0);
        this.wind = new cubismvector2_1.CubismVector2(0, 0);
    }
    return Options;
}());
exports.Options = Options;
var PhysicsOutput = (function () {
    function PhysicsOutput() {
        this.outputs = new csmvector_1.csmVector(0);
    }
    return PhysicsOutput;
}());
exports.PhysicsOutput = PhysicsOutput;
function sign(value) {
    var ret = 0;
    if (value > 0.0) {
        ret = 1;
    }
    else if (value < 0.0) {
        ret = -1;
    }
    return ret;
}
function getInputTranslationXFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {
    targetTranslation.x +=
        normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;
}
function getInputTranslationYFromNormalizedParamterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {
    targetTranslation.y +=
        normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;
}
function getInputAngleFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizaitionPosition, normalizationAngle, isInverted, weight) {
    targetAngle.angle +=
        normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationAngle.minimum, normalizationAngle.maximum, normalizationAngle.defalut, isInverted) * weight;
}
function getOutputTranslationX(translation, particles, particleIndex, isInverted, parentGravity) {
    var outputValue = translation.x;
    if (isInverted) {
        outputValue *= -1.0;
    }
    return outputValue;
}
function getOutputTranslationY(translation, particles, particleIndex, isInverted, parentGravity) {
    var outputValue = translation.y;
    if (isInverted) {
        outputValue *= -1.0;
    }
    return outputValue;
}
function getOutputAngle(translation, particles, particleIndex, isInverted, parentGravity) {
    var outputValue;
    if (particleIndex >= 2) {
        parentGravity = particles[particleIndex - 1].position.substract(particles[particleIndex - 2].position);
    }
    else {
        parentGravity = parentGravity.multiplyByScaler(-1.0);
    }
    outputValue = cubismmath_1.CubismMath.directionToRadian(parentGravity, translation);
    if (isInverted) {
        outputValue *= -1.0;
    }
    return outputValue;
}
function getRangeValue(min, max) {
    var maxValue = cubismmath_1.CubismMath.max(min, max);
    var minValue = cubismmath_1.CubismMath.min(min, max);
    return cubismmath_1.CubismMath.abs(maxValue - minValue);
}
function getDefaultValue(min, max) {
    var minValue = cubismmath_1.CubismMath.min(min, max);
    return minValue + getRangeValue(min, max) / 2.0;
}
function getOutputScaleTranslationX(translationScale, angleScale) {
    return JSON.parse(JSON.stringify(translationScale.x));
}
function getOutputScaleTranslationY(translationScale, angleScale) {
    return JSON.parse(JSON.stringify(translationScale.y));
}
function getOutputScaleAngle(translationScale, angleScale) {
    return JSON.parse(JSON.stringify(angleScale));
}
function updateParticles(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue, deltaTimeSeconds, airResistance) {
    var totalRadian;
    var delay;
    var radian;
    var currentGravity;
    var direction = new cubismvector2_1.CubismVector2(0.0, 0.0);
    var velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);
    var force = new cubismvector2_1.CubismVector2(0.0, 0.0);
    var newDirection = new cubismvector2_1.CubismVector2(0.0, 0.0);
    strand[0].position = new cubismvector2_1.CubismVector2(totalTranslation.x, totalTranslation.y);
    totalRadian = cubismmath_1.CubismMath.degreesToRadian(totalAngle);
    currentGravity = cubismmath_1.CubismMath.radianToDirection(totalRadian);
    currentGravity.normalize();
    for (var i = 1; i < strandCount; ++i) {
        strand[i].force = currentGravity
            .multiplyByScaler(strand[i].acceleration)
            .add(windDirection);
        strand[i].lastPosition = new cubismvector2_1.CubismVector2(strand[i].position.x, strand[i].position.y);
        delay = strand[i].delay * deltaTimeSeconds * 30.0;
        direction = strand[i].position.substract(strand[i - 1].position);
        radian =
            cubismmath_1.CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) /
                airResistance;
        direction.x =
            cubismmath_1.CubismMath.cos(radian) * direction.x -
                direction.y * cubismmath_1.CubismMath.sin(radian);
        direction.y =
            cubismmath_1.CubismMath.sin(radian) * direction.x +
                direction.y * cubismmath_1.CubismMath.cos(radian);
        strand[i].position = strand[i - 1].position.add(direction);
        velocity = strand[i].velocity.multiplyByScaler(delay);
        force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);
        strand[i].position = strand[i].position.add(velocity).add(force);
        newDirection = strand[i].position.substract(strand[i - 1].position);
        newDirection.normalize();
        strand[i].position = strand[i - 1].position.add(newDirection.multiplyByScaler(strand[i].radius));
        if (cubismmath_1.CubismMath.abs(strand[i].position.x) < thresholdValue) {
            strand[i].position.x = 0.0;
        }
        if (delay != 0.0) {
            strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);
            strand[i].velocity = strand[i].velocity.divisionByScalar(delay);
            strand[i].velocity = strand[i].velocity.multiplyByScaler(strand[i].mobility);
        }
        strand[i].force = new cubismvector2_1.CubismVector2(0.0, 0.0);
        strand[i].lastGravity = new cubismvector2_1.CubismVector2(currentGravity.x, currentGravity.y);
    }
}
function updateParticlesForStabilization(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue) {
    var totalRadian;
    var currentGravity;
    var force = new cubismvector2_1.CubismVector2(0.0, 0.0);
    strand[0].position = new cubismvector2_1.CubismVector2(totalTranslation.x, totalTranslation.y);
    totalRadian = cubismmath_1.CubismMath.degreesToRadian(totalAngle);
    currentGravity = cubismmath_1.CubismMath.radianToDirection(totalRadian);
    currentGravity.normalize();
    for (var i = 1; i < strandCount; ++i) {
        strand[i].force = currentGravity
            .multiplyByScaler(strand[i].acceleration)
            .add(windDirection);
        strand[i].lastPosition = new cubismvector2_1.CubismVector2(strand[i].position.x, strand[i].position.y);
        strand[i].velocity = new cubismvector2_1.CubismVector2(0.0, 0.0);
        force = strand[i].force;
        force.normalize();
        force = force.multiplyByScaler(strand[i].radius);
        strand[i].position = strand[i - 1].position.add(force);
        if (cubismmath_1.CubismMath.abs(strand[i].position.x) < thresholdValue) {
            strand[i].position.x = 0.0;
        }
        strand[i].force = new cubismvector2_1.CubismVector2(0.0, 0.0);
        strand[i].lastGravity = new cubismvector2_1.CubismVector2(currentGravity.x, currentGravity.y);
    }
}
function updateOutputParameterValue(parameterValue, parameterValueMinimum, parameterValueMaximum, translation, output) {
    var outputScale;
    var value;
    var weight;
    outputScale = output.getScale(output.translationScale, output.angleScale);
    value = translation * outputScale;
    if (value < parameterValueMinimum) {
        if (value < output.valueBelowMinimum) {
            output.valueBelowMinimum = value;
        }
        value = parameterValueMinimum;
    }
    else if (value > parameterValueMaximum) {
        if (value > output.valueExceededMaximum) {
            output.valueExceededMaximum = value;
        }
        value = parameterValueMaximum;
    }
    weight = output.weight / MaximumWeight;
    if (weight >= 1.0) {
        parameterValue[0] = value;
    }
    else {
        value = parameterValue[0] * (1.0 - weight) + value * weight;
        parameterValue[0] = value;
    }
}
function normalizeParameterValue(value, parameterMinimum, parameterMaximum, parameterDefault, normalizedMinimum, normalizedMaximum, normalizedDefault, isInverted) {
    var result = 0.0;
    var maxValue = cubismmath_1.CubismMath.max(parameterMaximum, parameterMinimum);
    if (maxValue < value) {
        value = maxValue;
    }
    var minValue = cubismmath_1.CubismMath.min(parameterMaximum, parameterMinimum);
    if (minValue > value) {
        value = minValue;
    }
    var minNormValue = cubismmath_1.CubismMath.min(normalizedMinimum, normalizedMaximum);
    var maxNormValue = cubismmath_1.CubismMath.max(normalizedMinimum, normalizedMaximum);
    var middleNormValue = normalizedDefault;
    var middleValue = getDefaultValue(minValue, maxValue);
    var paramValue = value - middleValue;
    switch (sign(paramValue)) {
        case 1: {
            var nLength = maxNormValue - middleNormValue;
            var pLength = maxValue - middleValue;
            if (pLength != 0.0) {
                result = paramValue * (nLength / pLength);
                result += middleNormValue;
            }
            break;
        }
        case -1: {
            var nLength = minNormValue - middleNormValue;
            var pLength = minValue - middleValue;
            if (pLength != 0.0) {
                result = paramValue * (nLength / pLength);
                result += middleNormValue;
            }
            break;
        }
        case 0: {
            result = middleNormValue;
            break;
        }
        default: {
            break;
        }
    }
    return isInverted ? result : result * -1.0;
}
var $ = __importStar(__webpack_require__(/*! ./cubismphysics */ "../../../Framework/src/physics/cubismphysics.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismPhysics = $.CubismPhysics;
    Live2DCubismFramework.Options = $.Options;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/physics/cubismphysicsinternal.ts":
/*!***************************************************************!*\
  !*** ../../../Framework/src/physics/cubismphysicsinternal.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismPhysicsRig = exports.CubismPhysicsOutput = exports.CubismPhysicsInput = exports.CubismPhysicsSubRig = exports.CubismPhysicsParticle = exports.CubismPhysicsNormalization = exports.CubismPhysicsParameter = exports.PhysicsJsonEffectiveForces = exports.CubismPhysicsSource = exports.CubismPhysicsTargetType = void 0;
var cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ "../../../Framework/src/math/cubismvector2.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var CubismPhysicsTargetType;
(function (CubismPhysicsTargetType) {
    CubismPhysicsTargetType[CubismPhysicsTargetType["CubismPhysicsTargetType_Parameter"] = 0] = "CubismPhysicsTargetType_Parameter";
})(CubismPhysicsTargetType = exports.CubismPhysicsTargetType || (exports.CubismPhysicsTargetType = {}));
var CubismPhysicsSource;
(function (CubismPhysicsSource) {
    CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_X"] = 0] = "CubismPhysicsSource_X";
    CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_Y"] = 1] = "CubismPhysicsSource_Y";
    CubismPhysicsSource[CubismPhysicsSource["CubismPhysicsSource_Angle"] = 2] = "CubismPhysicsSource_Angle";
})(CubismPhysicsSource = exports.CubismPhysicsSource || (exports.CubismPhysicsSource = {}));
var PhysicsJsonEffectiveForces = (function () {
    function PhysicsJsonEffectiveForces() {
        this.gravity = new cubismvector2_1.CubismVector2(0, 0);
        this.wind = new cubismvector2_1.CubismVector2(0, 0);
    }
    return PhysicsJsonEffectiveForces;
}());
exports.PhysicsJsonEffectiveForces = PhysicsJsonEffectiveForces;
var CubismPhysicsParameter = (function () {
    function CubismPhysicsParameter() {
    }
    return CubismPhysicsParameter;
}());
exports.CubismPhysicsParameter = CubismPhysicsParameter;
var CubismPhysicsNormalization = (function () {
    function CubismPhysicsNormalization() {
    }
    return CubismPhysicsNormalization;
}());
exports.CubismPhysicsNormalization = CubismPhysicsNormalization;
var CubismPhysicsParticle = (function () {
    function CubismPhysicsParticle() {
        this.initialPosition = new cubismvector2_1.CubismVector2(0, 0);
        this.position = new cubismvector2_1.CubismVector2(0, 0);
        this.lastPosition = new cubismvector2_1.CubismVector2(0, 0);
        this.lastGravity = new cubismvector2_1.CubismVector2(0, 0);
        this.force = new cubismvector2_1.CubismVector2(0, 0);
        this.velocity = new cubismvector2_1.CubismVector2(0, 0);
    }
    return CubismPhysicsParticle;
}());
exports.CubismPhysicsParticle = CubismPhysicsParticle;
var CubismPhysicsSubRig = (function () {
    function CubismPhysicsSubRig() {
        this.normalizationPosition = new CubismPhysicsNormalization();
        this.normalizationAngle = new CubismPhysicsNormalization();
    }
    return CubismPhysicsSubRig;
}());
exports.CubismPhysicsSubRig = CubismPhysicsSubRig;
var CubismPhysicsInput = (function () {
    function CubismPhysicsInput() {
        this.source = new CubismPhysicsParameter();
    }
    return CubismPhysicsInput;
}());
exports.CubismPhysicsInput = CubismPhysicsInput;
var CubismPhysicsOutput = (function () {
    function CubismPhysicsOutput() {
        this.destination = new CubismPhysicsParameter();
        this.translationScale = new cubismvector2_1.CubismVector2(0, 0);
    }
    return CubismPhysicsOutput;
}());
exports.CubismPhysicsOutput = CubismPhysicsOutput;
var CubismPhysicsRig = (function () {
    function CubismPhysicsRig() {
        this.settings = new csmvector_1.csmVector();
        this.inputs = new csmvector_1.csmVector();
        this.outputs = new csmvector_1.csmVector();
        this.particles = new csmvector_1.csmVector();
        this.gravity = new cubismvector2_1.CubismVector2(0, 0);
        this.wind = new cubismvector2_1.CubismVector2(0, 0);
        this.fps = 0.0;
    }
    return CubismPhysicsRig;
}());
exports.CubismPhysicsRig = CubismPhysicsRig;
var $ = __importStar(__webpack_require__(/*! ./cubismphysicsinternal */ "../../../Framework/src/physics/cubismphysicsinternal.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismPhysicsInput = $.CubismPhysicsInput;
    Live2DCubismFramework.CubismPhysicsNormalization = $.CubismPhysicsNormalization;
    Live2DCubismFramework.CubismPhysicsOutput = $.CubismPhysicsOutput;
    Live2DCubismFramework.CubismPhysicsParameter = $.CubismPhysicsParameter;
    Live2DCubismFramework.CubismPhysicsParticle = $.CubismPhysicsParticle;
    Live2DCubismFramework.CubismPhysicsRig = $.CubismPhysicsRig;
    Live2DCubismFramework.CubismPhysicsSource = $.CubismPhysicsSource;
    Live2DCubismFramework.CubismPhysicsSubRig = $.CubismPhysicsSubRig;
    Live2DCubismFramework.CubismPhysicsTargetType = $.CubismPhysicsTargetType;
    Live2DCubismFramework.PhysicsJsonEffectiveForces = $.PhysicsJsonEffectiveForces;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/physics/cubismphysicsjson.ts":
/*!***********************************************************!*\
  !*** ../../../Framework/src/physics/cubismphysicsjson.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismPhysicsJson = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ "../../../Framework/src/math/cubismvector2.ts");
var cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
var Position = 'Position';
var X = 'X';
var Y = 'Y';
var Angle = 'Angle';
var Type = 'Type';
var Id = 'Id';
var Meta = 'Meta';
var EffectiveForces = 'EffectiveForces';
var TotalInputCount = 'TotalInputCount';
var TotalOutputCount = 'TotalOutputCount';
var PhysicsSettingCount = 'PhysicsSettingCount';
var Gravity = 'Gravity';
var Wind = 'Wind';
var VertexCount = 'VertexCount';
var Fps = 'Fps';
var PhysicsSettings = 'PhysicsSettings';
var Normalization = 'Normalization';
var Minimum = 'Minimum';
var Maximum = 'Maximum';
var Default = 'Default';
var Reflect = 'Reflect';
var Weight = 'Weight';
var Input = 'Input';
var Source = 'Source';
var Output = 'Output';
var Scale = 'Scale';
var VertexIndex = 'VertexIndex';
var Destination = 'Destination';
var Vertices = 'Vertices';
var Mobility = 'Mobility';
var Delay = 'Delay';
var Radius = 'Radius';
var Acceleration = 'Acceleration';
var CubismPhysicsJson = (function () {
    function CubismPhysicsJson(buffer, size) {
        this._json = cubismjson_1.CubismJson.create(buffer, size);
    }
    CubismPhysicsJson.prototype.release = function () {
        cubismjson_1.CubismJson.delete(this._json);
    };
    CubismPhysicsJson.prototype.getGravity = function () {
        var ret = new cubismvector2_1.CubismVector2(0, 0);
        ret.x = this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(EffectiveForces)
            .getValueByString(Gravity)
            .getValueByString(X)
            .toFloat();
        ret.y = this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(EffectiveForces)
            .getValueByString(Gravity)
            .getValueByString(Y)
            .toFloat();
        return ret;
    };
    CubismPhysicsJson.prototype.getWind = function () {
        var ret = new cubismvector2_1.CubismVector2(0, 0);
        ret.x = this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(EffectiveForces)
            .getValueByString(Wind)
            .getValueByString(X)
            .toFloat();
        ret.y = this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(EffectiveForces)
            .getValueByString(Wind)
            .getValueByString(Y)
            .toFloat();
        return ret;
    };
    CubismPhysicsJson.prototype.getFps = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(Fps)
            .toFloat(0.0);
    };
    CubismPhysicsJson.prototype.getSubRigCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(PhysicsSettingCount)
            .toInt();
    };
    CubismPhysicsJson.prototype.getTotalInputCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(TotalInputCount)
            .toInt();
    };
    CubismPhysicsJson.prototype.getTotalOutputCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(TotalOutputCount)
            .toInt();
    };
    CubismPhysicsJson.prototype.getVertexCount = function () {
        return this._json
            .getRoot()
            .getValueByString(Meta)
            .getValueByString(VertexCount)
            .toInt();
    };
    CubismPhysicsJson.prototype.getNormalizationPositionMinimumValue = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Normalization)
            .getValueByString(Position)
            .getValueByString(Minimum)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getNormalizationPositionMaximumValue = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Normalization)
            .getValueByString(Position)
            .getValueByString(Maximum)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getNormalizationPositionDefaultValue = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Normalization)
            .getValueByString(Position)
            .getValueByString(Default)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getNormalizationAngleMinimumValue = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Normalization)
            .getValueByString(Angle)
            .getValueByString(Minimum)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getNormalizationAngleMaximumValue = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Normalization)
            .getValueByString(Angle)
            .getValueByString(Maximum)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getNormalizationAngleDefaultValue = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Normalization)
            .getValueByString(Angle)
            .getValueByString(Default)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getInputCount = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Input)
            .getVector()
            .getSize();
    };
    CubismPhysicsJson.prototype.getInputWeight = function (physicsSettingIndex, inputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Input)
            .getValueByIndex(inputIndex)
            .getValueByString(Weight)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getInputReflect = function (physicsSettingIndex, inputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Input)
            .getValueByIndex(inputIndex)
            .getValueByString(Reflect)
            .toBoolean();
    };
    CubismPhysicsJson.prototype.getInputType = function (physicsSettingIndex, inputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Input)
            .getValueByIndex(inputIndex)
            .getValueByString(Type)
            .getRawString();
    };
    CubismPhysicsJson.prototype.getInputSourceId = function (physicsSettingIndex, inputIndex) {
        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Input)
            .getValueByIndex(inputIndex)
            .getValueByString(Source)
            .getValueByString(Id)
            .getRawString());
    };
    CubismPhysicsJson.prototype.getOutputCount = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getVector()
            .getSize();
    };
    CubismPhysicsJson.prototype.getOutputVertexIndex = function (physicsSettingIndex, outputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getValueByIndex(outputIndex)
            .getValueByString(VertexIndex)
            .toInt();
    };
    CubismPhysicsJson.prototype.getOutputAngleScale = function (physicsSettingIndex, outputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getValueByIndex(outputIndex)
            .getValueByString(Scale)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getOutputWeight = function (physicsSettingIndex, outputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getValueByIndex(outputIndex)
            .getValueByString(Weight)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getOutputDestinationId = function (physicsSettingIndex, outputIndex) {
        return live2dcubismframework_1.CubismFramework.getIdManager().getId(this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getValueByIndex(outputIndex)
            .getValueByString(Destination)
            .getValueByString(Id)
            .getRawString());
    };
    CubismPhysicsJson.prototype.getOutputType = function (physicsSettingIndex, outputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getValueByIndex(outputIndex)
            .getValueByString(Type)
            .getRawString();
    };
    CubismPhysicsJson.prototype.getOutputReflect = function (physicsSettingIndex, outputIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Output)
            .getValueByIndex(outputIndex)
            .getValueByString(Reflect)
            .toBoolean();
    };
    CubismPhysicsJson.prototype.getParticleCount = function (physicsSettingIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getVector()
            .getSize();
    };
    CubismPhysicsJson.prototype.getParticleMobility = function (physicsSettingIndex, vertexIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getValueByIndex(vertexIndex)
            .getValueByString(Mobility)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getParticleDelay = function (physicsSettingIndex, vertexIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getValueByIndex(vertexIndex)
            .getValueByString(Delay)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getParticleAcceleration = function (physicsSettingIndex, vertexIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getValueByIndex(vertexIndex)
            .getValueByString(Acceleration)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getParticleRadius = function (physicsSettingIndex, vertexIndex) {
        return this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getValueByIndex(vertexIndex)
            .getValueByString(Radius)
            .toFloat();
    };
    CubismPhysicsJson.prototype.getParticlePosition = function (physicsSettingIndex, vertexIndex) {
        var ret = new cubismvector2_1.CubismVector2(0, 0);
        ret.x = this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getValueByIndex(vertexIndex)
            .getValueByString(Position)
            .getValueByString(X)
            .toFloat();
        ret.y = this._json
            .getRoot()
            .getValueByString(PhysicsSettings)
            .getValueByIndex(physicsSettingIndex)
            .getValueByString(Vertices)
            .getValueByIndex(vertexIndex)
            .getValueByString(Position)
            .getValueByString(Y)
            .toFloat();
        return ret;
    };
    return CubismPhysicsJson;
}());
exports.CubismPhysicsJson = CubismPhysicsJson;
var $ = __importStar(__webpack_require__(/*! ./cubismphysicsjson */ "../../../Framework/src/physics/cubismphysicsjson.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismPhysicsJson = $.CubismPhysicsJson;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/rendering/cubismrenderer.ts":
/*!**********************************************************!*\
  !*** ../../../Framework/src/rendering/cubismrenderer.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismTextureColor = exports.CubismBlendMode = exports.CubismRenderer = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts");
var CubismRenderer = (function () {
    function CubismRenderer() {
        this._isCulling = false;
        this._isPremultipliedAlpha = false;
        this._anisotropy = 0.0;
        this._model = null;
        this._modelColor = new CubismTextureColor();
        this._useHighPrecisionMask = false;
        this._mvpMatrix4x4 = new cubismmatrix44_1.CubismMatrix44();
        this._mvpMatrix4x4.loadIdentity();
    }
    CubismRenderer.create = function () {
        return null;
    };
    CubismRenderer.delete = function (renderer) {
        renderer = null;
    };
    CubismRenderer.prototype.initialize = function (model) {
        this._model = model;
    };
    CubismRenderer.prototype.drawModel = function () {
        if (this.getModel() == null)
            return;
        this.saveProfile();
        this.doDrawModel();
        this.restoreProfile();
    };
    CubismRenderer.prototype.setMvpMatrix = function (matrix44) {
        this._mvpMatrix4x4.setMatrix(matrix44.getArray());
    };
    CubismRenderer.prototype.getMvpMatrix = function () {
        return this._mvpMatrix4x4;
    };
    CubismRenderer.prototype.setModelColor = function (red, green, blue, alpha) {
        if (red < 0.0) {
            red = 0.0;
        }
        else if (red > 1.0) {
            red = 1.0;
        }
        if (green < 0.0) {
            green = 0.0;
        }
        else if (green > 1.0) {
            green = 1.0;
        }
        if (blue < 0.0) {
            blue = 0.0;
        }
        else if (blue > 1.0) {
            blue = 1.0;
        }
        if (alpha < 0.0) {
            alpha = 0.0;
        }
        else if (alpha > 1.0) {
            alpha = 1.0;
        }
        this._modelColor.R = red;
        this._modelColor.G = green;
        this._modelColor.B = blue;
        this._modelColor.A = alpha;
    };
    CubismRenderer.prototype.getModelColor = function () {
        return JSON.parse(JSON.stringify(this._modelColor));
    };
    CubismRenderer.prototype.setIsPremultipliedAlpha = function (enable) {
        this._isPremultipliedAlpha = enable;
    };
    CubismRenderer.prototype.isPremultipliedAlpha = function () {
        return this._isPremultipliedAlpha;
    };
    CubismRenderer.prototype.setIsCulling = function (culling) {
        this._isCulling = culling;
    };
    CubismRenderer.prototype.isCulling = function () {
        return this._isCulling;
    };
    CubismRenderer.prototype.setAnisotropy = function (n) {
        this._anisotropy = n;
    };
    CubismRenderer.prototype.getAnisotropy = function () {
        return this._anisotropy;
    };
    CubismRenderer.prototype.getModel = function () {
        return this._model;
    };
    CubismRenderer.prototype.useHighPrecisionMask = function (high) {
        this._useHighPrecisionMask = high;
    };
    CubismRenderer.prototype.isUsingHighPrecisionMask = function () {
        return this._useHighPrecisionMask;
    };
    return CubismRenderer;
}());
exports.CubismRenderer = CubismRenderer;
var CubismBlendMode;
(function (CubismBlendMode) {
    CubismBlendMode[CubismBlendMode["CubismBlendMode_Normal"] = 0] = "CubismBlendMode_Normal";
    CubismBlendMode[CubismBlendMode["CubismBlendMode_Additive"] = 1] = "CubismBlendMode_Additive";
    CubismBlendMode[CubismBlendMode["CubismBlendMode_Multiplicative"] = 2] = "CubismBlendMode_Multiplicative";
})(CubismBlendMode = exports.CubismBlendMode || (exports.CubismBlendMode = {}));
var CubismTextureColor = (function () {
    function CubismTextureColor(r, g, b, a) {
        if (r === void 0) { r = 1.0; }
        if (g === void 0) { g = 1.0; }
        if (b === void 0) { b = 1.0; }
        if (a === void 0) { a = 1.0; }
        this.R = r;
        this.G = g;
        this.B = b;
        this.A = a;
    }
    return CubismTextureColor;
}());
exports.CubismTextureColor = CubismTextureColor;
var $ = __importStar(__webpack_require__(/*! ./cubismrenderer */ "../../../Framework/src/rendering/cubismrenderer.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismBlendMode = $.CubismBlendMode;
    Live2DCubismFramework.CubismRenderer = $.CubismRenderer;
    Live2DCubismFramework.CubismTextureColor = $.CubismTextureColor;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/rendering/cubismrenderer_webgl.ts":
/*!****************************************************************!*\
  !*** ../../../Framework/src/rendering/cubismrenderer_webgl.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismRenderer_WebGL = exports.fragmentShaderSrcMaskInvertedPremultipliedAlpha = exports.fragmentShaderSrcMaskPremultipliedAlpha = exports.fragmentShaderSrcPremultipliedAlpha = exports.vertexShaderSrcMasked = exports.vertexShaderSrc = exports.fragmentShaderSrcsetupMask = exports.vertexShaderSrcSetupMask = exports.ShaderNames = exports.CubismShaderSet = exports.CubismShader_WebGL = exports.CubismRendererProfile_WebGL = exports.CubismClippingContext = exports.CubismRenderTextureResource = exports.CubismClippingManager_WebGL = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts");
var csmmap_1 = __webpack_require__(/*! ../type/csmmap */ "../../../Framework/src/type/csmmap.ts");
var csmrectf_1 = __webpack_require__(/*! ../type/csmrectf */ "../../../Framework/src/type/csmrectf.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
var cubismrenderer_1 = __webpack_require__(/*! ./cubismrenderer */ "../../../Framework/src/rendering/cubismrenderer.ts");
var ColorChannelCount = 4;
var ClippingMaskMaxCountOnDefault = 36;
var ClippingMaskMaxCountOnMultiRenderTexture = 32;
var ShaderCount = 10;
var s_instance;
var s_viewport;
var s_fbo;
var CubismClippingManager_WebGL = (function () {
    function CubismClippingManager_WebGL() {
        this._currentMaskRenderTexture = null;
        this._maskColorBuffers = null;
        this._currentFrameNo = 0;
        this._renderTextureCount = 0;
        this._clippingMaskBufferSize = 256;
        this._clippingContextListForMask = new csmvector_1.csmVector();
        this._clippingContextListForDraw = new csmvector_1.csmVector();
        this._channelColors = new csmvector_1.csmVector();
        this._tmpBoundsOnModel = new csmrectf_1.csmRect();
        this._tmpMatrix = new cubismmatrix44_1.CubismMatrix44();
        this._tmpMatrixForMask = new cubismmatrix44_1.CubismMatrix44();
        this._tmpMatrixForDraw = new cubismmatrix44_1.CubismMatrix44();
        this._maskTexture = null;
        var tmp = new cubismrenderer_1.CubismTextureColor();
        tmp.R = 1.0;
        tmp.G = 0.0;
        tmp.B = 0.0;
        tmp.A = 0.0;
        this._channelColors.pushBack(tmp);
        tmp = new cubismrenderer_1.CubismTextureColor();
        tmp.R = 0.0;
        tmp.G = 1.0;
        tmp.B = 0.0;
        tmp.A = 0.0;
        this._channelColors.pushBack(tmp);
        tmp = new cubismrenderer_1.CubismTextureColor();
        tmp.R = 0.0;
        tmp.G = 0.0;
        tmp.B = 1.0;
        tmp.A = 0.0;
        this._channelColors.pushBack(tmp);
        tmp = new cubismrenderer_1.CubismTextureColor();
        tmp.R = 0.0;
        tmp.G = 0.0;
        tmp.B = 0.0;
        tmp.A = 1.0;
        this._channelColors.pushBack(tmp);
    }
    CubismClippingManager_WebGL.prototype.getChannelFlagAsColor = function (channelNo) {
        return this._channelColors.at(channelNo);
    };
    CubismClippingManager_WebGL.prototype.getMaskRenderTexture = function () {
        if (this._maskTexture && this._maskTexture.textures != null) {
            this._maskTexture.frameNo = this._currentFrameNo;
        }
        else {
            if (this._maskRenderTextures != null) {
                this._maskRenderTextures.clear();
            }
            this._maskRenderTextures = new csmvector_1.csmVector();
            if (this._maskColorBuffers != null) {
                this._maskColorBuffers.clear();
            }
            this._maskColorBuffers = new csmvector_1.csmVector();
            var size = this._clippingMaskBufferSize;
            for (var index = 0; index < this._renderTextureCount; index++) {
                this._maskColorBuffers.pushBack(this.gl.createTexture());
                this.gl.bindTexture(this.gl.TEXTURE_2D, this._maskColorBuffers.at(index));
                this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, size, size, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
                this.gl.bindTexture(this.gl.TEXTURE_2D, null);
                this._maskRenderTextures.pushBack(this.gl.createFramebuffer());
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._maskRenderTextures.at(index));
                this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this._maskColorBuffers.at(index), 0);
            }
            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);
            this._maskTexture = new CubismRenderTextureResource(this._currentFrameNo, this._maskRenderTextures);
        }
        return this._maskTexture.textures;
    };
    CubismClippingManager_WebGL.prototype.setGL = function (gl) {
        this.gl = gl;
    };
    CubismClippingManager_WebGL.prototype.calcClippedDrawTotalBounds = function (model, clippingContext) {
        var clippedDrawTotalMinX = Number.MAX_VALUE;
        var clippedDrawTotalMinY = Number.MAX_VALUE;
        var clippedDrawTotalMaxX = Number.MIN_VALUE;
        var clippedDrawTotalMaxY = Number.MIN_VALUE;
        var clippedDrawCount = clippingContext._clippedDrawableIndexList.length;
        for (var clippedDrawableIndex = 0; clippedDrawableIndex < clippedDrawCount; clippedDrawableIndex++) {
            var drawableIndex = clippingContext._clippedDrawableIndexList[clippedDrawableIndex];
            var drawableVertexCount = model.getDrawableVertexCount(drawableIndex);
            var drawableVertexes = model.getDrawableVertices(drawableIndex);
            var minX = Number.MAX_VALUE;
            var minY = Number.MAX_VALUE;
            var maxX = -Number.MAX_VALUE;
            var maxY = -Number.MAX_VALUE;
            var loop = drawableVertexCount * live2dcubismframework_1.Constant.vertexStep;
            for (var pi = live2dcubismframework_1.Constant.vertexOffset; pi < loop; pi += live2dcubismframework_1.Constant.vertexStep) {
                var x = drawableVertexes[pi];
                var y = drawableVertexes[pi + 1];
                if (x < minX) {
                    minX = x;
                }
                if (x > maxX) {
                    maxX = x;
                }
                if (y < minY) {
                    minY = y;
                }
                if (y > maxY) {
                    maxY = y;
                }
            }
            if (minX == Number.MAX_VALUE) {
                continue;
            }
            if (minX < clippedDrawTotalMinX) {
                clippedDrawTotalMinX = minX;
            }
            if (minY < clippedDrawTotalMinY) {
                clippedDrawTotalMinY = minY;
            }
            if (maxX > clippedDrawTotalMaxX) {
                clippedDrawTotalMaxX = maxX;
            }
            if (maxY > clippedDrawTotalMaxY) {
                clippedDrawTotalMaxY = maxY;
            }
            if (clippedDrawTotalMinX == Number.MAX_VALUE) {
                clippingContext._allClippedDrawRect.x = 0.0;
                clippingContext._allClippedDrawRect.y = 0.0;
                clippingContext._allClippedDrawRect.width = 0.0;
                clippingContext._allClippedDrawRect.height = 0.0;
                clippingContext._isUsing = false;
            }
            else {
                clippingContext._isUsing = true;
                var w = clippedDrawTotalMaxX - clippedDrawTotalMinX;
                var h = clippedDrawTotalMaxY - clippedDrawTotalMinY;
                clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;
                clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;
                clippingContext._allClippedDrawRect.width = w;
                clippingContext._allClippedDrawRect.height = h;
            }
        }
    };
    CubismClippingManager_WebGL.prototype.release = function () {
        for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {
            if (this._clippingContextListForMask.at(i)) {
                this._clippingContextListForMask.at(i).release();
                this._clippingContextListForMask.set(i, void 0);
            }
            this._clippingContextListForMask.set(i, null);
        }
        this._clippingContextListForMask = null;
        for (var i = 0; i < this._clippingContextListForDraw.getSize(); i++) {
            this._clippingContextListForDraw.set(i, null);
        }
        this._clippingContextListForDraw = null;
        if (this._maskTexture) {
            for (var i = 0; i < this._maskTexture.textures.getSize(); i++) {
                this.gl.deleteFramebuffer(this._maskTexture.textures.at(i));
            }
            this._maskTexture.textures.clear();
            this._maskTexture.textures = null;
            this._maskTexture = null;
        }
        for (var i = 0; i < this._channelColors.getSize(); i++) {
            this._channelColors.set(i, null);
        }
        this._channelColors = null;
        if (this._maskColorBuffers != null) {
            for (var index = 0; index < this._maskColorBuffers.getSize(); index++) {
                this.gl.deleteTexture(this._maskColorBuffers.at(index));
            }
            this._maskColorBuffers.clear();
        }
        this._maskColorBuffers = null;
        if (this._maskRenderTextures != null) {
            this._maskRenderTextures.clear();
        }
        this._maskRenderTextures = null;
        if (this._clearedFrameBufferflags != null) {
            this._clearedFrameBufferflags.clear();
        }
        this._clearedFrameBufferflags = null;
    };
    CubismClippingManager_WebGL.prototype.initialize = function (model, drawableCount, drawableMasks, drawableMaskCounts, renderTextureCount) {
        if (renderTextureCount % 1 != 0) {
            (0, cubismdebug_1.CubismLogWarning)('The number of render textures must be specified as an integer. The decimal point is rounded down and corrected to an integer.');
            renderTextureCount = ~~renderTextureCount;
        }
        if (renderTextureCount < 1) {
            (0, cubismdebug_1.CubismLogWarning)('The number of render textures must be an integer greater than or equal to 1. Set the number of render textures to 1.');
        }
        this._renderTextureCount = renderTextureCount < 1 ? 1 : renderTextureCount;
        this._clearedFrameBufferflags = new csmvector_1.csmVector(this._renderTextureCount);
        for (var i = 0; i < drawableCount; i++) {
            if (drawableMaskCounts[i] <= 0) {
                this._clippingContextListForDraw.pushBack(null);
                continue;
            }
            var clippingContext = this.findSameClip(drawableMasks[i], drawableMaskCounts[i]);
            if (clippingContext == null) {
                clippingContext = new CubismClippingContext(this, drawableMasks[i], drawableMaskCounts[i]);
                this._clippingContextListForMask.pushBack(clippingContext);
            }
            clippingContext.addClippedDrawable(i);
            this._clippingContextListForDraw.pushBack(clippingContext);
        }
    };
    CubismClippingManager_WebGL.prototype.setupClippingContext = function (model, renderer) {
        this._currentFrameNo++;
        var usingClipCount = 0;
        for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {
            var cc = this._clippingContextListForMask.at(clipIndex);
            this.calcClippedDrawTotalBounds(model, cc);
            if (cc._isUsing) {
                usingClipCount++;
            }
        }
        if (usingClipCount > 0) {
            this.setupLayoutBounds(renderer.isUsingHighPrecisionMask() ? 0 : usingClipCount);
            if (!renderer.isUsingHighPrecisionMask()) {
                this.gl.viewport(0, 0, this._clippingMaskBufferSize, this._clippingMaskBufferSize);
                this._currentMaskRenderTexture = this.getMaskRenderTexture().at(0);
                renderer.preDraw();
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._currentMaskRenderTexture);
            }
            if (this._clearedFrameBufferflags.getSize() != this._renderTextureCount) {
                this._clearedFrameBufferflags.clear();
                this._clearedFrameBufferflags = new csmvector_1.csmVector(this._renderTextureCount);
            }
            for (var index = 0; index < this._clearedFrameBufferflags.getSize(); index++) {
                this._clearedFrameBufferflags.set(index, false);
            }
            for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {
                var clipContext = this._clippingContextListForMask.at(clipIndex);
                var allClipedDrawRect = clipContext._allClippedDrawRect;
                var layoutBoundsOnTex01 = clipContext._layoutBounds;
                var MARGIN = 0.05;
                var scaleX = 0;
                var scaleY = 0;
                var clipContextRenderTexture = this.getMaskRenderTexture().at(clipContext._bufferIndex);
                if (this._currentMaskRenderTexture != clipContextRenderTexture &&
                    !renderer.isUsingHighPrecisionMask()) {
                    this._currentMaskRenderTexture = clipContextRenderTexture;
                    renderer.preDraw();
                    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._currentMaskRenderTexture);
                }
                if (renderer.isUsingHighPrecisionMask()) {
                    var ppu = model.getPixelsPerUnit();
                    var maskPixelSize = clipContext.getClippingManager()._clippingMaskBufferSize;
                    var physicalMaskWidth = layoutBoundsOnTex01.width * maskPixelSize;
                    var physicalMaskHeight = layoutBoundsOnTex01.height * maskPixelSize;
                    this._tmpBoundsOnModel.setRect(allClipedDrawRect);
                    if (this._tmpBoundsOnModel.width * ppu > physicalMaskWidth) {
                        this._tmpBoundsOnModel.expand(allClipedDrawRect.width * MARGIN, 0.0);
                        scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;
                    }
                    else {
                        scaleX = ppu / physicalMaskWidth;
                    }
                    if (this._tmpBoundsOnModel.height * ppu > physicalMaskHeight) {
                        this._tmpBoundsOnModel.expand(0.0, allClipedDrawRect.height * MARGIN);
                        scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;
                    }
                    else {
                        scaleY = ppu / physicalMaskHeight;
                    }
                }
                else {
                    this._tmpBoundsOnModel.setRect(allClipedDrawRect);
                    this._tmpBoundsOnModel.expand(allClipedDrawRect.width * MARGIN, allClipedDrawRect.height * MARGIN);
                    scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;
                    scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;
                }
                {
                    this._tmpMatrix.loadIdentity();
                    {
                        this._tmpMatrix.translateRelative(-1.0, -1.0);
                        this._tmpMatrix.scaleRelative(2.0, 2.0);
                    }
                    {
                        this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);
                        this._tmpMatrix.scaleRelative(scaleX, scaleY);
                        this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);
                    }
                    this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());
                }
                {
                    this._tmpMatrix.loadIdentity();
                    {
                        this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);
                        this._tmpMatrix.scaleRelative(scaleX, scaleY);
                        this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);
                    }
                    this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());
                }
                clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());
                clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());
                if (!renderer.isUsingHighPrecisionMask()) {
                    var clipDrawCount = clipContext._clippingIdCount;
                    for (var i = 0; i < clipDrawCount; i++) {
                        var clipDrawIndex = clipContext._clippingIdList[i];
                        if (!model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)) {
                            continue;
                        }
                        renderer.setIsCulling(model.getDrawableCulling(clipDrawIndex) != false);
                        if (!this._clearedFrameBufferflags.at(clipContext._bufferIndex)) {
                            this.gl.clearColor(1.0, 1.0, 1.0, 1.0);
                            this.gl.clear(this.gl.COLOR_BUFFER_BIT);
                            this._clearedFrameBufferflags.set(clipContext._bufferIndex, true);
                        }
                        renderer.setClippingContextBufferForMask(clipContext);
                        renderer.drawMesh(model.getDrawableTextureIndex(clipDrawIndex), model.getDrawableVertexIndexCount(clipDrawIndex), model.getDrawableVertexCount(clipDrawIndex), model.getDrawableVertexIndices(clipDrawIndex), model.getDrawableVertices(clipDrawIndex), model.getDrawableVertexUvs(clipDrawIndex), model.getMultiplyColor(clipDrawIndex), model.getScreenColor(clipDrawIndex), model.getDrawableOpacity(clipDrawIndex), cubismrenderer_1.CubismBlendMode.CubismBlendMode_Normal, false);
                    }
                }
            }
            if (!renderer.isUsingHighPrecisionMask()) {
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);
                renderer.setClippingContextBufferForMask(null);
                this.gl.viewport(s_viewport[0], s_viewport[1], s_viewport[2], s_viewport[3]);
            }
        }
    };
    CubismClippingManager_WebGL.prototype.findSameClip = function (drawableMasks, drawableMaskCounts) {
        for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {
            var clippingContext = this._clippingContextListForMask.at(i);
            var count = clippingContext._clippingIdCount;
            if (count != drawableMaskCounts) {
                continue;
            }
            var sameCount = 0;
            for (var j = 0; j < count; j++) {
                var clipId = clippingContext._clippingIdList[j];
                for (var k = 0; k < count; k++) {
                    if (drawableMasks[k] == clipId) {
                        sameCount++;
                        break;
                    }
                }
            }
            if (sameCount == count) {
                return clippingContext;
            }
        }
        return null;
    };
    CubismClippingManager_WebGL.prototype.setupLayoutBounds = function (usingClipCount) {
        var useClippingMaskMaxCount = this._renderTextureCount <= 1
            ? ClippingMaskMaxCountOnDefault
            : ClippingMaskMaxCountOnMultiRenderTexture * this._renderTextureCount;
        if (usingClipCount <= 0 || usingClipCount > useClippingMaskMaxCount) {
            if (usingClipCount > useClippingMaskMaxCount) {
                (0, cubismdebug_1.CubismLogError)('not supported mask count : {0}\n[Details] render texture count : {1}, mask count : {2}', usingClipCount - useClippingMaskMaxCount, this._renderTextureCount, usingClipCount);
            }
            for (var index = 0; index < this._clippingContextListForMask.getSize(); index++) {
                var clipContext = this._clippingContextListForMask.at(index);
                clipContext._layoutChannelNo = 0;
                clipContext._layoutBounds.x = 0.0;
                clipContext._layoutBounds.y = 0.0;
                clipContext._layoutBounds.width = 1.0;
                clipContext._layoutBounds.height = 1.0;
                clipContext._bufferIndex = 0;
            }
            return;
        }
        var layoutCountMaxValue = this._renderTextureCount <= 1 ? 9 : 8;
        var countPerSheetDiv = usingClipCount / this._renderTextureCount;
        var countPerSheetMod = usingClipCount % this._renderTextureCount;
        countPerSheetDiv = ~~countPerSheetDiv;
        countPerSheetMod = ~~countPerSheetMod;
        var div = countPerSheetDiv / ColorChannelCount;
        var mod = countPerSheetDiv % ColorChannelCount;
        div = ~~div;
        mod = ~~mod;
        var curClipIndex = 0;
        for (var renderTextureNo = 0; renderTextureNo < this._renderTextureCount; renderTextureNo++) {
            for (var channelNo = 0; channelNo < ColorChannelCount; channelNo++) {
                var layoutCount = div + (channelNo < mod ? 1 : 0);
                var checkChannelNo = mod + 1 >= ColorChannelCount ? 0 : mod + 1;
                if (layoutCount < layoutCountMaxValue && channelNo == checkChannelNo) {
                    layoutCount += renderTextureNo < countPerSheetMod ? 1 : 0;
                }
                if (layoutCount == 0) {
                }
                else if (layoutCount == 1) {
                    var clipContext = this._clippingContextListForMask.at(curClipIndex++);
                    clipContext._layoutChannelNo = channelNo;
                    clipContext._layoutBounds.x = 0.0;
                    clipContext._layoutBounds.y = 0.0;
                    clipContext._layoutBounds.width = 1.0;
                    clipContext._layoutBounds.height = 1.0;
                    clipContext._bufferIndex = renderTextureNo;
                }
                else if (layoutCount == 2) {
                    for (var i = 0; i < layoutCount; i++) {
                        var xpos = i % 2;
                        xpos = ~~xpos;
                        var cc = this._clippingContextListForMask.at(curClipIndex++);
                        cc._layoutChannelNo = channelNo;
                        cc._layoutBounds.x = xpos * 0.5;
                        cc._layoutBounds.y = 0.0;
                        cc._layoutBounds.width = 0.5;
                        cc._layoutBounds.height = 1.0;
                        cc._bufferIndex = renderTextureNo;
                    }
                }
                else if (layoutCount <= 4) {
                    for (var i = 0; i < layoutCount; i++) {
                        var xpos = i % 2;
                        var ypos = i / 2;
                        xpos = ~~xpos;
                        ypos = ~~ypos;
                        var cc = this._clippingContextListForMask.at(curClipIndex++);
                        cc._layoutChannelNo = channelNo;
                        cc._layoutBounds.x = xpos * 0.5;
                        cc._layoutBounds.y = ypos * 0.5;
                        cc._layoutBounds.width = 0.5;
                        cc._layoutBounds.height = 0.5;
                        cc._bufferIndex = renderTextureNo;
                    }
                }
                else if (layoutCount <= layoutCountMaxValue) {
                    for (var i = 0; i < layoutCount; i++) {
                        var xpos = i % 3;
                        var ypos = i / 3;
                        xpos = ~~xpos;
                        ypos = ~~ypos;
                        var cc = this._clippingContextListForMask.at(curClipIndex++);
                        cc._layoutChannelNo = channelNo;
                        cc._layoutBounds.x = xpos / 3.0;
                        cc._layoutBounds.y = ypos / 3.0;
                        cc._layoutBounds.width = 1.0 / 3.0;
                        cc._layoutBounds.height = 1.0 / 3.0;
                        cc._bufferIndex = renderTextureNo;
                    }
                }
                else {
                    (0, cubismdebug_1.CubismLogError)('not supported mask count : {0}\n[Details] render texture count : {1}, mask count : {2}', usingClipCount - useClippingMaskMaxCount, this._renderTextureCount, usingClipCount);
                    for (var index = 0; index < layoutCount; index++) {
                        var cc = this._clippingContextListForMask.at(curClipIndex++);
                        cc._layoutChannelNo = 0;
                        cc._layoutBounds.x = 0.0;
                        cc._layoutBounds.y = 0.0;
                        cc._layoutBounds.width = 1.0;
                        cc._layoutBounds.height = 1.0;
                        cc._bufferIndex = 0;
                    }
                }
            }
        }
    };
    CubismClippingManager_WebGL.prototype.getColorBuffer = function () {
        return this._maskColorBuffers;
    };
    CubismClippingManager_WebGL.prototype.getClippingContextListForDraw = function () {
        return this._clippingContextListForDraw;
    };
    CubismClippingManager_WebGL.prototype.getClippingMaskCount = function () {
        return this._clippingContextListForMask.getSize();
    };
    CubismClippingManager_WebGL.prototype.setClippingMaskBufferSize = function (size) {
        this._clippingMaskBufferSize = size;
    };
    CubismClippingManager_WebGL.prototype.getClippingMaskBufferSize = function () {
        return this._clippingMaskBufferSize;
    };
    CubismClippingManager_WebGL.prototype.getRenderTextureCount = function () {
        return this._renderTextureCount;
    };
    return CubismClippingManager_WebGL;
}());
exports.CubismClippingManager_WebGL = CubismClippingManager_WebGL;
var CubismRenderTextureResource = (function () {
    function CubismRenderTextureResource(frameNo, texture) {
        this.frameNo = frameNo;
        this.textures = texture;
    }
    return CubismRenderTextureResource;
}());
exports.CubismRenderTextureResource = CubismRenderTextureResource;
var CubismClippingContext = (function () {
    function CubismClippingContext(manager, clippingDrawableIndices, clipCount) {
        this._owner = manager;
        this._clippingIdList = clippingDrawableIndices;
        this._clippingIdCount = clipCount;
        this._allClippedDrawRect = new csmrectf_1.csmRect();
        this._layoutBounds = new csmrectf_1.csmRect();
        this._clippedDrawableIndexList = [];
        this._matrixForMask = new cubismmatrix44_1.CubismMatrix44();
        this._matrixForDraw = new cubismmatrix44_1.CubismMatrix44();
        this._bufferIndex = 0;
    }
    CubismClippingContext.prototype.release = function () {
        if (this._layoutBounds != null) {
            this._layoutBounds = null;
        }
        if (this._allClippedDrawRect != null) {
            this._allClippedDrawRect = null;
        }
        if (this._clippedDrawableIndexList != null) {
            this._clippedDrawableIndexList = null;
        }
    };
    CubismClippingContext.prototype.addClippedDrawable = function (drawableIndex) {
        this._clippedDrawableIndexList.push(drawableIndex);
    };
    CubismClippingContext.prototype.getClippingManager = function () {
        return this._owner;
    };
    CubismClippingContext.prototype.setGl = function (gl) {
        this._owner.setGL(gl);
    };
    return CubismClippingContext;
}());
exports.CubismClippingContext = CubismClippingContext;
var CubismRendererProfile_WebGL = (function () {
    function CubismRendererProfile_WebGL() {
        this._lastVertexAttribArrayEnabled = new Array(4);
        this._lastColorMask = new Array(4);
        this._lastBlending = new Array(4);
        this._lastViewport = new Array(4);
    }
    CubismRendererProfile_WebGL.prototype.setGlEnable = function (index, enabled) {
        if (enabled)
            this.gl.enable(index);
        else
            this.gl.disable(index);
    };
    CubismRendererProfile_WebGL.prototype.setGlEnableVertexAttribArray = function (index, enabled) {
        if (enabled)
            this.gl.enableVertexAttribArray(index);
        else
            this.gl.disableVertexAttribArray(index);
    };
    CubismRendererProfile_WebGL.prototype.save = function () {
        if (this.gl == null) {
            (0, cubismdebug_1.CubismLogError)("'gl' is null. WebGLRenderingContext is required.\nPlease call 'CubimRenderer_WebGL.startUp' function.");
            return;
        }
        this._lastArrayBufferBinding = this.gl.getParameter(this.gl.ARRAY_BUFFER_BINDING);
        this._lastArrayBufferBinding = this.gl.getParameter(this.gl.ELEMENT_ARRAY_BUFFER_BINDING);
        this._lastProgram = this.gl.getParameter(this.gl.CURRENT_PROGRAM);
        this._lastActiveTexture = this.gl.getParameter(this.gl.ACTIVE_TEXTURE);
        this.gl.activeTexture(this.gl.TEXTURE1);
        this._lastTexture1Binding2D = this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);
        this.gl.activeTexture(this.gl.TEXTURE0);
        this._lastTexture0Binding2D = this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);
        this._lastVertexAttribArrayEnabled[0] = this.gl.getVertexAttrib(0, this.gl.VERTEX_ATTRIB_ARRAY_ENABLED);
        this._lastVertexAttribArrayEnabled[1] = this.gl.getVertexAttrib(1, this.gl.VERTEX_ATTRIB_ARRAY_ENABLED);
        this._lastVertexAttribArrayEnabled[2] = this.gl.getVertexAttrib(2, this.gl.VERTEX_ATTRIB_ARRAY_ENABLED);
        this._lastVertexAttribArrayEnabled[3] = this.gl.getVertexAttrib(3, this.gl.VERTEX_ATTRIB_ARRAY_ENABLED);
        this._lastScissorTest = this.gl.isEnabled(this.gl.SCISSOR_TEST);
        this._lastStencilTest = this.gl.isEnabled(this.gl.STENCIL_TEST);
        this._lastDepthTest = this.gl.isEnabled(this.gl.DEPTH_TEST);
        this._lastCullFace = this.gl.isEnabled(this.gl.CULL_FACE);
        this._lastBlend = this.gl.isEnabled(this.gl.BLEND);
        this._lastFrontFace = this.gl.getParameter(this.gl.FRONT_FACE);
        this._lastColorMask = this.gl.getParameter(this.gl.COLOR_WRITEMASK);
        this._lastBlending[0] = this.gl.getParameter(this.gl.BLEND_SRC_RGB);
        this._lastBlending[1] = this.gl.getParameter(this.gl.BLEND_DST_RGB);
        this._lastBlending[2] = this.gl.getParameter(this.gl.BLEND_SRC_ALPHA);
        this._lastBlending[3] = this.gl.getParameter(this.gl.BLEND_DST_ALPHA);
        this._lastFBO = this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);
        this._lastViewport = this.gl.getParameter(this.gl.VIEWPORT);
    };
    CubismRendererProfile_WebGL.prototype.restore = function () {
        if (this.gl == null) {
            (0, cubismdebug_1.CubismLogError)("'gl' is null. WebGLRenderingContext is required.\nPlease call 'CubimRenderer_WebGL.startUp' function.");
            return;
        }
        this.gl.useProgram(this._lastProgram);
        this.setGlEnableVertexAttribArray(0, this._lastVertexAttribArrayEnabled[0]);
        this.setGlEnableVertexAttribArray(1, this._lastVertexAttribArrayEnabled[1]);
        this.setGlEnableVertexAttribArray(2, this._lastVertexAttribArrayEnabled[2]);
        this.setGlEnableVertexAttribArray(3, this._lastVertexAttribArrayEnabled[3]);
        this.setGlEnable(this.gl.SCISSOR_TEST, this._lastScissorTest);
        this.setGlEnable(this.gl.STENCIL_TEST, this._lastStencilTest);
        this.setGlEnable(this.gl.DEPTH_TEST, this._lastDepthTest);
        this.setGlEnable(this.gl.CULL_FACE, this._lastCullFace);
        this.setGlEnable(this.gl.BLEND, this._lastBlend);
        this.gl.frontFace(this._lastFrontFace);
        this.gl.colorMask(this._lastColorMask[0], this._lastColorMask[1], this._lastColorMask[2], this._lastColorMask[3]);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this._lastArrayBufferBinding);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this._lastElementArrayBufferBinding);
        this.gl.activeTexture(this.gl.TEXTURE1);
        this.gl.bindTexture(this.gl.TEXTURE_2D, this._lastTexture1Binding2D);
        this.gl.activeTexture(this.gl.TEXTURE0);
        this.gl.bindTexture(this.gl.TEXTURE_2D, this._lastTexture0Binding2D);
        this.gl.activeTexture(this._lastActiveTexture);
        this.gl.blendFuncSeparate(this._lastBlending[0], this._lastBlending[1], this._lastBlending[2], this._lastBlending[3]);
    };
    CubismRendererProfile_WebGL.prototype.setGl = function (gl) {
        this.gl = gl;
    };
    return CubismRendererProfile_WebGL;
}());
exports.CubismRendererProfile_WebGL = CubismRendererProfile_WebGL;
var CubismShader_WebGL = (function () {
    function CubismShader_WebGL() {
        this._shaderSets = new csmvector_1.csmVector();
    }
    CubismShader_WebGL.getInstance = function () {
        if (s_instance == null) {
            s_instance = new CubismShader_WebGL();
            return s_instance;
        }
        return s_instance;
    };
    CubismShader_WebGL.deleteInstance = function () {
        if (s_instance) {
            s_instance.release();
            s_instance = null;
        }
    };
    CubismShader_WebGL.prototype.release = function () {
        this.releaseShaderProgram();
    };
    CubismShader_WebGL.prototype.setupShaderProgram = function (renderer, textureId, vertexCount, vertexArray, indexArray, uvArray, bufferData, opacity, colorBlendMode, baseColor, multiplyColor, screenColor, isPremultipliedAlpha, matrix4x4, invertedMask) {
        if (!isPremultipliedAlpha) {
            (0, cubismdebug_1.CubismLogError)('NoPremultipliedAlpha is not allowed');
        }
        if (this._shaderSets.getSize() == 0) {
            this.generateShaders();
        }
        var SRC_COLOR;
        var DST_COLOR;
        var SRC_ALPHA;
        var DST_ALPHA;
        if (renderer.getClippingContextBufferForMask() != null) {
            var shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_SetupMask);
            this.gl.useProgram(shaderSet.shaderProgram);
            this.gl.activeTexture(this.gl.TEXTURE0);
            this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);
            this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);
            if (bufferData.vertex == null) {
                bufferData.vertex = this.gl.createBuffer();
            }
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);
            this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);
            this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);
            this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);
            if (bufferData.uv == null) {
                bufferData.uv = this.gl.createBuffer();
            }
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);
            this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);
            this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);
            this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);
            var channelNo = renderer.getClippingContextBufferForMask()._layoutChannelNo;
            var colorChannel = renderer
                .getClippingContextBufferForMask()
                .getClippingManager()
                .getChannelFlagAsColor(channelNo);
            this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);
            this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForMask()._matrixForMask.getArray());
            var rect = renderer.getClippingContextBufferForMask()._layoutBounds;
            this.gl.uniform4f(shaderSet.uniformBaseColorLocation, rect.x * 2.0 - 1.0, rect.y * 2.0 - 1.0, rect.getRight() * 2.0 - 1.0, rect.getBottom() * 2.0 - 1.0);
            this.gl.uniform4f(shaderSet.uniformMultiplyColorLocation, multiplyColor.R, multiplyColor.G, multiplyColor.B, multiplyColor.A);
            this.gl.uniform4f(shaderSet.uniformScreenColorLocation, screenColor.R, screenColor.G, screenColor.B, screenColor.A);
            SRC_COLOR = this.gl.ZERO;
            DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;
            SRC_ALPHA = this.gl.ZERO;
            DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;
        }
        else {
            var masked = renderer.getClippingContextBufferForDraw() != null;
            var offset = masked ? (invertedMask ? 2 : 1) : 0;
            var shaderSet = new CubismShaderSet();
            switch (colorBlendMode) {
                case cubismrenderer_1.CubismBlendMode.CubismBlendMode_Normal:
                default:
                    shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset);
                    SRC_COLOR = this.gl.ONE;
                    DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;
                    SRC_ALPHA = this.gl.ONE;
                    DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;
                    break;
                case cubismrenderer_1.CubismBlendMode.CubismBlendMode_Additive:
                    shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_AddPremultipliedAlpha + offset);
                    SRC_COLOR = this.gl.ONE;
                    DST_COLOR = this.gl.ONE;
                    SRC_ALPHA = this.gl.ZERO;
                    DST_ALPHA = this.gl.ONE;
                    break;
                case cubismrenderer_1.CubismBlendMode.CubismBlendMode_Multiplicative:
                    shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_MultPremultipliedAlpha + offset);
                    SRC_COLOR = this.gl.DST_COLOR;
                    DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;
                    SRC_ALPHA = this.gl.ZERO;
                    DST_ALPHA = this.gl.ONE;
                    break;
            }
            this.gl.useProgram(shaderSet.shaderProgram);
            if (bufferData.vertex == null) {
                bufferData.vertex = this.gl.createBuffer();
            }
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);
            this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);
            this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);
            this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);
            if (bufferData.uv == null) {
                bufferData.uv = this.gl.createBuffer();
            }
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);
            this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);
            this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);
            this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);
            if (masked) {
                this.gl.activeTexture(this.gl.TEXTURE1);
                var tex = renderer
                    .getClippingContextBufferForDraw()
                    .getClippingManager()
                    .getColorBuffer()
                    .at(renderer.getClippingContextBufferForDraw()._bufferIndex);
                this.gl.bindTexture(this.gl.TEXTURE_2D, tex);
                this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);
                this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForDraw()._matrixForDraw.getArray());
                var channelNo = renderer.getClippingContextBufferForDraw()._layoutChannelNo;
                var colorChannel = renderer
                    .getClippingContextBufferForDraw()
                    .getClippingManager()
                    .getChannelFlagAsColor(channelNo);
                this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);
            }
            this.gl.activeTexture(this.gl.TEXTURE0);
            this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);
            this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);
            this.gl.uniformMatrix4fv(shaderSet.uniformMatrixLocation, false, matrix4x4.getArray());
            this.gl.uniform4f(shaderSet.uniformBaseColorLocation, baseColor.R, baseColor.G, baseColor.B, baseColor.A);
            this.gl.uniform4f(shaderSet.uniformMultiplyColorLocation, multiplyColor.R, multiplyColor.G, multiplyColor.B, multiplyColor.A);
            this.gl.uniform4f(shaderSet.uniformScreenColorLocation, screenColor.R, screenColor.G, screenColor.B, screenColor.A);
        }
        if (bufferData.index == null) {
            bufferData.index = this.gl.createBuffer();
        }
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, indexArray, this.gl.DYNAMIC_DRAW);
        this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);
    };
    CubismShader_WebGL.prototype.releaseShaderProgram = function () {
        for (var i = 0; i < this._shaderSets.getSize(); i++) {
            this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);
            this._shaderSets.at(i).shaderProgram = 0;
            this._shaderSets.set(i, void 0);
            this._shaderSets.set(i, null);
        }
    };
    CubismShader_WebGL.prototype.generateShaders = function () {
        for (var i = 0; i < ShaderCount; i++) {
            this._shaderSets.pushBack(new CubismShaderSet());
        }
        this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrcSetupMask, exports.fragmentShaderSrcsetupMask);
        this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrc, exports.fragmentShaderSrcPremultipliedAlpha);
        this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrcMasked, exports.fragmentShaderSrcMaskPremultipliedAlpha);
        this._shaderSets.at(3).shaderProgram = this.loadShaderProgram(exports.vertexShaderSrcMasked, exports.fragmentShaderSrcMaskInvertedPremultipliedAlpha);
        this._shaderSets.at(4).shaderProgram = this._shaderSets.at(1).shaderProgram;
        this._shaderSets.at(5).shaderProgram = this._shaderSets.at(2).shaderProgram;
        this._shaderSets.at(6).shaderProgram = this._shaderSets.at(3).shaderProgram;
        this._shaderSets.at(7).shaderProgram = this._shaderSets.at(1).shaderProgram;
        this._shaderSets.at(8).shaderProgram = this._shaderSets.at(2).shaderProgram;
        this._shaderSets.at(9).shaderProgram = this._shaderSets.at(3).shaderProgram;
        this._shaderSets.at(0).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_position');
        this._shaderSets.at(0).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_texCoord');
        this._shaderSets.at(0).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 's_texture0');
        this._shaderSets.at(0).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(0).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(0).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_baseColor');
        this._shaderSets.at(0).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(0).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_screenColor');
        this._shaderSets.at(1).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_position');
        this._shaderSets.at(1).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_texCoord');
        this._shaderSets.at(1).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 's_texture0');
        this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_matrix');
        this._shaderSets.at(1).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_baseColor');
        this._shaderSets.at(1).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(1).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_screenColor');
        this._shaderSets.at(2).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_position');
        this._shaderSets.at(2).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_texCoord');
        this._shaderSets.at(2).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture0');
        this._shaderSets.at(2).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture1');
        this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_matrix');
        this._shaderSets.at(2).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(2).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(2).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_baseColor');
        this._shaderSets.at(2).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(2).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_screenColor');
        this._shaderSets.at(3).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_position');
        this._shaderSets.at(3).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_texCoord');
        this._shaderSets.at(3).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture0');
        this._shaderSets.at(3).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture1');
        this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_matrix');
        this._shaderSets.at(3).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(3).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(3).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_baseColor');
        this._shaderSets.at(3).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(3).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_screenColor');
        this._shaderSets.at(4).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_position');
        this._shaderSets.at(4).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_texCoord');
        this._shaderSets.at(4).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 's_texture0');
        this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_matrix');
        this._shaderSets.at(4).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_baseColor');
        this._shaderSets.at(4).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(4).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_screenColor');
        this._shaderSets.at(5).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_position');
        this._shaderSets.at(5).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_texCoord');
        this._shaderSets.at(5).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture0');
        this._shaderSets.at(5).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture1');
        this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_matrix');
        this._shaderSets.at(5).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(5).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(5).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_baseColor');
        this._shaderSets.at(5).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(5).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_screenColor');
        this._shaderSets.at(6).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_position');
        this._shaderSets.at(6).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_texCoord');
        this._shaderSets.at(6).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture0');
        this._shaderSets.at(6).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture1');
        this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_matrix');
        this._shaderSets.at(6).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(6).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(6).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_baseColor');
        this._shaderSets.at(6).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(6).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_screenColor');
        this._shaderSets.at(7).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_position');
        this._shaderSets.at(7).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_texCoord');
        this._shaderSets.at(7).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 's_texture0');
        this._shaderSets.at(7).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_matrix');
        this._shaderSets.at(7).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_baseColor');
        this._shaderSets.at(7).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(7).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_screenColor');
        this._shaderSets.at(8).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_position');
        this._shaderSets.at(8).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_texCoord');
        this._shaderSets.at(8).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture0');
        this._shaderSets.at(8).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture1');
        this._shaderSets.at(8).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_matrix');
        this._shaderSets.at(8).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(8).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(8).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_baseColor');
        this._shaderSets.at(8).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(8).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_screenColor');
        this._shaderSets.at(9).attributePositionLocation =
            this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_position');
        this._shaderSets.at(9).attributeTexCoordLocation =
            this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_texCoord');
        this._shaderSets.at(9).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture0');
        this._shaderSets.at(9).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture1');
        this._shaderSets.at(9).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_matrix');
        this._shaderSets.at(9).uniformClipMatrixLocation =
            this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_clipMatrix');
        this._shaderSets.at(9).uniformChannelFlagLocation =
            this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_channelFlag');
        this._shaderSets.at(9).uniformBaseColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_baseColor');
        this._shaderSets.at(9).uniformMultiplyColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_multiplyColor');
        this._shaderSets.at(9).uniformScreenColorLocation =
            this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_screenColor');
    };
    CubismShader_WebGL.prototype.loadShaderProgram = function (vertexShaderSource, fragmentShaderSource) {
        var shaderProgram = this.gl.createProgram();
        var vertShader = this.compileShaderSource(this.gl.VERTEX_SHADER, vertexShaderSource);
        if (!vertShader) {
            (0, cubismdebug_1.CubismLogError)('Vertex shader compile error!');
            return 0;
        }
        var fragShader = this.compileShaderSource(this.gl.FRAGMENT_SHADER, fragmentShaderSource);
        if (!fragShader) {
            (0, cubismdebug_1.CubismLogError)('Vertex shader compile error!');
            return 0;
        }
        this.gl.attachShader(shaderProgram, vertShader);
        this.gl.attachShader(shaderProgram, fragShader);
        this.gl.linkProgram(shaderProgram);
        var linkStatus = this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS);
        if (!linkStatus) {
            (0, cubismdebug_1.CubismLogError)('Failed to link program: {0}', shaderProgram);
            this.gl.deleteShader(vertShader);
            vertShader = 0;
            this.gl.deleteShader(fragShader);
            fragShader = 0;
            if (shaderProgram) {
                this.gl.deleteProgram(shaderProgram);
                shaderProgram = 0;
            }
            return 0;
        }
        this.gl.deleteShader(vertShader);
        this.gl.deleteShader(fragShader);
        return shaderProgram;
    };
    CubismShader_WebGL.prototype.compileShaderSource = function (shaderType, shaderSource) {
        var source = shaderSource;
        var shader = this.gl.createShader(shaderType);
        this.gl.shaderSource(shader, source);
        this.gl.compileShader(shader);
        if (!shader) {
            var log = this.gl.getShaderInfoLog(shader);
            (0, cubismdebug_1.CubismLogError)('Shader compile log: {0} ', log);
        }
        var status = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);
        if (!status) {
            this.gl.deleteShader(shader);
            return null;
        }
        return shader;
    };
    CubismShader_WebGL.prototype.setGl = function (gl) {
        this.gl = gl;
    };
    return CubismShader_WebGL;
}());
exports.CubismShader_WebGL = CubismShader_WebGL;
var CubismShaderSet = (function () {
    function CubismShaderSet() {
    }
    return CubismShaderSet;
}());
exports.CubismShaderSet = CubismShaderSet;
var ShaderNames;
(function (ShaderNames) {
    ShaderNames[ShaderNames["ShaderNames_SetupMask"] = 0] = "ShaderNames_SetupMask";
    ShaderNames[ShaderNames["ShaderNames_NormalPremultipliedAlpha"] = 1] = "ShaderNames_NormalPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_NormalMaskedPremultipliedAlpha"] = 2] = "ShaderNames_NormalMaskedPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_NomralMaskedInvertedPremultipliedAlpha"] = 3] = "ShaderNames_NomralMaskedInvertedPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_AddPremultipliedAlpha"] = 4] = "ShaderNames_AddPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_AddMaskedPremultipliedAlpha"] = 5] = "ShaderNames_AddMaskedPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_AddMaskedPremultipliedAlphaInverted"] = 6] = "ShaderNames_AddMaskedPremultipliedAlphaInverted";
    ShaderNames[ShaderNames["ShaderNames_MultPremultipliedAlpha"] = 7] = "ShaderNames_MultPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_MultMaskedPremultipliedAlpha"] = 8] = "ShaderNames_MultMaskedPremultipliedAlpha";
    ShaderNames[ShaderNames["ShaderNames_MultMaskedPremultipliedAlphaInverted"] = 9] = "ShaderNames_MultMaskedPremultipliedAlphaInverted";
})(ShaderNames = exports.ShaderNames || (exports.ShaderNames = {}));
exports.vertexShaderSrcSetupMask = 'attribute vec4     a_position;' +
    'attribute vec2     a_texCoord;' +
    'varying vec2       v_texCoord;' +
    'varying vec4       v_myPos;' +
    'uniform mat4       u_clipMatrix;' +
    'void main()' +
    '{' +
    '   gl_Position = u_clipMatrix * a_position;' +
    '   v_myPos = u_clipMatrix * a_position;' +
    '   v_texCoord = a_texCoord;' +
    '   v_texCoord.y = 1.0 - v_texCoord.y;' +
    '}';
exports.fragmentShaderSrcsetupMask = 'precision mediump float;' +
    'varying vec2       v_texCoord;' +
    'varying vec4       v_myPos;' +
    'uniform vec4       u_baseColor;' +
    'uniform vec4       u_channelFlag;' +
    'uniform sampler2D  s_texture0;' +
    'void main()' +
    '{' +
    '   float isInside = ' +
    '       step(u_baseColor.x, v_myPos.x/v_myPos.w)' +
    '       * step(u_baseColor.y, v_myPos.y/v_myPos.w)' +
    '       * step(v_myPos.x/v_myPos.w, u_baseColor.z)' +
    '       * step(v_myPos.y/v_myPos.w, u_baseColor.w);' +
    '   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;' +
    '}';
exports.vertexShaderSrc = 'attribute vec4     a_position;' +
    'attribute vec2     a_texCoord;' +
    'varying vec2       v_texCoord;' +
    'uniform mat4       u_matrix;' +
    'void main()' +
    '{' +
    '   gl_Position = u_matrix * a_position;' +
    '   v_texCoord = a_texCoord;' +
    '   v_texCoord.y = 1.0 - v_texCoord.y;' +
    '}';
exports.vertexShaderSrcMasked = 'attribute vec4     a_position;' +
    'attribute vec2     a_texCoord;' +
    'varying vec2       v_texCoord;' +
    'varying vec4       v_clipPos;' +
    'uniform mat4       u_matrix;' +
    'uniform mat4       u_clipMatrix;' +
    'void main()' +
    '{' +
    '   gl_Position = u_matrix * a_position;' +
    '   v_clipPos = u_clipMatrix * a_position;' +
    '   v_texCoord = a_texCoord;' +
    '   v_texCoord.y = 1.0 - v_texCoord.y;' +
    '}';
exports.fragmentShaderSrcPremultipliedAlpha = 'precision mediump float;' +
    'varying vec2       v_texCoord;' +
    'uniform vec4       u_baseColor;' +
    'uniform sampler2D  s_texture0;' +
    'uniform vec4       u_multiplyColor;' +
    'uniform vec4       u_screenColor;' +
    'void main()' +
    '{' +
    '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +
    '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +
    '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +
    '   vec4 color = texColor * u_baseColor;' +
    '   gl_FragColor = vec4(color.rgb, color.a);' +
    '}';
exports.fragmentShaderSrcMaskPremultipliedAlpha = 'precision mediump float;' +
    'varying vec2       v_texCoord;' +
    'varying vec4       v_clipPos;' +
    'uniform vec4       u_baseColor;' +
    'uniform vec4       u_channelFlag;' +
    'uniform sampler2D  s_texture0;' +
    'uniform sampler2D  s_texture1;' +
    'uniform vec4       u_multiplyColor;' +
    'uniform vec4       u_screenColor;' +
    'void main()' +
    '{' +
    '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +
    '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +
    '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +
    '   vec4 col_formask = texColor * u_baseColor;' +
    '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +
    '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +
    '   col_formask = col_formask * maskVal;' +
    '   gl_FragColor = col_formask;' +
    '}';
exports.fragmentShaderSrcMaskInvertedPremultipliedAlpha = 'precision mediump float;' +
    'varying vec2      v_texCoord;' +
    'varying vec4      v_clipPos;' +
    'uniform sampler2D s_texture0;' +
    'uniform sampler2D s_texture1;' +
    'uniform vec4      u_channelFlag;' +
    'uniform vec4      u_baseColor;' +
    'uniform vec4      u_multiplyColor;' +
    'uniform vec4      u_screenColor;' +
    'void main()' +
    '{' +
    '   vec4 texColor = texture2D(s_texture0, v_texCoord);' +
    '   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;' +
    '   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);' +
    '   vec4 col_formask = texColor * u_baseColor;' +
    '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +
    '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +
    '   col_formask = col_formask * (1.0 - maskVal);' +
    '   gl_FragColor = col_formask;' +
    '}';
var CubismRenderer_WebGL = (function (_super) {
    __extends(CubismRenderer_WebGL, _super);
    function CubismRenderer_WebGL() {
        var _this = _super.call(this) || this;
        _this._clippingContextBufferForMask = null;
        _this._clippingContextBufferForDraw = null;
        _this._rendererProfile = new CubismRendererProfile_WebGL();
        _this.firstDraw = true;
        _this._textures = new csmmap_1.csmMap();
        _this._sortedDrawableIndexList = new csmvector_1.csmVector();
        _this._bufferData = {
            vertex: (WebGLBuffer = null),
            uv: (WebGLBuffer = null),
            index: (WebGLBuffer = null),
        };
        _this._textures.prepareCapacity(32, true);
        return _this;
    }
    CubismRenderer_WebGL.prototype.initialize = function (model, maskBufferCount) {
        if (maskBufferCount === void 0) { maskBufferCount = 1; }
        if (model.isUsingMasking()) {
            this._clippingManager = new CubismClippingManager_WebGL();
            this._clippingManager.initialize(model, model.getDrawableCount(), model.getDrawableMasks(), model.getDrawableMaskCounts(), maskBufferCount);
        }
        this._sortedDrawableIndexList.resize(model.getDrawableCount(), 0);
        _super.prototype.initialize.call(this, model);
    };
    CubismRenderer_WebGL.prototype.bindTexture = function (modelTextureNo, glTexture) {
        this._textures.setValue(modelTextureNo, glTexture);
    };
    CubismRenderer_WebGL.prototype.getBindedTextures = function () {
        return this._textures;
    };
    CubismRenderer_WebGL.prototype.setClippingMaskBufferSize = function (size) {
        if (!this._model.isUsingMasking()) {
            return;
        }
        var renderTextureCount = this._clippingManager.getRenderTextureCount();
        this._clippingManager.release();
        this._clippingManager = void 0;
        this._clippingManager = null;
        this._clippingManager = new CubismClippingManager_WebGL();
        this._clippingManager.setClippingMaskBufferSize(size);
        this._clippingManager.initialize(this.getModel(), this.getModel().getDrawableCount(), this.getModel().getDrawableMasks(), this.getModel().getDrawableMaskCounts(), renderTextureCount);
    };
    CubismRenderer_WebGL.prototype.getClippingMaskBufferSize = function () {
        return this._model.isUsingMasking()
            ? this._clippingManager.getClippingMaskBufferSize()
            : -1;
    };
    CubismRenderer_WebGL.prototype.getRenderTextureCount = function () {
        return this._model.isUsingMasking()
            ? this._clippingManager.getRenderTextureCount()
            : -1;
    };
    CubismRenderer_WebGL.prototype.release = function () {
        if (this._clippingManager) {
            this._clippingManager.release();
            this._clippingManager = void 0;
            this._clippingManager = null;
        }
        if (this.gl == null) {
            return;
        }
        this.gl.deleteBuffer(this._bufferData.vertex);
        this._bufferData.vertex = null;
        this.gl.deleteBuffer(this._bufferData.uv);
        this._bufferData.uv = null;
        this.gl.deleteBuffer(this._bufferData.index);
        this._bufferData.index = null;
        this._bufferData = null;
        this._textures = null;
    };
    CubismRenderer_WebGL.prototype.doDrawModel = function () {
        if (this.gl == null) {
            (0, cubismdebug_1.CubismLogError)("'gl' is null. WebGLRenderingContext is required.\nPlease call 'CubimRenderer_WebGL.startUp' function.");
            return;
        }
        if (this._clippingManager != null) {
            this.preDraw();
            this._clippingManager.setupClippingContext(this.getModel(), this);
        }
        this.preDraw();
        var drawableCount = this.getModel().getDrawableCount();
        var renderOrder = this.getModel().getDrawableRenderOrders();
        for (var i = 0; i < drawableCount; ++i) {
            var order = renderOrder[i];
            this._sortedDrawableIndexList.set(order, i);
        }
        for (var i = 0; i < drawableCount; ++i) {
            var drawableIndex = this._sortedDrawableIndexList.at(i);
            if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {
                continue;
            }
            var clipContext = this._clippingManager != null
                ? this._clippingManager
                    .getClippingContextListForDraw()
                    .at(drawableIndex)
                : null;
            if (clipContext != null && this.isUsingHighPrecisionMask()) {
                if (clipContext._isUsing) {
                    this.gl.viewport(0, 0, this._clippingManager.getClippingMaskBufferSize(), this._clippingManager.getClippingMaskBufferSize());
                    this.preDraw();
                    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, clipContext
                        .getClippingManager()
                        .getMaskRenderTexture()
                        .at(clipContext._bufferIndex));
                    this.gl.clearColor(1.0, 1.0, 1.0, 1.0);
                    this.gl.clear(this.gl.COLOR_BUFFER_BIT);
                }
                {
                    var clipDrawCount = clipContext._clippingIdCount;
                    for (var index = 0; index < clipDrawCount; index++) {
                        var clipDrawIndex = clipContext._clippingIdList[index];
                        if (!this._model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)) {
                            continue;
                        }
                        this.setIsCulling(this._model.getDrawableCulling(clipDrawIndex) != false);
                        this.setClippingContextBufferForMask(clipContext);
                        this.drawMesh(this.getModel().getDrawableTextureIndex(clipDrawIndex), this.getModel().getDrawableVertexIndexCount(clipDrawIndex), this.getModel().getDrawableVertexCount(clipDrawIndex), this.getModel().getDrawableVertexIndices(clipDrawIndex), this.getModel().getDrawableVertices(clipDrawIndex), this.getModel().getDrawableVertexUvs(clipDrawIndex), this.getModel().getMultiplyColor(clipDrawIndex), this.getModel().getScreenColor(clipDrawIndex), this.getModel().getDrawableOpacity(clipDrawIndex), cubismrenderer_1.CubismBlendMode.CubismBlendMode_Normal, false);
                    }
                }
                {
                    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);
                    this.setClippingContextBufferForMask(null);
                    this.gl.viewport(s_viewport[0], s_viewport[1], s_viewport[2], s_viewport[3]);
                    this.preDraw();
                }
            }
            this.setClippingContextBufferForDraw(clipContext);
            this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));
            this.drawMesh(this.getModel().getDrawableTextureIndex(drawableIndex), this.getModel().getDrawableVertexIndexCount(drawableIndex), this.getModel().getDrawableVertexCount(drawableIndex), this.getModel().getDrawableVertexIndices(drawableIndex), this.getModel().getDrawableVertices(drawableIndex), this.getModel().getDrawableVertexUvs(drawableIndex), this.getModel().getMultiplyColor(drawableIndex), this.getModel().getScreenColor(drawableIndex), this.getModel().getDrawableOpacity(drawableIndex), this.getModel().getDrawableBlendMode(drawableIndex), this.getModel().getDrawableInvertedMaskBit(drawableIndex));
        }
    };
    CubismRenderer_WebGL.prototype.drawMesh = function (textureNo, indexCount, vertexCount, indexArray, vertexArray, uvArray, multiplyColor, screenColor, opacity, colorBlendMode, invertedMask) {
        if (this.isCulling()) {
            this.gl.enable(this.gl.CULL_FACE);
        }
        else {
            this.gl.disable(this.gl.CULL_FACE);
        }
        this.gl.frontFace(this.gl.CCW);
        var modelColorRGBA = this.getModelColor();
        if (this.getClippingContextBufferForMask() == null) {
            modelColorRGBA.A *= opacity;
            if (this.isPremultipliedAlpha()) {
                modelColorRGBA.R *= modelColorRGBA.A;
                modelColorRGBA.G *= modelColorRGBA.A;
                modelColorRGBA.B *= modelColorRGBA.A;
            }
        }
        var drawtexture;
        if (this._textures.getValue(textureNo) != null) {
            drawtexture = this._textures.getValue(textureNo);
        }
        else {
            drawtexture = null;
        }
        CubismShader_WebGL.getInstance().setupShaderProgram(this, drawtexture, vertexCount, vertexArray, indexArray, uvArray, this._bufferData, opacity, colorBlendMode, modelColorRGBA, multiplyColor, screenColor, this.isPremultipliedAlpha(), this.getMvpMatrix(), invertedMask);
        this.gl.drawElements(this.gl.TRIANGLES, indexCount, this.gl.UNSIGNED_SHORT, 0);
        this.gl.useProgram(null);
        this.setClippingContextBufferForDraw(null);
        this.setClippingContextBufferForMask(null);
    };
    CubismRenderer_WebGL.prototype.saveProfile = function () {
        this._rendererProfile.save();
    };
    CubismRenderer_WebGL.prototype.restoreProfile = function () {
        this._rendererProfile.restore();
    };
    CubismRenderer_WebGL.doStaticRelease = function () {
        CubismShader_WebGL.deleteInstance();
    };
    CubismRenderer_WebGL.prototype.setRenderState = function (fbo, viewport) {
        s_fbo = fbo;
        s_viewport = viewport;
    };
    CubismRenderer_WebGL.prototype.preDraw = function () {
        if (this.firstDraw) {
            this.firstDraw = false;
        }
        this.gl.disable(this.gl.SCISSOR_TEST);
        this.gl.disable(this.gl.STENCIL_TEST);
        this.gl.disable(this.gl.DEPTH_TEST);
        this.gl.frontFace(this.gl.CW);
        this.gl.enable(this.gl.BLEND);
        this.gl.colorMask(true, true, true, true);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        if (this.getAnisotropy() > 0.0 && this._extension) {
            for (var i = 0; i < this._textures.getSize(); ++i) {
                this.gl.bindTexture(this.gl.TEXTURE_2D, this._textures.getValue(i));
                this.gl.texParameterf(this.gl.TEXTURE_2D, this._extension.TEXTURE_MAX_ANISOTROPY_EXT, this.getAnisotropy());
            }
        }
    };
    CubismRenderer_WebGL.prototype.setClippingContextBufferForMask = function (clip) {
        this._clippingContextBufferForMask = clip;
    };
    CubismRenderer_WebGL.prototype.getClippingContextBufferForMask = function () {
        return this._clippingContextBufferForMask;
    };
    CubismRenderer_WebGL.prototype.setClippingContextBufferForDraw = function (clip) {
        this._clippingContextBufferForDraw = clip;
    };
    CubismRenderer_WebGL.prototype.getClippingContextBufferForDraw = function () {
        return this._clippingContextBufferForDraw;
    };
    CubismRenderer_WebGL.prototype.startUp = function (gl) {
        this.gl = gl;
        if (this._clippingManager) {
            this._clippingManager.setGL(gl);
        }
        CubismShader_WebGL.getInstance().setGl(gl);
        this._rendererProfile.setGl(gl);
        this._extension =
            this.gl.getExtension('EXT_texture_filter_anisotropic') ||
                this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') ||
                this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic');
    };
    return CubismRenderer_WebGL;
}(cubismrenderer_1.CubismRenderer));
exports.CubismRenderer_WebGL = CubismRenderer_WebGL;
cubismrenderer_1.CubismRenderer.staticRelease = function () {
    CubismRenderer_WebGL.doStaticRelease();
};
var $ = __importStar(__webpack_require__(/*! ./cubismrenderer_webgl */ "../../../Framework/src/rendering/cubismrenderer_webgl.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismClippingContext = $.CubismClippingContext;
    Live2DCubismFramework.CubismClippingManager_WebGL = $.CubismClippingManager_WebGL;
    Live2DCubismFramework.CubismRenderTextureResource = $.CubismRenderTextureResource;
    Live2DCubismFramework.CubismRenderer_WebGL = $.CubismRenderer_WebGL;
    Live2DCubismFramework.CubismShaderSet = $.CubismShaderSet;
    Live2DCubismFramework.CubismShader_WebGL = $.CubismShader_WebGL;
    Live2DCubismFramework.ShaderNames = $.ShaderNames;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/type/csmmap.ts":
/*!*********************************************!*\
  !*** ../../../Framework/src/type/csmmap.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.iterator = exports.csmMap = exports.csmPair = void 0;
var cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
var csmPair = (function () {
    function csmPair(key, value) {
        this.first = key == undefined ? null : key;
        this.second = value == undefined ? null : value;
    }
    return csmPair;
}());
exports.csmPair = csmPair;
var csmMap = exports.csmMap = (function () {
    function csmMap(size) {
        if (size != undefined) {
            if (size < 1) {
                this._keyValues = [];
                this._dummyValue = null;
                this._size = 0;
            }
            else {
                this._keyValues = new Array(size);
                this._size = size;
            }
        }
        else {
            this._keyValues = [];
            this._dummyValue = null;
            this._size = 0;
        }
    }
    csmMap.prototype.release = function () {
        this.clear();
    };
    csmMap.prototype.appendKey = function (key) {
        this.prepareCapacity(this._size + 1, false);
        this._keyValues[this._size] = new csmPair(key);
        this._size += 1;
    };
    csmMap.prototype.getValue = function (key) {
        var found = -1;
        for (var i = 0; i < this._size; i++) {
            if (this._keyValues[i].first == key) {
                found = i;
                break;
            }
        }
        if (found >= 0) {
            return this._keyValues[found].second;
        }
        else {
            this.appendKey(key);
            return this._keyValues[this._size - 1].second;
        }
    };
    csmMap.prototype.setValue = function (key, value) {
        var found = -1;
        for (var i = 0; i < this._size; i++) {
            if (this._keyValues[i].first == key) {
                found = i;
                break;
            }
        }
        if (found >= 0) {
            this._keyValues[found].second = value;
        }
        else {
            this.appendKey(key);
            this._keyValues[this._size - 1].second = value;
        }
    };
    csmMap.prototype.isExist = function (key) {
        for (var i = 0; i < this._size; i++) {
            if (this._keyValues[i].first == key) {
                return true;
            }
        }
        return false;
    };
    csmMap.prototype.clear = function () {
        this._keyValues = void 0;
        this._keyValues = null;
        this._keyValues = [];
        this._size = 0;
    };
    csmMap.prototype.getSize = function () {
        return this._size;
    };
    csmMap.prototype.prepareCapacity = function (newSize, fitToSize) {
        if (newSize > this._keyValues.length) {
            if (this._keyValues.length == 0) {
                if (!fitToSize && newSize < csmMap.DefaultSize)
                    newSize = csmMap.DefaultSize;
                this._keyValues.length = newSize;
            }
            else {
                if (!fitToSize && newSize < this._keyValues.length * 2)
                    newSize = this._keyValues.length * 2;
                this._keyValues.length = newSize;
            }
        }
    };
    csmMap.prototype.begin = function () {
        var ite = new iterator(this, 0);
        return ite;
    };
    csmMap.prototype.end = function () {
        var ite = new iterator(this, this._size);
        return ite;
    };
    csmMap.prototype.erase = function (ite) {
        var index = ite._index;
        if (index < 0 || this._size <= index) {
            return ite;
        }
        this._keyValues.splice(index, 1);
        --this._size;
        var ite2 = new iterator(this, index);
        return ite2;
    };
    csmMap.prototype.dumpAsInt = function () {
        for (var i = 0; i < this._size; i++) {
            (0, cubismdebug_1.CubismLogDebug)('{0} ,', this._keyValues[i]);
            (0, cubismdebug_1.CubismLogDebug)('\n');
        }
    };
    csmMap.DefaultSize = 10;
    return csmMap;
}());
var iterator = (function () {
    function iterator(v, idx) {
        this._map = v != undefined ? v : new csmMap();
        this._index = idx != undefined ? idx : 0;
    }
    iterator.prototype.set = function (ite) {
        this._index = ite._index;
        this._map = ite._map;
        return this;
    };
    iterator.prototype.preIncrement = function () {
        ++this._index;
        return this;
    };
    iterator.prototype.preDecrement = function () {
        --this._index;
        return this;
    };
    iterator.prototype.increment = function () {
        var iteold = new iterator(this._map, this._index++);
        return iteold;
    };
    iterator.prototype.decrement = function () {
        var iteold = new iterator(this._map, this._index);
        this._map = iteold._map;
        this._index = iteold._index;
        return this;
    };
    iterator.prototype.ptr = function () {
        return this._map._keyValues[this._index];
    };
    iterator.prototype.notEqual = function (ite) {
        return this._index != ite._index || this._map != ite._map;
    };
    return iterator;
}());
exports.iterator = iterator;
var $ = __importStar(__webpack_require__(/*! ./csmmap */ "../../../Framework/src/type/csmmap.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.csmMap = $.csmMap;
    Live2DCubismFramework.csmPair = $.csmPair;
    Live2DCubismFramework.iterator = $.iterator;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/type/csmrectf.ts":
/*!***********************************************!*\
  !*** ../../../Framework/src/type/csmrectf.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.csmRect = void 0;
var csmRect = (function () {
    function csmRect(x, y, w, h) {
        this.x = x;
        this.y = y;
        this.width = w;
        this.height = h;
    }
    csmRect.prototype.getCenterX = function () {
        return this.x + 0.5 * this.width;
    };
    csmRect.prototype.getCenterY = function () {
        return this.y + 0.5 * this.height;
    };
    csmRect.prototype.getRight = function () {
        return this.x + this.width;
    };
    csmRect.prototype.getBottom = function () {
        return this.y + this.height;
    };
    csmRect.prototype.setRect = function (r) {
        this.x = r.x;
        this.y = r.y;
        this.width = r.width;
        this.height = r.height;
    };
    csmRect.prototype.expand = function (w, h) {
        this.x -= w;
        this.y -= h;
        this.width += w * 2.0;
        this.height += h * 2.0;
    };
    return csmRect;
}());
exports.csmRect = csmRect;
var $ = __importStar(__webpack_require__(/*! ./csmrectf */ "../../../Framework/src/type/csmrectf.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.csmRect = $.csmRect;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/type/csmstring.ts":
/*!************************************************!*\
  !*** ../../../Framework/src/type/csmstring.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.csmString = void 0;
var csmString = (function () {
    function csmString(s) {
        this.s = s;
    }
    csmString.prototype.append = function (c, length) {
        this.s += length !== undefined ? c.substr(0, length) : c;
        return this;
    };
    csmString.prototype.expansion = function (length, v) {
        for (var i = 0; i < length; i++) {
            this.append(v);
        }
        return this;
    };
    csmString.prototype.getBytes = function () {
        return encodeURIComponent(this.s).replace(/%../g, 'x').length;
    };
    csmString.prototype.getLength = function () {
        return this.s.length;
    };
    csmString.prototype.isLess = function (s) {
        return this.s < s.s;
    };
    csmString.prototype.isGreat = function (s) {
        return this.s > s.s;
    };
    csmString.prototype.isEqual = function (s) {
        return this.s == s;
    };
    csmString.prototype.isEmpty = function () {
        return this.s.length == 0;
    };
    return csmString;
}());
exports.csmString = csmString;
var $ = __importStar(__webpack_require__(/*! ./csmstring */ "../../../Framework/src/type/csmstring.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.csmString = $.csmString;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/type/csmvector.ts":
/*!************************************************!*\
  !*** ../../../Framework/src/type/csmvector.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.iterator = exports.csmVector = void 0;
var csmVector = exports.csmVector = (function () {
    function csmVector(initialCapacity) {
        if (initialCapacity === void 0) { initialCapacity = 0; }
        if (initialCapacity < 1) {
            this._ptr = [];
            this._capacity = 0;
            this._size = 0;
        }
        else {
            this._ptr = new Array(initialCapacity);
            this._capacity = initialCapacity;
            this._size = 0;
        }
    }
    csmVector.prototype.at = function (index) {
        return this._ptr[index];
    };
    csmVector.prototype.set = function (index, value) {
        this._ptr[index] = value;
    };
    csmVector.prototype.get = function (offset) {
        if (offset === void 0) { offset = 0; }
        var ret = new Array();
        for (var i = offset; i < this._size; i++) {
            ret.push(this._ptr[i]);
        }
        return ret;
    };
    csmVector.prototype.pushBack = function (value) {
        if (this._size >= this._capacity) {
            this.prepareCapacity(this._capacity == 0 ? csmVector.s_defaultSize : this._capacity * 2);
        }
        this._ptr[this._size++] = value;
    };
    csmVector.prototype.clear = function () {
        this._ptr.length = 0;
        this._size = 0;
    };
    csmVector.prototype.getSize = function () {
        return this._size;
    };
    csmVector.prototype.assign = function (newSize, value) {
        var curSize = this._size;
        if (curSize < newSize) {
            this.prepareCapacity(newSize);
        }
        for (var i = 0; i < newSize; i++) {
            this._ptr[i] = value;
        }
        this._size = newSize;
    };
    csmVector.prototype.resize = function (newSize, value) {
        if (value === void 0) { value = null; }
        this.updateSize(newSize, value, true);
    };
    csmVector.prototype.updateSize = function (newSize, value, callPlacementNew) {
        if (value === void 0) { value = null; }
        if (callPlacementNew === void 0) { callPlacementNew = true; }
        var curSize = this._size;
        if (curSize < newSize) {
            this.prepareCapacity(newSize);
            if (callPlacementNew) {
                for (var i = this._size; i < newSize; i++) {
                    if (typeof value == 'function') {
                        this._ptr[i] = JSON.parse(JSON.stringify(new value()));
                    }
                    else {
                        this._ptr[i] = value;
                    }
                }
            }
            else {
                for (var i = this._size; i < newSize; i++) {
                    this._ptr[i] = value;
                }
            }
        }
        else {
            var sub = this._size - newSize;
            this._ptr.splice(this._size - sub, sub);
        }
        this._size = newSize;
    };
    csmVector.prototype.insert = function (position, begin, end) {
        var dstSi = position._index;
        var srcSi = begin._index;
        var srcEi = end._index;
        var addCount = srcEi - srcSi;
        this.prepareCapacity(this._size + addCount);
        var addSize = this._size - dstSi;
        if (addSize > 0) {
            for (var i = 0; i < addSize; i++) {
                this._ptr.splice(dstSi + i, 0, null);
            }
        }
        for (var i = srcSi; i < srcEi; i++, dstSi++) {
            this._ptr[dstSi] = begin._vector._ptr[i];
        }
        this._size = this._size + addCount;
    };
    csmVector.prototype.remove = function (index) {
        if (index < 0 || this._size <= index) {
            return false;
        }
        this._ptr.splice(index, 1);
        --this._size;
        return true;
    };
    csmVector.prototype.erase = function (ite) {
        var index = ite._index;
        if (index < 0 || this._size <= index) {
            return ite;
        }
        this._ptr.splice(index, 1);
        --this._size;
        var ite2 = new iterator(this, index);
        return ite2;
    };
    csmVector.prototype.prepareCapacity = function (newSize) {
        if (newSize > this._capacity) {
            if (this._capacity == 0) {
                this._ptr = new Array(newSize);
                this._capacity = newSize;
            }
            else {
                this._ptr.length = newSize;
                this._capacity = newSize;
            }
        }
    };
    csmVector.prototype.begin = function () {
        var ite = this._size == 0 ? this.end() : new iterator(this, 0);
        return ite;
    };
    csmVector.prototype.end = function () {
        var ite = new iterator(this, this._size);
        return ite;
    };
    csmVector.prototype.getOffset = function (offset) {
        var newVector = new csmVector();
        newVector._ptr = this.get(offset);
        newVector._size = this.get(offset).length;
        newVector._capacity = this.get(offset).length;
        return newVector;
    };
    csmVector.s_defaultSize = 10;
    return csmVector;
}());
var iterator = (function () {
    function iterator(v, index) {
        this._vector = v != undefined ? v : null;
        this._index = index != undefined ? index : 0;
    }
    iterator.prototype.set = function (ite) {
        this._index = ite._index;
        this._vector = ite._vector;
        return this;
    };
    iterator.prototype.preIncrement = function () {
        ++this._index;
        return this;
    };
    iterator.prototype.preDecrement = function () {
        --this._index;
        return this;
    };
    iterator.prototype.increment = function () {
        var iteold = new iterator(this._vector, this._index++);
        return iteold;
    };
    iterator.prototype.decrement = function () {
        var iteold = new iterator(this._vector, this._index--);
        return iteold;
    };
    iterator.prototype.ptr = function () {
        return this._vector._ptr[this._index];
    };
    iterator.prototype.substitution = function (ite) {
        this._index = ite._index;
        this._vector = ite._vector;
        return this;
    };
    iterator.prototype.notEqual = function (ite) {
        return this._index != ite._index || this._vector != ite._vector;
    };
    return iterator;
}());
exports.iterator = iterator;
var $ = __importStar(__webpack_require__(/*! ./csmvector */ "../../../Framework/src/type/csmvector.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.csmVector = $.csmVector;
    Live2DCubismFramework.iterator = $.iterator;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/utils/cubismdebug.ts":
/*!***************************************************!*\
  !*** ../../../Framework/src/utils/cubismdebug.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.CubismDebug = exports.CubismLogError = exports.CubismLogWarning = exports.CubismLogInfo = exports.CubismLogDebug = exports.CubismLogVerbose = exports.CSM_ASSERT = exports.CubismLogPrintIn = exports.CubismLogPrint = void 0;
var cubismframeworkconfig_1 = __webpack_require__(/*! ../cubismframeworkconfig */ "../../../Framework/src/cubismframeworkconfig.ts");
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var CubismLogPrint = function (level, fmt, args) {
    CubismDebug.print(level, '[CSM]' + fmt, args);
};
exports.CubismLogPrint = CubismLogPrint;
var CubismLogPrintIn = function (level, fmt, args) {
    (0, exports.CubismLogPrint)(level, fmt + '\n', args);
};
exports.CubismLogPrintIn = CubismLogPrintIn;
var CSM_ASSERT = function (expr) {
    console.assert(expr);
};
exports.CSM_ASSERT = CSM_ASSERT;
if (cubismframeworkconfig_1.CSM_LOG_LEVEL <= cubismframeworkconfig_1.CSM_LOG_LEVEL_VERBOSE) {
    exports.CubismLogVerbose = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Verbose, '[V]' + fmt, args);
    };
    exports.CubismLogDebug = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);
    };
    exports.CubismLogInfo = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);
    };
    exports.CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
    };
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_DEBUG) {
    exports.CubismLogDebug = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);
    };
    exports.CubismLogInfo = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);
    };
    exports.CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
    };
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_INFO) {
    exports.CubismLogInfo = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);
    };
    exports.CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
    };
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_WARNING) {
    exports.CubismLogWarning = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);
    };
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
else if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_ERROR) {
    exports.CubismLogError = function (fmt) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        (0, exports.CubismLogPrintIn)(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);
    };
}
var CubismDebug = (function () {
    function CubismDebug() {
    }
    CubismDebug.print = function (logLevel, format, args) {
        if (logLevel < live2dcubismframework_1.CubismFramework.getLoggingLevel()) {
            return;
        }
        var logPrint = live2dcubismframework_1.CubismFramework.coreLogFunction;
        if (!logPrint)
            return;
        var buffer = format.replace(/\{(\d+)\}/g, function (m, k) {
            return args[k];
        });
        logPrint(buffer);
    };
    CubismDebug.dumpBytes = function (logLevel, data, length) {
        for (var i = 0; i < length; i++) {
            if (i % 16 == 0 && i > 0)
                this.print(logLevel, '\n');
            else if (i % 8 == 0 && i > 0)
                this.print(logLevel, '  ');
            this.print(logLevel, '{0} ', [data[i] & 0xff]);
        }
        this.print(logLevel, '\n');
    };
    return CubismDebug;
}());
exports.CubismDebug = CubismDebug;
var $ = __importStar(__webpack_require__(/*! ./cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts"));
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismDebug = $.CubismDebug;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/utils/cubismjson.ts":
/*!**************************************************!*\
  !*** ../../../Framework/src/utils/cubismjson.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Live2DCubismFramework = exports.JsonMap = exports.JsonArray = exports.JsonNullvalue = exports.JsonError = exports.JsonString = exports.JsonBoolean = exports.JsonFloat = exports.CubismJson = exports.Value = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var csmmap_1 = __webpack_require__(/*! ../type/csmmap */ "../../../Framework/src/type/csmmap.ts");
var csmstring_1 = __webpack_require__(/*! ../type/csmstring */ "../../../Framework/src/type/csmstring.ts");
var csmvector_1 = __webpack_require__(/*! ../type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! ./cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
var CSM_JSON_ERROR_TYPE_MISMATCH = 'Error: type mismatch';
var CSM_JSON_ERROR_INDEX_OF_BOUNDS = 'Error: index out of bounds';
var Value = (function () {
    function Value() {
    }
    Value.prototype.getRawString = function (defaultValue, indent) {
        return this.getString(defaultValue, indent);
    };
    Value.prototype.toInt = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = 0; }
        return defaultValue;
    };
    Value.prototype.toFloat = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = 0; }
        return defaultValue;
    };
    Value.prototype.toBoolean = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = false; }
        return defaultValue;
    };
    Value.prototype.getSize = function () {
        return 0;
    };
    Value.prototype.getArray = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        return defaultValue;
    };
    Value.prototype.getVector = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = new csmvector_1.csmVector(); }
        return defaultValue;
    };
    Value.prototype.getMap = function (defaultValue) {
        return defaultValue;
    };
    Value.prototype.getValueByIndex = function (index) {
        return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
    };
    Value.prototype.getValueByString = function (s) {
        return Value.nullValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
    };
    Value.prototype.getKeys = function () {
        return Value.s_dummyKeys;
    };
    Value.prototype.isError = function () {
        return false;
    };
    Value.prototype.isNull = function () {
        return false;
    };
    Value.prototype.isBool = function () {
        return false;
    };
    Value.prototype.isFloat = function () {
        return false;
    };
    Value.prototype.isString = function () {
        return false;
    };
    Value.prototype.isArray = function () {
        return false;
    };
    Value.prototype.isMap = function () {
        return false;
    };
    Value.prototype.equals = function (value) {
        return false;
    };
    Value.prototype.isStatic = function () {
        return false;
    };
    Value.prototype.setErrorNotForClientCall = function (errorStr) {
        return JsonError.errorValue;
    };
    Value.staticInitializeNotForClientCall = function () {
        JsonBoolean.trueValue = new JsonBoolean(true);
        JsonBoolean.falseValue = new JsonBoolean(false);
        Value.errorValue = new JsonError('ERROR', true);
        Value.nullValue = new JsonNullvalue();
        Value.s_dummyKeys = new csmvector_1.csmVector();
    };
    Value.staticReleaseNotForClientCall = function () {
        JsonBoolean.trueValue = null;
        JsonBoolean.falseValue = null;
        Value.errorValue = null;
        Value.nullValue = null;
        Value.s_dummyKeys = null;
    };
    return Value;
}());
exports.Value = Value;
var CubismJson = (function () {
    function CubismJson(buffer, length) {
        this._parseCallback = cubismjsonextension_1.CubismJsonExtension.parseJsonObject;
        this._error = null;
        this._lineCount = 0;
        this._root = null;
        if (buffer != undefined) {
            this.parseBytes(buffer, length, this._parseCallback);
        }
    }
    CubismJson.create = function (buffer, size) {
        var json = new CubismJson();
        var succeeded = json.parseBytes(buffer, size, json._parseCallback);
        if (!succeeded) {
            CubismJson.delete(json);
            return null;
        }
        else {
            return json;
        }
    };
    CubismJson.delete = function (instance) {
        instance = null;
    };
    CubismJson.prototype.getRoot = function () {
        return this._root;
    };
    CubismJson.arrayBufferToString = function (buffer) {
        var uint8Array = new Uint8Array(buffer);
        var str = '';
        for (var i = 0, len = uint8Array.length; i < len; ++i) {
            str += '%' + this.pad(uint8Array[i].toString(16));
        }
        str = decodeURIComponent(str);
        return str;
    };
    CubismJson.pad = function (n) {
        return n.length < 2 ? '0' + n : n;
    };
    CubismJson.prototype.parseBytes = function (buffer, size, parseCallback) {
        var endPos = new Array(1);
        var decodeBuffer = CubismJson.arrayBufferToString(buffer);
        if (parseCallback == undefined) {
            this._root = this.parseValue(decodeBuffer, size, 0, endPos);
        }
        else {
            this._root = parseCallback(JSON.parse(decodeBuffer), new JsonMap());
        }
        if (this._error) {
            var strbuf = '\0';
            strbuf = 'Json parse error : @line ' + (this._lineCount + 1) + '\n';
            this._root = new JsonString(strbuf);
            (0, cubismdebug_1.CubismLogInfo)('{0}', this._root.getRawString());
            return false;
        }
        else if (this._root == null) {
            this._root = new JsonError(new csmstring_1.csmString(this._error), false);
            return false;
        }
        return true;
    };
    CubismJson.prototype.getParseError = function () {
        return this._error;
    };
    CubismJson.prototype.checkEndOfFile = function () {
        return this._root.getArray()[1].equals('EOF');
    };
    CubismJson.prototype.parseValue = function (buffer, length, begin, outEndPos) {
        if (this._error)
            return null;
        var o = null;
        var i = begin;
        var f;
        for (; i < length; i++) {
            var c = buffer[i];
            switch (c) {
                case '-':
                case '.':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9': {
                    var afterString = new Array(1);
                    f = (0, live2dcubismframework_1.strtod)(buffer.slice(i), afterString);
                    outEndPos[0] = buffer.indexOf(afterString[0]);
                    return new JsonFloat(f);
                }
                case '"':
                    return new JsonString(this.parseString(buffer, length, i + 1, outEndPos));
                case '[':
                    o = this.parseArray(buffer, length, i + 1, outEndPos);
                    return o;
                case '{':
                    o = this.parseObject(buffer, length, i + 1, outEndPos);
                    return o;
                case 'n':
                    if (i + 3 < length) {
                        o = new JsonNullvalue();
                        outEndPos[0] = i + 4;
                    }
                    else {
                        this._error = 'parse null';
                    }
                    return o;
                case 't':
                    if (i + 3 < length) {
                        o = JsonBoolean.trueValue;
                        outEndPos[0] = i + 4;
                    }
                    else {
                        this._error = 'parse true';
                    }
                    return o;
                case 'f':
                    if (i + 4 < length) {
                        o = JsonBoolean.falseValue;
                        outEndPos[0] = i + 5;
                    }
                    else {
                        this._error = "illegal ',' position";
                    }
                    return o;
                case ',':
                    this._error = "illegal ',' position";
                    return null;
                case ']':
                    outEndPos[0] = i;
                    return null;
                case '\n':
                    this._lineCount++;
                case ' ':
                case '\t':
                case '\r':
                default:
                    break;
            }
        }
        this._error = 'illegal end of value';
        return null;
    };
    CubismJson.prototype.parseString = function (string, length, begin, outEndPos) {
        if (this._error)
            return null;
        var i = begin;
        var c, c2;
        var ret = new csmstring_1.csmString('');
        var bufStart = begin;
        for (; i < length; i++) {
            c = string[i];
            switch (c) {
                case '"': {
                    outEndPos[0] = i + 1;
                    ret.append(string.slice(bufStart), i - bufStart);
                    return ret.s;
                }
                case '//': {
                    i++;
                    if (i - 1 > bufStart) {
                        ret.append(string.slice(bufStart), i - bufStart);
                    }
                    bufStart = i + 1;
                    if (i < length) {
                        c2 = string[i];
                        switch (c2) {
                            case '\\':
                                ret.expansion(1, '\\');
                                break;
                            case '"':
                                ret.expansion(1, '"');
                                break;
                            case '/':
                                ret.expansion(1, '/');
                                break;
                            case 'b':
                                ret.expansion(1, '\b');
                                break;
                            case 'f':
                                ret.expansion(1, '\f');
                                break;
                            case 'n':
                                ret.expansion(1, '\n');
                                break;
                            case 'r':
                                ret.expansion(1, '\r');
                                break;
                            case 't':
                                ret.expansion(1, '\t');
                                break;
                            case 'u':
                                this._error = 'parse string/unicord escape not supported';
                                break;
                            default:
                                break;
                        }
                    }
                    else {
                        this._error = 'parse string/escape error';
                    }
                }
                default: {
                    break;
                }
            }
        }
        this._error = 'parse string/illegal end';
        return null;
    };
    CubismJson.prototype.parseObject = function (buffer, length, begin, outEndPos) {
        if (this._error)
            return null;
        var ret = new JsonMap();
        var key = '';
        var i = begin;
        var c = '';
        var localRetEndPos2 = Array(1);
        var ok = false;
        for (; i < length; i++) {
            FOR_LOOP: for (; i < length; i++) {
                c = buffer[i];
                switch (c) {
                    case '"':
                        key = this.parseString(buffer, length, i + 1, localRetEndPos2);
                        if (this._error) {
                            return null;
                        }
                        i = localRetEndPos2[0];
                        ok = true;
                        break FOR_LOOP;
                    case '}':
                        outEndPos[0] = i + 1;
                        return ret;
                    case ':':
                        this._error = "illegal ':' position";
                        break;
                    case '\n':
                        this._lineCount++;
                    default:
                        break;
                }
            }
            if (!ok) {
                this._error = 'key not found';
                return null;
            }
            ok = false;
            FOR_LOOP2: for (; i < length; i++) {
                c = buffer[i];
                switch (c) {
                    case ':':
                        ok = true;
                        i++;
                        break FOR_LOOP2;
                    case '}':
                        this._error = "illegal '}' position";
                        break;
                    case '\n':
                        this._lineCount++;
                    default:
                        break;
                }
            }
            if (!ok) {
                this._error = "':' not found";
                return null;
            }
            var value = this.parseValue(buffer, length, i, localRetEndPos2);
            if (this._error) {
                return null;
            }
            i = localRetEndPos2[0];
            ret.put(key, value);
            FOR_LOOP3: for (; i < length; i++) {
                c = buffer[i];
                switch (c) {
                    case ',':
                        break FOR_LOOP3;
                    case '}':
                        outEndPos[0] = i + 1;
                        return ret;
                    case '\n':
                        this._lineCount++;
                    default:
                        break;
                }
            }
        }
        this._error = 'illegal end of perseObject';
        return null;
    };
    CubismJson.prototype.parseArray = function (buffer, length, begin, outEndPos) {
        if (this._error)
            return null;
        var ret = new JsonArray();
        var i = begin;
        var c;
        var localRetEndpos2 = new Array(1);
        for (; i < length; i++) {
            var value = this.parseValue(buffer, length, i, localRetEndpos2);
            if (this._error) {
                return null;
            }
            i = localRetEndpos2[0];
            if (value) {
                ret.add(value);
            }
            FOR_LOOP: for (; i < length; i++) {
                c = buffer[i];
                switch (c) {
                    case ',':
                        break FOR_LOOP;
                    case ']':
                        outEndPos[0] = i + 1;
                        return ret;
                    case '\n':
                        ++this._lineCount;
                    default:
                        break;
                }
            }
        }
        ret = void 0;
        this._error = 'illegal end of parseObject';
        return null;
    };
    return CubismJson;
}());
exports.CubismJson = CubismJson;
var JsonFloat = (function (_super) {
    __extends(JsonFloat, _super);
    function JsonFloat(v) {
        var _this = _super.call(this) || this;
        _this._value = v;
        return _this;
    }
    JsonFloat.prototype.isFloat = function () {
        return true;
    };
    JsonFloat.prototype.getString = function (defaultValue, indent) {
        var strbuf = '\0';
        this._value = parseFloat(strbuf);
        this._stringBuffer = strbuf;
        return this._stringBuffer;
    };
    JsonFloat.prototype.toInt = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = 0; }
        return parseInt(this._value.toString());
    };
    JsonFloat.prototype.toFloat = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = 0.0; }
        return this._value;
    };
    JsonFloat.prototype.equals = function (value) {
        if ('number' === typeof value) {
            if (Math.round(value)) {
                return false;
            }
            else {
                return value == this._value;
            }
        }
        return false;
    };
    return JsonFloat;
}(Value));
exports.JsonFloat = JsonFloat;
var JsonBoolean = (function (_super) {
    __extends(JsonBoolean, _super);
    function JsonBoolean(v) {
        var _this = _super.call(this) || this;
        _this._boolValue = v;
        return _this;
    }
    JsonBoolean.prototype.isBool = function () {
        return true;
    };
    JsonBoolean.prototype.toBoolean = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = false; }
        return this._boolValue;
    };
    JsonBoolean.prototype.getString = function (defaultValue, indent) {
        this._stringBuffer = this._boolValue ? 'true' : 'false';
        return this._stringBuffer;
    };
    JsonBoolean.prototype.equals = function (value) {
        if ('boolean' === typeof value) {
            return value == this._boolValue;
        }
        return false;
    };
    JsonBoolean.prototype.isStatic = function () {
        return true;
    };
    return JsonBoolean;
}(Value));
exports.JsonBoolean = JsonBoolean;
var JsonString = (function (_super) {
    __extends(JsonString, _super);
    function JsonString(s) {
        var _this = _super.call(this) || this;
        if ('string' === typeof s) {
            _this._stringBuffer = s;
        }
        if (s instanceof csmstring_1.csmString) {
            _this._stringBuffer = s.s;
        }
        return _this;
    }
    JsonString.prototype.isString = function () {
        return true;
    };
    JsonString.prototype.getString = function (defaultValue, indent) {
        return this._stringBuffer;
    };
    JsonString.prototype.equals = function (value) {
        if ('string' === typeof value) {
            return this._stringBuffer == value;
        }
        if (value instanceof csmstring_1.csmString) {
            return this._stringBuffer == value.s;
        }
        return false;
    };
    return JsonString;
}(Value));
exports.JsonString = JsonString;
var JsonError = (function (_super) {
    __extends(JsonError, _super);
    function JsonError(s, isStatic) {
        var _this = this;
        if ('string' === typeof s) {
            _this = _super.call(this, s) || this;
        }
        else {
            _this = _super.call(this, s) || this;
        }
        _this._isStatic = isStatic;
        return _this;
    }
    JsonError.prototype.isStatic = function () {
        return this._isStatic;
    };
    JsonError.prototype.setErrorNotForClientCall = function (s) {
        this._stringBuffer = s;
        return this;
    };
    JsonError.prototype.isError = function () {
        return true;
    };
    return JsonError;
}(JsonString));
exports.JsonError = JsonError;
var JsonNullvalue = (function (_super) {
    __extends(JsonNullvalue, _super);
    function JsonNullvalue() {
        var _this = _super.call(this) || this;
        _this._stringBuffer = 'NullValue';
        return _this;
    }
    JsonNullvalue.prototype.isNull = function () {
        return true;
    };
    JsonNullvalue.prototype.getString = function (defaultValue, indent) {
        return this._stringBuffer;
    };
    JsonNullvalue.prototype.isStatic = function () {
        return true;
    };
    JsonNullvalue.prototype.setErrorNotForClientCall = function (s) {
        this._stringBuffer = s;
        return JsonError.nullValue;
    };
    return JsonNullvalue;
}(Value));
exports.JsonNullvalue = JsonNullvalue;
var JsonArray = (function (_super) {
    __extends(JsonArray, _super);
    function JsonArray() {
        var _this = _super.call(this) || this;
        _this._array = new csmvector_1.csmVector();
        return _this;
    }
    JsonArray.prototype.release = function () {
        for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.preIncrement()) {
            var v = ite.ptr();
            if (v && !v.isStatic()) {
                v = void 0;
                v = null;
            }
        }
    };
    JsonArray.prototype.isArray = function () {
        return true;
    };
    JsonArray.prototype.getValueByIndex = function (index) {
        if (index < 0 || this._array.getSize() <= index) {
            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_INDEX_OF_BOUNDS);
        }
        var v = this._array.at(index);
        if (v == null) {
            return Value.nullValue;
        }
        return v;
    };
    JsonArray.prototype.getValueByString = function (s) {
        return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
    };
    JsonArray.prototype.getString = function (defaultValue, indent) {
        var stringBuffer = indent + '[\n';
        for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.increment()) {
            var v = ite.ptr();
            this._stringBuffer += indent + '' + v.getString(indent + ' ') + '\n';
        }
        this._stringBuffer = stringBuffer + indent + ']\n';
        return this._stringBuffer;
    };
    JsonArray.prototype.add = function (v) {
        this._array.pushBack(v);
    };
    JsonArray.prototype.getVector = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        return this._array;
    };
    JsonArray.prototype.getSize = function () {
        return this._array.getSize();
    };
    return JsonArray;
}(Value));
exports.JsonArray = JsonArray;
var JsonMap = (function (_super) {
    __extends(JsonMap, _super);
    function JsonMap() {
        var _this = _super.call(this) || this;
        _this._map = new csmmap_1.csmMap();
        return _this;
    }
    JsonMap.prototype.release = function () {
        var ite = this._map.begin();
        while (ite.notEqual(this._map.end())) {
            var v = ite.ptr().second;
            if (v && !v.isStatic()) {
                v = void 0;
                v = null;
            }
            ite.preIncrement();
        }
    };
    JsonMap.prototype.isMap = function () {
        return true;
    };
    JsonMap.prototype.getValueByString = function (s) {
        if (s instanceof csmstring_1.csmString) {
            var ret = this._map.getValue(s.s);
            if (ret == null) {
                return Value.nullValue;
            }
            return ret;
        }
        for (var iter = this._map.begin(); iter.notEqual(this._map.end()); iter.preIncrement()) {
            if (iter.ptr().first == s) {
                if (iter.ptr().second == null) {
                    return Value.nullValue;
                }
                return iter.ptr().second;
            }
        }
        return Value.nullValue;
    };
    JsonMap.prototype.getValueByIndex = function (index) {
        return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);
    };
    JsonMap.prototype.getString = function (defaultValue, indent) {
        this._stringBuffer = indent + '{\n';
        var ite = this._map.begin();
        while (ite.notEqual(this._map.end())) {
            var key = ite.ptr().first;
            var v = ite.ptr().second;
            this._stringBuffer +=
                indent + ' ' + key + ' : ' + v.getString(indent + '   ') + ' \n';
            ite.preIncrement();
        }
        this._stringBuffer += indent + '}\n';
        return this._stringBuffer;
    };
    JsonMap.prototype.getMap = function (defaultValue) {
        return this._map;
    };
    JsonMap.prototype.put = function (key, v) {
        this._map.setValue(key, v);
    };
    JsonMap.prototype.getKeys = function () {
        if (!this._keys) {
            this._keys = new csmvector_1.csmVector();
            var ite = this._map.begin();
            while (ite.notEqual(this._map.end())) {
                var key = ite.ptr().first;
                this._keys.pushBack(key);
                ite.preIncrement();
            }
        }
        return this._keys;
    };
    JsonMap.prototype.getSize = function () {
        return this._keys.getSize();
    };
    return JsonMap;
}(Value));
exports.JsonMap = JsonMap;
var $ = __importStar(__webpack_require__(/*! ./cubismjson */ "../../../Framework/src/utils/cubismjson.ts"));
var cubismjsonextension_1 = __webpack_require__(/*! ./cubismjsonextension */ "../../../Framework/src/utils/cubismjsonextension.ts");
var Live2DCubismFramework;
(function (Live2DCubismFramework) {
    Live2DCubismFramework.CubismJson = $.CubismJson;
    Live2DCubismFramework.JsonArray = $.JsonArray;
    Live2DCubismFramework.JsonBoolean = $.JsonBoolean;
    Live2DCubismFramework.JsonError = $.JsonError;
    Live2DCubismFramework.JsonFloat = $.JsonFloat;
    Live2DCubismFramework.JsonMap = $.JsonMap;
    Live2DCubismFramework.JsonNullvalue = $.JsonNullvalue;
    Live2DCubismFramework.JsonString = $.JsonString;
    Live2DCubismFramework.Value = $.Value;
})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));


/***/ }),

/***/ "../../../Framework/src/utils/cubismjsonextension.ts":
/*!***********************************************************!*\
  !*** ../../../Framework/src/utils/cubismjsonextension.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CubismJsonExtension = void 0;
var cubismjson_1 = __webpack_require__(/*! ./cubismjson */ "../../../Framework/src/utils/cubismjson.ts");
var CubismJsonExtension = (function () {
    function CubismJsonExtension() {
    }
    CubismJsonExtension.parseJsonObject = function (obj, map) {
        Object.keys(obj).forEach(function (key) {
            if (typeof obj[key] == 'boolean') {
                var convValue = Boolean(obj[key]);
                map.put(key, new cubismjson_1.JsonBoolean(convValue));
            }
            else if (typeof obj[key] == 'string') {
                var convValue = String(obj[key]);
                map.put(key, new cubismjson_1.JsonString(convValue));
            }
            else if (typeof obj[key] == 'number') {
                var convValue = Number(obj[key]);
                map.put(key, new cubismjson_1.JsonFloat(convValue));
            }
            else if (obj[key] instanceof Array) {
                map.put(key, CubismJsonExtension.parseJsonArray(obj[key]));
            }
            else if (obj[key] instanceof Object) {
                map.put(key, CubismJsonExtension.parseJsonObject(obj[key], new cubismjson_1.JsonMap()));
            }
            else if (obj[key] == null) {
                map.put(key, new cubismjson_1.JsonNullvalue());
            }
            else {
                map.put(key, obj[key]);
            }
        });
        return map;
    };
    CubismJsonExtension.parseJsonArray = function (obj) {
        var _this = this;
        var arr = new cubismjson_1.JsonArray();
        Object.keys(obj).forEach(function (key) {
            var convKey = Number(key);
            if (typeof convKey == 'number') {
                if (typeof obj[key] == 'boolean') {
                    var convValue = Boolean(obj[key]);
                    arr.add(new cubismjson_1.JsonBoolean(convValue));
                }
                else if (typeof obj[key] == 'string') {
                    var convValue = String(obj[key]);
                    arr.add(new cubismjson_1.JsonString(convValue));
                }
                else if (typeof obj[key] == 'number') {
                    var convValue = Number(obj[key]);
                    arr.add(new cubismjson_1.JsonFloat(convValue));
                }
                else if (obj[key] instanceof Array) {
                    arr.add(_this.parseJsonArray(obj[key]));
                }
                else if (obj[key] instanceof Object) {
                    arr.add(_this.parseJsonObject(obj[key], new cubismjson_1.JsonMap()));
                }
                else if (obj[key] == null) {
                    arr.add(new cubismjson_1.JsonNullvalue());
                }
                else {
                    arr.add(obj[key]);
                }
            }
            else if (obj[key] instanceof Array) {
                arr.add(_this.parseJsonArray(obj[key]));
            }
            else if (obj[key] instanceof Object) {
                arr.add(_this.parseJsonObject(obj[key], new cubismjson_1.JsonMap()));
            }
            else if (obj[key] == null) {
                arr.add(new cubismjson_1.JsonNullvalue());
            }
            else {
                var convValue = Array(obj[key]);
                for (var i = 0; i < convValue.length; i++) {
                    arr.add(convValue[i]);
                }
            }
        });
        return arr;
    };
    return CubismJsonExtension;
}());
exports.CubismJsonExtension = CubismJsonExtension;


/***/ }),

/***/ "./CartOperator.ts":
/*!*************************!*\
  !*** ./CartOperator.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Cart = void 0;
var GuiOperator_1 = __webpack_require__(/*! ./GuiOperator */ "./GuiOperator.ts");
var shared_1 = __webpack_require__(/*! ./shared */ "./shared.ts");
var Cart = (function () {
    function Cart() {
        this._items = [];
    }
    Cart.prototype.addToCart = function (item) {
        return __awaiter(this, void 0, void 0, function () {
            var text1, text2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("\u30A2\u30A4\u30C6\u30E0\u304C\u30AB\u30FC\u30C8\u306B\u8FFD\u52A0\u3055\u308C\u307E\u3057\u305F\u3002\u73FE\u5728\u306E\u30AB\u30FC\u30C8\u306E\u30A2\u30A4\u30C6\u30E0\u6570\u306F ".concat(this._items.length, " \u3067\u3059\u3002"));
                        this.updateCartBadge();
                        text1 = item + "をカートに追加します";
                        shared_1.speech.stop();
                        window.isVoiceVoxRunning = true;
                        console.log("音声認識をOFFにします");
                        return [4, (0, GuiOperator_1.voiceVox)(text1).then(function () {
                                window.isVoiceVoxRunning = false;
                                console.log("音声認識をONにします");
                                shared_1.speech.start();
                            })];
                    case 1:
                        _a.sent();
                        text2 = "他に何かご注文はありますか";
                        shared_1.speech.stop();
                        window.isVoiceVoxRunning = true;
                        console.log("音声認識をOFFにします");
                        return [4, (0, GuiOperator_1.voiceVox)(text2).then(function () {
                                window.isVoiceVoxRunning = false;
                                console.log("音声認識をONにします");
                                shared_1.speech.start();
                            })];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    Cart.prototype.updateCartBadge = function () {
        var cartButton = document.getElementById("cartButton");
        if (cartButton) {
            cartButton.dataset.num = this._items.length.toString();
            console.log(this._items.length.toString());
            cartButton.style.backgroundColor = "slategray";
        }
    };
    Cart.prototype.clearCart = function () {
        var cartButton = document.getElementById("cartButton");
        if (cartButton) {
            cartButton.dataset.num = "0";
            console.log(this._items.length.toString());
            cartButton.style.backgroundColor = "lightblue";
        }
        this._items = [];
        this.updateCartBadge();
    };
    Cart.prototype.displayCartContents = function () {
        var cartPopupContainer = document.querySelector(".cartPopup-Container");
        var cartList = document.getElementById("cartList");
        if (cartPopupContainer) {
            var flag = "cart";
            var cartContents = '';
            for (var i = 0; i < this._items.length; i++) {
                cartContents += "<p>".concat(this._items[i].dish_name, "</p>");
                console.log(cartContents);
            }
            cartList.innerHTML = cartContents;
            (0, GuiOperator_1.changeLayout)(flag);
            (0, GuiOperator_1.displayPopup)(flag);
        }
    };
    Cart.prototype.fetchhistory = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, order;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, fetch('/get-history')];
                    case 1:
                        response = _a.sent();
                        if (!response.ok) {
                            throw new Error("HTTP error! status: ".concat(response.status));
                        }
                        return [4, response.json()];
                    case 2:
                        order = _a.sent();
                        return [2, order];
                }
            });
        });
    };
    return Cart;
}());
exports.Cart = Cart;


/***/ }),

/***/ "./FuncExtensions.ts":
/*!***************************!*\
  !*** ./FuncExtensions.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FuncExtensions = void 0;
var GuiOperator_1 = __webpack_require__(/*! ./GuiOperator */ "./GuiOperator.ts");
var CartOperator_1 = __webpack_require__(/*! ./CartOperator */ "./CartOperator.ts");
var client_1 = __webpack_require__(/*! ./client */ "./client.ts");
var shared_1 = __webpack_require__(/*! ./shared */ "./shared.ts");
var cart = new CartOperator_1.Cart();
var startFlag = false;
var FuncExtensions = (function () {
    function FuncExtensions() {
    }
    FuncExtensions.prototype.addEvent = function () {
        var _this = this;
        window.addEventListener('load', function () { return __awaiter(_this, void 0, void 0, function () {
            var text;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        text = "いらっしゃいませ";
                        shared_1.speech.stop();
                        window.isVoiceVoxRunning = true;
                        console.log("音声認識をOFFにします");
                        return [4, (0, GuiOperator_1.voiceVox)(text).then(function () {
                                window.isVoiceVoxRunning = false;
                                console.log("音声認識をONにします");
                                shared_1.speech.start();
                            })];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        }); });
        var startOrderButton = document.getElementById("startOrderButton");
        startOrderButton.addEventListener('click', function () { return __awaiter(_this, void 0, void 0, function () {
            var text, cartAddButton, noMoreOrderButton, textContainer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        startFlag = true;
                        text = "「注文開始」と声を掛けてください";
                        shared_1.speech.stop();
                        cartAddButton = document.getElementById("cartAddButton");
                        cartAddButton.style.display = "block";
                        noMoreOrderButton = document.getElementById("noMoreOrderButton");
                        noMoreOrderButton.style.display = "block";
                        textContainer = document.getElementById("textContainer");
                        textContainer.style.display = "block";
                        window.isVoiceVoxRunning = true;
                        console.log("音声認識をOFFにします");
                        return [4, (0, GuiOperator_1.voiceVox)(text).then(function () {
                                window.isVoiceVoxRunning = false;
                                console.log("音声認識をONにします");
                                if (shared_1.speechListeners.result && shared_1.speechListeners.end) {
                                    shared_1.speech.start();
                                }
                                else {
                                    console.error('イベントリスナーがまだ設定されていません');
                                }
                            })];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        }); }, false);
        var cartAddButton = document.getElementById("cartAddButton");
        cartAddButton.addEventListener("click", function () { return __awaiter(_this, void 0, void 0, function () {
            var textInputValue, text;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        textInputValue = document.getElementById("textInput").value;
                        if (!(textInputValue.trim() !== "")) return [3, 1];
                        shared_1.speech.searchTag(textInputValue);
                        return [3, 3];
                    case 1:
                        text = "商品名を入力してください";
                        shared_1.speech.stop();
                        window.isVoiceVoxRunning = true;
                        console.log("音声認識をOFFにします");
                        return [4, (0, GuiOperator_1.voiceVox)(text).then(function () {
                                window.isVoiceVoxRunning = false;
                                console.log("音声認識をONにします");
                                shared_1.speech.start();
                            })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        }); }, false);
        var noMoreOrderButton = document.getElementById("noMoreOrderButton");
        noMoreOrderButton.addEventListener("click", function () {
            var orderButton = document.getElementById("orderButton");
            orderButton.style.display = "block";
            cart.displayCartContents();
        }, false);
        var cartButton = document.getElementById("cartButton");
        if (cartButton) {
            cartButton.addEventListener("click", function () {
                cart.displayCartContents();
            });
        }
        var cartCloseButton = document.getElementById("cartCloseButton");
        if (cartCloseButton) {
            cartCloseButton.addEventListener("click", function () {
                (0, GuiOperator_1.moveToCenter)();
            });
        }
        var suggestDishButton = document.getElementById("suggestDishButton");
        if (suggestDishButton) {
            suggestDishButton.addEventListener("click", function () {
                var flag = "suggest";
                (0, GuiOperator_1.changeLayout)(flag);
                (0, GuiOperator_1.displayPopup)(flag);
            });
        }
        var closeButton = document.getElementById("closeButton");
        var bubble = document.getElementById("bubble");
        var bubbleText = document.getElementById("bubbleText");
        if (closeButton) {
            closeButton.addEventListener("click", function () {
                (0, GuiOperator_1.closePopup)();
                var text = "音声でご注文をどうぞ";
                console.log("音声認識開始");
                bubbleText.innerText = text;
                shared_1.speech.stop();
                window.isVoiceVoxRunning = true;
                console.log("音声認識をOFFにします");
                (0, GuiOperator_1.voiceVox)(text).then(function () {
                    window.isVoiceVoxRunning = false;
                    console.log("音声認識をONにします");
                    shared_1.speech.start();
                });
                bubble.style.border = '4px solid #64e680';
            });
        }
        var orderButton = document.getElementById("orderButton");
        if (orderButton) {
            orderButton.addEventListener("click", function () {
                console.log("注文確定");
                var cartAddButton = document.getElementById("cartAddButton");
                cartAddButton.style.display = "none";
                var noMoreOrderButton = document.getElementById("noMoreOrderButton");
                noMoreOrderButton.style.display = "none";
                var textContainer = document.getElementById("textContainer");
                textContainer.style.display = "none";
                cart.clearCart();
                (0, GuiOperator_1.moveToCenter)();
            }, false);
        }
        var quesButton = document.getElementById("quesButton");
        var quesPopupContainer = document.querySelector('.quesPopup-Container');
        if (quesButton && quesPopupContainer) {
            quesButton.addEventListener("click", function () { return __awaiter(_this, void 0, void 0, function () {
                var text, chatArea;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(quesPopupContainer.style.display === 'flex')) return [3, 3];
                            quesPopupContainer.style.display = 'none';
                            quesButton.classList.remove('close');
                            shared_1.speech_QA.stop();
                            window.isVoiceVoxRunning_QA = true;
                            window.isMicActive = false;
                            console.log("QA用の音声認識をOFFにします");
                            if (!(startFlag === true)) return [3, 2];
                            text = "音声でご注文をどうぞ";
                            console.log("音声認識開始");
                            bubbleText.innerText = text;
                            return [4, (0, GuiOperator_1.voiceVox)(text).then(function () {
                                    window.isVoiceVoxRunning = false;
                                    console.log("音声認識をONにします");
                                    shared_1.speech.start();
                                })];
                        case 1:
                            _a.sent();
                            bubble.style.border = '4px solid #64e680';
                            _a.label = 2;
                        case 2: return [3, 4];
                        case 3:
                            quesPopupContainer.style.display = 'flex';
                            quesButton.classList.add('close');
                            shared_1.speech.stop();
                            window.isVoiceVoxRunning = true;
                            window.isMicActive = false;
                            console.log("音声認識をOFFにします");
                            _a.label = 4;
                        case 4:
                            chatArea = document.getElementById("chat-area");
                            if (chatArea) {
                                chatArea.scrollTop = chatArea.scrollHeight;
                            }
                            else {
                                console.log("chatArea要素が見つかりません");
                            }
                            return [2];
                    }
                });
            }); });
        }
        var micButton = document.querySelector(".img-mic");
        if (micButton) {
            micButton.addEventListener("click", function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (window.isMicActive) {
                        micButton.style.border = '4px solid #007bff';
                        shared_1.speech_QA.stop();
                        window.isVoiceVoxRunning_QA = true;
                        window.isMicActive = false;
                        console.log("QA用の音声認識をOFFにします");
                    }
                    else {
                        micButton.style.border = '4px solid #dc331c';
                        shared_1.speech_QA.start();
                        window.isVoiceVoxRunning_QA = false;
                        window.isMicActive = true;
                        console.log("QA用の音声認識をONにします");
                    }
                    return [2];
                });
            }); });
        }
        var quesSubmit = document.getElementById("ques-submit");
        if (quesSubmit) {
            quesSubmit.addEventListener("click", function () {
                (0, client_1.sendMessage)();
                var chatArea = document.getElementById("chat-area");
                if (chatArea) {
                    chatArea.scrollTop = chatArea.scrollHeight;
                }
                else {
                    console.log("chatArea要素が見つかりません");
                }
            });
        }
    };
    return FuncExtensions;
}());
exports.FuncExtensions = FuncExtensions;


/***/ }),

/***/ "./GuiOperator.ts":
/*!************************!*\
  !*** ./GuiOperator.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.closePopup = exports.moveTextToCenter = exports.displayPopup = exports.showBubble = exports.moveToCenter = exports.changeLayout = exports.voiceVox = exports.preVoiceVox = void 0;
var TtsQuestV3Voicevox_js_1 = __webpack_require__(/*! ./TtsQuestV3Voicevox.js */ "./TtsQuestV3Voicevox.js");
var lapplive2dmanager_1 = __webpack_require__(/*! ./src/lapplive2dmanager */ "./src/lapplive2dmanager.ts");
var shared_1 = __webpack_require__(/*! ./shared */ "./shared.ts");
function preVoiceVox(textInputValue) {
    console.log("読み込んだ単語：" + textInputValue);
    var speakerId = 8;
    var ttsQuestApiKey = '';
    var audio = new TtsQuestV3Voicevox_js_1.TtsQuestV3Voicevox(speakerId, textInputValue, ttsQuestApiKey);
    console.log(audio);
}
exports.preVoiceVox = preVoiceVox;
function voiceVox(textInputValue) {
    var text = "読み込み中・・・";
    console.log(text);
    showBubble(text);
    console.log("受け取った文：" + textInputValue);
    var speakerId = 8;
    var ttsQuestApiKey = '';
    var audio = new TtsQuestV3Voicevox_js_1.TtsQuestV3Voicevox(speakerId, textInputValue, ttsQuestApiKey);
    var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
    return new Promise(function (resolve) {
        audio.addEventListener('canplaythrough', function () {
            console.log("モーションを再生します");
            for (var i = 0; i < live2DManager._models.getSize(); i++) {
                var expressions = ["exp_01", "exp_02", "exp_04"];
                var randomIndex = Math.floor(Math.random() * expressions.length);
                var faceID = expressions[randomIndex];
                console.log("ランダムに選ばれた表情ID: " + faceID);
                live2DManager._models.at(i)
                    .setExpression(faceID);
            }
            console.log("音声を再生します");
            audio.play();
            console.log("吹き出しを表示");
            showBubble(textInputValue);
            audio.onended = function () { return resolve(); };
        });
    });
}
exports.voiceVox = voiceVox;
function changeLayout(flag) {
    if (flag === "suggest") {
        var cartPopupContainer = document.querySelector(".cartPopup-Container");
        var cartPopupContent = document.getElementById("cartPopupContent");
        if (cartPopupContent) {
            cartPopupContainer.style.display = "none";
        }
        var canvasContainer = document.querySelector('.canvas-container');
        canvasContainer.style.gridRow = '2/5';
        canvasContainer.style.gridColumn = '8/11';
        var bottomContainer = document.querySelector('.bottom-container');
        bottomContainer.style.gridRow = '5/9';
        bottomContainer.style.gridColumn = '8/11';
    }
    else if (flag === "cart") {
        var popupContainer = document.querySelector(".popup-Container");
        var popupContent = document.getElementById("popupContent");
        if (popupContent) {
            popupContainer.style.display = "none";
        }
        var canvasContainer = document.querySelector('.canvas-container');
        canvasContainer.style.gridRow = '1/6';
        canvasContainer.style.gridColumn = '4/8';
        var bottomContainer = document.querySelector('.bottom-container');
        bottomContainer.style.gridRow = '6/11';
        bottomContainer.style.gridColumn = '4/8';
    }
    document.body.style.overflow = 'hidden';
}
exports.changeLayout = changeLayout;
function moveToCenter() {
    var canvasContainer = document.querySelector('.canvas-container');
    canvasContainer.style.gridRow = '1/6';
    canvasContainer.style.gridColumn = '4/8';
    var bottomContainer = document.querySelector('.bottom-container');
    bottomContainer.style.gridRow = '6/11';
    bottomContainer.style.gridColumn = '4/8';
    var popupContainer = document.querySelector(".popup-Container");
    var popupContent = document.getElementById("popupContent");
    if (popupContent) {
        popupContainer.style.display = "none";
    }
    var cartPopupContainer = document.querySelector(".cartPopup-Container");
    var cartPopupContent = document.getElementById("cartPopupContent");
    if (cartPopupContent) {
        cartPopupContainer.style.display = "none";
    }
}
exports.moveToCenter = moveToCenter;
function showBubble(text) {
    var bubble = document.getElementById("bubble");
    var bubbleText = document.getElementById("bubbleText");
    if (bubble && bubbleText) {
        bubbleText.innerText = text;
        bubble.style.display = "block";
    }
}
exports.showBubble = showBubble;
function displayPopup(flag) {
    return __awaiter(this, void 0, void 0, function () {
        var popupContainer, popupContent, textInputValue, cartPopupContainer, cartPopupContent;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(flag === "suggest")) return [3, 2];
                    popupContainer = document.querySelector(".popup-Container");
                    popupContent = document.getElementById("popupContent");
                    if (popupContent) {
                        popupContainer.style.display = "flex";
                    }
                    textInputValue = "現在のおすすめの料理を提案します！";
                    shared_1.speech.stop();
                    window.isVoiceVoxRunning = true;
                    console.log("音声認識をOFFにします");
                    return [4, voiceVox(textInputValue).then(function () {
                            window.isVoiceVoxRunning = false;
                            console.log("音声認識をONにします");
                            shared_1.speech.start();
                        })];
                case 1:
                    _a.sent();
                    return [3, 3];
                case 2:
                    if (flag === "cart") {
                        cartPopupContainer = document.querySelector(".cartPopup-Container");
                        cartPopupContent = document.getElementById("cartPopupContent");
                        if (cartPopupContent) {
                            cartPopupContainer.style.display = "flex";
                        }
                    }
                    _a.label = 3;
                case 3: return [2];
            }
        });
    });
}
exports.displayPopup = displayPopup;
function moveTextToCenter() {
    var bottomContainer = document.querySelector('.bottom-container');
    if (bottomContainer) {
        bottomContainer.style.gridRow = "6/10";
        bottomContainer.style.gridColumn = "4/8";
        bottomContainer.style.transition = "transform 0.5s ease-in-out";
    }
}
exports.moveTextToCenter = moveTextToCenter;
function closePopup() {
    moveToCenter();
    var popupContainer = document.querySelector(".popup-Container");
    var popupContent = document.getElementById("popupContent");
    if (popupContent) {
        popupContainer.style.display = "none";
    }
}
exports.closePopup = closePopup;


/***/ }),

/***/ "./OpenWeatherMap.ts":
/*!***************************!*\
  !*** ./OpenWeatherMap.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.convertToJapanese = exports.getWeather = void 0;
var apiKey = 'da23c9f54590b5e19a37d2f6bf4103e5';
var cityCode = '1856057';
function getWeather() {
    return __awaiter(this, void 0, void 0, function () {
        var textArea, apiUrl, response, data, weatherDescription, temperature, weatherInfo, error_1, errorInfo;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    textArea = document.getElementById("textArea");
                    console.log(textArea);
                    console.log("天気textArea：" + textArea.value);
                    apiUrl = "https://api.openweathermap.org/data/2.5/weather?id=".concat(cityCode, "&appid=").concat(apiKey, "&units=metric&lang=ja");
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, , 5]);
                    return [4, fetch(apiUrl)];
                case 2:
                    response = _a.sent();
                    return [4, response.json()];
                case 3:
                    data = _a.sent();
                    weatherDescription = convertToJapanese(data.weather[0].description);
                    temperature = data.main.temp;
                    weatherInfo = textArea;
                    weatherInfo.value = "\u73FE\u5728\u306E\u5929\u6C17: ".concat(weatherDescription, "\n\u6C17\u6E29: ").concat(temperature, " \u2103");
                    return [3, 5];
                case 4:
                    error_1 = _a.sent();
                    console.error('Error fetching weather data:', error_1);
                    errorInfo = textArea;
                    errorInfo.value = '天気情報の取得に失敗しました';
                    return [3, 5];
                case 5: return [2];
            }
        });
    });
}
exports.getWeather = getWeather;
function convertToJapanese(description) {
    switch (description.toLowerCase()) {
        case 'clear sky':
            return '晴れ';
        case 'few clouds':
            return '晴れ時々曇り';
        case 'scattered clouds':
        case 'broken clouds':
            return '曇り';
        case 'shower rain':
        case 'rain':
            return '雨';
        case 'thunderstorm':
            return '雷雨';
        case 'snow':
            return '雪';
        case 'mist':
            return '霧';
        default:
            return description;
    }
}
exports.convertToJapanese = convertToJapanese;


/***/ }),

/***/ "./client.ts":
/*!*******************!*\
  !*** ./client.ts ***!
  \*******************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sendMessage = exports.postToAI = exports.showBotMessage = exports.showUserMessage = void 0;
function showUserMessage(message) {
    var chatbox = "\n        <li>\n            <div class=\"balloon balloon-r\">\n                <p class=\"talk talk-r\">".concat(message, "</p>\n                <img class=\"img-circle img-r\" src=\"human.jpg\" alt=\"image\" />\n            </div>\n        </li>");
    var chatArea = document.getElementById("chat-area");
    if (chatArea) {
        chatArea.insertAdjacentHTML('beforeend', chatbox);
        if (chatArea) {
            chatArea.scrollTop = chatArea.scrollHeight;
        }
        else {
            console.log("chatArea要素が見つかりません");
        }
    }
}
exports.showUserMessage = showUserMessage;
function showBotMessage(message) {
    var chatbox = "\n        <li>\n            <div class=\"balloon\">\n                <img class=\"img-circle\" src=\"Mao.png\" alt=\"image\" />\n                <p class=\"talk\">".concat(message, "</p>\n            </div>\n        </li>");
    var chatArea = document.getElementById("chat-area");
    if (chatArea) {
        chatArea.insertAdjacentHTML('beforeend', chatbox);
        if (chatArea) {
            chatArea.scrollTop = chatArea.scrollHeight;
        }
        else {
            console.log("chatArea要素が見つかりません");
        }
    }
}
exports.showBotMessage = showBotMessage;
function postToAI(msg) {
    var url = "https://order-conai.openai.azure.com/openai/deployments/OrderCon-AI/chat/completions?api-version=2023-07-01-preview";
    var key = "f15a6f005f6047b58d9885e1ab12faeb";
    var req_body = {
        "messages": [
            {
                "role": "system",
                "content": "\n                    #\u547D\u4EE4\u66F8: \n                    \u3042\u306A\u305F\u306F\u98F2\u98DF\u5E97\u3067\u50CD\u304F\u5B9A\u54E1\u3067\u3059\u3002 \n                    \u304A\u5BA2\u69D8\u306E\u8CEA\u554F\u306B\u304A\u7B54\u3048\u3057\u307E\u3059\u3002 \n                    \u4EE5\u4E0B\u306E\u5236\u7D04\u6761\u4EF6\u3068\u5165\u529B\u6587\u3092\u3082\u3068\u306B\u3001 \u6700\u9AD8\u306E\u7D50\u679C\u3092\u51FA\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002\n                    \n                    #\u5236\u7D04\u6761\u4EF6: \n                    \u30FB\u6587\u5B57\u6570\u306F30\u6587\u5B57\u4EE5\u5185 \n                    \u30FB\u4EE5\u4E0B\u306E\"\u4F8B\"\u3092\u53C2\u8003\u306B\u56DE\u7B54\u3057\u3066\u304F\u3060\u3055\u3044\u3002\n                    \n                    \u4F8B: \n                    \u8CEA\u554F\uFF1A\u30C8\u30A4\u30EC\u306F\u3069\u3053\u3067\u3059\u304B\uFF1F \n                    \u56DE\u7B54\uFF1A\u5E97\u51851\u968E\u306E\u53F3\u5965\u306B\u3054\u3056\u3044\u307E\u3059\u3002\n                    \n                    #\u5165\u529B\u6587: \n                    \u8CEA\u554F\uFF1A{text}\n                    \n                    #\u51FA\u529B\u6587: \n                    \u56DE\u7B54\uFF1A\u3010\u8CEA\u554F\u3078\u306E\u56DE\u7B54\u3011\n                "
            },
            {
                "role": "user",
                "content": "メニューにアレルギー表示はありますか？"
            },
            {
                "role": "assistant",
                "content": "はい、メニューにアレルギー情報を記載しています。詳細はスタッフまでお尋ねください。"
            },
            {
                "role": "user",
                "content": msg
            },
            {
                "role": "assistant",
                "content": ""
            }
        ],
        "temperature": 0.7,
        "top_p": 0.95,
        "frequency_penalty": 0,
        "presence_penalty": 0,
        "max_tokens": 800,
        "stop": null
    };
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'api-key': key
        },
        body: JSON.stringify(req_body)
    })
        .then(function (res) { return res.json(); })
        .then(function (json) {
        var aiMes = json.choices[0].message.content;
        console.log(aiMes);
        showBotMessage(aiMes);
    })
        .catch(function (error) {
        console.error('Error:', error.code + ': ' + error.message);
    });
}
exports.postToAI = postToAI;
function sendMessage() {
    var inputElement = document.getElementById('msg-send-hidden');
    if (!inputElement) {
        console.error("「msg-send」要素がありません");
        return;
    }
    var req_message = inputElement.value;
    showUserMessage(req_message);
    postToAI(req_message);
    inputElement.value = '';
}
exports.sendMessage = sendMessage;
window.onload = function () {
    window.addEventListener('keydown', function (e) {
        if (e.key === 'Enter' && e.shiftKey) {
            sendMessage();
        }
    });
};


/***/ }),

/***/ "./shared.ts":
/*!*******************!*\
  !*** ./shared.ts ***!
  \*******************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.speechListeners_QA = exports.speech_QA = exports.speechListeners = exports.speech = exports.sharedFunction = void 0;
function sharedFunction() {
}
exports.sharedFunction = sharedFunction;
var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
exports.speech = new SpeechRecognition();
exports.speechListeners = {
    result: false,
    end: false,
};
var SpeechRecognition_QA = window.SpeechRecognition || window.webkitSpeechRecognition;
exports.speech_QA = new SpeechRecognition_QA();
exports.speechListeners_QA = {
    result: false,
    end: false,
};


/***/ }),

/***/ "./speechRecognition.ts":
/*!******************************!*\
  !*** ./speechRecognition.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SpeechRec = void 0;
var shared_1 = __webpack_require__(/*! ./shared */ "./shared.ts");
shared_1.speech.lang = 'ja-JP';
shared_1.speech.interimResults = true;
var GuiOperator_1 = __webpack_require__(/*! ./GuiOperator */ "./GuiOperator.ts");
var OpenWeatherMap_1 = __webpack_require__(/*! ./OpenWeatherMap */ "./OpenWeatherMap.ts");
var CartOperator_1 = __webpack_require__(/*! ./CartOperator */ "./CartOperator.ts");
var cart = new CartOperator_1.Cart();
var dish_flg = false;
var dishes = [];
var SpeechRec = (function () {
    function SpeechRec() {
    }
    SpeechRec.prototype.speechEvent = function () {
        var orderList = [];
        var transcripts = ["", ""];
        window.isVoiceVoxRunning = false;
        console.log("音声認識をONにします");
        shared_1.speech.addEventListener('result', function (e) {
            var interimTranscript = "";
            console.log("Speech処理開始");
            for (var i = e.resultIndex; i < e.results.length; i++) {
                var transcript = e.results[i][0].transcript;
                if (e.results[i].isFinal) {
                    transcripts[1] = transcripts[0];
                    transcripts[0] = transcript;
                    var resultData = document.getElementById("textInput");
                    var orderData = document.getElementById("textArea");
                    var bubble = document.getElementById("bubble");
                    var quesButton = document.getElementById("quesButton");
                    var quesPopupContainer = document.querySelector('.quesPopup-Container');
                    console.log('認識結果: ' + transcripts[0]);
                    resultData.value = transcripts[0];
                    if (bubble.style.border === '4px solid #64e680' && transcript !== "戻る") {
                        addord(transformer(transcript));
                    }
                    var orderp = document.getElementById("textArea");
                    var bubbleText = document.getElementById("bubbleText");
                    if (transcript.includes("注文 開始")) {
                        var text = "音声でご注文をどうぞ";
                        console.log("音声認識開始");
                        bubbleText.innerText = text;
                        shared_1.speech.stop();
                        window.isVoiceVoxRunning = true;
                        console.log("音声認識をOFFにします");
                        (0, GuiOperator_1.voiceVox)(text).then(function () {
                            window.isVoiceVoxRunning = false;
                            console.log("音声認識をONにします");
                            shared_1.speech.start();
                        });
                        bubble.style.border = '4px solid #64e680';
                    }
                    else if (transcript.includes("カートに追加")) {
                        searchTag(transformer(transcripts[1]));
                    }
                    else if (transcript.includes("カートを表示")) {
                        var text = "カート一覧を表示します";
                        console.log("カート一覧を表示");
                        bubbleText.innerText = text;
                        shared_1.speech.stop();
                        window.isVoiceVoxRunning = true;
                        console.log("音声認識をOFFにします");
                        (0, GuiOperator_1.voiceVox)(text).then(function () {
                            window.isVoiceVoxRunning = false;
                            console.log("音声認識をONにします");
                            shared_1.speech.start();
                        });
                        cart.displayCartContents();
                    }
                    else if (transcript.includes("カートを閉じる")) {
                        console.log("カート一覧を閉じる");
                        (0, GuiOperator_1.moveToCenter)();
                    }
                    else if (transcript.includes("ありません")) {
                        console.log("注文確定ボタンを表示");
                        var orderButton = document.getElementById("orderButton");
                        orderButton.style.display = "block";
                        cart.displayCartContents();
                    }
                    else if (transcript.includes("注文確認")) {
                        var text = "注文内容を表示します";
                        console.log("注文確認");
                        bubbleText.innerText = text;
                        shared_1.speech.stop();
                        window.isVoiceVoxRunning = true;
                        console.log("音声認識をOFFにします");
                        (0, GuiOperator_1.voiceVox)(text).then(function () {
                            window.isVoiceVoxRunning = false;
                            console.log("音声認識をONにします");
                            shared_1.speech.start();
                        });
                        var cartContents = '注文内容：';
                        for (var i_1 = 0; i_1 < cart._items.length; i_1++) {
                            cartContents += "\n".concat(cart._items[i_1]);
                            console.log("カートの内容" + cartContents);
                        }
                        orderData.value = cartContents;
                        bubble.style.border = '4px solid #dc331c';
                    }
                    else if (transcript.includes("注文確定")) {
                        var text = "ご注文ありがとうございます！";
                        console.log("注文確定");
                        bubbleText.innerText = text;
                        shared_1.speech.stop();
                        window.isVoiceVoxRunning = true;
                        console.log("音声認識をOFFにします");
                        (0, GuiOperator_1.voiceVox)(text).then(function () {
                            window.isVoiceVoxRunning = false;
                            console.log("音声認識をONにします");
                            shared_1.speech.start();
                        });
                        var cartContents = 'ご注文ありがとうございます！\n注文内容：';
                        for (var i_2 = 0; i_2 < cart._items.length; i_2++) {
                            cartContents += "\n".concat(cart._items[i_2]);
                            console.log("カートの内容" + cartContents);
                        }
                        orderData.value = cartContents;
                        bubble.style.border = '4px solid #dc331c';
                        var cartAddButton = document.getElementById("cartAddButton");
                        cartAddButton.style.display = "none";
                        var noMoreOrderButton = document.getElementById("noMoreOrderButton");
                        noMoreOrderButton.style.display = "none";
                        var textContainer = document.getElementById("textContainer");
                        textContainer.style.display = "none";
                        cart.clearCart();
                        (0, GuiOperator_1.moveToCenter)();
                    }
                    else if (transcript.includes("おすすめ")) {
                        (0, OpenWeatherMap_1.getWeather)();
                        var flag = "suggest";
                        (0, GuiOperator_1.changeLayout)(flag);
                        (0, GuiOperator_1.displayPopup)(flag);
                    }
                    else if (transcript.includes("会計")) {
                        var text = "お会計はこちらの金額になります";
                        console.log("会計開始");
                        bubbleText.innerText = text;
                        shared_1.speech.stop();
                        window.isVoiceVoxRunning = true;
                        console.log("音声認識をOFFにします");
                        (0, GuiOperator_1.voiceVox)(text).then(function () {
                            window.isVoiceVoxRunning = false;
                            console.log("音声認識をONにします");
                            shared_1.speech.start();
                        });
                        var finalPrice = 10000;
                        orderData.value = "\u5408\u8A08\u91D1\u984D\uFF1A".concat(finalPrice, "\u5186");
                        console.log("\u5408\u8A08\u91D1\u984D\uFF1A".concat(finalPrice, "\u5186"));
                    }
                    else if (transcript.includes("会計確定")) {
                        var text = "ご来店ありがとうございました！";
                        console.log("会計確定");
                        bubbleText.innerText = text;
                        shared_1.speech.stop();
                        window.isVoiceVoxRunning = true;
                        console.log("音声認識をOFFにします");
                        (0, GuiOperator_1.voiceVox)(text).then(function () {
                            window.isVoiceVoxRunning = false;
                            console.log("音声認識をONにします");
                            shared_1.speech.start();
                        });
                        orderData.value = "Thank you!";
                        console.log("Thank you!");
                        bubble.style.border = '4px solid #007bff';
                        orderp.value = '';
                        console.log("ページ内容をリセットします");
                        bubbleText.value = "";
                    }
                    else if (transcript.includes("戻る")) {
                        bubble.style.border = '4px solid #007bff';
                        orderp.value = '';
                        var text = "音声で注文をどうぞ";
                        console.log("音声で注文をどうぞ");
                        bubbleText.innerText = text;
                    }
                }
                else {
                    interimTranscript += transcript;
                    var text = '認識途中: ' + interimTranscript;
                    console.log(text);
                }
            }
        });
        shared_1.speechListeners.result = true;
        shared_1.speech.onend = function () {
            if (!window.isVoiceVoxRunning) {
                shared_1.speech.start();
            }
        };
        shared_1.speechListeners.end = true;
        function addord(addscript) {
            var result = document.getElementById("textArea");
            result.value += '注文追加: ' + addscript;
            orderList.push(addscript);
            console.log(orderList);
        }
        function transformer(transcript) {
            var conversionTable = {
                'ゼロ': '0', '零': '0', '〇': '0', '０': '0',
                '一': '1', 'いち': '1', 'イチ': '1', '１': '1',
                '二': '2', 'に': '2', 'ニ': '2', '２': '2',
                '三': '3', 'さん': '3', 'サン': '3', '３': '3',
                '四': '4', 'し': '4', 'シ': '4', 'よん': '4', 'ヨン': '4', '４': '4',
                '五': '5', 'ご': '5', 'ゴ': '5', '５': '5',
                '六': '6', 'ろく': '6', 'ロク': '6', '６': '6',
                '七': '7', 'しち': '7', 'シチ': '7', 'なな': '7', 'ナナ': '7', '７': '7',
                '八': '8', 'はち': '8', 'ハチ': '8', '８': '8',
                '九': '9', 'きゅう': '9', 'キュウ': '9', 'く': '9', 'ク': '9', '９': '9',
                'エイ': 'A', 'エー': 'A', 'えい': 'A', 'えー': 'A', 'a': 'A', 'A': 'A',
                'ビー': 'B', 'びー': 'B', 'b': 'B', 'B': 'B',
                'シー': 'C', 'しー': 'C', 'c': 'C', 'C': 'C',
                'ディー': 'D', 'でぃー': 'D', 'd': 'D', 'D': 'D',
                'イー': 'E', 'いー': 'E', 'e': 'E', 'E': 'E',
                'エフ': 'F', 'えふ': 'F', 'f': 'F', 'F': 'F',
                'ジー': 'G', 'じー': 'G', 'g': 'G', 'G': 'G',
                'エイチ': 'H', 'えいち': 'H', 'h': 'H', 'H': 'H',
                'アイ': 'I', 'あい': 'I', 'i': 'I', 'I': 'I',
                'ジェイ': 'J', 'ジェー': 'J', 'じぇい': 'J', 'じぇー': 'J', 'j': 'J', 'J': 'J',
                'ケイ': 'K', 'ケー': 'K', 'けい': 'K', 'けー': 'K', 'k': 'K', 'K': 'K',
                'エル': 'L', 'える': 'L', 'l': 'L', 'L': 'L',
                'エム': 'M', 'えむ': 'M', 'm': 'M', 'M': 'M',
                'エヌ': 'N', 'えぬ': 'N', 'n': 'N', 'N': 'N',
                'オー': 'O', 'おー': 'O', 'o': 'O', 'O': 'O',
                'ピー': 'P', 'ぴー': 'P', 'p': 'P', 'P': 'P',
                'キュー': 'Q', 'きゅー': 'Q', 'q': 'Q', 'Q': 'Q',
                'アール': 'R', 'あーる': 'R', 'r': 'R', 'R': 'R',
                'エス': 'S', 'えす': 'S', 's': 'S', 'S': 'S',
                'ティー': 'T', 'てぃー': 'T', 't': 'T', 'T': 'T',
                'ユー': 'U', 'ゆー': 'U', 'u': 'U', 'U': 'U',
                'ブイ': 'V', 'ぶい': 'V', 'v': 'V', 'V': 'V',
                'ダブリュー': 'W', 'だぶりゅー': 'W', 'w': 'W', 'W': 'W',
                'エックス': 'X', 'えっくす': 'X', 'x': 'X', 'X': 'X',
                'ワイ': 'Y', 'わい': 'Y', 'y': 'Y', 'Y': 'Y',
                'ゼット': 'Z', 'ぜっと': 'Z', 'z': 'Z', 'Z': 'Z',
            };
            var convertedTranscript = transcript;
            for (var _i = 0, _a = Object.entries(conversionTable); _i < _a.length; _i++) {
                var _b = _a[_i], key = _b[0], value = _b[1];
                var regex = new RegExp(key, 'gi');
                convertedTranscript = convertedTranscript.replace(regex, value);
            }
            convertedTranscript = convertedTranscript.match(/[a-zA-Z0-9]+/g).join('');
            return convertedTranscript;
        }
        function searchTag(input_tags) {
            return __awaiter(this, void 0, void 0, function () {
                var found, i;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!dish_flg) return [3, 2];
                            return [4, fetchDishes()];
                        case 1:
                            dishes = _a.sent();
                            _a.label = 2;
                        case 2:
                            found = false;
                            for (i = 0; i < dishes.length; i++) {
                                if (dishes[i].tags == input_tags) {
                                    found = true;
                                    break;
                                }
                            }
                            if (found) {
                                cart.addToCart(dishes[i].dish_name);
                                cart._items.push(dishes[i]);
                                cart.displayCartContents();
                                console.log("serch:入力された文字列は存在します。");
                            }
                            else {
                                console.log("serch:入力された文字列は存在しません。");
                            }
                            return [2];
                    }
                });
            });
        }
        function fetchDishes() {
            return __awaiter(this, void 0, void 0, function () {
                var response, dishes;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, fetch('/get-dishes')];
                        case 1:
                            response = _a.sent();
                            if (!response.ok) {
                                throw new Error("HTTP error! status: ".concat(response.status));
                            }
                            return [4, response.json()];
                        case 2:
                            dishes = _a.sent();
                            return [2, dishes];
                    }
                });
            });
        }
    };
    return SpeechRec;
}());
exports.SpeechRec = SpeechRec;


/***/ }),

/***/ "./speech_QA.ts":
/*!**********************!*\
  !*** ./speech_QA.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SpeechRec_QA = void 0;
var shared_1 = __webpack_require__(/*! ./shared */ "./shared.ts");
shared_1.speech_QA.lang = 'ja-JP';
shared_1.speech_QA.interimResults = true;
var client_1 = __webpack_require__(/*! ./client */ "./client.ts");
var SpeechRec_QA = (function () {
    function SpeechRec_QA() {
    }
    SpeechRec_QA.prototype.speechEvent = function () {
        var orderList = [];
        var transcripts = ["", ""];
        window.isVoiceVoxRunning_QA = false;
        console.log("音声認識をONにします");
        shared_1.speech_QA.addEventListener('result', function (e) {
            var interimTranscript = "";
            console.log("Speech処理開始");
            var resultData = document.getElementById("msg-send");
            for (var i = e.resultIndex; i < e.results.length; i++) {
                var transcript = e.results[i][0].transcript;
                if (e.results[i].isFinal) {
                    transcripts[1] = transcripts[0];
                    transcripts[0] = transcript;
                    var beforeData = document.getElementById("msg-send-hidden");
                    var quesButton = document.getElementById("quesButton");
                    var quesPopupContainer = document.querySelector('.quesPopup-Container');
                    var micButton = document.querySelector(".img-mic");
                    console.log('QA認識結果：' + transcripts[0]);
                    resultData.value = transcripts[0];
                    console.log("QA1つ前の結果：" + transcripts[1]);
                    beforeData.value = transcripts[1];
                    if (micButton.style.border === '4px solid #dc331c' && transcript !== "戻る") {
                        addord(transformer(transcript));
                    }
                    var orderp = document.getElementById("textArea");
                    var bubbleText = document.getElementById("bubbleText");
                    if (transcript.includes("送信")) {
                        (0, client_1.sendMessage)();
                        if (window.isMicActive) {
                            micButton.style.border = '4px solid #007bff';
                            shared_1.speech_QA.stop();
                            window.isVoiceVoxRunning_QA = true;
                            window.isMicActive = false;
                            console.log("QA用の音声認識をOFFにします");
                        }
                    }
                    else if (transcript.includes("戻る")) {
                        micButton.style.border = '4px solid #007bff';
                        resultData.value = '';
                        console.log("内容リセット");
                    }
                }
                else {
                    interimTranscript += transcript;
                    var text = '認識途中: ' + interimTranscript;
                    console.log(text);
                }
            }
        });
        shared_1.speechListeners_QA.result = true;
        shared_1.speech_QA.onend = function () {
            if (!window.isVoiceVoxRunning_QA) {
                shared_1.speech_QA.start();
            }
        };
        shared_1.speechListeners_QA.end = true;
        function addord(addscript) {
            var beforeData = document.getElementById("msg-send-hidden");
            beforeData.value += '注文追加: ' + addscript;
            console.log(beforeData.value);
            orderList.push(addscript);
            console.log(orderList);
        }
        function transformer(transcript) {
            var conversionTable = {
                'ゼロ': '0', '零': '0', '〇': '0', '０': '0',
                '一': '1', 'いち': '1', 'イチ': '1', '１': '1',
                '二': '2', 'に': '2', 'ニ': '2', '２': '2',
                '三': '3', 'さん': '3', 'サン': '3', '３': '3',
                '四': '4', 'し': '4', 'シ': '4', 'よん': '4', 'ヨン': '4', '４': '4',
                '五': '5', 'ご': '5', 'ゴ': '5', '５': '5',
                '六': '6', 'ろく': '6', 'ロク': '6', '６': '6',
                '七': '7', 'しち': '7', 'シチ': '7', 'なな': '7', 'ナナ': '7', '７': '7',
                '八': '8', 'はち': '8', 'ハチ': '8', '８': '8',
                '九': '9', 'きゅう': '9', 'キュウ': '9', 'く': '9', 'ク': '9', '９': '9',
                'エイ': 'A', 'エー': 'A', 'えい': 'A', 'えー': 'A', 'a': 'A', 'A': 'A',
                'ビー': 'B', 'びー': 'B', 'b': 'B', 'B': 'B',
                'シー': 'C', 'しー': 'C', 'c': 'C', 'C': 'C',
                'ディー': 'D', 'でぃー': 'D', 'd': 'D', 'D': 'D',
                'イー': 'E', 'いー': 'E', 'e': 'E', 'E': 'E',
                'エフ': 'F', 'えふ': 'F', 'f': 'F', 'F': 'F',
                'ジー': 'G', 'じー': 'G', 'g': 'G', 'G': 'G',
                'エイチ': 'H', 'えいち': 'H', 'h': 'H', 'H': 'H',
                'アイ': 'I', 'あい': 'I', 'i': 'I', 'I': 'I',
                'ジェイ': 'J', 'ジェー': 'J', 'じぇい': 'J', 'じぇー': 'J', 'j': 'J', 'J': 'J',
                'ケイ': 'K', 'ケー': 'K', 'けい': 'K', 'けー': 'K', 'k': 'K', 'K': 'K',
                'エル': 'L', 'える': 'L', 'l': 'L', 'L': 'L',
                'エム': 'M', 'えむ': 'M', 'm': 'M', 'M': 'M',
                'エヌ': 'N', 'えぬ': 'N', 'n': 'N', 'N': 'N',
                'オー': 'O', 'おー': 'O', 'o': 'O', 'O': 'O',
                'ピー': 'P', 'ぴー': 'P', 'p': 'P', 'P': 'P',
                'キュー': 'Q', 'きゅー': 'Q', 'q': 'Q', 'Q': 'Q',
                'アール': 'R', 'あーる': 'R', 'r': 'R', 'R': 'R',
                'エス': 'S', 'えす': 'S', 's': 'S', 'S': 'S',
                'ティー': 'T', 'てぃー': 'T', 't': 'T', 'T': 'T',
                'ユー': 'U', 'ゆー': 'U', 'u': 'U', 'U': 'U',
                'ブイ': 'V', 'ぶい': 'V', 'v': 'V', 'V': 'V',
                'ダブリュー': 'W', 'だぶりゅー': 'W', 'w': 'W', 'W': 'W',
                'エックス': 'X', 'えっくす': 'X', 'x': 'X', 'X': 'X',
                'ワイ': 'Y', 'わい': 'Y', 'y': 'Y', 'Y': 'Y',
                'ゼット': 'Z', 'ぜっと': 'Z', 'z': 'Z', 'Z': 'Z',
            };
            var convertedTranscript = transcript;
            for (var _i = 0, _a = Object.entries(conversionTable); _i < _a.length; _i++) {
                var _b = _a[_i], key = _b[0], value = _b[1];
                var regex = new RegExp(key, 'gi');
                convertedTranscript = convertedTranscript.replace(regex, value);
            }
            convertedTranscript = convertedTranscript.match(/[a-zA-Z0-9]+/g).join('');
            return convertedTranscript;
        }
    };
    return SpeechRec_QA;
}());
exports.SpeechRec_QA = SpeechRec_QA;


/***/ }),

/***/ "./src/lappdefine.ts":
/*!***************************!*\
  !*** ./src/lappdefine.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RenderTargetHeight = exports.RenderTargetWidth = exports.CubismLoggingLevel = exports.DebugTouchLogEnable = exports.DebugLogEnable = exports.MOCConsistencyValidationEnable = exports.PriorityForce = exports.PriorityNormal = exports.PriorityIdle = exports.PriorityNone = exports.HitAreaNameBody = exports.HitAreaNameHead = exports.MotionGroupTapBody = exports.MotionGroupIdle = exports.ModelDirSize = exports.ModelDir = exports.PowerImageName = exports.GearImageName = exports.BackImageName = exports.ResourcesPath = exports.ViewLogicalMaxTop = exports.ViewLogicalMaxBottom = exports.ViewLogicalMaxRight = exports.ViewLogicalMaxLeft = exports.ViewLogicalTop = exports.ViewLogicalBottom = exports.ViewLogicalRight = exports.ViewLogicalLeft = exports.ViewMinScale = exports.ViewMaxScale = exports.ViewScale = exports.CanvasSize = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
exports.CanvasSize = {
    width: 500,
    height: 500,
};
exports.ViewScale = 1.0;
exports.ViewMaxScale = 2.0;
exports.ViewMinScale = 0.8;
exports.ViewLogicalLeft = -1.0;
exports.ViewLogicalRight = 1.0;
exports.ViewLogicalBottom = -1.0;
exports.ViewLogicalTop = 1.0;
exports.ViewLogicalMaxLeft = -2.0;
exports.ViewLogicalMaxRight = 2.0;
exports.ViewLogicalMaxBottom = -2.0;
exports.ViewLogicalMaxTop = 2.0;
exports.ResourcesPath = '../../Resources/';
exports.BackImageName = '';
exports.GearImageName = '';
exports.PowerImageName = 'CloseNormal.png';
exports.ModelDir = [
    'Mao'
];
exports.ModelDirSize = exports.ModelDir.length;
exports.MotionGroupIdle = 'Idle';
exports.MotionGroupTapBody = 'TapBody';
exports.HitAreaNameHead = 'Head';
exports.HitAreaNameBody = 'Body';
exports.PriorityNone = 0;
exports.PriorityIdle = 1;
exports.PriorityNormal = 2;
exports.PriorityForce = 3;
exports.MOCConsistencyValidationEnable = true;
exports.DebugLogEnable = true;
exports.DebugTouchLogEnable = false;
exports.CubismLoggingLevel = live2dcubismframework_1.LogLevel.LogLevel_Verbose;
exports.RenderTargetWidth = 1900;
exports.RenderTargetHeight = 1000;


/***/ }),

/***/ "./src/lappdelegate.ts":
/*!*****************************!*\
  !*** ./src/lappdelegate.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppDelegate = exports.frameBuffer = exports.gl = exports.s_instance = exports.canvas = void 0;
var live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
var lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ "./src/lapplive2dmanager.ts");
var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/lapppal.ts");
var lapptexturemanager_1 = __webpack_require__(/*! ./lapptexturemanager */ "./src/lapptexturemanager.ts");
var lappview_1 = __webpack_require__(/*! ./lappview */ "./src/lappview.ts");
exports.canvas = null;
exports.s_instance = null;
exports.gl = null;
exports.frameBuffer = null;
var LAppDelegate = (function () {
    function LAppDelegate() {
        this._captured = false;
        this._mouseX = 0.0;
        this._mouseY = 0.0;
        this._isEnd = false;
        this._cubismOption = new live2dcubismframework_1.Option();
        this._view = new lappview_1.LAppView();
        this._textureManager = new lapptexturemanager_1.LAppTextureManager();
    }
    LAppDelegate.getInstance = function () {
        if (exports.s_instance == null) {
            exports.s_instance = new LAppDelegate();
        }
        return exports.s_instance;
    };
    LAppDelegate.releaseInstance = function () {
        if (exports.s_instance != null) {
            exports.s_instance.release();
        }
        exports.s_instance = null;
    };
    LAppDelegate.prototype.initialize = function () {
        exports.canvas = document.createElement('canvas');
        exports.canvas.id = 'myCanvas';
        var canvasContainer = document.querySelector('.canvas-container');
        if (canvasContainer) {
            canvasContainer.appendChild(exports.canvas);
        }
        else {
            console.error('Canvas containerがありません。');
        }
        if (LAppDefine.CanvasSize === 'auto') {
            this._resizeCanvas();
        }
        else {
            exports.canvas.width = LAppDefine.CanvasSize.width;
            exports.canvas.height = LAppDefine.CanvasSize.height;
        }
        exports.gl = exports.canvas.getContext('webgl') || exports.canvas.getContext('experimental-webgl');
        if (!exports.gl) {
            alert('Cannot initialize WebGL. This browser does not support.');
            exports.gl = null;
            document.body.innerHTML =
                'This browser does not support the <code>&lt;canvas&gt;</code> element.';
            return false;
        }
        if (!exports.frameBuffer) {
            exports.frameBuffer = exports.gl.getParameter(exports.gl.FRAMEBUFFER_BINDING);
        }
        exports.gl.enable(exports.gl.BLEND);
        exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);
        var supportTouch = 'ontouchend' in exports.canvas;
        if (supportTouch) {
            exports.canvas.ontouchstart = onTouchBegan;
            exports.canvas.ontouchmove = onTouchMoved;
            exports.canvas.ontouchend = onTouchEnded;
            exports.canvas.ontouchcancel = onTouchCancel;
        }
        else {
            exports.canvas.onmousedown = onClickBegan;
            exports.canvas.onmousemove = onMouseMoved;
            exports.canvas.onmouseup = onClickEnded;
        }
        this._view.initialize();
        this.initializeCubism();
        return true;
    };
    LAppDelegate.prototype.onResize = function () {
        this._resizeCanvas();
        this._view.initialize();
        this._view.initializeSprite();
        var viewport = [0, 0, exports.canvas.width, exports.canvas.height];
        exports.gl.viewport(viewport[0], viewport[1], viewport[2], viewport[3]);
    };
    LAppDelegate.prototype.release = function () {
        this._textureManager.release();
        this._textureManager = null;
        this._view.release();
        this._view = null;
        lapplive2dmanager_1.LAppLive2DManager.releaseInstance();
        live2dcubismframework_1.CubismFramework.dispose();
    };
    LAppDelegate.prototype.run = function () {
        var _this = this;
        var loop = function () {
            if (exports.s_instance == null) {
                return;
            }
            lapppal_1.LAppPal.updateTime();
            exports.gl.clearColor(0.0, 0.0, 0.0, 0.0);
            exports.gl.enable(exports.gl.DEPTH_TEST);
            exports.gl.depthFunc(exports.gl.LEQUAL);
            exports.gl.clear(exports.gl.COLOR_BUFFER_BIT | exports.gl.DEPTH_BUFFER_BIT);
            exports.gl.clearDepth(1.0);
            exports.gl.enable(exports.gl.BLEND);
            exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);
            _this._view.render();
            requestAnimationFrame(loop);
        };
        loop();
    };
    LAppDelegate.prototype.createShader = function () {
        var vertexShaderId = exports.gl.createShader(exports.gl.VERTEX_SHADER);
        if (vertexShaderId == null) {
            lapppal_1.LAppPal.printMessage('failed to create vertexShader');
            return null;
        }
        var vertexShader = 'precision mediump float;' +
            'attribute vec3 position;' +
            'attribute vec2 uv;' +
            'varying vec2 vuv;' +
            'void main(void)' +
            '{' +
            '   gl_Position = vec4(position, 1.0);' +
            '   vuv = uv;' +
            '}';
        exports.gl.shaderSource(vertexShaderId, vertexShader);
        exports.gl.compileShader(vertexShaderId);
        var fragmentShaderId = exports.gl.createShader(exports.gl.FRAGMENT_SHADER);
        if (fragmentShaderId == null) {
            lapppal_1.LAppPal.printMessage('failed to create fragmentShader');
            return null;
        }
        var fragmentShader = 'precision mediump float;' +
            'varying vec2 vuv;' +
            'uniform sampler2D texture;' +
            'void main(void)' +
            '{' +
            '   gl_FragColor = texture2D(texture, vuv);' +
            '}';
        exports.gl.shaderSource(fragmentShaderId, fragmentShader);
        exports.gl.compileShader(fragmentShaderId);
        var programId = exports.gl.createProgram();
        exports.gl.attachShader(programId, vertexShaderId);
        exports.gl.attachShader(programId, fragmentShaderId);
        exports.gl.deleteShader(vertexShaderId);
        exports.gl.deleteShader(fragmentShaderId);
        exports.gl.linkProgram(programId);
        exports.gl.useProgram(programId);
        return programId;
    };
    LAppDelegate.prototype.getView = function () {
        return this._view;
    };
    LAppDelegate.prototype.getTextureManager = function () {
        return this._textureManager;
    };
    LAppDelegate.prototype.initializeCubism = function () {
        this._cubismOption.logFunction = lapppal_1.LAppPal.printMessage;
        this._cubismOption.loggingLevel = LAppDefine.CubismLoggingLevel;
        live2dcubismframework_1.CubismFramework.startUp(this._cubismOption);
        live2dcubismframework_1.CubismFramework.initialize();
        lapplive2dmanager_1.LAppLive2DManager.getInstance();
        lapppal_1.LAppPal.updateTime();
        this._view.initializeSprite();
    };
    LAppDelegate.prototype._resizeCanvas = function () {
        exports.canvas.width = window.innerWidth;
        exports.canvas.height = window.innerHeight;
    };
    return LAppDelegate;
}());
exports.LAppDelegate = LAppDelegate;
function onClickBegan(e) {
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    LAppDelegate.getInstance()._captured = true;
    var posX = e.pageX;
    var posY = e.pageY;
    LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);
}
function onMouseMoved(e) {
    if (!LAppDelegate.getInstance()._captured) {
        return;
    }
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var rect = e.target.getBoundingClientRect();
    var posX = e.clientX - rect.left;
    var posY = e.clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);
}
function onClickEnded(e) {
    LAppDelegate.getInstance()._captured = false;
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var rect = e.target.getBoundingClientRect();
    var posX = e.clientX - rect.left;
    var posY = e.clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);
}
function onTouchBegan(e) {
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    LAppDelegate.getInstance()._captured = true;
    var posX = e.changedTouches[0].pageX;
    var posY = e.changedTouches[0].pageY;
    LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);
}
function onTouchMoved(e) {
    if (!LAppDelegate.getInstance()._captured) {
        return;
    }
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var rect = e.target.getBoundingClientRect();
    var posX = e.changedTouches[0].clientX - rect.left;
    var posY = e.changedTouches[0].clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);
}
function onTouchEnded(e) {
    LAppDelegate.getInstance()._captured = false;
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var rect = e.target.getBoundingClientRect();
    var posX = e.changedTouches[0].clientX - rect.left;
    var posY = e.changedTouches[0].clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);
}
function onTouchCancel(e) {
    LAppDelegate.getInstance()._captured = false;
    if (!LAppDelegate.getInstance()._view) {
        lapppal_1.LAppPal.printMessage('view notfound');
        return;
    }
    var rect = e.target.getBoundingClientRect();
    var posX = e.changedTouches[0].clientX - rect.left;
    var posY = e.changedTouches[0].clientY - rect.top;
    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);
}


/***/ }),

/***/ "./src/lapplive2dmanager.ts":
/*!**********************************!*\
  !*** ./src/lapplive2dmanager.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppLive2DManager = exports.s_instance = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! @framework/math/cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts");
var csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
var lappmodel_1 = __webpack_require__(/*! ./lappmodel */ "./src/lappmodel.ts");
var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/lapppal.ts");
exports.s_instance = null;
var LAppLive2DManager = (function () {
    function LAppLive2DManager() {
        this._finishedMotion = function (self) {
            lapppal_1.LAppPal.printMessage('Motion Finished:');
            console.log(self);
        };
        this._viewMatrix = new cubismmatrix44_1.CubismMatrix44();
        this._models = new csmvector_1.csmVector();
        this._sceneIndex = 0;
        this.changeScene(this._sceneIndex);
    }
    LAppLive2DManager.getInstance = function () {
        if (exports.s_instance == null) {
            exports.s_instance = new LAppLive2DManager();
        }
        return exports.s_instance;
    };
    LAppLive2DManager.releaseInstance = function () {
        if (exports.s_instance != null) {
            exports.s_instance = void 0;
        }
        exports.s_instance = null;
    };
    LAppLive2DManager.prototype.getModel = function (no) {
        if (no < this._models.getSize()) {
            return this._models.at(no);
        }
        return null;
    };
    LAppLive2DManager.prototype.releaseAllModel = function () {
        for (var i = 0; i < this._models.getSize(); i++) {
            this._models.at(i).release();
            this._models.set(i, null);
        }
        this._models.clear();
    };
    LAppLive2DManager.prototype.onDrag = function (x, y) {
        for (var i = 0; i < this._models.getSize(); i++) {
            var model = this.getModel(i);
            if (model) {
                model.setDragging(x, y);
            }
        }
    };
    LAppLive2DManager.prototype.onTap = function (x, y) {
        if (LAppDefine.DebugLogEnable) {
            lapppal_1.LAppPal.printMessage("[APP]tap point: {x: ".concat(x.toFixed(2), " y: ").concat(y.toFixed(2), "}"));
        }
        for (var i = 0; i < this._models.getSize(); i++) {
            if (this._models.at(i).hitTest(LAppDefine.HitAreaNameHead, x, y)) {
                if (LAppDefine.DebugLogEnable) {
                    lapppal_1.LAppPal.printMessage("[APP]hit area: [".concat(LAppDefine.HitAreaNameHead, "]"));
                }
                this._models.at(i).setRandomExpression();
            }
            else if (this._models.at(i).hitTest(LAppDefine.HitAreaNameBody, x, y)) {
                if (LAppDefine.DebugLogEnable) {
                    lapppal_1.LAppPal.printMessage("[APP]hit area: [".concat(LAppDefine.HitAreaNameBody, "]"));
                }
                this._models
                    .at(i)
                    .startMotion(LAppDefine.MotionGroupTapBody, 3, LAppDefine.PriorityNormal, this._finishedMotion);
            }
        }
    };
    LAppLive2DManager.prototype.onUpdate = function () {
        var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;
        var modelCount = this._models.getSize();
        for (var i = 0; i < modelCount; ++i) {
            var projection = new cubismmatrix44_1.CubismMatrix44();
            var model = this.getModel(i);
            if (model.getModel()) {
                if (model.getModel().getCanvasWidth() > 1.0 && width < height) {
                    model.getModelMatrix().setWidth(2.0);
                    projection.scale(3.0, width / height * 3);
                    projection.translate(0, -1.5);
                }
                else {
                    projection.scale(height * 3 / width, 3.0);
                    projection.translate(0, -1.5);
                }
                if (this._viewMatrix != null) {
                    projection.multiplyByMatrix(this._viewMatrix);
                }
            }
            model.update();
            model.draw(projection);
        }
    };
    LAppLive2DManager.prototype.nextScene = function () {
        var no = (this._sceneIndex + 1) % LAppDefine.ModelDirSize;
        this.changeScene(no);
    };
    LAppLive2DManager.prototype.changeScene = function (index) {
        this._sceneIndex = index;
        if (LAppDefine.DebugLogEnable) {
            lapppal_1.LAppPal.printMessage("[APP]model index: ".concat(this._sceneIndex));
        }
        var model = LAppDefine.ModelDir[index];
        var modelPath = LAppDefine.ResourcesPath + model + '/';
        var modelJsonName = LAppDefine.ModelDir[index];
        modelJsonName += '.model3.json';
        this.releaseAllModel();
        this._models.pushBack(new lappmodel_1.LAppModel());
        this._models.at(0).loadAssets(modelPath, modelJsonName);
    };
    LAppLive2DManager.prototype.setViewMatrix = function (m) {
        for (var i = 0; i < 16; i++) {
            this._viewMatrix.getArray()[i] = m.getArray()[i];
        }
    };
    return LAppLive2DManager;
}());
exports.LAppLive2DManager = LAppLive2DManager;


/***/ }),

/***/ "./src/lappmodel.ts":
/*!**************************!*\
  !*** ./src/lappmodel.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppModel = void 0;
__webpack_require__(/*! whatwg-fetch */ "./node_modules/whatwg-fetch/fetch.js");
var cubismdefaultparameterid_1 = __webpack_require__(/*! @framework/cubismdefaultparameterid */ "../../../Framework/src/cubismdefaultparameterid.ts");
var cubismmodelsettingjson_1 = __webpack_require__(/*! @framework/cubismmodelsettingjson */ "../../../Framework/src/cubismmodelsettingjson.ts");
var cubismbreath_1 = __webpack_require__(/*! @framework/effect/cubismbreath */ "../../../Framework/src/effect/cubismbreath.ts");
var cubismeyeblink_1 = __webpack_require__(/*! @framework/effect/cubismeyeblink */ "../../../Framework/src/effect/cubismeyeblink.ts");
var live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ "../../../Framework/src/live2dcubismframework.ts");
var cubismusermodel_1 = __webpack_require__(/*! @framework/model/cubismusermodel */ "../../../Framework/src/model/cubismusermodel.ts");
var acubismmotion_1 = __webpack_require__(/*! @framework/motion/acubismmotion */ "../../../Framework/src/motion/acubismmotion.ts");
var cubismmotionqueuemanager_1 = __webpack_require__(/*! @framework/motion/cubismmotionqueuemanager */ "../../../Framework/src/motion/cubismmotionqueuemanager.ts");
var csmmap_1 = __webpack_require__(/*! @framework/type/csmmap */ "../../../Framework/src/type/csmmap.ts");
var csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var cubismdebug_1 = __webpack_require__(/*! @framework/utils/cubismdebug */ "../../../Framework/src/utils/cubismdebug.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/lapppal.ts");
var lappwavfilehandler_1 = __webpack_require__(/*! ./lappwavfilehandler */ "./src/lappwavfilehandler.ts");
var cubismmoc_1 = __webpack_require__(/*! @framework/model/cubismmoc */ "../../../Framework/src/model/cubismmoc.ts");
var LoadStep;
(function (LoadStep) {
    LoadStep[LoadStep["LoadAssets"] = 0] = "LoadAssets";
    LoadStep[LoadStep["LoadModel"] = 1] = "LoadModel";
    LoadStep[LoadStep["WaitLoadModel"] = 2] = "WaitLoadModel";
    LoadStep[LoadStep["LoadExpression"] = 3] = "LoadExpression";
    LoadStep[LoadStep["WaitLoadExpression"] = 4] = "WaitLoadExpression";
    LoadStep[LoadStep["LoadPhysics"] = 5] = "LoadPhysics";
    LoadStep[LoadStep["WaitLoadPhysics"] = 6] = "WaitLoadPhysics";
    LoadStep[LoadStep["LoadPose"] = 7] = "LoadPose";
    LoadStep[LoadStep["WaitLoadPose"] = 8] = "WaitLoadPose";
    LoadStep[LoadStep["SetupEyeBlink"] = 9] = "SetupEyeBlink";
    LoadStep[LoadStep["SetupBreath"] = 10] = "SetupBreath";
    LoadStep[LoadStep["LoadUserData"] = 11] = "LoadUserData";
    LoadStep[LoadStep["WaitLoadUserData"] = 12] = "WaitLoadUserData";
    LoadStep[LoadStep["SetupEyeBlinkIds"] = 13] = "SetupEyeBlinkIds";
    LoadStep[LoadStep["SetupLipSyncIds"] = 14] = "SetupLipSyncIds";
    LoadStep[LoadStep["SetupLayout"] = 15] = "SetupLayout";
    LoadStep[LoadStep["LoadMotion"] = 16] = "LoadMotion";
    LoadStep[LoadStep["WaitLoadMotion"] = 17] = "WaitLoadMotion";
    LoadStep[LoadStep["CompleteInitialize"] = 18] = "CompleteInitialize";
    LoadStep[LoadStep["CompleteSetupModel"] = 19] = "CompleteSetupModel";
    LoadStep[LoadStep["LoadTexture"] = 20] = "LoadTexture";
    LoadStep[LoadStep["WaitLoadTexture"] = 21] = "WaitLoadTexture";
    LoadStep[LoadStep["CompleteSetup"] = 22] = "CompleteSetup";
})(LoadStep || (LoadStep = {}));
var LAppModel = (function (_super) {
    __extends(LAppModel, _super);
    function LAppModel() {
        var _this = _super.call(this) || this;
        _this._modelSetting = null;
        _this._modelHomeDir = null;
        _this._userTimeSeconds = 0.0;
        _this._eyeBlinkIds = new csmvector_1.csmVector();
        _this._lipSyncIds = new csmvector_1.csmVector();
        _this._motions = new csmmap_1.csmMap();
        _this._expressions = new csmmap_1.csmMap();
        _this._hitArea = new csmvector_1.csmVector();
        _this._userArea = new csmvector_1.csmVector();
        _this._idParamAngleX = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamAngleX);
        _this._idParamAngleY = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamAngleY);
        _this._idParamAngleZ = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamAngleZ);
        _this._idParamEyeBallX = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamEyeBallX);
        _this._idParamEyeBallY = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamEyeBallY);
        _this._idParamBodyAngleX = live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamBodyAngleX);
        if (LAppDefine.MOCConsistencyValidationEnable) {
            _this._mocConsistency = true;
        }
        _this._state = LoadStep.LoadAssets;
        _this._expressionCount = 0;
        _this._textureCount = 0;
        _this._motionCount = 0;
        _this._allMotionCount = 0;
        _this._wavFileHandler = new lappwavfilehandler_1.LAppWavFileHandler();
        _this._consistency = false;
        return _this;
    }
    LAppModel.prototype.loadAssets = function (dir, fileName) {
        var _this = this;
        this._modelHomeDir = dir;
        fetch("".concat(this._modelHomeDir).concat(fileName))
            .then(function (response) { return response.arrayBuffer(); })
            .then(function (arrayBuffer) {
            var setting = new cubismmodelsettingjson_1.CubismModelSettingJson(arrayBuffer, arrayBuffer.byteLength);
            _this._state = LoadStep.LoadModel;
            _this.setupModel(setting);
        });
    };
    LAppModel.prototype.setupModel = function (setting) {
        var _this = this;
        this._updating = true;
        this._initialized = false;
        this._modelSetting = setting;
        if (this._modelSetting.getModelFileName() != '') {
            var modelFileName = this._modelSetting.getModelFileName();
            fetch("".concat(this._modelHomeDir).concat(modelFileName))
                .then(function (response) { return response.arrayBuffer(); })
                .then(function (arrayBuffer) {
                _this.loadModel(arrayBuffer, _this._mocConsistency);
                _this._state = LoadStep.LoadExpression;
                loadCubismExpression();
            });
            this._state = LoadStep.WaitLoadModel;
        }
        else {
            lapppal_1.LAppPal.printMessage('Model data does not exist.');
        }
        var loadCubismExpression = function () {
            if (_this._modelSetting.getExpressionCount() > 0) {
                var count_1 = _this._modelSetting.getExpressionCount();
                var _loop_1 = function (i) {
                    var expressionName = _this._modelSetting.getExpressionName(i);
                    var expressionFileName = _this._modelSetting.getExpressionFileName(i);
                    fetch("".concat(_this._modelHomeDir).concat(expressionFileName))
                        .then(function (response) { return response.arrayBuffer(); })
                        .then(function (arrayBuffer) {
                        var motion = _this.loadExpression(arrayBuffer, arrayBuffer.byteLength, expressionName);
                        if (_this._expressions.getValue(expressionName) != null) {
                            acubismmotion_1.ACubismMotion.delete(_this._expressions.getValue(expressionName));
                            _this._expressions.setValue(expressionName, null);
                        }
                        _this._expressions.setValue(expressionName, motion);
                        _this._expressionCount++;
                        if (_this._expressionCount >= count_1) {
                            _this._state = LoadStep.LoadPhysics;
                            loadCubismPhysics();
                        }
                    });
                };
                for (var i = 0; i < count_1; i++) {
                    _loop_1(i);
                }
                _this._state = LoadStep.WaitLoadExpression;
            }
            else {
                _this._state = LoadStep.LoadPhysics;
                loadCubismPhysics();
            }
        };
        var loadCubismPhysics = function () {
            if (_this._modelSetting.getPhysicsFileName() != '') {
                var physicsFileName = _this._modelSetting.getPhysicsFileName();
                fetch("".concat(_this._modelHomeDir).concat(physicsFileName))
                    .then(function (response) { return response.arrayBuffer(); })
                    .then(function (arrayBuffer) {
                    _this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);
                    _this._state = LoadStep.LoadPose;
                    loadCubismPose();
                });
                _this._state = LoadStep.WaitLoadPhysics;
            }
            else {
                _this._state = LoadStep.LoadPose;
                loadCubismPose();
            }
        };
        var loadCubismPose = function () {
            if (_this._modelSetting.getPoseFileName() != '') {
                var poseFileName = _this._modelSetting.getPoseFileName();
                fetch("".concat(_this._modelHomeDir).concat(poseFileName))
                    .then(function (response) { return response.arrayBuffer(); })
                    .then(function (arrayBuffer) {
                    _this.loadPose(arrayBuffer, arrayBuffer.byteLength);
                    _this._state = LoadStep.SetupEyeBlink;
                    setupEyeBlink();
                });
                _this._state = LoadStep.WaitLoadPose;
            }
            else {
                _this._state = LoadStep.SetupEyeBlink;
                setupEyeBlink();
            }
        };
        var setupEyeBlink = function () {
            if (_this._modelSetting.getEyeBlinkParameterCount() > 0) {
                _this._eyeBlink = cubismeyeblink_1.CubismEyeBlink.create(_this._modelSetting);
                _this._state = LoadStep.SetupBreath;
            }
            setupBreath();
        };
        var setupBreath = function () {
            _this._breath = cubismbreath_1.CubismBreath.create();
            var breathParameters = new csmvector_1.csmVector();
            breathParameters.pushBack(new cubismbreath_1.BreathParameterData(_this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5));
            breathParameters.pushBack(new cubismbreath_1.BreathParameterData(_this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5));
            breathParameters.pushBack(new cubismbreath_1.BreathParameterData(_this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5));
            breathParameters.pushBack(new cubismbreath_1.BreathParameterData(_this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5));
            breathParameters.pushBack(new cubismbreath_1.BreathParameterData(live2dcubismframework_1.CubismFramework.getIdManager().getId(cubismdefaultparameterid_1.CubismDefaultParameterId.ParamBreath), 0.5, 0.5, 3.2345, 1));
            _this._breath.setParameters(breathParameters);
            _this._state = LoadStep.LoadUserData;
            loadUserData();
        };
        var loadUserData = function () {
            if (_this._modelSetting.getUserDataFile() != '') {
                var userDataFile = _this._modelSetting.getUserDataFile();
                fetch("".concat(_this._modelHomeDir).concat(userDataFile))
                    .then(function (response) { return response.arrayBuffer(); })
                    .then(function (arrayBuffer) {
                    _this.loadUserData(arrayBuffer, arrayBuffer.byteLength);
                    _this._state = LoadStep.SetupEyeBlinkIds;
                    setupEyeBlinkIds();
                });
                _this._state = LoadStep.WaitLoadUserData;
            }
            else {
                _this._state = LoadStep.SetupEyeBlinkIds;
                setupEyeBlinkIds();
            }
        };
        var setupEyeBlinkIds = function () {
            var eyeBlinkIdCount = _this._modelSetting.getEyeBlinkParameterCount();
            for (var i = 0; i < eyeBlinkIdCount; ++i) {
                _this._eyeBlinkIds.pushBack(_this._modelSetting.getEyeBlinkParameterId(i));
            }
            _this._state = LoadStep.SetupLipSyncIds;
            setupLipSyncIds();
        };
        var setupLipSyncIds = function () {
            var lipSyncIdCount = _this._modelSetting.getLipSyncParameterCount();
            for (var i = 0; i < lipSyncIdCount; ++i) {
                _this._lipSyncIds.pushBack(_this._modelSetting.getLipSyncParameterId(i));
            }
            _this._state = LoadStep.SetupLayout;
            setupLayout();
        };
        var setupLayout = function () {
            var layout = new csmmap_1.csmMap();
            if (_this._modelSetting == null || _this._modelMatrix == null) {
                (0, cubismdebug_1.CubismLogError)('Failed to setupLayout().');
                return;
            }
            _this._modelSetting.getLayoutMap(layout);
            _this._modelMatrix.setupFromLayout(layout);
            _this._state = LoadStep.LoadMotion;
            loadCubismMotion();
        };
        var loadCubismMotion = function () {
            _this._state = LoadStep.WaitLoadMotion;
            _this._model.saveParameters();
            _this._allMotionCount = 0;
            _this._motionCount = 0;
            var group = [];
            var motionGroupCount = _this._modelSetting.getMotionGroupCount();
            for (var i = 0; i < motionGroupCount; i++) {
                group[i] = _this._modelSetting.getMotionGroupName(i);
                _this._allMotionCount += _this._modelSetting.getMotionCount(group[i]);
            }
            for (var i = 0; i < motionGroupCount; i++) {
                _this.preLoadMotionGroup(group[i]);
            }
            if (motionGroupCount == 0) {
                _this._state = LoadStep.LoadTexture;
                _this._motionManager.stopAllMotions();
                _this._updating = false;
                _this._initialized = true;
                _this.createRenderer();
                _this.setupTextures();
                _this.getRenderer().startUp(lappdelegate_1.gl);
            }
        };
    };
    LAppModel.prototype.setupTextures = function () {
        var _this = this;
        var usePremultiply = true;
        if (this._state == LoadStep.LoadTexture) {
            var textureCount_1 = this._modelSetting.getTextureCount();
            var _loop_2 = function (modelTextureNumber) {
                if (this_1._modelSetting.getTextureFileName(modelTextureNumber) == '') {
                    console.log('getTextureFileName null');
                    return "continue";
                }
                var texturePath = this_1._modelSetting.getTextureFileName(modelTextureNumber);
                texturePath = this_1._modelHomeDir + texturePath;
                var onLoad = function (textureInfo) {
                    _this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);
                    _this._textureCount++;
                    if (_this._textureCount >= textureCount_1) {
                        _this._state = LoadStep.CompleteSetup;
                    }
                };
                lappdelegate_1.LAppDelegate.getInstance()
                    .getTextureManager()
                    .createTextureFromPngFile(texturePath, usePremultiply, onLoad);
                this_1.getRenderer().setIsPremultipliedAlpha(usePremultiply);
            };
            var this_1 = this;
            for (var modelTextureNumber = 0; modelTextureNumber < textureCount_1; modelTextureNumber++) {
                _loop_2(modelTextureNumber);
            }
            this._state = LoadStep.WaitLoadTexture;
        }
    };
    LAppModel.prototype.reloadRenderer = function () {
        this.deleteRenderer();
        this.createRenderer();
        this.setupTextures();
    };
    LAppModel.prototype.update = function () {
        if (this._state != LoadStep.CompleteSetup)
            return;
        var deltaTimeSeconds = lapppal_1.LAppPal.getDeltaTime();
        this._userTimeSeconds += deltaTimeSeconds;
        this._dragManager.update(deltaTimeSeconds);
        this._dragX = this._dragManager.getX();
        this._dragY = this._dragManager.getY();
        var motionUpdated = false;
        this._model.loadParameters();
        if (this._motionManager.isFinished()) {
            this.startRandomMotion(LAppDefine.MotionGroupIdle, LAppDefine.PriorityIdle);
        }
        else {
            motionUpdated = this._motionManager.updateMotion(this._model, deltaTimeSeconds);
        }
        this._model.saveParameters();
        if (!motionUpdated) {
            if (this._eyeBlink != null) {
                this._eyeBlink.updateParameters(this._model, deltaTimeSeconds);
            }
        }
        if (this._expressionManager != null) {
            this._expressionManager.updateMotion(this._model, deltaTimeSeconds);
        }
        this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30);
        this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);
        this._model.addParameterValueById(this._idParamAngleZ, this._dragX * this._dragY * -30);
        this._model.addParameterValueById(this._idParamBodyAngleX, this._dragX * 10);
        this._model.addParameterValueById(this._idParamEyeBallX, this._dragX);
        this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);
        if (this._breath != null) {
            this._breath.updateParameters(this._model, deltaTimeSeconds);
        }
        if (this._physics != null) {
            this._physics.evaluate(this._model, deltaTimeSeconds);
        }
        if (this._lipsync) {
            var value = 0.0;
            this._wavFileHandler.update(deltaTimeSeconds);
            value = this._wavFileHandler.getRms();
            for (var i = 0; i < this._lipSyncIds.getSize(); ++i) {
                this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);
            }
        }
        if (this._pose != null) {
            this._pose.updateParameters(this._model, deltaTimeSeconds);
        }
        this._model.update();
    };
    LAppModel.prototype.startMotion = function (group, no, priority, onFinishedMotionHandler) {
        var _this = this;
        if (priority == LAppDefine.PriorityForce) {
            this._motionManager.setReservePriority(priority);
        }
        else if (!this._motionManager.reserveMotion(priority)) {
            if (this._debugMode) {
                lapppal_1.LAppPal.printMessage("[APP]can't start motion.");
            }
            return cubismmotionqueuemanager_1.InvalidMotionQueueEntryHandleValue;
        }
        var motionFileName = this._modelSetting.getMotionFileName(group, no);
        var name = "".concat(group, "_").concat(no);
        var motion = this._motions.getValue(name);
        var autoDelete = false;
        if (motion == null) {
            fetch("".concat(this._modelHomeDir).concat(motionFileName))
                .then(function (response) { return response.arrayBuffer(); })
                .then(function (arrayBuffer) {
                motion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, null, onFinishedMotionHandler);
                var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, no);
                if (fadeTime >= 0.0) {
                    motion.setFadeInTime(fadeTime);
                }
                fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, no);
                if (fadeTime >= 0.0) {
                    motion.setFadeOutTime(fadeTime);
                }
                motion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);
                autoDelete = true;
            });
        }
        else {
            motion.setFinishedMotionHandler(onFinishedMotionHandler);
        }
        var voice = this._modelSetting.getMotionSoundFileName(group, no);
        if (voice.localeCompare('') != 0) {
            var path = voice;
            path = this._modelHomeDir + path;
            this._wavFileHandler.start(path);
        }
        if (this._debugMode) {
            lapppal_1.LAppPal.printMessage("[APP]start motion: [".concat(group, "_").concat(no));
        }
        return this._motionManager.startMotionPriority(motion, autoDelete, priority);
    };
    LAppModel.prototype.startRandomMotion = function (group, priority, onFinishedMotionHandler) {
        if (this._modelSetting.getMotionCount(group) == 0) {
            return cubismmotionqueuemanager_1.InvalidMotionQueueEntryHandleValue;
        }
        var no = Math.floor(Math.random() * this._modelSetting.getMotionCount(group));
        return this.startMotion(group, no, priority, onFinishedMotionHandler);
    };
    LAppModel.prototype.setExpression = function (expressionId) {
        var motion = this._expressions.getValue(expressionId);
        if (this._debugMode) {
            lapppal_1.LAppPal.printMessage("[APP]expression: [".concat(expressionId, "]"));
        }
        if (motion != null) {
            this._expressionManager.startMotionPriority(motion, false, LAppDefine.PriorityForce);
        }
        else {
            if (this._debugMode) {
                lapppal_1.LAppPal.printMessage("[APP]expression[".concat(expressionId, "] is null"));
            }
        }
    };
    LAppModel.prototype.setRandomExpression = function () {
        if (this._expressions.getSize() == 0) {
            return;
        }
        var no = Math.floor(Math.random() * this._expressions.getSize());
        for (var i = 0; i < this._expressions.getSize(); i++) {
            if (i == no) {
                var name_1 = this._expressions._keyValues[i].first;
                this.setExpression(name_1);
                return;
            }
        }
    };
    LAppModel.prototype.motionEventFired = function (eventValue) {
        (0, cubismdebug_1.CubismLogInfo)('{0} is fired on LAppModel!!', eventValue.s);
    };
    LAppModel.prototype.hitTest = function (hitArenaName, x, y) {
        if (this._opacity < 1) {
            return false;
        }
        var count = this._modelSetting.getHitAreasCount();
        for (var i = 0; i < count; i++) {
            if (this._modelSetting.getHitAreaName(i) == hitArenaName) {
                var drawId = this._modelSetting.getHitAreaId(i);
                return this.isHit(drawId, x, y);
            }
        }
        return false;
    };
    LAppModel.prototype.preLoadMotionGroup = function (group) {
        var _this = this;
        var _loop_3 = function (i) {
            var motionFileName = this_2._modelSetting.getMotionFileName(group, i);
            var name_2 = "".concat(group, "_").concat(i);
            if (this_2._debugMode) {
                lapppal_1.LAppPal.printMessage("[APP]load motion: ".concat(motionFileName, " => [").concat(name_2, "]"));
            }
            fetch("".concat(this_2._modelHomeDir).concat(motionFileName))
                .then(function (response) { return response.arrayBuffer(); })
                .then(function (arrayBuffer) {
                var tmpMotion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, name_2);
                var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, i);
                if (fadeTime >= 0.0) {
                    tmpMotion.setFadeInTime(fadeTime);
                }
                fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, i);
                if (fadeTime >= 0.0) {
                    tmpMotion.setFadeOutTime(fadeTime);
                }
                tmpMotion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);
                if (_this._motions.getValue(name_2) != null) {
                    acubismmotion_1.ACubismMotion.delete(_this._motions.getValue(name_2));
                }
                _this._motions.setValue(name_2, tmpMotion);
                _this._motionCount++;
                if (_this._motionCount >= _this._allMotionCount) {
                    _this._state = LoadStep.LoadTexture;
                    _this._motionManager.stopAllMotions();
                    _this._updating = false;
                    _this._initialized = true;
                    _this.createRenderer();
                    _this.setupTextures();
                    _this.getRenderer().startUp(lappdelegate_1.gl);
                }
            });
        };
        var this_2 = this;
        for (var i = 0; i < this._modelSetting.getMotionCount(group); i++) {
            _loop_3(i);
        }
    };
    LAppModel.prototype.releaseMotions = function () {
        this._motions.clear();
    };
    LAppModel.prototype.releaseExpressions = function () {
        this._expressions.clear();
    };
    LAppModel.prototype.doDraw = function () {
        if (this._model == null)
            return;
        var viewport = [0, 0, lappdelegate_1.canvas.width, lappdelegate_1.canvas.height];
        this.getRenderer().setRenderState(lappdelegate_1.frameBuffer, viewport);
        this.getRenderer().drawModel();
    };
    LAppModel.prototype.draw = function (matrix) {
        if (this._model == null) {
            return;
        }
        if (this._state == LoadStep.CompleteSetup) {
            matrix.multiplyByMatrix(this._modelMatrix);
            this.getRenderer().setMvpMatrix(matrix);
            this.doDraw();
        }
    };
    LAppModel.prototype.hasMocConsistencyFromFile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var modelFileName, response, arrayBuffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        (0, cubismdebug_1.CSM_ASSERT)(this._modelSetting.getModelFileName().localeCompare(""));
                        if (!(this._modelSetting.getModelFileName() != '')) return [3, 3];
                        modelFileName = this._modelSetting.getModelFileName();
                        return [4, fetch("".concat(this._modelHomeDir).concat(modelFileName))];
                    case 1:
                        response = _a.sent();
                        return [4, response.arrayBuffer()];
                    case 2:
                        arrayBuffer = _a.sent();
                        this._consistency = cubismmoc_1.CubismMoc.hasMocConsistency(arrayBuffer);
                        if (!this._consistency) {
                            (0, cubismdebug_1.CubismLogInfo)('Inconsistent MOC3.');
                        }
                        else {
                            (0, cubismdebug_1.CubismLogInfo)('Consistent MOC3.');
                        }
                        return [2, this._consistency];
                    case 3:
                        lapppal_1.LAppPal.printMessage('Model data does not exist.');
                        _a.label = 4;
                    case 4: return [2];
                }
            });
        });
    };
    return LAppModel;
}(cubismusermodel_1.CubismUserModel));
exports.LAppModel = LAppModel;


/***/ }),

/***/ "./src/lapppal.ts":
/*!************************!*\
  !*** ./src/lapppal.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppPal = void 0;
var LAppPal = exports.LAppPal = (function () {
    function LAppPal() {
    }
    LAppPal.loadFileAsBytes = function (filePath, callback) {
        fetch(filePath)
            .then(function (response) { return response.arrayBuffer(); })
            .then(function (arrayBuffer) { return callback(arrayBuffer, arrayBuffer.byteLength); });
    };
    LAppPal.getDeltaTime = function () {
        return this.s_deltaTime;
    };
    LAppPal.updateTime = function () {
        this.s_currentFrame = Date.now();
        this.s_deltaTime = (this.s_currentFrame - this.s_lastFrame) / 1000;
        this.s_lastFrame = this.s_currentFrame;
    };
    LAppPal.printMessage = function (message) {
        console.log(message);
    };
    LAppPal.lastUpdate = Date.now();
    LAppPal.s_currentFrame = 0.0;
    LAppPal.s_lastFrame = 0.0;
    LAppPal.s_deltaTime = 0.0;
    return LAppPal;
}());


/***/ }),

/***/ "./src/lappsprite.ts":
/*!***************************!*\
  !*** ./src/lappsprite.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Rect = exports.LAppSprite = void 0;
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
var LAppSprite = (function () {
    function LAppSprite(x, y, width, height, textureId) {
        this._rect = new Rect();
        this._rect.left = x - width * 0.5;
        this._rect.right = x + width * 0.5;
        this._rect.up = y + height * 0.5;
        this._rect.down = y - height * 0.5;
        this._texture = textureId;
        this._vertexBuffer = null;
        this._uvBuffer = null;
        this._indexBuffer = null;
        this._positionLocation = null;
        this._uvLocation = null;
        this._textureLocation = null;
        this._positionArray = null;
        this._uvArray = null;
        this._indexArray = null;
        this._firstDraw = true;
    }
    LAppSprite.prototype.release = function () {
        this._rect = null;
        lappdelegate_1.gl.deleteTexture(this._texture);
        this._texture = null;
        lappdelegate_1.gl.deleteBuffer(this._uvBuffer);
        this._uvBuffer = null;
        lappdelegate_1.gl.deleteBuffer(this._vertexBuffer);
        this._vertexBuffer = null;
        lappdelegate_1.gl.deleteBuffer(this._indexBuffer);
        this._indexBuffer = null;
    };
    LAppSprite.prototype.getTexture = function () {
        return this._texture;
    };
    LAppSprite.prototype.render = function (programId) {
        if (this._texture == null) {
            return;
        }
        if (this._firstDraw) {
            this._positionLocation = lappdelegate_1.gl.getAttribLocation(programId, 'position');
            lappdelegate_1.gl.enableVertexAttribArray(this._positionLocation);
            this._uvLocation = lappdelegate_1.gl.getAttribLocation(programId, 'uv');
            lappdelegate_1.gl.enableVertexAttribArray(this._uvLocation);
            this._textureLocation = lappdelegate_1.gl.getUniformLocation(programId, 'texture');
            lappdelegate_1.gl.uniform1i(this._textureLocation, 0);
            {
                this._uvArray = new Float32Array([
                    1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
                ]);
                this._uvBuffer = lappdelegate_1.gl.createBuffer();
            }
            {
                var maxWidth = lappdelegate_1.canvas.width;
                var maxHeight = lappdelegate_1.canvas.height;
                this._positionArray = new Float32Array([
                    (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),
                    (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),
                    (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),
                    (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),
                    (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),
                    (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5),
                    (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),
                    (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5)
                ]);
                this._vertexBuffer = lappdelegate_1.gl.createBuffer();
            }
            {
                this._indexArray = new Uint16Array([0, 1, 2, 3, 2, 0]);
                this._indexBuffer = lappdelegate_1.gl.createBuffer();
            }
            this._firstDraw = false;
        }
        lappdelegate_1.gl.bindBuffer(lappdelegate_1.gl.ARRAY_BUFFER, this._uvBuffer);
        lappdelegate_1.gl.bufferData(lappdelegate_1.gl.ARRAY_BUFFER, this._uvArray, lappdelegate_1.gl.STATIC_DRAW);
        lappdelegate_1.gl.vertexAttribPointer(this._uvLocation, 2, lappdelegate_1.gl.FLOAT, false, 0, 0);
        lappdelegate_1.gl.bindBuffer(lappdelegate_1.gl.ARRAY_BUFFER, this._vertexBuffer);
        lappdelegate_1.gl.bufferData(lappdelegate_1.gl.ARRAY_BUFFER, this._positionArray, lappdelegate_1.gl.STATIC_DRAW);
        lappdelegate_1.gl.vertexAttribPointer(this._positionLocation, 2, lappdelegate_1.gl.FLOAT, false, 0, 0);
        lappdelegate_1.gl.bindBuffer(lappdelegate_1.gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
        lappdelegate_1.gl.bufferData(lappdelegate_1.gl.ELEMENT_ARRAY_BUFFER, this._indexArray, lappdelegate_1.gl.DYNAMIC_DRAW);
        lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, this._texture);
        lappdelegate_1.gl.drawElements(lappdelegate_1.gl.TRIANGLES, this._indexArray.length, lappdelegate_1.gl.UNSIGNED_SHORT, 0);
    };
    LAppSprite.prototype.isHit = function (pointX, pointY) {
        var height = lappdelegate_1.canvas.height;
        var y = height - pointY;
        return (pointX >= this._rect.left &&
            pointX <= this._rect.right &&
            y <= this._rect.up &&
            y >= this._rect.down);
    };
    return LAppSprite;
}());
exports.LAppSprite = LAppSprite;
var Rect = (function () {
    function Rect() {
    }
    return Rect;
}());
exports.Rect = Rect;


/***/ }),

/***/ "./src/lapptexturemanager.ts":
/*!***********************************!*\
  !*** ./src/lapptexturemanager.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextureInfo = exports.LAppTextureManager = void 0;
var csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ "../../../Framework/src/type/csmvector.ts");
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
var LAppTextureManager = (function () {
    function LAppTextureManager() {
        this._textures = new csmvector_1.csmVector();
    }
    LAppTextureManager.prototype.release = function () {
        for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {
            lappdelegate_1.gl.deleteTexture(ite.ptr().id);
        }
        this._textures = null;
    };
    LAppTextureManager.prototype.createTextureFromPngFile = function (fileName, usePremultiply, callback) {
        var _this = this;
        var _loop_1 = function (ite) {
            if (ite.ptr().fileName == fileName &&
                ite.ptr().usePremultply == usePremultiply) {
                ite.ptr().img = new Image();
                ite.ptr().img.onload = function () { return callback(ite.ptr()); };
                ite.ptr().img.src = fileName;
                return { value: void 0 };
            }
        };
        for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {
            var state_1 = _loop_1(ite);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        var img = new Image();
        img.onload = function () {
            var tex = lappdelegate_1.gl.createTexture();
            lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, tex);
            lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MIN_FILTER, lappdelegate_1.gl.LINEAR_MIPMAP_LINEAR);
            lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MAG_FILTER, lappdelegate_1.gl.LINEAR);
            if (usePremultiply) {
                lappdelegate_1.gl.pixelStorei(lappdelegate_1.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);
            }
            lappdelegate_1.gl.texImage2D(lappdelegate_1.gl.TEXTURE_2D, 0, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.UNSIGNED_BYTE, img);
            lappdelegate_1.gl.generateMipmap(lappdelegate_1.gl.TEXTURE_2D);
            lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, null);
            var textureInfo = new TextureInfo();
            if (textureInfo != null) {
                textureInfo.fileName = fileName;
                textureInfo.width = img.width;
                textureInfo.height = img.height;
                textureInfo.id = tex;
                textureInfo.img = img;
                textureInfo.usePremultply = usePremultiply;
                _this._textures.pushBack(textureInfo);
            }
            callback(textureInfo);
        };
        img.src = fileName;
    };
    LAppTextureManager.prototype.releaseTextures = function () {
        for (var i = 0; i < this._textures.getSize(); i++) {
            this._textures.set(i, null);
        }
        this._textures.clear();
    };
    LAppTextureManager.prototype.releaseTextureByTexture = function (texture) {
        for (var i = 0; i < this._textures.getSize(); i++) {
            if (this._textures.at(i).id != texture) {
                continue;
            }
            this._textures.set(i, null);
            this._textures.remove(i);
            break;
        }
    };
    LAppTextureManager.prototype.releaseTextureByFilePath = function (fileName) {
        for (var i = 0; i < this._textures.getSize(); i++) {
            if (this._textures.at(i).fileName == fileName) {
                this._textures.set(i, null);
                this._textures.remove(i);
                break;
            }
        }
    };
    return LAppTextureManager;
}());
exports.LAppTextureManager = LAppTextureManager;
var TextureInfo = (function () {
    function TextureInfo() {
        this.id = null;
        this.width = 0;
        this.height = 0;
    }
    return TextureInfo;
}());
exports.TextureInfo = TextureInfo;


/***/ }),

/***/ "./src/lappview.ts":
/*!*************************!*\
  !*** ./src/lappview.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LAppView = void 0;
var cubismmatrix44_1 = __webpack_require__(/*! @framework/math/cubismmatrix44 */ "../../../Framework/src/math/cubismmatrix44.ts");
var cubismviewmatrix_1 = __webpack_require__(/*! @framework/math/cubismviewmatrix */ "../../../Framework/src/math/cubismviewmatrix.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
var lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ "./src/lapplive2dmanager.ts");
var lapppal_1 = __webpack_require__(/*! ./lapppal */ "./src/lapppal.ts");
var lappsprite_1 = __webpack_require__(/*! ./lappsprite */ "./src/lappsprite.ts");
var touchmanager_1 = __webpack_require__(/*! ./touchmanager */ "./src/touchmanager.ts");
var FuncExtensions_1 = __webpack_require__(/*! ../FuncExtensions */ "./FuncExtensions.ts");
var speechRecognition_1 = __webpack_require__(/*! ../speechRecognition */ "./speechRecognition.ts");
var speech_QA_1 = __webpack_require__(/*! ../speech_QA */ "./speech_QA.ts");
var GuiOperator_1 = __webpack_require__(/*! ../GuiOperator */ "./GuiOperator.ts");
var LAppView = (function () {
    function LAppView() {
        this._programId = null;
        this._back = null;
        this._gear = null;
        this._touchManager = new touchmanager_1.TouchManager();
        this._deviceToScreen = new cubismmatrix44_1.CubismMatrix44();
        this._viewMatrix = new cubismviewmatrix_1.CubismViewMatrix();
    }
    LAppView.prototype.initialize = function () {
        var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;
        var ratio = width / height;
        var left = -ratio;
        var right = ratio;
        var bottom = LAppDefine.ViewLogicalLeft;
        var top = LAppDefine.ViewLogicalRight;
        this._viewMatrix.setScreenRect(left, right, bottom, top);
        this._viewMatrix.scale(LAppDefine.ViewScale, LAppDefine.ViewScale);
        this._deviceToScreen.loadIdentity();
        if (width > height) {
            var screenW = Math.abs(right - left);
            this._deviceToScreen.scaleRelative(screenW / width, -screenW / width);
        }
        else {
            var screenH = Math.abs(top - bottom);
            this._deviceToScreen.scaleRelative(screenH / height, -screenH / height);
        }
        this._deviceToScreen.translateRelative(-width * 0.5, -height * 0.5);
        this._viewMatrix.setMaxScale(LAppDefine.ViewMaxScale);
        this._viewMatrix.setMinScale(LAppDefine.ViewMinScale);
        this._viewMatrix.setMaxScreenRect(LAppDefine.ViewLogicalMaxLeft, LAppDefine.ViewLogicalMaxRight, LAppDefine.ViewLogicalMaxBottom, LAppDefine.ViewLogicalMaxTop);
    };
    LAppView.prototype.release = function () {
        this._viewMatrix = null;
        this._touchManager = null;
        this._deviceToScreen = null;
        this._gear.release();
        this._gear = null;
        this._back.release();
        this._back = null;
        lappdelegate_1.gl.deleteProgram(this._programId);
        this._programId = null;
    };
    LAppView.prototype.render = function () {
        lappdelegate_1.gl.useProgram(this._programId);
        if (this._back) {
            this._back.render(this._programId);
        }
        if (this._gear) {
            this._gear.render(this._programId);
        }
        lappdelegate_1.gl.flush();
        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
        live2DManager.setViewMatrix(this._viewMatrix);
        live2DManager.onUpdate();
    };
    LAppView.prototype.initializeSprite = function () {
        var _this = this;
        var width = lappdelegate_1.canvas.width;
        var height = lappdelegate_1.canvas.height;
        var textureManager = lappdelegate_1.LAppDelegate.getInstance().getTextureManager();
        var resourcesPath = LAppDefine.ResourcesPath;
        var funcEx = new FuncExtensions_1.FuncExtensions();
        funcEx.addEvent();
        var speech = new speechRecognition_1.SpeechRec();
        speech.speechEvent();
        var speech_QA = new speech_QA_1.SpeechRec_QA();
        speech_QA.speechEvent();
        var voiceText = [
            "いらっしゃいませ",
            "「注文開始」と声を掛けてください",
            "商品名を入力してください",
            "をカートに追加します",
            "他に何かご注文はありますか",
            "注文内容を表示します",
            "カート一覧を表示します",
            "ご注文ありがとうございます！"
        ];
        var promiseChain = Promise.resolve();
        var _loop_1 = function (i) {
            promiseChain = promiseChain.then(function () {
                console.log(voiceText[i]);
                return (0, GuiOperator_1.preVoiceVox)(voiceText[i]);
            });
        };
        for (var i = 0; i < voiceText.length; i++) {
            _loop_1(i);
        }
        var imageName = '';
        imageName = LAppDefine.BackImageName;
        var initBackGroundTexture = function (textureInfo) {
            var x = width * 0.5;
            var y = height * 0.5;
            var fwidth = textureInfo.width * 2.0;
            var fheight = height * 0.95;
            _this._back = new lappsprite_1.LAppSprite(x, y, fwidth, fheight, textureInfo.id);
        };
        textureManager.createTextureFromPngFile(resourcesPath + imageName, false, initBackGroundTexture);
        imageName = LAppDefine.GearImageName;
        var initGearTexture = function (textureInfo) {
            var x = width - textureInfo.width * 0.5;
            var y = height - textureInfo.height * 0.5;
            var fwidth = textureInfo.width;
            var fheight = textureInfo.height;
            _this._gear = new lappsprite_1.LAppSprite(x, y, fwidth, fheight, textureInfo.id);
        };
        textureManager.createTextureFromPngFile(resourcesPath + imageName, false, initGearTexture);
        if (this._programId == null) {
            this._programId = lappdelegate_1.LAppDelegate.getInstance().createShader();
        }
    };
    LAppView.prototype.onTouchesBegan = function (pointX, pointY) {
        this._touchManager.touchesBegan(pointX, pointY);
    };
    LAppView.prototype.onTouchesMoved = function (pointX, pointY) {
        var viewX = this.transformViewX(this._touchManager.getX());
        var viewY = this.transformViewY(this._touchManager.getY());
        this._touchManager.touchesMoved(pointX, pointY);
        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
        live2DManager.onDrag(viewX, viewY);
    };
    LAppView.prototype.onTouchesEnded = function (pointX, pointY) {
        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();
        live2DManager.onDrag(0.0, 0.0);
        {
            var x = this._deviceToScreen.transformX(this._touchManager.getX());
            var y = this._deviceToScreen.transformY(this._touchManager.getY());
            if (LAppDefine.DebugTouchLogEnable) {
                lapppal_1.LAppPal.printMessage("[APP]touchesEnded x: ".concat(x, " y: ").concat(y));
            }
            live2DManager.onTap(x, y);
            if (this._gear.isHit(pointX, pointY)) {
                live2DManager.nextScene();
            }
        }
    };
    LAppView.prototype.transformViewX = function (deviceX) {
        var screenX = this._deviceToScreen.transformX(deviceX);
        return this._viewMatrix.invertTransformX(screenX);
    };
    LAppView.prototype.transformViewY = function (deviceY) {
        var screenY = this._deviceToScreen.transformY(deviceY);
        return this._viewMatrix.invertTransformY(screenY);
    };
    LAppView.prototype.transformScreenX = function (deviceX) {
        return this._deviceToScreen.transformX(deviceX);
    };
    LAppView.prototype.transformScreenY = function (deviceY) {
        return this._deviceToScreen.transformY(deviceY);
    };
    return LAppView;
}());
exports.LAppView = LAppView;


/***/ }),

/***/ "./src/lappwavfilehandler.ts":
/*!***********************************!*\
  !*** ./src/lappwavfilehandler.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ByteReader = exports.WavFileInfo = exports.LAppWavFileHandler = exports.s_instance = void 0;
exports.s_instance = null;
var LAppWavFileHandler = (function () {
    function LAppWavFileHandler() {
        var _this = this;
        this._loadFiletoBytes = function (arrayBuffer, length) {
            _this._byteReader._fileByte = arrayBuffer;
            _this._byteReader._fileDataView = new DataView(_this._byteReader._fileByte);
            _this._byteReader._fileSize = length;
        };
        this._pcmData = null;
        this._userTimeSeconds = 0.0;
        this._lastRms = 0.0;
        this._sampleOffset = 0.0;
        this._wavFileInfo = new WavFileInfo();
        this._byteReader = new ByteReader();
    }
    LAppWavFileHandler.getInstance = function () {
        if (exports.s_instance == null) {
            exports.s_instance = new LAppWavFileHandler();
        }
        return exports.s_instance;
    };
    LAppWavFileHandler.releaseInstance = function () {
        if (exports.s_instance != null) {
            exports.s_instance = void 0;
        }
        exports.s_instance = null;
    };
    LAppWavFileHandler.prototype.update = function (deltaTimeSeconds) {
        var goalOffset;
        var rms;
        if (this._pcmData == null ||
            this._sampleOffset >= this._wavFileInfo._samplesPerChannel) {
            this._lastRms = 0.0;
            return false;
        }
        this._userTimeSeconds += deltaTimeSeconds;
        goalOffset = Math.floor(this._userTimeSeconds * this._wavFileInfo._samplingRate);
        if (goalOffset > this._wavFileInfo._samplesPerChannel) {
            goalOffset = this._wavFileInfo._samplesPerChannel;
        }
        rms = 0.0;
        for (var channelCount = 0; channelCount < this._wavFileInfo._numberOfChannels; channelCount++) {
            for (var sampleCount = this._sampleOffset; sampleCount < goalOffset; sampleCount++) {
                var pcm = this._pcmData[channelCount][sampleCount];
                rms += pcm * pcm;
            }
        }
        rms = Math.sqrt(rms /
            (this._wavFileInfo._numberOfChannels *
                (goalOffset - this._sampleOffset)));
        this._lastRms = rms;
        this._sampleOffset = goalOffset;
        return true;
    };
    LAppWavFileHandler.prototype.start = function (filePath) {
        this._sampleOffset = 0;
        this._userTimeSeconds = 0.0;
        this._lastRms = 0.0;
        if (!this.loadWavFile(filePath)) {
            return;
        }
    };
    LAppWavFileHandler.prototype.getRms = function () {
        return this._lastRms;
    };
    LAppWavFileHandler.prototype.loadWavFile = function (filePath) {
        var _this = this;
        var ret = false;
        if (this._pcmData != null) {
            this.releasePcmData();
        }
        var asyncFileLoad = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, fetch(filePath).then(function (responce) {
                        return responce.arrayBuffer();
                    })];
            });
        }); };
        var asyncWavFileManager = (function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, fmtChunkSize, dataChunkSize, channelCount, sampleCount, channelCount;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this._byteReader;
                        return [4, asyncFileLoad()];
                    case 1:
                        _a._fileByte = _b.sent();
                        this._byteReader._fileDataView = new DataView(this._byteReader._fileByte);
                        this._byteReader._fileSize = this._byteReader._fileByte.byteLength;
                        this._byteReader._readOffset = 0;
                        if (this._byteReader._fileByte == null ||
                            this._byteReader._fileSize < 4) {
                            return [2, false];
                        }
                        this._wavFileInfo._fileName = filePath;
                        try {
                            if (!this._byteReader.getCheckSignature('RIFF')) {
                                ret = false;
                                throw new Error('Cannot find Signeture "RIFF".');
                            }
                            this._byteReader.get32LittleEndian();
                            if (!this._byteReader.getCheckSignature('WAVE')) {
                                ret = false;
                                throw new Error('Cannot find Signeture "WAVE".');
                            }
                            if (!this._byteReader.getCheckSignature('fmt ')) {
                                ret = false;
                                throw new Error('Cannot find Signeture "fmt".');
                            }
                            fmtChunkSize = this._byteReader.get32LittleEndian();
                            if (this._byteReader.get16LittleEndian() != 1) {
                                ret = false;
                                throw new Error('File is not linear PCM.');
                            }
                            this._wavFileInfo._numberOfChannels =
                                this._byteReader.get16LittleEndian();
                            this._wavFileInfo._samplingRate = this._byteReader.get32LittleEndian();
                            this._byteReader.get32LittleEndian();
                            this._byteReader.get16LittleEndian();
                            this._wavFileInfo._bitsPerSample = this._byteReader.get16LittleEndian();
                            if (fmtChunkSize > 16) {
                                this._byteReader._readOffset += fmtChunkSize - 16;
                            }
                            while (!this._byteReader.getCheckSignature('data') &&
                                this._byteReader._readOffset < this._byteReader._fileSize) {
                                this._byteReader._readOffset +=
                                    this._byteReader.get32LittleEndian() + 4;
                            }
                            if (this._byteReader._readOffset >= this._byteReader._fileSize) {
                                ret = false;
                                throw new Error('Cannot find "data" Chunk.');
                            }
                            {
                                dataChunkSize = this._byteReader.get32LittleEndian();
                                this._wavFileInfo._samplesPerChannel =
                                    (dataChunkSize * 8) /
                                        (this._wavFileInfo._bitsPerSample *
                                            this._wavFileInfo._numberOfChannels);
                            }
                            this._pcmData = new Array(this._wavFileInfo._numberOfChannels);
                            for (channelCount = 0; channelCount < this._wavFileInfo._numberOfChannels; channelCount++) {
                                this._pcmData[channelCount] = new Float32Array(this._wavFileInfo._samplesPerChannel);
                            }
                            for (sampleCount = 0; sampleCount < this._wavFileInfo._samplesPerChannel; sampleCount++) {
                                for (channelCount = 0; channelCount < this._wavFileInfo._numberOfChannels; channelCount++) {
                                    this._pcmData[channelCount][sampleCount] = this.getPcmSample();
                                }
                            }
                            ret = true;
                        }
                        catch (e) {
                            console.log(e);
                        }
                        return [2];
                }
            });
        }); })();
        return ret;
    };
    LAppWavFileHandler.prototype.getPcmSample = function () {
        var pcm32;
        switch (this._wavFileInfo._bitsPerSample) {
            case 8:
                pcm32 = this._byteReader.get8() - 128;
                pcm32 <<= 24;
                break;
            case 16:
                pcm32 = this._byteReader.get16LittleEndian() << 16;
                break;
            case 24:
                pcm32 = this._byteReader.get24LittleEndian() << 8;
                break;
            default:
                pcm32 = 0;
                break;
        }
        return pcm32 / 2147483647;
    };
    LAppWavFileHandler.prototype.releasePcmData = function () {
        for (var channelCount = 0; channelCount < this._wavFileInfo._numberOfChannels; channelCount++) {
            delete this._pcmData[channelCount];
        }
        delete this._pcmData;
        this._pcmData = null;
    };
    return LAppWavFileHandler;
}());
exports.LAppWavFileHandler = LAppWavFileHandler;
var WavFileInfo = (function () {
    function WavFileInfo() {
        this._fileName = '';
        this._numberOfChannels = 0;
        this._bitsPerSample = 0;
        this._samplingRate = 0;
        this._samplesPerChannel = 0;
    }
    return WavFileInfo;
}());
exports.WavFileInfo = WavFileInfo;
var ByteReader = (function () {
    function ByteReader() {
        this._fileByte = null;
        this._fileDataView = null;
        this._fileSize = 0;
        this._readOffset = 0;
    }
    ByteReader.prototype.get8 = function () {
        var ret = this._fileDataView.getUint8(this._readOffset);
        this._readOffset++;
        return ret;
    };
    ByteReader.prototype.get16LittleEndian = function () {
        var ret = (this._fileDataView.getUint8(this._readOffset + 1) << 8) |
            this._fileDataView.getUint8(this._readOffset);
        this._readOffset += 2;
        return ret;
    };
    ByteReader.prototype.get24LittleEndian = function () {
        var ret = (this._fileDataView.getUint8(this._readOffset + 2) << 16) |
            (this._fileDataView.getUint8(this._readOffset + 1) << 8) |
            this._fileDataView.getUint8(this._readOffset);
        this._readOffset += 3;
        return ret;
    };
    ByteReader.prototype.get32LittleEndian = function () {
        var ret = (this._fileDataView.getUint8(this._readOffset + 3) << 24) |
            (this._fileDataView.getUint8(this._readOffset + 2) << 16) |
            (this._fileDataView.getUint8(this._readOffset + 1) << 8) |
            this._fileDataView.getUint8(this._readOffset);
        this._readOffset += 4;
        return ret;
    };
    ByteReader.prototype.getCheckSignature = function (reference) {
        var getSignature = new Uint8Array(4);
        var referenceString = new TextEncoder().encode(reference);
        if (reference.length != 4) {
            return false;
        }
        for (var signatureOffset = 0; signatureOffset < 4; signatureOffset++) {
            getSignature[signatureOffset] = this.get8();
        }
        return (getSignature[0] == referenceString[0] &&
            getSignature[1] == referenceString[1] &&
            getSignature[2] == referenceString[2] &&
            getSignature[3] == referenceString[3]);
    };
    return ByteReader;
}());
exports.ByteReader = ByteReader;


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ "./src/lappdelegate.ts");
var LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ "./src/lappdefine.ts"));
window.onload = function () {
    if (lappdelegate_1.LAppDelegate.getInstance().initialize() == false) {
        return;
    }
    lappdelegate_1.LAppDelegate.getInstance().run();
};
window.onbeforeunload = function () { return lappdelegate_1.LAppDelegate.releaseInstance(); };
window.onresize = function () {
    if (LAppDefine.CanvasSize === 'auto') {
        lappdelegate_1.LAppDelegate.getInstance().onResize();
    }
};


/***/ }),

/***/ "./src/touchmanager.ts":
/*!*****************************!*\
  !*** ./src/touchmanager.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TouchManager = void 0;
var TouchManager = (function () {
    function TouchManager() {
        this._startX = 0.0;
        this._startY = 0.0;
        this._lastX = 0.0;
        this._lastY = 0.0;
        this._lastX1 = 0.0;
        this._lastY1 = 0.0;
        this._lastX2 = 0.0;
        this._lastY2 = 0.0;
        this._lastTouchDistance = 0.0;
        this._deltaX = 0.0;
        this._deltaY = 0.0;
        this._scale = 1.0;
        this._touchSingle = false;
        this._flipAvailable = false;
    }
    TouchManager.prototype.getCenterX = function () {
        return this._lastX;
    };
    TouchManager.prototype.getCenterY = function () {
        return this._lastY;
    };
    TouchManager.prototype.getDeltaX = function () {
        return this._deltaX;
    };
    TouchManager.prototype.getDeltaY = function () {
        return this._deltaY;
    };
    TouchManager.prototype.getStartX = function () {
        return this._startX;
    };
    TouchManager.prototype.getStartY = function () {
        return this._startY;
    };
    TouchManager.prototype.getScale = function () {
        return this._scale;
    };
    TouchManager.prototype.getX = function () {
        return this._lastX;
    };
    TouchManager.prototype.getY = function () {
        return this._lastY;
    };
    TouchManager.prototype.getX1 = function () {
        return this._lastX1;
    };
    TouchManager.prototype.getY1 = function () {
        return this._lastY1;
    };
    TouchManager.prototype.getX2 = function () {
        return this._lastX2;
    };
    TouchManager.prototype.getY2 = function () {
        return this._lastY2;
    };
    TouchManager.prototype.isSingleTouch = function () {
        return this._touchSingle;
    };
    TouchManager.prototype.isFlickAvailable = function () {
        return this._flipAvailable;
    };
    TouchManager.prototype.disableFlick = function () {
        this._flipAvailable = false;
    };
    TouchManager.prototype.touchesBegan = function (deviceX, deviceY) {
        this._lastX = deviceX;
        this._lastY = deviceY;
        this._startX = deviceX;
        this._startY = deviceY;
        this._lastTouchDistance = -1.0;
        this._flipAvailable = true;
        this._touchSingle = true;
    };
    TouchManager.prototype.touchesMoved = function (deviceX, deviceY) {
        this._lastX = deviceX;
        this._lastY = deviceY;
        this._lastTouchDistance = -1.0;
        this._touchSingle = true;
    };
    TouchManager.prototype.getFlickDistance = function () {
        return this.calculateDistance(this._startX, this._startY, this._lastX, this._lastY);
    };
    TouchManager.prototype.calculateDistance = function (x1, y1, x2, y2) {
        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    };
    TouchManager.prototype.calculateMovingAmount = function (v1, v2) {
        if (v1 > 0.0 != v2 > 0.0) {
            return 0.0;
        }
        var sign = v1 > 0.0 ? 1.0 : -1.0;
        var absoluteValue1 = Math.abs(v1);
        var absoluteValue2 = Math.abs(v2);
        return (sign * (absoluteValue1 < absoluteValue2 ? absoluteValue1 : absoluteValue2));
    };
    return TouchManager;
}());
exports.TouchManager = TouchManager;


/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DOMException": function() { return /* binding */ DOMException; },
/* harmony export */   "Headers": function() { return /* binding */ Headers; },
/* harmony export */   "Request": function() { return /* binding */ Request; },
/* harmony export */   "Response": function() { return /* binding */ Response; },
/* harmony export */   "fetch": function() { return /* binding */ fetch; }
/* harmony export */ });
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof self !== 'undefined' && self) ||
  (typeof global !== 'undefined' && global)

var support = {
  searchParams: 'URLSearchParams' in global,
  iterable: 'Symbol' in global && 'iterator' in Symbol,
  blob:
    'FileReader' in global &&
    'Blob' in global &&
    (function() {
      try {
        new Blob()
        return true
      } catch (e) {
        return false
      }
    })(),
  formData: 'FormData' in global,
  arrayBuffer: 'ArrayBuffer' in global
}

function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj)
}

if (support.arrayBuffer) {
  var viewClasses = [
    '[object Int8Array]',
    '[object Uint8Array]',
    '[object Uint8ClampedArray]',
    '[object Int16Array]',
    '[object Uint16Array]',
    '[object Int32Array]',
    '[object Uint32Array]',
    '[object Float32Array]',
    '[object Float64Array]'
  ]

  var isArrayBufferView =
    ArrayBuffer.isView ||
    function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
}

function normalizeName(name) {
  if (typeof name !== 'string') {
    name = String(name)
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
    throw new TypeError('Invalid character in header field name: "' + name + '"')
  }
  return name.toLowerCase()
}

function normalizeValue(value) {
  if (typeof value !== 'string') {
    value = String(value)
  }
  return value
}

// Build a destructive iterator for the value list
function iteratorFor(items) {
  var iterator = {
    next: function() {
      var value = items.shift()
      return {done: value === undefined, value: value}
    }
  }

  if (support.iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator
    }
  }

  return iterator
}

function Headers(headers) {
  this.map = {}

  if (headers instanceof Headers) {
    headers.forEach(function(value, name) {
      this.append(name, value)
    }, this)
  } else if (Array.isArray(headers)) {
    headers.forEach(function(header) {
      this.append(header[0], header[1])
    }, this)
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name])
    }, this)
  }
}

Headers.prototype.append = function(name, value) {
  name = normalizeName(name)
  value = normalizeValue(value)
  var oldValue = this.map[name]
  this.map[name] = oldValue ? oldValue + ', ' + value : value
}

Headers.prototype['delete'] = function(name) {
  delete this.map[normalizeName(name)]
}

Headers.prototype.get = function(name) {
  name = normalizeName(name)
  return this.has(name) ? this.map[name] : null
}

Headers.prototype.has = function(name) {
  return this.map.hasOwnProperty(normalizeName(name))
}

Headers.prototype.set = function(name, value) {
  this.map[normalizeName(name)] = normalizeValue(value)
}

Headers.prototype.forEach = function(callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this)
    }
  }
}

Headers.prototype.keys = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push(name)
  })
  return iteratorFor(items)
}

Headers.prototype.values = function() {
  var items = []
  this.forEach(function(value) {
    items.push(value)
  })
  return iteratorFor(items)
}

Headers.prototype.entries = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push([name, value])
  })
  return iteratorFor(items)
}

if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries
}

function consumed(body) {
  if (body.bodyUsed) {
    return Promise.reject(new TypeError('Already read'))
  }
  body.bodyUsed = true
}

function fileReaderReady(reader) {
  return new Promise(function(resolve, reject) {
    reader.onload = function() {
      resolve(reader.result)
    }
    reader.onerror = function() {
      reject(reader.error)
    }
  })
}

function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsArrayBuffer(blob)
  return promise
}

function readBlobAsText(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsText(blob)
  return promise
}

function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf)
  var chars = new Array(view.length)

  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i])
  }
  return chars.join('')
}

function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0)
  } else {
    var view = new Uint8Array(buf.byteLength)
    view.set(new Uint8Array(buf))
    return view.buffer
  }
}

function Body() {
  this.bodyUsed = false

  this._initBody = function(body) {
    /*
      fetch-mock wraps the Response object in an ES6 Proxy to
      provide useful test harness features such as flush. However, on
      ES5 browsers without fetch or Proxy support pollyfills must be used;
      the proxy-pollyfill is unable to proxy an attribute unless it exists
      on the object before the Proxy is created. This change ensures
      Response.bodyUsed exists on the instance, while maintaining the
      semantic of setting Request.bodyUsed in the constructor before
      _initBody is called.
    */
    this.bodyUsed = this.bodyUsed
    this._bodyInit = body
    if (!body) {
      this._bodyText = ''
    } else if (typeof body === 'string') {
      this._bodyText = body
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString()
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer)
      // IE 10-11 can't handle a DataView body.
      this._bodyInit = new Blob([this._bodyArrayBuffer])
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body)
    } else {
      this._bodyText = body = Object.prototype.toString.call(body)
    }

    if (!this.headers.get('content-type')) {
      if (typeof body === 'string') {
        this.headers.set('content-type', 'text/plain;charset=UTF-8')
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set('content-type', this._bodyBlob.type)
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
      }
    }
  }

  if (support.blob) {
    this.blob = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as blob')
      } else {
        return Promise.resolve(new Blob([this._bodyText]))
      }
    }

    this.arrayBuffer = function() {
      if (this._bodyArrayBuffer) {
        var isConsumed = consumed(this)
        if (isConsumed) {
          return isConsumed
        }
        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
          return Promise.resolve(
            this._bodyArrayBuffer.buffer.slice(
              this._bodyArrayBuffer.byteOffset,
              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
            )
          )
        } else {
          return Promise.resolve(this._bodyArrayBuffer)
        }
      } else {
        return this.blob().then(readBlobAsArrayBuffer)
      }
    }
  }

  this.text = function() {
    var rejected = consumed(this)
    if (rejected) {
      return rejected
    }

    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob)
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
    } else if (this._bodyFormData) {
      throw new Error('could not read FormData body as text')
    } else {
      return Promise.resolve(this._bodyText)
    }
  }

  if (support.formData) {
    this.formData = function() {
      return this.text().then(decode)
    }
  }

  this.json = function() {
    return this.text().then(JSON.parse)
  }

  return this
}

// HTTP methods whose capitalization should be normalized
var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

function normalizeMethod(method) {
  var upcased = method.toUpperCase()
  return methods.indexOf(upcased) > -1 ? upcased : method
}

function Request(input, options) {
  if (!(this instanceof Request)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }

  options = options || {}
  var body = options.body

  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError('Already read')
    }
    this.url = input.url
    this.credentials = input.credentials
    if (!options.headers) {
      this.headers = new Headers(input.headers)
    }
    this.method = input.method
    this.mode = input.mode
    this.signal = input.signal
    if (!body && input._bodyInit != null) {
      body = input._bodyInit
      input.bodyUsed = true
    }
  } else {
    this.url = String(input)
  }

  this.credentials = options.credentials || this.credentials || 'same-origin'
  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers)
  }
  this.method = normalizeMethod(options.method || this.method || 'GET')
  this.mode = options.mode || this.mode || null
  this.signal = options.signal || this.signal
  this.referrer = null

  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
    throw new TypeError('Body not allowed for GET or HEAD requests')
  }
  this._initBody(body)

  if (this.method === 'GET' || this.method === 'HEAD') {
    if (options.cache === 'no-store' || options.cache === 'no-cache') {
      // Search for a '_' parameter in the query string
      var reParamSearch = /([?&])_=[^&]*/
      if (reParamSearch.test(this.url)) {
        // If it already exists then set the value with the current time
        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())
      } else {
        // Otherwise add a new '_' parameter to the end with the current time
        var reQueryString = /\?/
        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()
      }
    }
  }
}

Request.prototype.clone = function() {
  return new Request(this, {body: this._bodyInit})
}

function decode(body) {
  var form = new FormData()
  body
    .trim()
    .split('&')
    .forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
  return form
}

function parseHeaders(rawHeaders) {
  var headers = new Headers()
  // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  // https://tools.ietf.org/html/rfc7230#section-3.2
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
  // https://github.com/github/fetch/issues/748
  // https://github.com/zloirock/core-js/issues/751
  preProcessedHeaders
    .split('\r')
    .map(function(header) {
      return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
    })
    .forEach(function(line) {
      var parts = line.split(':')
      var key = parts.shift().trim()
      if (key) {
        var value = parts.join(':').trim()
        headers.append(key, value)
      }
    })
  return headers
}

Body.call(Request.prototype)

function Response(bodyInit, options) {
  if (!(this instanceof Response)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }
  if (!options) {
    options = {}
  }

  this.type = 'default'
  this.status = options.status === undefined ? 200 : options.status
  this.ok = this.status >= 200 && this.status < 300
  this.statusText = options.statusText === undefined ? '' : '' + options.statusText
  this.headers = new Headers(options.headers)
  this.url = options.url || ''
  this._initBody(bodyInit)
}

Body.call(Response.prototype)

Response.prototype.clone = function() {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  })
}

Response.error = function() {
  var response = new Response(null, {status: 0, statusText: ''})
  response.type = 'error'
  return response
}

var redirectStatuses = [301, 302, 303, 307, 308]

Response.redirect = function(url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError('Invalid status code')
  }

  return new Response(null, {status: status, headers: {location: url}})
}

var DOMException = global.DOMException
try {
  new DOMException()
} catch (err) {
  DOMException = function(message, name) {
    this.message = message
    this.name = name
    var error = Error(message)
    this.stack = error.stack
  }
  DOMException.prototype = Object.create(Error.prototype)
  DOMException.prototype.constructor = DOMException
}

function fetch(input, init) {
  return new Promise(function(resolve, reject) {
    var request = new Request(input, init)

    if (request.signal && request.signal.aborted) {
      return reject(new DOMException('Aborted', 'AbortError'))
    }

    var xhr = new XMLHttpRequest()

    function abortXhr() {
      xhr.abort()
    }

    xhr.onload = function() {
      var options = {
        status: xhr.status,
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
      }
      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
      var body = 'response' in xhr ? xhr.response : xhr.responseText
      setTimeout(function() {
        resolve(new Response(body, options))
      }, 0)
    }

    xhr.onerror = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'))
      }, 0)
    }

    xhr.ontimeout = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'))
      }, 0)
    }

    xhr.onabort = function() {
      setTimeout(function() {
        reject(new DOMException('Aborted', 'AbortError'))
      }, 0)
    }

    function fixUrl(url) {
      try {
        return url === '' && global.location.href ? global.location.href : url
      } catch (e) {
        return url
      }
    }

    xhr.open(request.method, fixUrl(request.url), true)

    if (request.credentials === 'include') {
      xhr.withCredentials = true
    } else if (request.credentials === 'omit') {
      xhr.withCredentials = false
    }

    if ('responseType' in xhr) {
      if (support.blob) {
        xhr.responseType = 'blob'
      } else if (
        support.arrayBuffer &&
        request.headers.get('Content-Type') &&
        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
      ) {
        xhr.responseType = 'arraybuffer'
      }
    }

    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
      Object.getOwnPropertyNames(init.headers).forEach(function(name) {
        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))
      })
    } else {
      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })
    }

    if (request.signal) {
      request.signal.addEventListener('abort', abortXhr)

      xhr.onreadystatechange = function() {
        // DONE (success or failure)
        if (xhr.readyState === 4) {
          request.signal.removeEventListener('abort', abortXhr)
        }
      }
    }

    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
  })
}

fetch.polyfill = true

if (!global.fetch) {
  global.fetch = fetch
  global.Headers = Headers
  global.Request = Request
  global.Response = Response
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNuRTtRQUVELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3pFLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3JFO1FBRUQsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDckUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDakU7UUFFRCxJQUNFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxhQUFhLEVBQ2xCO1lBQ0EsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDdkU7UUFFRCxJQUFNLEdBQUcsR0FBaUIsSUFBSSxZQUFZLENBQUM7WUFDekMsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO1lBQ0gsQ0FBQztZQUNELENBQUM7WUFDRCxHQUFHO1lBQ0gsR0FBRztTQUNKLENBQUMsQ0FBQztRQUVILCtCQUFjLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBU00sc0NBQVcsR0FBbEIsVUFBbUIsRUFBVSxFQUFFLEVBQVUsRUFBRSxLQUFhO1FBQ3RELElBQU0sUUFBUSxHQUFXLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QyxJQUFNLFFBQVEsR0FBVyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFNUMsSUFBTSxXQUFXLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFeEMsSUFBSSxXQUFXLEdBQUcsUUFBUSxFQUFFO1lBQzFCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUU7Z0JBQ3JCLEtBQUssR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNoQztTQUNGO2FBQU0sSUFBSSxXQUFXLEdBQUcsUUFBUSxFQUFFO1lBQ2pDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUU7Z0JBQ3JCLEtBQUssR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNoQztTQUNGO1FBRUQsSUFBTSxHQUFHLEdBQWlCLElBQUksWUFBWSxDQUFDO1lBQ3pDLEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEVBQUU7WUFDRixFQUFFO1lBQ0YsR0FBRztZQUNILEdBQUc7U0FDSixDQUFDLENBQUM7UUFFSCxJQUFNLEdBQUcsR0FBaUIsSUFBSSxZQUFZLENBQUM7WUFDekMsS0FBSztZQUNMLEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxLQUFLO1lBQ0wsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztTQUNKLENBQUMsQ0FBQztRQUVILElBQU0sR0FBRyxHQUFpQixJQUFJLFlBQVksQ0FBQztZQUN6QyxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxHQUFHO1lBQ0gsR0FBRztZQUNILEdBQUc7WUFDSCxDQUFDLEVBQUU7WUFDSCxDQUFDLEVBQUU7WUFDSCxHQUFHO1lBQ0gsR0FBRztTQUNKLENBQUMsQ0FBQztRQUVILCtCQUFjLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqRCwrQkFBYyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakQsK0JBQWMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFVTSx3Q0FBYSxHQUFwQixVQUNFLElBQVksRUFDWixLQUFhLEVBQ2IsTUFBYyxFQUNkLEdBQVc7UUFFWCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQztRQUM1QixJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztJQUN4QixDQUFDO0lBU00sMkNBQWdCLEdBQXZCLFVBQ0UsSUFBWSxFQUNaLEtBQWEsRUFDYixNQUFjLEVBQ2QsR0FBVztRQUVYLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO1FBQ25CLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBQzNCLENBQUM7SUFNTSxzQ0FBVyxHQUFsQixVQUFtQixRQUFnQjtRQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDO0lBTU0sc0NBQVcsR0FBbEIsVUFBbUIsUUFBZ0I7UUFDakMsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7SUFDNUIsQ0FBQztJQU1NLHNDQUFXLEdBQWxCO1FBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFNTSxzQ0FBVyxHQUFsQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBUU0scUNBQVUsR0FBakI7UUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzVDLENBQUM7SUFRTSxxQ0FBVSxHQUFqQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDNUMsQ0FBQztJQU1NLHdDQUFhLEdBQXBCO1FBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFNTSx5Q0FBYyxHQUFyQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBTU0sMENBQWUsR0FBdEI7UUFDRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQU1NLHVDQUFZLEdBQW5CO1FBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFNTSxxQ0FBVSxHQUFqQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBTU0sc0NBQVcsR0FBbEI7UUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQU1NLHVDQUFZLEdBQW5CO1FBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFNTSxvQ0FBUyxHQUFoQjtRQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBWUgsdUJBQUM7QUFBRCxDQUFDLENBNVRxQywrQkFBYyxHQTRUbkQ7QUE1VFksNENBQWdCO0FBK1Q3Qix1SEFBd0M7QUFFeEMsSUFBaUIscUJBQXFCLENBR3JDO0FBSEQsV0FBaUIscUJBQXFCO0lBQ3ZCLHNDQUFnQixHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztBQUVyRCxDQUFDLEVBSGdCLHFCQUFxQixHQUFyQiw2QkFBcUIsS0FBckIsNkJBQXFCLFFBR3JDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM1VELG1IQUFrRTtBQUNsRSw0R0FBNEM7QUFPNUM7SUFrRkUsbUJBQW9CLEdBQXlCO1FBQzNDLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFsRmEsZ0JBQU0sR0FBcEIsVUFDRSxRQUFxQixFQUNyQix5QkFBa0M7UUFFbEMsSUFBSSxTQUFTLEdBQWMsSUFBSSxDQUFDO1FBRWhDLElBQUkseUJBQXlCLEVBQUU7WUFFN0IsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXJELElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBRWhCLGdDQUFjLEVBQUMsb0JBQW9CLENBQUMsQ0FBQztnQkFDckMsT0FBTyxTQUFTLENBQUM7YUFDbEI7U0FDRjtRQUVELElBQU0sR0FBRyxHQUNQLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFakQsSUFBSSxHQUFHLEVBQUU7WUFDUCxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0IsU0FBUyxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQy9ELEdBQUcsRUFDSCxRQUFRLENBQ1QsQ0FBQztTQUNIO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQU9hLGdCQUFNLEdBQXBCLFVBQXFCLEdBQWM7UUFDakMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNwQixHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQU9ELCtCQUFXLEdBQVg7UUFDRSxJQUFJLFdBQVcsR0FBZ0IsSUFBSSxDQUFDO1FBRXBDLElBQU0sS0FBSyxHQUEyQixnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUNsRSxJQUFJLENBQUMsSUFBSSxDQUNWLENBQUM7UUFFRixJQUFJLEtBQUssRUFBRTtZQUNULFdBQVcsR0FBRyxJQUFJLHlCQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckMsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBRXpCLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUNwQjtRQUVELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFLRCwrQkFBVyxHQUFYLFVBQVksS0FBa0I7UUFDNUIsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO1lBQ2pCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNoQixLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQWNNLDJCQUFPLEdBQWQ7UUFDRSw0QkFBVSxFQUFDLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBS00sdUNBQW1CLEdBQTFCO1FBQ0UsT0FBTyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUMzRCxDQUFDO0lBS00saUNBQWEsR0FBcEI7UUFDRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUthLDJCQUFpQixHQUEvQixVQUFnQyxRQUFxQjtRQUNuRCxJQUFNLFlBQVksR0FDaEIsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3RCxPQUFPLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzNDLENBQUM7SUFLSCxnQkFBQztBQUFELENBQUM7QUE1SFksOEJBQVM7QUErSHRCLDBHQUFpQztBQUVqQyxJQUFpQixxQkFBcUIsQ0FHckM7QUFIRCxXQUFpQixxQkFBcUI7SUFDdkIsK0JBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBRXZDLENBQUMsRUFIZ0IscUJBQXFCLEdBQXJCLDZCQUFxQixLQUFyQiw2QkFBcUIsUUFHckM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzSUQscUlBQTJEO0FBQzNELG9JQUdxQztBQUNyQyxrR0FBd0M7QUFDeEMsMkdBQThDO0FBQzlDLG1IQUFrRDtBQU1sRDtJQUNFLDJCQUNFLGFBQXFCLEVBQ3JCLEtBQW9EO1FBRHBELHFEQUFxQjtRQUNyQixvQ0FBZ0MsbUNBQWtCLEVBQUU7UUFFcEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUlILHdCQUFDO0FBQUQsQ0FBQztBQVhZLDhDQUFpQjtBQWU5QjtJQUNFLHVCQUNFLGFBQXFCLEVBQ3JCLEtBQW9EO1FBRHBELHFEQUFxQjtRQUNyQixvQ0FBZ0MsbUNBQWtCLEVBQUU7UUFFcEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUlILG9CQUFDO0FBQUQsQ0FBQztBQVhZLHNDQUFhO0FBZ0IxQjtJQU9FLDZCQUFtQixhQUFxQixFQUFFLFNBQWlCO1FBQXhDLHFEQUFxQjtRQUFFLDZDQUFpQjtRQUN6RCxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUM3QixDQUFDO0lBSUgsMEJBQUM7QUFBRCxDQUFDO0FBZFksa0RBQW1CO0FBcUJoQztJQXc1Q0UscUJBQW1CLEtBQTZCO1FBQzlDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQztRQUNwQyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLHFCQUFTLEVBQVUsQ0FBQztRQUNoRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUkscUJBQVMsRUFBa0IsQ0FBQztRQUNyRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUkscUJBQVMsRUFBa0IsQ0FBQztRQUNwRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUkscUJBQVMsRUFBa0IsQ0FBQztRQUNoRCxJQUFJLENBQUMsaUNBQWlDLEdBQUcsS0FBSyxDQUFDO1FBQy9DLElBQUksQ0FBQywrQkFBK0IsR0FBRyxLQUFLLENBQUM7UUFDN0MsSUFBSSxDQUFDLHNCQUFzQixHQUFHLEtBQUssQ0FBQztRQUNwQyxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQztRQUV6QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxxQkFBUyxFQUFxQixDQUFDO1FBQzlELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLHFCQUFTLEVBQXFCLENBQUM7UUFDNUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLHFCQUFTLEVBQXVCLENBQUM7UUFDMUQsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUkscUJBQVMsRUFBaUIsQ0FBQztRQUM5RCxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxxQkFBUyxFQUFpQixDQUFDO1FBQzVELElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLHFCQUFTLEVBQXFCLENBQUM7UUFFOUQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGVBQU0sRUFBMEIsQ0FBQztRQUM1RCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxlQUFNLEVBQTBCLENBQUM7UUFDakUsSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksZUFBTSxFQUFrQixDQUFDO1FBQzdELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLGVBQU0sRUFBa0IsQ0FBQztJQUM3RCxDQUFDO0lBOTZDTSw0QkFBTSxHQUFiO1FBRUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVyQixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFNTSxzQ0FBZ0IsR0FBdkI7UUFDRSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFFO1lBQ3ZCLE9BQU8sR0FBRyxDQUFDO1NBQ1o7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztJQUM5QyxDQUFDO0lBS00sb0NBQWMsR0FBckI7UUFDRSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFFO1lBQ3ZCLE9BQU8sR0FBRyxDQUFDO1NBQ1o7UUFFRCxPQUFPLENBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FDMUUsQ0FBQztJQUNKLENBQUM7SUFLTSxxQ0FBZSxHQUF0QjtRQUNFLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLEVBQUU7WUFDdkIsT0FBTyxHQUFHLENBQUM7U0FDWjtRQUVELE9BQU8sQ0FDTCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUMzRSxDQUFDO0lBQ0osQ0FBQztJQUtNLG9DQUFjLEdBQXJCO1FBQ0UsSUFBTSxjQUFjLEdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO1FBQzVELElBQU0sbUJBQW1CLEdBQVcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXBFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxjQUFjLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDdkMsSUFBSSxDQUFDLEdBQUcsbUJBQW1CLEVBQUU7Z0JBQzNCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3hEO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDMUQ7U0FDRjtJQUNILENBQUM7SUFPTSxzQ0FBZ0IsR0FBdkIsVUFBd0IsS0FBYTtRQUVuQyxJQUNFLElBQUksQ0FBQyxzQ0FBc0MsRUFBRTtZQUM3QyxJQUFJLENBQUMseUNBQXlDLENBQUMsS0FBSyxDQUFDLEVBQ3JEO1lBQ0EsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUNqRDtRQUVELElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFPTSxvQ0FBYyxHQUFyQixVQUFzQixLQUFhO1FBRWpDLElBQ0UsSUFBSSxDQUFDLG9DQUFvQyxFQUFFO1lBQzNDLElBQUksQ0FBQyx1Q0FBdUMsQ0FBQyxLQUFLLENBQUMsRUFDbkQ7WUFDQSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDO1NBQy9DO1FBRUQsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQU9NLG9EQUE4QixHQUFyQyxVQUNFLEtBQWEsRUFDYixLQUF5QjtRQUV6QixJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBVU0sNENBQXNCLEdBQTdCLFVBQ0UsS0FBYSxFQUNiLENBQVMsRUFDVCxDQUFTLEVBQ1QsQ0FBUyxFQUNULENBQU87UUFBUCwyQkFBTztRQUVQLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQU9NLGtEQUE0QixHQUFuQyxVQUNFLEtBQWEsRUFDYixLQUF5QjtRQUV6QixJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBVU0sMENBQW9CLEdBQTNCLFVBQ0UsS0FBYSxFQUNiLENBQVMsRUFDVCxDQUFTLEVBQ1QsQ0FBUyxFQUNULENBQU87UUFBUCwyQkFBTztRQUVQLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQU1NLDBDQUFvQixHQUEzQixVQUE0QixTQUFpQjtRQUMzQyxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzFELENBQUM7SUFPTSx3Q0FBa0IsR0FBekIsVUFBMEIsU0FBaUI7UUFDekMsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUN4RCxDQUFDO0lBWU0sa0NBQVksR0FBbkIsVUFDRSxTQUFpQixFQUNqQixDQUFTLEVBQ1QsQ0FBUyxFQUNULENBQVMsRUFDVCxDQUFTLEVBQ1QsVUFBb0MsRUFDcEMsY0FBNEM7UUFFNUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyQyxVQUFVLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLFVBQVUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVyQyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsYUFBYSxFQUFFO1lBQzFDLEtBQ0UsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUNULENBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUNwRCxFQUFFLENBQUMsRUFDSDtnQkFDQSxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbkUsY0FBYyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDN0MsY0FBYyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDN0MsY0FBYyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDN0MsY0FBYyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUM5QztTQUNGO0lBQ0gsQ0FBQztJQU9NLHdEQUFrQyxHQUF6QyxVQUNFLFNBQWlCLEVBQ2pCLEtBQXlCO1FBRXpCLElBQUksQ0FBQywwQkFBMEIsQ0FDN0IsU0FBUyxFQUNULEtBQUssQ0FBQyxDQUFDLEVBQ1AsS0FBSyxDQUFDLENBQUMsRUFDUCxLQUFLLENBQUMsQ0FBQyxFQUNQLEtBQUssQ0FBQyxDQUFDLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFVTSxnREFBMEIsR0FBakMsVUFDRSxTQUFpQixFQUNqQixDQUFTLEVBQ1QsQ0FBUyxFQUNULENBQVMsRUFDVCxDQUFTO1FBRVQsSUFBSSxDQUFDLFlBQVksQ0FDZixTQUFTLEVBQ1QsQ0FBQyxFQUNELENBQUMsRUFDRCxDQUFDLEVBQ0QsQ0FBQyxFQUNELElBQUksQ0FBQyx1QkFBdUIsRUFDNUIsSUFBSSxDQUFDLG1CQUFtQixDQUN6QixDQUFDO0lBQ0osQ0FBQztJQU9NLHNEQUFnQyxHQUF2QyxVQUNFLFNBQWlCLEVBQ2pCLEtBQXlCO1FBRXpCLElBQUksQ0FBQyx3QkFBd0IsQ0FDM0IsU0FBUyxFQUNULEtBQUssQ0FBQyxDQUFDLEVBQ1AsS0FBSyxDQUFDLENBQUMsRUFDUCxLQUFLLENBQUMsQ0FBQyxFQUNQLEtBQUssQ0FBQyxDQUFDLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFVTSw4Q0FBd0IsR0FBL0IsVUFDRSxTQUFpQixFQUNqQixDQUFTLEVBQ1QsQ0FBUyxFQUNULENBQVMsRUFDVCxDQUFTO1FBRVQsSUFBSSxDQUFDLFlBQVksQ0FDZixTQUFTLEVBQ1QsQ0FBQyxFQUNELENBQUMsRUFDRCxDQUFDLEVBQ0QsQ0FBQyxFQUNELElBQUksQ0FBQyxxQkFBcUIsRUFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUN2QixDQUFDO0lBQ0osQ0FBQztJQU9NLDREQUFzQyxHQUE3QztRQUNFLE9BQU8sSUFBSSxDQUFDLGlDQUFpQyxDQUFDO0lBQ2hELENBQUM7SUFPTSwwREFBb0MsR0FBM0M7UUFDRSxPQUFPLElBQUksQ0FBQywrQkFBK0IsQ0FBQztJQUM5QyxDQUFDO0lBT00sNERBQXNDLEdBQTdDLFVBQThDLEtBQWM7UUFDMUQsSUFBSSxDQUFDLGlDQUFpQyxHQUFHLEtBQUssQ0FBQztJQUNqRCxDQUFDO0lBT00sMERBQW9DLEdBQTNDLFVBQTRDLEtBQWM7UUFDeEQsSUFBSSxDQUFDLCtCQUErQixHQUFHLEtBQUssQ0FBQztJQUMvQyxDQUFDO0lBT00sK0RBQXlDLEdBQWhELFVBQ0UsYUFBcUI7UUFFckIsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLGFBQWEsQ0FBQztJQUNsRSxDQUFDO0lBT00sNkRBQXVDLEdBQTlDLFVBQ0UsYUFBcUI7UUFFckIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLGFBQWEsQ0FBQztJQUNoRSxDQUFDO0lBT00sK0RBQXlDLEdBQWhELFVBQ0UsYUFBcUIsRUFDckIsS0FBYztRQUVkLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUNuRSxDQUFDO0lBT00sNkRBQXVDLEdBQTlDLFVBQ0UsYUFBcUIsRUFDckIsS0FBYztRQUVkLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUNqRSxDQUFDO0lBUU0sNERBQXNDLEdBQTdDLFVBQThDLFNBQWlCO1FBQzdELE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxhQUFhLENBQUM7SUFDbEUsQ0FBQztJQVFNLDBEQUFvQyxHQUEzQyxVQUE0QyxTQUFpQjtRQUMzRCxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsYUFBYSxDQUFDO0lBQ2hFLENBQUM7SUFVTSxvREFBOEIsR0FBckMsVUFDRSxTQUFpQixFQUNqQixLQUFjLEVBQ2QsVUFBb0MsRUFDcEMsY0FBNEM7UUFFNUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBRS9DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3pFLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25FLGNBQWMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztZQUV2RCxJQUFJLEtBQUssRUFBRTtnQkFDVCxjQUFjLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUN0QyxVQUFVLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLGNBQWMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ3RDLFVBQVUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDbkMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDdEMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxjQUFjLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUN0QyxVQUFVLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDcEM7U0FDRjtJQUNILENBQUM7SUFRTSw0REFBc0MsR0FBN0MsVUFDRSxTQUFpQixFQUNqQixLQUFjO1FBRWQsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ2pFLElBQUksQ0FBQyw4QkFBOEIsQ0FDakMsU0FBUyxFQUNULEtBQUssRUFDTCxJQUFJLENBQUMsdUJBQXVCLEVBQzVCLElBQUksQ0FBQyxtQkFBbUIsQ0FDekIsQ0FBQztJQUNKLENBQUM7SUFRTSwwREFBb0MsR0FBM0MsVUFDRSxTQUFpQixFQUNqQixLQUFjO1FBRWQsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQy9ELElBQUksQ0FBQyw4QkFBOEIsQ0FDakMsU0FBUyxFQUNULEtBQUssRUFDTCxJQUFJLENBQUMscUJBQXFCLEVBQzFCLElBQUksQ0FBQyxpQkFBaUIsQ0FDdkIsQ0FBQztJQUNKLENBQUM7SUFRTSx3Q0FBa0IsR0FBekIsVUFBMEIsYUFBcUI7UUFDN0MsSUFDRSxJQUFJLENBQUMsZ0NBQWdDLEVBQUU7WUFDdkMsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLGFBQWEsQ0FBQyxFQUN2RDtZQUNBLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsU0FBUyxDQUFDO1NBQ3ZEO1FBRUQsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO1FBQzFELE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQ2hELGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FDN0IsQ0FBQztJQUNKLENBQUM7SUFRTSx3Q0FBa0IsR0FBekIsVUFBMEIsYUFBcUIsRUFBRSxTQUFrQjtRQUNqRSxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQzdELENBQUM7SUFRTSxzREFBZ0MsR0FBdkM7UUFDRSxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztJQUNyQyxDQUFDO0lBT00sc0RBQWdDLEdBQXZDLFVBQ0UscUJBQThCO1FBRTlCLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxxQkFBcUIsQ0FBQztJQUN0RCxDQUFDO0lBUU0seURBQW1DLEdBQTFDLFVBQTJDLGFBQXFCO1FBQzlELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsYUFBYSxDQUFDO0lBQzVELENBQUM7SUFPTSx5REFBbUMsR0FBMUMsVUFDRSxhQUFxQixFQUNyQixxQkFBOEI7UUFFOUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsYUFBYSxHQUFHLHFCQUFxQixDQUFDO0lBQzdFLENBQUM7SUFPTSxxQ0FBZSxHQUF0QjtRQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBT00scUNBQWUsR0FBdEIsVUFBdUIsS0FBYTtRQUNsQyxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBS00sOEJBQVEsR0FBZjtRQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBT00sa0NBQVksR0FBbkIsVUFBb0IsTUFBc0I7UUFDeEMsSUFBSSxTQUFpQixDQUFDO1FBQ3RCLElBQU0sU0FBUyxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUVsRCxLQUFLLFNBQVMsR0FBRyxDQUFDLEVBQUUsU0FBUyxHQUFHLFNBQVMsRUFBRSxFQUFFLFNBQVMsRUFBRTtZQUN0RCxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDekMsT0FBTyxTQUFTLENBQUM7YUFDbEI7U0FDRjtRQUdELElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDeEMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM5QztRQUdELFNBQVMsR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN2RCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVqRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBUU0sK0JBQVMsR0FBaEIsVUFBaUIsU0FBaUI7UUFDaEMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sdUNBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQU1NLGtDQUFZLEdBQW5CO1FBQ0UsSUFBTSxTQUFTLEdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ2xELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFPTSwyQ0FBcUIsR0FBNUIsVUFBNkIsU0FBaUIsRUFBRSxPQUFlO1FBQzdELElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNsRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN6RCxPQUFPO1NBQ1I7UUFHRCw0QkFBVSxFQUFDLENBQUMsSUFBSSxTQUFTLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEdBQUcsT0FBTyxDQUFDO0lBQzNDLENBQUM7SUFPTSx3Q0FBa0IsR0FBekIsVUFBMEIsTUFBc0IsRUFBRSxPQUFlO1FBRS9ELElBQU0sS0FBSyxHQUFXLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFaEQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ2IsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBT00sMkNBQXFCLEdBQTVCLFVBQTZCLFNBQWlCO1FBQzVDLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUVsRCxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDeEQ7UUFHRCw0QkFBVSxFQUFDLENBQUMsSUFBSSxTQUFTLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBRTlELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBT00sd0NBQWtCLEdBQXpCLFVBQTBCLE1BQXNCO1FBRTlDLElBQU0sS0FBSyxHQUFXLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFaEQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ2IsT0FBTyxDQUFDLENBQUM7U0FDVjtRQUVELE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFPTSx1Q0FBaUIsR0FBeEIsVUFBeUIsV0FBMkI7UUFDbEQsSUFBSSxjQUFzQixDQUFDO1FBQzNCLElBQU0sT0FBTyxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUVyRCxLQUFLLGNBQWMsR0FBRyxDQUFDLEVBQUUsY0FBYyxHQUFHLE9BQU8sRUFBRSxFQUFFLGNBQWMsRUFBRTtZQUNuRSxJQUFJLFdBQVcsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsRUFBRTtnQkFDeEQsU0FBUzthQUNWO1lBRUQsT0FBTyxjQUFjLENBQUM7U0FDdkI7UUFHRCxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDbEQsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3hEO1FBR0QsY0FBYztZQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFckUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV4RCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBTU0sdUNBQWlCLEdBQXhCO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7SUFDdEMsQ0FBQztJQVFNLHNDQUFnQixHQUF2QixVQUNFLGNBQXNCO1FBRXRCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFPTSw4Q0FBd0IsR0FBL0IsVUFBZ0MsY0FBc0I7UUFDcEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQU9NLDhDQUF3QixHQUEvQixVQUFnQyxjQUFzQjtRQUNwRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBT00sOENBQXdCLEdBQS9CLFVBQWdDLGNBQXNCO1FBQ3BELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFPTSw4Q0FBd0IsR0FBL0IsVUFBZ0MsY0FBc0I7UUFDcEQsSUFBSSxJQUFJLENBQUMsd0JBQXdCLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQ3pELE9BQU8sSUFBSSxDQUFDLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUMvRDtRQUdELDRCQUFVLEVBQ1IsQ0FBQyxJQUFJLGNBQWMsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQ2pFLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBT00sMkNBQXFCLEdBQTVCLFVBQTZCLFdBQTJCO1FBRXRELElBQU0sY0FBYyxHQUFXLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuRSxPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBUU0sOENBQXdCLEdBQS9CLFVBQ0UsY0FBc0IsRUFDdEIsS0FBYSxFQUNiLE1BQVk7UUFBWixxQ0FBWTtRQUVaLElBQUksSUFBSSxDQUFDLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUN6RCxJQUFJLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUNwQyxjQUFjLEVBQ2QsTUFBTSxJQUFJLENBQUM7Z0JBQ1QsQ0FBQyxDQUFDLEtBQUs7Z0JBQ1AsQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDO29CQUNwRCxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7b0JBQ1osS0FBSyxHQUFHLE1BQU0sQ0FDckIsQ0FBQztZQUVGLE9BQU87U0FDUjtRQUdELDRCQUFVLEVBQ1IsQ0FBQyxJQUFJLGNBQWMsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQ2pFLENBQUM7UUFFRixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsR0FBRyxLQUFLLEVBQUU7WUFDaEUsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUM5RDtRQUNELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEtBQUssRUFBRTtZQUNoRSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQzlEO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQztZQUNuQyxNQUFNLElBQUksQ0FBQztnQkFDVCxDQUFDLENBQUMsS0FBSztnQkFDUCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDO29CQUNwQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO3dCQUNwRCxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQVFNLDJDQUFxQixHQUE1QixVQUNFLFdBQTJCLEVBQzNCLEtBQWEsRUFDYixNQUFZO1FBQVoscUNBQVk7UUFFWixJQUFNLEtBQUssR0FBVyxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQVFNLDhDQUF3QixHQUEvQixVQUNFLGNBQXNCLEVBQ3RCLEtBQWEsRUFDYixNQUFZO1FBQVoscUNBQVk7UUFFWixJQUFJLENBQUMsd0JBQXdCLENBQzNCLGNBQWMsRUFDZCxJQUFJLENBQUMsd0JBQXdCLENBQUMsY0FBYyxDQUFDLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FDL0QsQ0FBQztJQUNKLENBQUM7SUFRTSwyQ0FBcUIsR0FBNUIsVUFDRSxXQUFnQixFQUNoQixLQUFhLEVBQ2IsTUFBWTtRQUFaLHFDQUFZO1FBRVosSUFBTSxLQUFLLEdBQVcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFRTSxnREFBMEIsR0FBakMsVUFDRSxXQUEyQixFQUMzQixLQUFhLEVBQ2IsTUFBWTtRQUFaLHFDQUFZO1FBRVosSUFBTSxLQUFLLEdBQVcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFRTSxtREFBNkIsR0FBcEMsVUFDRSxjQUFzQixFQUN0QixLQUFhLEVBQ2IsTUFBWTtRQUFaLHFDQUFZO1FBRVosSUFBSSxDQUFDLHdCQUF3QixDQUMzQixjQUFjLEVBQ2QsSUFBSSxDQUFDLHdCQUF3QixDQUFDLGNBQWMsQ0FBQztZQUMzQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FDakMsQ0FBQztJQUNKLENBQUM7SUFPTSxzQ0FBZ0IsR0FBdkIsVUFBd0IsVUFBMEI7UUFDaEQsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBRWxELEtBQ0UsSUFBSSxhQUFhLEdBQUcsQ0FBQyxFQUNyQixhQUFhLEdBQUcsYUFBYSxFQUM3QixFQUFFLGFBQWEsRUFDZjtZQUNBLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksVUFBVSxFQUFFO2dCQUNyRCxPQUFPLGFBQWEsQ0FBQzthQUN0QjtTQUNGO1FBRUQsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNaLENBQUM7SUFNTSxzQ0FBZ0IsR0FBdkI7UUFDRSxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDbEQsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztJQU9NLG1DQUFhLEdBQXBCLFVBQXFCLGFBQXFCO1FBQ3hDLElBQU0sWUFBWSxHQUFhLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztRQUN6RCxPQUFPLHVDQUFlLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFNTSw2Q0FBdUIsR0FBOUI7UUFDRSxJQUFNLFlBQVksR0FBZSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7UUFDcEUsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQVVNLCtDQUF5QixHQUFoQyxVQUFpQyxhQUFxQjtRQUNwRCxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBT00sNkNBQXVCLEdBQTlCLFVBQStCLGFBQXFCO1FBQ2xELElBQU0sY0FBYyxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQztRQUN4RSxPQUFPLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBV00sb0VBQThDLEdBQXJELFVBQ0UsYUFBcUI7UUFFckIsSUFBTSxZQUFZLEdBQWUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1FBQ3BFLE9BQU8sZ0JBQWdCLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUMxRCxZQUFZLENBQUMsYUFBYSxDQUFDLENBQzVCLENBQUM7SUFDSixDQUFDO0lBT00saURBQTJCLEdBQWxDLFVBQW1DLGFBQXFCO1FBQ3RELElBQU0sV0FBVyxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQztRQUNsRSxPQUFPLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBT00sNENBQXNCLEdBQTdCLFVBQThCLGFBQXFCO1FBQ2pELElBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUN4RCxPQUFPLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBT00seUNBQW1CLEdBQTFCLFVBQTJCLGFBQXFCO1FBQzlDLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFPTSw4Q0FBd0IsR0FBL0IsVUFBZ0MsYUFBcUI7UUFDbkQsSUFBTSxZQUFZLEdBQWtCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztRQUNsRSxPQUFPLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBT00sZ0RBQTBCLEdBQWpDLFVBQWtDLGFBQXFCO1FBQ3JELElBQU0sYUFBYSxHQUFtQixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUM7UUFDNUUsT0FBTyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQU9NLDBDQUFvQixHQUEzQixVQUE0QixhQUFxQjtRQUMvQyxJQUFNLFFBQVEsR0FBbUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQ2pFLE9BQU8sUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFPTSx3Q0FBa0IsR0FBekIsVUFBMEIsYUFBcUI7UUFDN0MsSUFBTSxTQUFTLEdBQWlCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztRQUNoRSxPQUFPLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBUU0sOENBQXdCLEdBQS9CLFVBQWdDLGFBQXFCO1FBQ25ELElBQU0sY0FBYyxHQUFpQixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUM7UUFDMUUsSUFBTSxLQUFLLEdBQUcsYUFBYSxHQUFHLENBQUMsQ0FBQztRQUNoQyxJQUFNLGFBQWEsR0FBdUIsSUFBSSxtQ0FBa0IsRUFBRSxDQUFDO1FBQ25FLGFBQWEsQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QyxhQUFhLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUMsYUFBYSxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFRTSw0Q0FBc0IsR0FBN0IsVUFBOEIsYUFBcUI7UUFDakQsSUFBTSxZQUFZLEdBQWlCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUN0RSxJQUFNLEtBQUssR0FBRyxhQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLElBQU0sV0FBVyxHQUF1QixJQUFJLG1DQUFrQixFQUFFLENBQUM7UUFDakUsV0FBVyxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsV0FBVyxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsWUFBWSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN4QyxXQUFXLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDeEMsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQU9NLGdEQUEwQixHQUFqQyxVQUFrQyxhQUFxQjtRQUNyRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFPTSwwQ0FBb0IsR0FBM0IsVUFBNEIsYUFBcUI7UUFDL0MsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO1FBRTFELE9BQU8sZ0JBQWdCLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUMvQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQzdCO1lBQ0MsQ0FBQyxDQUFDLGdDQUFlLENBQUMsd0JBQXdCO1lBQzFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMseUJBQXlCLENBQzlDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FDN0I7Z0JBQ0gsQ0FBQyxDQUFDLGdDQUFlLENBQUMsOEJBQThCO2dCQUNoRCxDQUFDLENBQUMsZ0NBQWUsQ0FBQyxzQkFBc0IsQ0FBQztJQUM3QyxDQUFDO0lBV00sZ0RBQTBCLEdBQWpDLFVBQWtDLGFBQXFCO1FBQ3JELElBQU0sYUFBYSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztRQUV0RSxPQUFPLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FDaEQsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUM3QixDQUFDO0lBQ0osQ0FBQztJQU1NLHNDQUFnQixHQUF2QjtRQUNFLElBQU0sS0FBSyxHQUFpQixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDeEQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBTU0sMkNBQXFCLEdBQTVCO1FBQ0UsSUFBTSxVQUFVLEdBQWUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQ2hFLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFRTSxvQ0FBYyxHQUFyQjtRQUNFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDcEQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM1QyxTQUFTO2FBQ1Y7WUFDRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBU00scURBQStCLEdBQXRDLFVBQXVDLGFBQXFCO1FBQzFELElBQU0sWUFBWSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUNwRSxPQUFPLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQVdNLCtEQUF5QyxHQUFoRCxVQUNFLGFBQXFCO1FBRXJCLElBQU0sWUFBWSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUNwRSxPQUFPLGdCQUFnQixDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FDckQsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUM1QixDQUFDO0lBQ0osQ0FBQztJQVdNLDREQUFzQyxHQUE3QyxVQUNFLGFBQXFCO1FBRXJCLElBQU0sWUFBWSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUNwRSxPQUFPLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FDbEQsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUM1QixDQUFDO0lBQ0osQ0FBQztJQVdNLGdFQUEwQyxHQUFqRCxVQUNFLGFBQXFCO1FBRXJCLElBQU0sWUFBWSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUNwRSxPQUFPLGdCQUFnQixDQUFDLEtBQUssQ0FBQywwQkFBMEIsQ0FDdEQsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUM1QixDQUFDO0lBQ0osQ0FBQztJQVdNLCtEQUF5QyxHQUFoRCxVQUNFLGFBQXFCO1FBRXJCLElBQU0sWUFBWSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUNwRSxPQUFPLGdCQUFnQixDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FDckQsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUM1QixDQUFDO0lBQ0osQ0FBQztJQUtNLG9DQUFjLEdBQXJCO1FBQ0UsSUFBSSxjQUFjLEdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO1FBQzFELElBQU0sbUJBQW1CLEdBQVcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXBFLElBQUksY0FBYyxHQUFHLG1CQUFtQixFQUFFO1lBQ3hDLGNBQWMsR0FBRyxtQkFBbUIsQ0FBQztTQUN0QztRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxjQUFjLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDdkMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeEQ7SUFDSCxDQUFDO0lBS00sZ0NBQVUsR0FBakI7UUFDRSw0QkFBVSxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBQ3RELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ2xELElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDcEUsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUVwRTtZQUNFLElBQU0sWUFBWSxHQUFhLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztZQUMxRCxJQUFNLGNBQWMsR0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7WUFFNUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDbkQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGNBQWMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDdkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQ3pCLHVDQUFlLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUN0RCxDQUFDO2FBQ0g7U0FDRjtRQUVELElBQU0sU0FBUyxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUNsRDtZQUNFLElBQU0sT0FBTyxHQUFhLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUVoRCxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUNsQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FDcEIsdUNBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ2pELENBQUM7YUFDSDtZQUVELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDeEQsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUV0RCxJQUFJLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3JEO1FBRUQ7WUFDRSxJQUFNLFdBQVcsR0FBYSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7WUFDeEQsSUFBTSxhQUFhLEdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBRTFELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDeEQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUd0RCxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNsRCxJQUFNLFdBQVcsR0FBd0IsSUFBSSxtQkFBbUIsQ0FDOUQsS0FBSyxFQUNMLEtBQUssQ0FDTixDQUFDO1lBR0Y7Z0JBQ0UsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRTtvQkFDbEMsSUFBTSxhQUFhLEdBQXVCLElBQUksbUNBQWtCLENBQzlELEdBQUcsRUFDSCxHQUFHLEVBQ0gsR0FBRyxFQUNILEdBQUcsQ0FDSixDQUFDO29CQUNGLElBQU0sV0FBVyxHQUF1QixJQUFJLG1DQUFrQixDQUM1RCxHQUFHLEVBQ0gsR0FBRyxFQUNILEdBQUcsRUFDSCxHQUFHLENBQ0osQ0FBQztvQkFFRixJQUFNLGlCQUFpQixHQUFrQixJQUFJLGFBQWEsQ0FDeEQsS0FBSyxFQUNMLGFBQWEsQ0FDZCxDQUFDO29CQUNGLElBQU0sZUFBZSxHQUFrQixJQUFJLGFBQWEsQ0FDdEQsS0FBSyxFQUNMLFdBQVcsQ0FDWixDQUFDO29CQUVGLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztvQkFDekQsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztvQkFDckQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxJQUFJLHFCQUFTLEVBQVUsQ0FBQyxDQUFDO29CQUMzRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztpQkFDL0Q7YUFDRjtZQUdEO2dCQUNFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLEVBQUUsRUFBRSxDQUFDLEVBQUU7b0JBQ3RDLElBQU0sYUFBYSxHQUF1QixJQUFJLG1DQUFrQixDQUM5RCxHQUFHLEVBQ0gsR0FBRyxFQUNILEdBQUcsRUFDSCxHQUFHLENBQ0osQ0FBQztvQkFDRixJQUFNLFdBQVcsR0FBdUIsSUFBSSxtQ0FBa0IsQ0FDNUQsR0FBRyxFQUNILEdBQUcsRUFDSCxHQUFHLEVBQ0gsR0FBRyxDQUNKLENBQUM7b0JBRUYsSUFBTSxpQkFBaUIsR0FBc0IsSUFBSSxpQkFBaUIsQ0FDaEUsS0FBSyxFQUNMLGFBQWEsQ0FDZCxDQUFDO29CQUNGLElBQU0sZUFBZSxHQUFzQixJQUFJLGlCQUFpQixDQUM5RCxLQUFLLEVBQ0wsV0FBVyxDQUNaLENBQUM7b0JBRUYsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQ3hCLHVDQUFlLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNyRCxDQUFDO29CQUVGLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztvQkFDckQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztvQkFFakQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7b0JBRXpDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdkQsSUFBSSxXQUFXLElBQUksQ0FBQyxFQUFFO3dCQUNwQixJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDdEQ7aUJBQ0Y7YUFDRjtTQUNGO0lBQ0gsQ0FBQztJQXFDTSw2QkFBTyxHQUFkO1FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztJQUNyQixDQUFDO0lBa0NILGtCQUFDO0FBQUQsQ0FBQztBQTU5Q1ksa0NBQVc7QUErOUN4Qiw4R0FBbUM7QUFFbkMsSUFBaUIscUJBQXFCLENBR3JDO0FBSEQsV0FBaUIscUJBQXFCO0lBQ3ZCLGlDQUFXLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQztBQUUzQyxDQUFDLEVBSGdCLHFCQUFxQixHQUFyQiw2QkFBcUIsS0FBckIsNkJBQXFCLFFBR3JDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcmlERCxxSUFBMkQ7QUFDM0QsMkdBQThDO0FBQzlDLDJHQUE4QztBQUM5QyxnSkFBb0U7QUFFcEUsSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDO0FBTzFCO0lBQUE7SUFJQSxDQUFDO0lBQUQsOEJBQUM7QUFBRCxDQUFDO0FBSlksMERBQXVCO0FBV3BDO0lBMEVFO1FBQ0UsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLHFCQUFTLEVBQTJCLENBQUM7UUFDL0QsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUkscUJBQVMsRUFBMkIsQ0FBQztJQUN2RSxDQUFDO0lBckVhLDBCQUFNLEdBQXBCLFVBQXFCLE1BQW1CLEVBQUUsSUFBWTtRQUNwRCxJQUFNLEdBQUcsR0FBd0IsSUFBSSxtQkFBbUIsRUFBRSxDQUFDO1FBRTNELEdBQUcsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRWhDLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQU9hLDBCQUFNLEdBQXBCLFVBQXFCLGFBQWtDO1FBQ3JELElBQUksYUFBYSxJQUFJLElBQUksRUFBRTtZQUN6QixhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDeEIsYUFBYSxHQUFHLElBQUksQ0FBQztTQUN0QjtJQUNILENBQUM7SUFPTSxpREFBbUIsR0FBMUI7UUFDRSxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztJQUNuQyxDQUFDO0lBUU0sMkNBQWEsR0FBcEIsVUFBcUIsTUFBbUIsRUFBRSxJQUFZO1FBQ3BELElBQUksSUFBSSxHQUE0QixJQUFJLGlEQUF1QixDQUM3RCxNQUFNLEVBQ04sSUFBSSxDQUNMLENBQUM7UUFFRixJQUFNLGFBQWEsR0FBRyx1Q0FBZSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRSxJQUFNLFNBQVMsR0FBVyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUVsRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLElBQU0sT0FBTyxHQUE0QixJQUFJLHVCQUF1QixFQUFFLENBQUM7WUFFdkUsT0FBTyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsdUNBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLENBQ3ZELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FDOUIsQ0FBQztZQUNGLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxxQkFBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hELElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRXRDLElBQUksT0FBTyxDQUFDLFVBQVUsSUFBSSxhQUFhLEVBQUU7Z0JBQ3ZDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDN0M7U0FDRjtRQUVELElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNmLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBZU0scUNBQU8sR0FBZDtRQUNFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3RELElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNsQztRQUVELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFJSCwwQkFBQztBQUFELENBQUM7QUE5Rlksa0RBQW1CO0FBaUdoQyw4SEFBMkM7QUFFM0MsSUFBaUIscUJBQXFCLENBS3JDO0FBTEQsV0FBaUIscUJBQXFCO0lBQ3ZCLHlDQUFtQixHQUFHLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztJQUU1Qyw2Q0FBdUIsR0FBRyxDQUFDLENBQUMsdUJBQXVCLENBQUM7QUFFbkUsQ0FBQyxFQUxnQixxQkFBcUIsR0FBckIsNkJBQXFCLEtBQXJCLDZCQUFxQixRQUtyQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQy9IRCxxSUFBMkQ7QUFDM0QsZ0hBQWlEO0FBRWpELElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQztBQUNwQixJQUFNLGFBQWEsR0FBRyxlQUFlLENBQUM7QUFDdEMsSUFBTSxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQztBQUM5QyxJQUFNLFFBQVEsR0FBRyxVQUFVLENBQUM7QUFDNUIsSUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDO0FBQ3hCLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQztBQUNoQixJQUFNLEtBQUssR0FBRyxPQUFPLENBQUM7QUFFdEI7SUFNRSxpQ0FBbUIsTUFBbUIsRUFBRSxJQUFZO1FBQ2xELElBQUksQ0FBQyxLQUFLLEdBQUcsdUJBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFLTSx5Q0FBTyxHQUFkO1FBQ0UsdUJBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFNTSxrREFBZ0IsR0FBdkI7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLO2FBQ2QsT0FBTyxFQUFFO2FBQ1QsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO2FBQ3RCLGdCQUFnQixDQUFDLGFBQWEsQ0FBQzthQUMvQixLQUFLLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFPTSxzREFBb0IsR0FBM0I7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLO2FBQ2QsT0FBTyxFQUFFO2FBQ1QsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO2FBQ3RCLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDO2FBQ25DLEtBQUssRUFBRSxDQUFDO0lBQ2IsQ0FBQztJQU9NLHVEQUFxQixHQUE1QixVQUE2QixDQUFTO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLEtBQUs7YUFDZCxPQUFPLEVBQUU7YUFDVCxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7YUFDMUIsZUFBZSxDQUFDLENBQUMsQ0FBQzthQUNsQixnQkFBZ0IsQ0FBQyxNQUFNLENBQUM7YUFDeEIsWUFBWSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQVFNLCtDQUFhLEdBQXBCLFVBQXFCLENBQVM7UUFDNUIsT0FBTyx1Q0FBZSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FDekMsSUFBSSxDQUFDLEtBQUs7YUFDUCxPQUFPLEVBQUU7YUFDVCxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7YUFDMUIsZUFBZSxDQUFDLENBQUMsQ0FBQzthQUNsQixnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7YUFDcEIsWUFBWSxFQUFFLENBQ2xCLENBQUM7SUFDSixDQUFDO0lBUU0sa0RBQWdCLEdBQXZCLFVBQXdCLENBQVM7UUFDL0IsT0FBTyxJQUFJLENBQUMsS0FBSzthQUNkLE9BQU8sRUFBRTthQUNULGdCQUFnQixDQUFDLFFBQVEsQ0FBQzthQUMxQixlQUFlLENBQUMsQ0FBQyxDQUFDO2FBQ2xCLGdCQUFnQixDQUFDLEtBQUssQ0FBQzthQUN2QixZQUFZLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBR0gsOEJBQUM7QUFBRCxDQUFDO0FBekZZLDBEQUF1QjtBQTRGcEMsc0lBQStDO0FBRS9DLElBQWlCLHFCQUFxQixDQUdyQztBQUhELFdBQWlCLHFCQUFxQjtJQUN2Qiw2Q0FBdUIsR0FBRyxDQUFDLENBQUMsdUJBQXVCLENBQUM7QUFFbkUsQ0FBQyxFQUhnQixxQkFBcUIsR0FBckIsNkJBQXFCLEtBQXJCLDZCQUFxQixRQUdyQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdHRCx3SEFBc0Q7QUFDdEQsOEhBQTBEO0FBQzFELGtIQUFrRDtBQUVsRCxxSUFBb0Q7QUFDcEQsbUlBQThEO0FBQzlELG1JQUE4RDtBQUU5RCxzSkFBMEU7QUFDMUUsd0hBQXNEO0FBQ3RELDZJQUFvRTtBQUVwRSw2SEFBeUQ7QUFDekQsc0pBQXlFO0FBRXpFLG1IQUFxRTtBQUNyRSxzR0FBd0M7QUFFeEMsb0lBQTREO0FBTzVEO0lBa1RFO1FBbkxPLGVBQVUsR0FBRyxVQUNsQixNQUFtQixFQUNuQixJQUFZLEVBQ1osSUFBWSxFQUNaLHVCQUFnRCxJQUM3QyxrQ0FBWSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLHVCQUF1QixDQUFDLEVBQTFELENBQTBELENBQUM7UUFnTDlELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7UUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUNsQixJQUFJLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQztRQUMxQixJQUFJLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQztRQUMxQixJQUFJLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQztRQUMxQixJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUd0QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUkseUNBQW1CLEVBQUUsQ0FBQztRQUNoRCxJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUNsQyxlQUFlLENBQUMsZ0NBQWdDLEVBQ2hELElBQUksQ0FDTCxDQUFDO1FBR0YsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUkseUNBQW1CLEVBQUUsQ0FBQztRQUdwRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUkscUNBQWlCLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBaFZNLHVDQUFhLEdBQXBCO1FBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFTTSx3Q0FBYyxHQUFyQixVQUFzQixDQUFVO1FBQzlCLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFVTSxvQ0FBVSxHQUFqQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBU00scUNBQVcsR0FBbEIsVUFBbUIsQ0FBVTtRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBT00scUNBQVcsR0FBbEIsVUFBbUIsQ0FBUyxFQUFFLENBQVM7UUFDckMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFRTSx5Q0FBZSxHQUF0QixVQUF1QixDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVM7UUFDcEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQU1NLHdDQUFjLEdBQXJCO1FBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFNTSxvQ0FBVSxHQUFqQixVQUFrQixDQUFTO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFNTSxvQ0FBVSxHQUFqQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBT00sbUNBQVMsR0FBaEIsVUFBaUIsTUFBbUIsRUFBRSx5QkFBaUM7UUFBakMsNkVBQWlDO1FBQ3JFLElBQUksQ0FBQyxJQUFJLEdBQUcscUJBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLHlCQUF5QixDQUFDLENBQUM7UUFFaEUsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtZQUNyQixnQ0FBYyxFQUFDLCtCQUErQixDQUFDLENBQUM7WUFDaEQsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRXRDLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLEVBQUU7WUFDdkIsZ0NBQWMsRUFBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQzNDLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLHFDQUFpQixDQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUM5QixDQUFDO0lBQ0osQ0FBQztJQXVCTSx3Q0FBYyxHQUFyQixVQUNFLE1BQW1CLEVBQ25CLElBQVksRUFDWixJQUFZO1FBRVosT0FBTywrQ0FBc0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFPTSxrQ0FBUSxHQUFmLFVBQWdCLE1BQW1CLEVBQUUsSUFBWTtRQUMvQyxJQUFJLENBQUMsS0FBSyxHQUFHLHVCQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBT00sc0NBQVksR0FBbkIsVUFBb0IsTUFBbUIsRUFBRSxJQUFZO1FBQ25ELElBQUksQ0FBQyxjQUFjLEdBQUcseUNBQW1CLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBT00scUNBQVcsR0FBbEIsVUFBbUIsTUFBbUIsRUFBRSxJQUFZO1FBQ2xELElBQUksQ0FBQyxRQUFRLEdBQUcsNkJBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFVTSwrQkFBSyxHQUFaLFVBQ0UsVUFBMEIsRUFDMUIsTUFBYyxFQUNkLE1BQWM7UUFFZCxJQUFNLFNBQVMsR0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRW5FLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRTtZQUNqQixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsSUFBTSxLQUFLLEdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRSxJQUFNLFFBQVEsR0FBaUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUUxRSxJQUFJLElBQUksR0FBVyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsSUFBSSxLQUFLLEdBQVcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFXLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLE1BQU0sR0FBVyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFakMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRTtZQUM5QixJQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsZ0NBQVEsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLGdDQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDcEUsSUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLGdDQUFRLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRyxnQ0FBUSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUV4RSxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUU7Z0JBQ1osSUFBSSxHQUFHLENBQUMsQ0FBQzthQUNWO1lBRUQsSUFBSSxDQUFDLEdBQUcsS0FBSyxFQUFFO2dCQUNiLEtBQUssR0FBRyxDQUFDLENBQUM7YUFDWDtZQUVELElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRTtnQkFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDO2FBQ1Q7WUFFRCxJQUFJLENBQUMsR0FBRyxNQUFNLEVBQUU7Z0JBQ2QsTUFBTSxHQUFHLENBQUMsQ0FBQzthQUNaO1NBQ0Y7UUFFRCxJQUFNLEVBQUUsR0FBVyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlELElBQU0sRUFBRSxHQUFXLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFOUQsT0FBTyxJQUFJLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxLQUFLLElBQUksR0FBRyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksTUFBTSxDQUFDO0lBQ2hFLENBQUM7SUFNTSxrQ0FBUSxHQUFmO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFNTSxxQ0FBVyxHQUFsQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBTU0sd0NBQWMsR0FBckIsVUFBc0IsZUFBbUI7UUFBbkIscURBQW1CO1FBQ3ZDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDdkI7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksMkNBQW9CLEVBQUUsQ0FBQztRQUM1QyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFLTSx3Q0FBYyxHQUFyQjtRQUNFLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztTQUN2QjtJQUNILENBQUM7SUFXTSwwQ0FBZ0IsR0FBdkIsVUFBd0IsVUFBcUI7UUFDM0MsK0JBQWEsRUFBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFZYSxnREFBZ0MsR0FBOUMsVUFDRSxNQUFnQyxFQUNoQyxVQUFxQixFQUNyQixVQUEyQjtRQUUzQixJQUFNLEtBQUssR0FBb0IsVUFBVSxDQUFDO1FBRTFDLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtZQUNqQixLQUFLLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDcEM7SUFDSCxDQUFDO0lBaURNLGlDQUFPLEdBQWQ7UUFDRSxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxFQUFFO1lBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7U0FDNUI7UUFFRCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7U0FDaEM7UUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQ2xCO1FBRUQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFFekIsdUJBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLCtCQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QywyQkFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFFekIsNkJBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BDLHlDQUFtQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFaEQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUE2Qkgsc0JBQUM7QUFBRCxDQUFDO0FBeFpZLDBDQUFlO0FBMlo1QixzSEFBdUM7QUFFdkMsSUFBaUIscUJBQXFCLENBR3JDO0FBSEQsV0FBaUIscUJBQXFCO0lBQ3ZCLHFDQUFlLEdBQUcsQ0FBQyxDQUFDLGVBQWUsQ0FBQztBQUVuRCxDQUFDLEVBSGdCLHFCQUFxQixHQUFyQiw2QkFBcUIsS0FBckIsNkJBQXFCLFFBR3JDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDemJELDhHQUFnRDtBQUdoRCwyR0FBOEM7QUFDOUMsbUhBQWtEO0FBV2xEO0lBWUU7UUFBQSxpQkFNQztRQStNTSw2QkFBd0IsR0FBRyxVQUNoQyx1QkFBK0MsSUFDNUMsUUFBQyxLQUFJLENBQUMsaUJBQWlCLEdBQUcsdUJBQXVCLENBQUMsRUFBbEQsQ0FBa0QsQ0FBQztRQVNqRCw2QkFBd0IsR0FBRyxjQUFNLFlBQUksQ0FBQyxpQkFBaUIsRUFBdEIsQ0FBc0IsQ0FBQztRQS9ON0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLEdBQUcsQ0FBQztRQUMzQixJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO1FBQ25CLElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDO1FBQzFCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLHFCQUFTLEVBQWEsQ0FBQztJQUN0RCxDQUFDO0lBZGEsb0JBQU0sR0FBcEIsVUFBcUIsTUFBcUI7UUFDeEMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pCLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQWdCTSwrQkFBTyxHQUFkO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7SUFDckIsQ0FBQztJQVFNLHdDQUFnQixHQUF2QixVQUNFLEtBQWtCLEVBQ2xCLGdCQUF3QyxFQUN4QyxlQUF1QjtRQUV2QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLElBQUksZ0JBQWdCLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDcEUsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ2pDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNyRSxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUVyRCxJQUFNLFFBQVEsR0FBVyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFNUMsSUFBSSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLEVBQUU7Z0JBRXJDLGdCQUFnQixDQUFDLFVBQVUsQ0FDekIsUUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxHQUFHLFFBQVEsQ0FDaEUsQ0FBQzthQUVIO1NBQ0Y7UUFFRCxJQUFJLFVBQVUsR0FBVyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBSXRDLElBQU0sTUFBTSxHQUNWLElBQUksQ0FBQyxjQUFjLElBQUksR0FBRztZQUN4QixDQUFDLENBQUMsR0FBRztZQUNMLENBQUMsQ0FBQyx1QkFBVSxDQUFDLGFBQWEsQ0FDdEIsQ0FBQyxlQUFlLEdBQUcsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztnQkFDdkQsSUFBSSxDQUFDLGNBQWMsQ0FDdEIsQ0FBQztRQUVSLElBQU0sT0FBTyxHQUNYLElBQUksQ0FBQyxlQUFlLElBQUksR0FBRyxJQUFJLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxHQUFHLEdBQUc7WUFDaEUsQ0FBQyxDQUFDLEdBQUc7WUFDTCxDQUFDLENBQUMsdUJBQVUsQ0FBQyxhQUFhLENBQ3RCLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLEdBQUcsZUFBZSxDQUFDO2dCQUMvQyxJQUFJLENBQUMsZUFBZSxDQUN2QixDQUFDO1FBRVIsVUFBVSxHQUFHLFVBQVUsR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDO1FBRTNDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFdkQsNEJBQVUsRUFBQyxHQUFHLElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUduRCxJQUFJLENBQUMsa0JBQWtCLENBQ3JCLEtBQUssRUFDTCxlQUFlLEVBQ2YsVUFBVSxFQUNWLGdCQUFnQixDQUNqQixDQUFDO1FBSUYsSUFDRSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDO1lBQ2pDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxHQUFHLGVBQWUsRUFDL0M7WUFDQSxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdEM7SUFDSCxDQUFDO0lBTU0scUNBQWEsR0FBcEIsVUFBcUIsYUFBcUI7UUFDeEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7SUFDdEMsQ0FBQztJQU1NLHNDQUFjLEdBQXJCLFVBQXNCLGNBQXNCO1FBQzFDLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDO0lBQ3hDLENBQUM7SUFNTSxzQ0FBYyxHQUFyQjtRQUNFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBTU0scUNBQWEsR0FBcEI7UUFDRSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQztJQU1NLGlDQUFTLEdBQWhCLFVBQWlCLE1BQWM7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQU1NLGlDQUFTLEdBQWhCO1FBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFXTSxtQ0FBVyxHQUFsQjtRQUNFLE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDZCxDQUFDO0lBU00sdUNBQWUsR0FBdEI7UUFDRSxPQUFPLENBQUMsR0FBRyxDQUFDO0lBQ2QsQ0FBQztJQU1NLHFDQUFhLEdBQXBCLFVBQXFCLGFBQXFCO1FBQ3hDLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO0lBQ3RDLENBQUM7SUFXTSxxQ0FBYSxHQUFwQixVQUNFLHNCQUE4QixFQUM5QixpQkFBeUI7UUFFekIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDaEMsQ0FBQztJQWdETSwyQ0FBbUIsR0FBMUI7UUFDRSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFPTSw0Q0FBb0IsR0FBM0I7UUFDRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ1osQ0FBQztJQVFNLHlDQUFpQixHQUF4QixVQUF5QixLQUFhO1FBQ3BDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQVNTLDRDQUFvQixHQUE5QjtRQUNFLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQVdILG9CQUFDO0FBQUQsQ0FBQztBQS9ScUIsc0NBQWE7QUFrU25DLG1IQUFxQztBQUdyQyxJQUFpQixxQkFBcUIsQ0FJckM7QUFKRCxXQUFpQixxQkFBcUI7SUFDdkIsbUNBQWEsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO0FBRy9DLENBQUMsRUFKZ0IscUJBQXFCLEdBQXJCLDZCQUFxQixLQUFyQiw2QkFBcUIsUUFJckM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN2VEQscUlBQTJEO0FBRTNELDJHQUE4QztBQUM5QyxnSEFBd0Q7QUFDeEQsbUhBQWdEO0FBSWhELElBQU0sbUJBQW1CLEdBQUcsWUFBWSxDQUFDO0FBQ3pDLElBQU0sb0JBQW9CLEdBQUcsYUFBYSxDQUFDO0FBQzNDLElBQU0sdUJBQXVCLEdBQUcsWUFBWSxDQUFDO0FBQzdDLElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQztBQUM3QixJQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQztBQUNuQyxJQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQztBQUNuQyxJQUFNLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDNUIsSUFBTSxrQkFBa0IsR0FBRyxVQUFVLENBQUM7QUFDdEMsSUFBTSxtQkFBbUIsR0FBRyxXQUFXLENBQUM7QUFDeEMsSUFBTSxlQUFlLEdBQUcsR0FBRyxDQUFDO0FBTzVCO0lBQTRDLDBDQUFhO0lBb0l2RDtRQUFBLFlBQ0UsaUJBQU8sU0FHUjtRQURDLEtBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxxQkFBUyxFQUF1QixDQUFDOztJQUMxRCxDQUFDO0lBaklhLDZCQUFNLEdBQXBCLFVBQ0UsTUFBbUIsRUFDbkIsSUFBWTtRQUVaLElBQU0sVUFBVSxHQUEyQixJQUFJLHNCQUFzQixFQUFFLENBQUM7UUFDeEUsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDL0IsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQVNNLG1EQUFrQixHQUF6QixVQUNFLEtBQWtCLEVBQ2xCLGVBQXVCLEVBQ3ZCLE1BQWMsRUFDZCxnQkFBd0M7UUFFeEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDbkQsSUFBTSxTQUFTLEdBQXdCLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTlELFFBQVEsU0FBUyxDQUFDLFNBQVMsRUFBRTtnQkFDM0IsS0FBSyxtQkFBbUIsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO29CQUNoRCxLQUFLLENBQUMscUJBQXFCLENBQ3pCLFNBQVMsQ0FBQyxXQUFXLEVBQ3JCLFNBQVMsQ0FBQyxLQUFLLEVBQ2YsTUFBTSxDQUNQLENBQUM7b0JBQ0YsTUFBTTtpQkFDUDtnQkFDRCxLQUFLLG1CQUFtQixDQUFDLDRCQUE0QixDQUFDLENBQUM7b0JBQ3JELEtBQUssQ0FBQywwQkFBMEIsQ0FDOUIsU0FBUyxDQUFDLFdBQVcsRUFDckIsU0FBUyxDQUFDLEtBQUssRUFDZixNQUFNLENBQ1AsQ0FBQztvQkFDRixNQUFNO2lCQUNQO2dCQUNELEtBQUssbUJBQW1CLENBQUMsNkJBQTZCLENBQUMsQ0FBQztvQkFDdEQsS0FBSyxDQUFDLHFCQUFxQixDQUN6QixTQUFTLENBQUMsV0FBVyxFQUNyQixTQUFTLENBQUMsS0FBSyxFQUNmLE1BQU0sQ0FDUCxDQUFDO29CQUNGLE1BQU07aUJBQ1A7Z0JBQ0Q7b0JBRUUsTUFBTTthQUNUO1NBQ0Y7SUFDSCxDQUFDO0lBRVMsc0NBQUssR0FBZixVQUFnQixNQUFtQixFQUFFLElBQVk7UUFDL0MsSUFBTSxJQUFJLEdBQWUsdUJBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pELElBQU0sSUFBSSxHQUFVLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUVuQyxJQUFJLENBQUMsYUFBYSxDQUNoQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQ3BFLENBQUM7UUFDRixJQUFJLENBQUMsY0FBYyxDQUNqQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQ3JFLENBQUM7UUFHRixJQUFNLGNBQWMsR0FBRyxJQUFJO2FBQ3hCLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDO2FBQ3pDLE9BQU8sRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFakQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGNBQWMsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUN2QyxJQUFNLEtBQUssR0FBVSxJQUFJO2lCQUN0QixnQkFBZ0IsQ0FBQyx1QkFBdUIsQ0FBQztpQkFDekMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLElBQU0sV0FBVyxHQUFtQix1Q0FBZSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FDdEUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUN2RCxDQUFDO1lBRUYsSUFBTSxLQUFLLEdBQVcsS0FBSztpQkFDeEIsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUM7aUJBQ3BDLE9BQU8sRUFBRSxDQUFDO1lBR2IsSUFBSSxTQUFTLFNBQXFCLENBQUM7WUFFbkMsSUFDRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ25ELEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLGFBQWEsRUFDdkU7Z0JBQ0EsU0FBUyxHQUFHLG1CQUFtQixDQUFDLHVCQUF1QixDQUFDO2FBQ3pEO2lCQUFNLElBQ0wsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLENBQUMsU0FBUyxFQUFFO2dCQUN0RCxrQkFBa0IsRUFDbEI7Z0JBQ0EsU0FBUyxHQUFHLG1CQUFtQixDQUFDLDRCQUE0QixDQUFDO2FBQzlEO2lCQUFNLElBQ0wsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLENBQUMsU0FBUyxFQUFFO2dCQUN0RCxtQkFBbUIsRUFDbkI7Z0JBQ0EsU0FBUyxHQUFHLG1CQUFtQixDQUFDLDZCQUE2QixDQUFDO2FBQy9EO2lCQUFNO2dCQUVMLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyx1QkFBdUIsQ0FBQzthQUN6RDtZQUdELElBQU0sSUFBSSxHQUF3QixJQUFJLG1CQUFtQixFQUFFLENBQUM7WUFFNUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7WUFDL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7WUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFFbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakM7UUFFRCx1QkFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBWUgsNkJBQUM7QUFBRCxDQUFDLENBM0kyQyw2QkFBYSxHQTJJeEQ7QUEzSVksd0RBQXNCO0FBZ0puQyxJQUFZLG1CQUlYO0FBSkQsV0FBWSxtQkFBbUI7SUFDN0IsbUdBQTJCO0lBQzNCLDZHQUFnQztJQUNoQywrR0FBaUM7QUFDbkMsQ0FBQyxFQUpXLG1CQUFtQixHQUFuQiwyQkFBbUIsS0FBbkIsMkJBQW1CLFFBSTlCO0FBS0Q7SUFBQTtJQUlBLENBQUM7SUFBRCwwQkFBQztBQUFELENBQUM7QUFKWSxrREFBbUI7QUFPaEMscUlBQThDO0FBRTlDLElBQWlCLHFCQUFxQixDQU9yQztBQVBELFdBQWlCLHFCQUFxQjtJQUN2Qiw0Q0FBc0IsR0FBRyxDQUFDLENBQUMsc0JBQXNCLENBQUM7SUFFbEQseUNBQW1CLEdBQUcsQ0FBQyxDQUFDLG1CQUFtQixDQUFDO0lBRTVDLHlDQUFtQixHQUFHLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztBQUUzRCxDQUFDLEVBUGdCLHFCQUFxQixHQUFyQiw2QkFBcUIsS0FBckIsNkJBQXFCLFFBT3JDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDak1ELHFJQUEyRDtBQUMzRCw4R0FBZ0Q7QUFFaEQsMkdBQThDO0FBRTlDLG1IQUk4QjtBQUM5QixtSEFBd0U7QUFDeEUsd0lBUWdDO0FBQ2hDLDRIQUE0RTtBQUc1RSxJQUFNLGtCQUFrQixHQUFHLFVBQVUsQ0FBQztBQUN0QyxJQUFNLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztBQUNwQyxJQUFNLGVBQWUsR0FBRyxPQUFPLENBQUM7QUFDaEMsSUFBTSxtQkFBbUIsR0FBRyxXQUFXLENBQUM7QUFDeEMsSUFBTSxxQkFBcUIsR0FBRyxhQUFhLENBQUM7QUFHNUMsSUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDO0FBS2hDLElBQU0sd0JBQXdCLEdBQUcsS0FBSyxDQUFDO0FBRXZDLFNBQVMsVUFBVSxDQUNqQixDQUFvQixFQUNwQixDQUFvQixFQUNwQixDQUFTO0lBRVQsSUFBTSxNQUFNLEdBQXNCLElBQUksd0NBQWlCLEVBQUUsQ0FBQztJQUUxRCxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0MsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWpELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxNQUEyQixFQUFFLElBQVk7SUFDL0QsSUFBSSxDQUFDLEdBQVcsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFNUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFO1FBQ1gsQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUNUO0lBRUQsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25FLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxNQUEyQixFQUFFLElBQVk7SUFDL0QsSUFBSSxDQUFDLEdBQVcsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFNUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFO1FBQ1gsQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUNUO0lBRUQsSUFBTSxHQUFHLEdBQXNCLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25FLElBQU0sR0FBRyxHQUFzQixVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRSxJQUFNLEdBQUcsR0FBc0IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFbkUsSUFBTSxJQUFJLEdBQXNCLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hELElBQU0sSUFBSSxHQUFzQixVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV4RCxPQUFPLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUN6QyxDQUFDO0FBRUQsU0FBUywwQkFBMEIsQ0FDakMsTUFBMkIsRUFDM0IsSUFBWTtJQUVaLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQztJQUVyQixJQUFNLENBQUMsR0FBVyxJQUFJLENBQUM7SUFDdkIsSUFBSSxFQUFFLEdBQVcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNoQyxJQUFJLEVBQUUsR0FBVyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2hDLElBQUksR0FBRyxHQUFXLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDakMsSUFBSSxHQUFHLEdBQVcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUVqQyxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDYixJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDYixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDWixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFVixLQUFLLElBQUksS0FBSyxHQUFHLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ2xDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLEVBQUU7WUFDcEIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNQLE1BQU07U0FDUDtRQUVELElBQUksRUFBRSxHQUFHLE9BQU8sR0FBRyxDQUFDLEVBQUU7WUFDcEIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNQLE1BQU07U0FDUDtRQUVELElBQUksT0FBTyxHQUFXLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN4QyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBTSxPQUFPLEdBQVcsQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzlDLElBQU0sT0FBTyxHQUFXLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUM5QyxPQUFPLEdBQUcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxHQUFHLE9BQU8sRUFBRTtZQUNmLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDckIsSUFBSSxPQUFPLEdBQUcsT0FBTyxHQUFHLENBQUMsRUFBRTtnQkFDekIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDUCxNQUFNO2FBQ1A7WUFFRCxFQUFFLEdBQUcsT0FBTyxDQUFDO1lBQ2IsR0FBRyxHQUFHLE9BQU8sQ0FBQztTQUNmO2FBQU07WUFDTCxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxHQUFHLE9BQU8sR0FBRyxPQUFPLEVBQUU7Z0JBQ3pCLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ1AsTUFBTTthQUNQO1lBRUQsRUFBRSxHQUFHLE9BQU8sQ0FBQztZQUNiLEdBQUcsR0FBRyxPQUFPLENBQUM7U0FDZjtLQUNGO0lBRUQsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ1gsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztLQUNyQjtJQUVELElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRTtRQUNYLENBQUMsR0FBRyxHQUFHLENBQUM7S0FDVDtJQUNELElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRTtRQUNYLENBQUMsR0FBRyxHQUFHLENBQUM7S0FDVDtJQUVELElBQU0sR0FBRyxHQUFzQixVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRSxJQUFNLEdBQUcsR0FBc0IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkUsSUFBTSxHQUFHLEdBQXNCLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRW5FLElBQU0sSUFBSSxHQUFzQixVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4RCxJQUFNLElBQUksR0FBc0IsVUFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFeEQsT0FBTyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDekMsQ0FBQztBQUVELFNBQVMsbUNBQW1DLENBQzFDLE1BQTJCLEVBQzNCLElBQVk7SUFFWixJQUFNLENBQUMsR0FBVyxJQUFJLENBQUM7SUFDdkIsSUFBTSxFQUFFLEdBQVcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNsQyxJQUFNLEVBQUUsR0FBVyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2xDLElBQU0sR0FBRyxHQUFXLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDbkMsSUFBTSxHQUFHLEdBQVcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUVuQyxJQUFNLENBQUMsR0FBVyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUNsRCxJQUFNLENBQUMsR0FBVyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUNuRCxJQUFNLENBQUMsR0FBVyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDdkMsSUFBTSxDQUFDLEdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUV6QixJQUFNLENBQUMsR0FBVyx1QkFBVSxDQUFDLHlCQUF5QixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRW5FLElBQU0sR0FBRyxHQUFzQixVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRSxJQUFNLEdBQUcsR0FBc0IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkUsSUFBTSxHQUFHLEdBQXNCLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRW5FLElBQU0sSUFBSSxHQUFz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R0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDdEMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDOUQsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFHOUQsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUM5RCxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDeEMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUMxQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDeEMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUN4QyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDMUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDbEUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUM5RCxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDeEMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUN4QyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDeEMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUMxQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDMUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUMxQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDeEMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUM5QyxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDNUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2FBQzdD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QUUsR0FBRztnQkFDNUQsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3RDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUN4QyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQzlELEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUN4QyxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBRzlELElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDOUQsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUN4QyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDMUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUN4QyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDeEMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQzFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUN4QyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ2xFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDOUQsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUN4QyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDeEMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUN4QyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDMUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQzFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUN4QyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDMUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQ3hDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUN4QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztnQkFDOUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7Z0JBQzVDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO2dCQUN4QyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUss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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRCxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1IsNEVBQTRFO0FBQzVFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QixxQkFBcUI7QUFDakQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxxQ0FBcUMsMEJBQTBCO0FBQy9EO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkIsMEJBQTBCLGVBQWU7QUFDdEU7O0FBRU87QUFDUDtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O1VDNWxCQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOzs7OztXQ3RCQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHlDQUF5Qyx3Q0FBd0M7V0FDakY7V0FDQTtXQUNBOzs7OztXQ1BBLDhDQUE4Qzs7Ozs7V0NBOUM7V0FDQTtXQUNBO1dBQ0EsdURBQXVELGlCQUFpQjtXQUN4RTtXQUNBLGdEQUFnRCxhQUFhO1dBQzdEOzs7OztVRU5BO1VBQ0E7VUFDQTtVQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vVHRzUXVlc3RWM1ZvaWNldm94LmpzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL2N1YmlzbWRlZmF1bHRwYXJhbWV0ZXJpZC50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9jdWJpc21mcmFtZXdvcmtjb25maWcudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvY3ViaXNtbW9kZWxzZXR0aW5nanNvbi50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9lZmZlY3QvY3ViaXNtYnJlYXRoLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL2VmZmVjdC9jdWJpc21leWVibGluay50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9lZmZlY3QvY3ViaXNtcG9zZS50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9pY3ViaXNtbW9kZWxzZXR0aW5nLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkbWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9saXZlMmRjdWJpc21mcmFtZXdvcmsudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc21tYXRoLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtbWF0cml4NDQudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc21tb2RlbG1hdHJpeC50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbXRhcmdldHBvaW50LnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtdmVjdG9yMi50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbXZpZXdtYXRyaXgudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtbW9jLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsdXNlcmRhdGEudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24udHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtdXNlcm1vZGVsLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9hY3ViaXNtbW90aW9uLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21leHByZXNzaW9ubW90aW9uLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvbW90aW9uL2N1YmlzbW1vdGlvbmludGVybmFsLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25qc29uLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25tYW5hZ2VyLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZWVudHJ5LnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvcGh5c2ljcy9jdWJpc21waHlzaWNzLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3BoeXNpY3MvY3ViaXNtcGh5c2ljc2ludGVybmFsLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3BoeXNpY3MvY3ViaXNtcGh5c2ljc2pzb24udHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlcl93ZWJnbC50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy90eXBlL2NzbW1hcC50cyIsIndlYnBhY2s6Ly8vLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy90eXBlL2NzbXJlY3RmLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3Ntc3RyaW5nLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3NtdmVjdG9yLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3V0aWxzL2N1YmlzbWRlYnVnLnRzIiwid2VicGFjazovLy8uLi8uLi8uLi9GcmFtZXdvcmsvc3JjL3V0aWxzL2N1YmlzbWpzb24udHMiLCJ3ZWJwYWNrOi8vLy4uLy4uLy4uL0ZyYW1ld29yay9zcmMvdXRpbHMvY3ViaXNtanNvbmV4dGVuc2lvbi50cyIsIndlYnBhY2s6Ly8vLi9DYXJ0T3BlcmF0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vRnVuY0V4dGVuc2lvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vR3VpT3BlcmF0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vT3BlbldlYXRoZXJNYXAudHMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50LnRzIiwid2VicGFjazovLy8uL3NoYXJlZC50cyIsIndlYnBhY2s6Ly8vLi9zcGVlY2hSZWNvZ25pdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcGVlY2hfUUEudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHBkZWZpbmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHBkZWxlZ2F0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcGxpdmUyZG1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHBtb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcHBhbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcHNwcml0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcHRleHR1cmVtYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9sYXBwdmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFwcHdhdmZpbGVoYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tYWluLnRzIiwid2VicGFjazovLy8uL3NyYy90b3VjaG1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vd2VicGFjay9iZWZvcmUtc3RhcnR1cCIsIndlYnBhY2s6Ly8vd2VicGFjay9zdGFydHVwIiwid2VicGFjazovLy93ZWJwYWNrL2FmdGVyLXN0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVHRzUXVlc3RWM1ZvaWNldm94LmpzXHJcblxyXG5jbGFzcyBUdHNRdWVzdFYzVm9pY2V2b3ggZXh0ZW5kcyBBdWRpbyB7XHJcbiAgICBjb25zdHJ1Y3RvcihzcGVha2VySWQsIHRleHQsIHR0c1F1ZXN0QXBpS2V5KSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB2YXIgcGFyYW1zID0ge307XHJcbiAgICAgICAgcGFyYW1zWydrZXknXSA9IHR0c1F1ZXN0QXBpS2V5O1xyXG4gICAgICAgIHBhcmFtc1snc3BlYWtlciddID0gc3BlYWtlcklkO1xyXG4gICAgICAgIHBhcmFtc1sndGV4dCddID0gdGV4dDtcclxuICAgICAgICBjb25zdCBxdWVyeSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocGFyYW1zKTtcclxuICAgICAgICB0aGlzLiNtYWluKHRoaXMsIHF1ZXJ5KTtcclxuICAgIH1cclxuXHJcbiAgICAjbWFpbihvd25lciwgcXVlcnkpIHtcclxuICAgICAgICBpZiAob3duZXIuc3JjLmxlbmd0aCA+IDApIHJldHVybjtcclxuICAgICAgICB2YXIgYXBpVXJsID0gJ2h0dHBzOi8vYXBpLnR0cy5xdWVzdC92My92b2ljZXZveC9zeW50aGVzaXMnO1xyXG4gICAgICAgIGZldGNoKGFwaVVybCArICc/JyArIHF1ZXJ5LnRvU3RyaW5nKCkpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZS5yZXRyeUFmdGVyICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldFRpbWVvdXQob3duZXIuI21haW4sIDEwMDAgKiAoMSArIHJlc3BvbnNlLnJldHJ5QWZ0ZXIpLCBvd25lciwgcXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gb3duZXIuI21haW4ob3duZXIsIHF1ZXJ5KSwgMTAwMCAqICgxICsgcmVzcG9uc2UucmV0cnlBZnRlcikpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5zdWNjZXNzID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU3VjY2Vzczp0cnVl44Gu5aC05ZCI44Gr54m55a6a44Gu5Yem55CG44KS5a6f6KGMXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBUEnjgYvjgonjg4fjg7zjgr/jgpLlj5blvpfjgZfjgb7jgZfjgZ/jgIJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g44GT44GT44GrU3VjY2Vzczp0cnVl44Gu5aC05ZCI44Gr6KGM44GE44Gf44GE5Yem55CG44KS6L+95YqgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5L6L44GI44Gw44CB55Sf5oiQ44GX44Gf6Z+z5aOw44KS5YaN55Sf44GZ44KL44Gq44GpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1wM1N0cmVhbWluZ1VybOOBjOWtmOWcqOOBmeOCi+OBi+eiuuiqjeOBl+OBpuOBi+OCieWGjeeUn+OBmeOCi+OBquOBqeOBruWHpueQhuOCgui/veWKoOOBp+OBjeOBvuOBmVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzcG9uc2UubXAzU3RyZWFtaW5nVXJsICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvd25lci5oYW5kbGVTdWNjZXNzKHJlc3BvbnNlKTsgLy8g5oiQ5Yqf5pmC44Gu5Yem55CG44KS5ZG844Gz5Ye644GZXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcmVzcG9uc2UuZXJyb3JNZXNzYWdlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5lcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXJ2ZXJFcnJvclwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5oiQ5Yqf5pmC44Gu5Yem55CG44KS6L+95YqgXHJcbiAgICBoYW5kbGVTdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgLy8g5oiQ5Yqf5pmC44Gu5Yem55CG44KS6KiY6L+wXHJcbiAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7DlkIjmiJDjgavmiJDlip/jgZfjgb7jgZfjgZ/jgILjgYTjgaTjgafjgoLlho3nlJ/jgafjgY3jgb7jgZnjgIJcIik7XHJcbiAgICAgICAgLy8g44GT44GT44Gn44OV44Op44Kw44KSVHJ1ZeOBq+OBmeOCi+OBi+OAgeS7luOBruWHpueQhuOCkui/veWKoOOBp+OBjeOBvuOBmeOAglxyXG4gICAgICAgIHRoaXMuc3JjID0gcmVzcG9uc2UubXAzU3RyZWFtaW5nVXJsO1xyXG4gICAgICAgIC8vIG93bmVyLnBsYXkoKTsgLy8g55Sf5oiQ44GX44Gf6Z+z5aOw44KS5YaN55SfXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIFR5cGVTY3JpcHTjgafliKnnlKjjgZnjgovjgZ/jgoHjgavjgqjjgq/jgrnjg53jg7zjg4hcclxuZXhwb3J0IHsgVHRzUXVlc3RWM1ZvaWNldm94IH07XHJcbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbi8qKlxuICogQGJyaWVmIOODkeODqeODoeODvOOCv0lE44Gu44OH44OV44Kp44Or44OI5YCk44KS5L+d5oyB44GZ44KL5a6a5pWwPGJyPlxuICogICAgICAgICDjg4fjg5Xjgqnjg6vjg4jlgKTjga7ku5Xmp5jjga/ku6XkuIvjga7jg57jg4vjg6XjgqLjg6vjgavln7rjgaXjgY88YnI+XG4gKiAgICAgICAgIGh0dHBzOi8vZG9jcy5saXZlMmQuY29tL2N1YmlzbS1lZGl0b3ItbWFudWFsL3N0YW5kYXJkLXBhcmFtZXRvci1saXN0L1xuICovXG5leHBvcnQgY29uc3QgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkID0gT2JqZWN0LmZyZWV6ZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pih7XG4gIC8vIOODkeODvOODhElEXG4gIEhpdEFyZWFQcmVmaXg6ICdIaXRBcmVhJyxcbiAgSGl0QXJlYUhlYWQ6ICdIZWFkJyxcbiAgSGl0QXJlYUJvZHk6ICdCb2R5JyxcbiAgUGFydHNJZENvcmU6ICdQYXJ0czAxQ29yZScsXG4gIFBhcnRzQXJtUHJlZml4OiAnUGFydHMwMUFybV8nLFxuICBQYXJ0c0FybUxQcmVmaXg6ICdQYXJ0czAxQXJtTF8nLFxuICBQYXJ0c0FybVJQcmVmaXg6ICdQYXJ0czAxQXJtUl8nLFxuICAvLyDjg5Hjg6njg6Hjg7zjgr9JRFxuICBQYXJhbUFuZ2xlWDogJ1BhcmFtQW5nbGVYJyxcbiAgUGFyYW1BbmdsZVk6ICdQYXJhbUFuZ2xlWScsXG4gIFBhcmFtQW5nbGVaOiAnUGFyYW1BbmdsZVonLFxuICBQYXJhbUV5ZUxPcGVuOiAnUGFyYW1FeWVMT3BlbicsXG4gIFBhcmFtRXllTFNtaWxlOiAnUGFyYW1FeWVMU21pbGUnLFxuICBQYXJhbUV5ZVJPcGVuOiAnUGFyYW1FeWVST3BlbicsXG4gIFBhcmFtRXllUlNtaWxlOiAnUGFyYW1FeWVSU21pbGUnLFxuICBQYXJhbUV5ZUJhbGxYOiAnUGFyYW1FeWVCYWxsWCcsXG4gIFBhcmFtRXllQmFsbFk6ICdQYXJhbUV5ZUJhbGxZJyxcbiAgUGFyYW1FeWVCYWxsRm9ybTogJ1BhcmFtRXllQmFsbEZvcm0nLFxuICBQYXJhbUJyb3dMWTogJ1BhcmFtQnJvd0xZJyxcbiAgUGFyYW1Ccm93Ulk6ICdQYXJhbUJyb3dSWScsXG4gIFBhcmFtQnJvd0xYOiAnUGFyYW1Ccm93TFgnLFxuICBQYXJhbUJyb3dSWDogJ1BhcmFtQnJvd1JYJyxcbiAgUGFyYW1Ccm93TEFuZ2xlOiAnUGFyYW1Ccm93TEFuZ2xlJyxcbiAgUGFyYW1Ccm93UkFuZ2xlOiAnUGFyYW1Ccm93UkFuZ2xlJyxcbiAgUGFyYW1Ccm93TEZvcm06ICdQYXJhbUJyb3dMRm9ybScsXG4gIFBhcmFtQnJvd1JGb3JtOiAnUGFyYW1Ccm93UkZvcm0nLFxuICBQYXJhbU1vdXRoRm9ybTogJ1BhcmFtTW91dGhGb3JtJyxcbiAgUGFyYW1Nb3V0aE9wZW5ZOiAnUGFyYW1Nb3V0aE9wZW5ZJyxcbiAgUGFyYW1DaGVlazogJ1BhcmFtQ2hlZWsnLFxuICBQYXJhbUJvZHlBbmdsZVg6ICdQYXJhbUJvZHlBbmdsZVgnLFxuICBQYXJhbUJvZHlBbmdsZVk6ICdQYXJhbUJvZHlBbmdsZVknLFxuICBQYXJhbUJvZHlBbmdsZVo6ICdQYXJhbUJvZHlBbmdsZVonLFxuICBQYXJhbUJyZWF0aDogJ1BhcmFtQnJlYXRoJyxcbiAgUGFyYW1Bcm1MQTogJ1BhcmFtQXJtTEEnLFxuICBQYXJhbUFybVJBOiAnUGFyYW1Bcm1SQScsXG4gIFBhcmFtQXJtTEI6ICdQYXJhbUFybUxCJyxcbiAgUGFyYW1Bcm1SQjogJ1BhcmFtQXJtUkInLFxuICBQYXJhbUhhbmRMOiAnUGFyYW1IYW5kTCcsXG4gIFBhcmFtSGFuZFI6ICdQYXJhbUhhbmRSJyxcbiAgUGFyYW1IYWlyRnJvbnQ6ICdQYXJhbUhhaXJGcm9udCcsXG4gIFBhcmFtSGFpclNpZGU6ICdQYXJhbUhhaXJTaWRlJyxcbiAgUGFyYW1IYWlyQmFjazogJ1BhcmFtSGFpckJhY2snLFxuICBQYXJhbUhhaXJGbHVmZnk6ICdQYXJhbUhhaXJGbHVmZnknLFxuICBQYXJhbVNob3VsZGVyWTogJ1BhcmFtU2hvdWxkZXJZJyxcbiAgUGFyYW1CdXN0WDogJ1BhcmFtQnVzdFgnLFxuICBQYXJhbUJ1c3RZOiAnUGFyYW1CdXN0WScsXG4gIFBhcmFtQmFzZVg6ICdQYXJhbUJhc2VYJyxcbiAgUGFyYW1CYXNlWTogJ1BhcmFtQmFzZVknLFxuICBQYXJhbU5PTkU6ICdOT05FOicsXG59KTtcblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtZGVmYXVsdHBhcmFtZXRlcmlkJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBIaXRBcmVhQm9keSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLkhpdEFyZWFCb2R5O1xuICBleHBvcnQgY29uc3QgSGl0QXJlYUhlYWQgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5IaXRBcmVhSGVhZDtcbiAgZXhwb3J0IGNvbnN0IEhpdEFyZWFQcmVmaXggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5IaXRBcmVhUHJlZml4O1xuICBleHBvcnQgY29uc3QgUGFyYW1BbmdsZVggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFuZ2xlWDtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQW5nbGVZID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1BbmdsZVk7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWiA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQW5nbGVaO1xuICBleHBvcnQgY29uc3QgUGFyYW1Bcm1MQSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQXJtTEE7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUFybUxCID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Bcm1MQjtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQXJtUkEgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFybVJBO1xuICBleHBvcnQgY29uc3QgUGFyYW1Bcm1SQiA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQXJtUkI7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJhc2VYID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1CYXNlWDtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQmFzZVkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJhc2VZO1xuICBleHBvcnQgY29uc3QgUGFyYW1Cb2R5QW5nbGVYID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Cb2R5QW5nbGVYO1xuICBleHBvcnQgY29uc3QgUGFyYW1Cb2R5QW5nbGVZID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Cb2R5QW5nbGVZO1xuICBleHBvcnQgY29uc3QgUGFyYW1Cb2R5QW5nbGVaID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Cb2R5QW5nbGVaO1xuICBleHBvcnQgY29uc3QgUGFyYW1CcmVhdGggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyZWF0aDtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xBbmdsZSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJvd0xBbmdsZTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xGb3JtID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93TEZvcm07XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dMWCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJvd0xYO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93TFkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dMWTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd1JBbmdsZSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJvd1JBbmdsZTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd1JGb3JtID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Ccm93UkZvcm07XG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dSWCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnJvd1JYO1xuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UlkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJyb3dSWTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnVzdFggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJ1c3RYO1xuICBleHBvcnQgY29uc3QgUGFyYW1CdXN0WSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtQnVzdFk7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUNoZWVrID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1DaGVlaztcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllQmFsbEZvcm0gPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZUJhbGxGb3JtO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVCYWxsWCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllQmFsbFg7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUJhbGxZID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1FeWVCYWxsWTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllTE9wZW4gPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZUxPcGVuO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVMU21pbGUgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZUxTbWlsZTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllUk9wZW4gPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZVJPcGVuO1xuICBleHBvcnQgY29uc3QgUGFyYW1FeWVSU21pbGUgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZVJTbWlsZTtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFpckJhY2sgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUhhaXJCYWNrO1xuICBleHBvcnQgY29uc3QgUGFyYW1IYWlyRmx1ZmZ5ID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1IYWlyRmx1ZmZ5O1xuICBleHBvcnQgY29uc3QgUGFyYW1IYWlyRnJvbnQgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUhhaXJGcm9udDtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFpclNpZGUgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUhhaXJTaWRlO1xuICBleHBvcnQgY29uc3QgUGFyYW1IYW5kTCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtSGFuZEw7XG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhbmRSID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1IYW5kUjtcbiAgZXhwb3J0IGNvbnN0IFBhcmFtTW91dGhGb3JtID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1Nb3V0aEZvcm07XG4gIGV4cG9ydCBjb25zdCBQYXJhbU1vdXRoT3BlblkgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbU1vdXRoT3Blblk7XG4gIGV4cG9ydCBjb25zdCBQYXJhbU5PTkUgPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbU5PTkU7XG4gIGV4cG9ydCBjb25zdCBQYXJhbVNob3VsZGVyWSA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtU2hvdWxkZXJZO1xuICBleHBvcnQgY29uc3QgUGFydHNBcm1MUHJlZml4ID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFydHNBcm1MUHJlZml4O1xuICBleHBvcnQgY29uc3QgUGFydHNBcm1QcmVmaXggPSAkLkN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJ0c0FybVByZWZpeDtcbiAgZXhwb3J0IGNvbnN0IFBhcnRzQXJtUlByZWZpeCA9ICQuQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcnRzQXJtUlByZWZpeDtcbiAgZXhwb3J0IGNvbnN0IFBhcnRzSWRDb3JlID0gJC5DdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFydHNJZENvcmU7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAg44Ot44Kw5Ye65Yqb6Zai5pWw44Gu6Kit5a6aXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vLS0tLS0tLS0tLSDjg63jgrDlh7rlipvjg6zjg5njg6sg6YG45oqe6aCF55uuIOWumue+qSAtLS0tLS0tLS0tXG4vLyDoqbPntLDjg63jgrDlh7rlipvoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX1ZFUkJPU0UgPSAwO1xuLy8g44OH44OQ44OD44Kw44Ot44Kw5Ye65Yqb6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9ERUJVRyA9IDE7XG4vLyBJbmZv44Ot44Kw5Ye65Yqb6Kit5a6aXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9JTkZPID0gMjtcbi8vIOitpuWRiuODreOCsOWHuuWKm+ioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfV0FSTklORyA9IDM7XG4vLyDjgqjjg6njg7zjg63jgrDlh7rlipvoqK3lrppcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX0VSUk9SID0gNDtcbi8vIOODreOCsOWHuuWKm+OCquODleioreWumlxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfT0ZGID0gNTtcblxuLyoqXG4gKiDjg63jgrDlh7rlipvjg6zjg5njg6voqK3lrprjgIJcbiAqXG4gKiDlvLfliLbnmoTjgavjg63jgrDlh7rlipvjg6zjg5njg6vjgpLlpInjgYjjgovmmYLjgavlrprnvqnjgpLmnInlirnjgavjgZnjgovjgIJcbiAqIENTTV9MT0dfTEVWRUxfVkVSQk9TRSDvvZ4gQ1NNX0xPR19MRVZFTF9PRkYg44KS6YG45oqe44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMOiBudW1iZXIgPSBDU01fTE9HX0xFVkVMX1ZFUkJPU0U7XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBJQ3ViaXNtTW9kZWxTZXR0aW5nIH0gZnJvbSAnLi9pY3ViaXNtbW9kZWxzZXR0aW5nJztcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBjc21NYXAsIGl0ZXJhdG9yIH0gZnJvbSAnLi90eXBlL2NzbW1hcCc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbUpzb24sIFZhbHVlIH0gZnJvbSAnLi91dGlscy9jdWJpc21qc29uJztcblxuLyoqXG4gKiBNb2RlbDNKc29u44Gu44Kt44O85paH5a2X5YiXXG4gKi9cblxuLy8gSlNPTiBLZXlzXG5jb25zdCBWZXJzaW9uID0gJ1ZlcnNpb24nO1xuY29uc3QgRmlsZVJlZmVyZW5jZXMgPSAnRmlsZVJlZmVyZW5jZXMnO1xuY29uc3QgR3JvdXBzID0gJ0dyb3Vwcyc7XG5jb25zdCBMYXlvdXQgPSAnTGF5b3V0JztcbmNvbnN0IEhpdEFyZWFzID0gJ0hpdEFyZWFzJztcblxuY29uc3QgTW9jID0gJ01vYyc7XG5jb25zdCBUZXh0dXJlcyA9ICdUZXh0dXJlcyc7XG5jb25zdCBQaHlzaWNzID0gJ1BoeXNpY3MnO1xuY29uc3QgUG9zZSA9ICdQb3NlJztcbmNvbnN0IEV4cHJlc3Npb25zID0gJ0V4cHJlc3Npb25zJztcbmNvbnN0IE1vdGlvbnMgPSAnTW90aW9ucyc7XG5cbmNvbnN0IFVzZXJEYXRhID0gJ1VzZXJEYXRhJztcbmNvbnN0IE5hbWUgPSAnTmFtZSc7XG5jb25zdCBGaWxlUGF0aCA9ICdGaWxlJztcbmNvbnN0IElkID0gJ0lkJztcbmNvbnN0IElkcyA9ICdJZHMnO1xuY29uc3QgVGFyZ2V0ID0gJ1RhcmdldCc7XG5cbi8vIE1vdGlvbnNcbmNvbnN0IElkbGUgPSAnSWRsZSc7XG5jb25zdCBUYXBCb2R5ID0gJ1RhcEJvZHknO1xuY29uc3QgUGluY2hJbiA9ICdQaW5jaEluJztcbmNvbnN0IFBpbmNoT3V0ID0gJ1BpbmNoT3V0JztcbmNvbnN0IFNoYWtlID0gJ1NoYWtlJztcbmNvbnN0IEZsaWNrSGVhZCA9ICdGbGlja0hlYWQnO1xuY29uc3QgUGFyYW1ldGVyID0gJ1BhcmFtZXRlcic7XG5cbmNvbnN0IFNvdW5kUGF0aCA9ICdTb3VuZCc7XG5jb25zdCBGYWRlSW5UaW1lID0gJ0ZhZGVJblRpbWUnO1xuY29uc3QgRmFkZU91dFRpbWUgPSAnRmFkZU91dFRpbWUnO1xuXG4vLyBMYXlvdXRcbmNvbnN0IENlbnRlclggPSAnQ2VudGVyWCc7XG5jb25zdCBDZW50ZXJZID0gJ0NlbnRlclknO1xuY29uc3QgWCA9ICdYJztcbmNvbnN0IFkgPSAnWSc7XG5jb25zdCBXaWR0aCA9ICdXaWR0aCc7XG5jb25zdCBIZWlnaHQgPSAnSGVpZ2h0JztcblxuY29uc3QgTGlwU3luYyA9ICdMaXBTeW5jJztcbmNvbnN0IEV5ZUJsaW5rID0gJ0V5ZUJsaW5rJztcblxuY29uc3QgSW5pdFBhcmFtZXRlciA9ICdpbml0X3BhcmFtJztcbmNvbnN0IEluaXRQYXJ0c1Zpc2libGUgPSAnaW5pdF9wYXJ0c192aXNpYmxlJztcbmNvbnN0IFZhbCA9ICd2YWwnO1xuXG5lbnVtIEZyZXF1ZXN0Tm9kZSB7XG4gIEZyZXF1ZXN0Tm9kZV9Hcm91cHMsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEdyb3VwcylcbiAgRnJlcXVlc3ROb2RlX01vYywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpLmdldFZhbHVlQnlTdHJpbmcoTW9jKVxuICBGcmVxdWVzdE5vZGVfTW90aW9ucywgLy8gZ2V0Um9vdCgpLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpLmdldFZhbHVlQnlTdHJpbmcoTW90aW9ucylcbiAgRnJlcXVlc3ROb2RlX0V4cHJlc3Npb25zLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9ucylcbiAgRnJlcXVlc3ROb2RlX1RleHR1cmVzLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhUZXh0dXJlcylcbiAgRnJlcXVlc3ROb2RlX1BoeXNpY3MsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKS5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3MpXG4gIEZyZXF1ZXN0Tm9kZV9Qb3NlLCAvLyBnZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcykuZ2V0VmFsdWVCeVN0cmluZyhQb3NlKVxuICBGcmVxdWVzdE5vZGVfSGl0QXJlYXMsIC8vIGdldFJvb3QoKS5nZXRWYWx1ZUJ5U3RyaW5nKEhpdEFyZWFzKVxufVxuXG4vKipcbiAqIE1vZGVsM0pzb27jg5Hjg7zjgrXjg7xcbiAqXG4gKiBtb2RlbDMuanNvbuODleOCoeOCpOODq+OCkuODkeODvOOCueOBl+OBpuWApOOCkuWPluW+l+OBmeOCi1xuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxTZXR0aW5nSnNvbiBleHRlbmRzIElDdWJpc21Nb2RlbFNldHRpbmcge1xuICAvKipcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgICAgTW9kZWwzSnNvbuOCkuODkOOCpOODiOmFjeWIl+OBqOOBl+OBpuiqreOBv+i+vOOCk+OBoOODh+ODvOOCv+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSAgICAgIE1vZGVsM0pzb27jga7jg4fjg7zjgr/jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2pzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuXG4gICAgaWYgKHRoaXMuX2pzb24pIHtcbiAgICAgIHRoaXMuX2pzb25WYWx1ZSA9IG5ldyBjc21WZWN0b3I8VmFsdWU+KCk7XG5cbiAgICAgIC8vIOmghueVquOBr2VudW0gRnJlcXVlc3ROb2Rl44Go5LiA6Ie044GV44Gb44KLXG4gICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2sodGhpcy5fanNvbi5nZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhHcm91cHMpKTtcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcbiAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNb2MpXG4gICAgICApO1xuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxuICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1vdGlvbnMpXG4gICAgICApO1xuICAgICAgdGhpcy5fanNvblZhbHVlLnB1c2hCYWNrKFxuICAgICAgICB0aGlzLl9qc29uXG4gICAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25zKVxuICAgICAgKTtcbiAgICAgIHRoaXMuX2pzb25WYWx1ZS5wdXNoQmFjayhcbiAgICAgICAgdGhpcy5fanNvblxuICAgICAgICAgIC5nZXRSb290KClcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUZXh0dXJlcylcbiAgICAgICk7XG4gICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXG4gICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljcylcbiAgICAgICk7XG4gICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2soXG4gICAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmlsZVJlZmVyZW5jZXMpXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zZSlcbiAgICAgICk7XG4gICAgICB0aGlzLl9qc29uVmFsdWUucHVzaEJhY2sodGhpcy5fanNvbi5nZXRSb290KCkuZ2V0VmFsdWVCeVN0cmluZyhIaXRBcmVhcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIEN1YmlzbUpzb24uZGVsZXRlKHRoaXMuX2pzb24pO1xuXG4gICAgdGhpcy5fanNvblZhbHVlID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdWJpc21Kc29u44Kq44OW44K444Kn44Kv44OI44KS5Y+W5b6X44GZ44KLXG4gICAqXG4gICAqIEByZXR1cm4gQ3ViaXNtSnNvblxuICAgKi9cbiAgcHVibGljIEdldEpzb24oKTogQ3ViaXNtSnNvbiB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb247XG4gIH1cblxuICAvKipcbiAgICogTW9j44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4gTW9j44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgZ2V0TW9kZWxGaWxlTmFtZSgpOiBzdHJpbmcge1xuICAgIGlmICghdGhpcy5pc0V4aXN0TW9kZWxGaWxlKCkpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vYykuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44GM5L2/55So44GZ44KL44OG44Kv44K544OB44Oj44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIOODhuOCr+OCueODgeODo+OBruaVsFxuICAgKi9cbiAgcHVibGljIGdldFRleHR1cmVDb3VudCgpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5pc0V4aXN0VGV4dHVyZUZpbGVzKCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9UZXh0dXJlcykuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODhuOCr+OCueODgeODo+OBjOmFjee9ruOBleOCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBjOmFjee9ruOBleOCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldFRleHR1cmVEaXJlY3RvcnkoKTogc3RyaW5nIHtcbiAgICBjb25zdCB0ZXh0dXJlUGF0aCA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfVGV4dHVyZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KDApXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG5cbiAgICBjb25zdCBwYXRoQXJyYXkgPSB0ZXh0dXJlUGF0aC5zcGxpdCgnLycpO1xuICAgIC8vIOacgOW+jOOBruimgee0oOOBr+ODhuOCr+OCueODgeODo+WQjeOBquOBruOBp+S4jeimgVxuICAgIGNvbnN0IGFycmF5TGVuZ3RoID0gcGF0aEFycmF5Lmxlbmd0aCAtIDE7XG4gICAgbGV0IHRleHR1cmVEaXJlY3RvcnlTdHIgPSAnJztcblxuICAgIC8vIOWIhuWJsuOBl+OBn+ODkeOCueOCkue1kOWQiFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlMZW5ndGg7IGkrKykge1xuICAgICAgdGV4dHVyZURpcmVjdG9yeVN0ciArPSBwYXRoQXJyYXlbaV07XG4gICAgICBpZiAoaSA8IGFycmF5TGVuZ3RoIC0gMSkge1xuICAgICAgICB0ZXh0dXJlRGlyZWN0b3J5U3RyICs9ICcvJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGV4dHVyZURpcmVjdG9yeVN0cjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgYzkvb/nlKjjgZnjgovjg4bjgq/jgrnjg4Hjg6Pjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldFRleHR1cmVGaWxlTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9UZXh0dXJlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gf5b2T44Gf44KK5Yik5a6a44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gf5b2T44Gf44KK5Yik5a6a44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0SGl0QXJlYXNDb3VudCgpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5pc0V4aXN0SGl0QXJlYXMoKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0hpdEFyZWFzKS5nZXRTaXplKCk7XG4gIH1cblxuICAvKipcbiAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44GfSUTjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBrmluZGV4XG4gICAqIEByZXR1cm4g5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44GfSURcbiAgICovXG4gIHB1YmxpYyBnZXRIaXRBcmVhSWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0hpdEFyZWFzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZClcbiAgICAgICAgLmdldFJhd1N0cmluZygpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ/lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn+WQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldEhpdEFyZWFOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0hpdEFyZWFzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG5ryU566X6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g54mp55CG5ryU566X6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgZ2V0UGh5c2ljc0ZpbGVOYW1lKCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RQaHlzaWNzRmlsZSgpKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1BoeXNpY3MpLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOODhOWIh+OCiuabv+OBiOioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODkeODvOODhOWIh+OCiuabv+OBiOioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldFBvc2VGaWxlTmFtZSgpOiBzdHJpbmcge1xuICAgIGlmICghdGhpcy5pc0V4aXN0UG9zZUZpbGUoKSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Qb3NlKS5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7mlbBcbiAgICovXG4gIHB1YmxpYyBnZXRFeHByZXNzaW9uQ291bnQoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdEV4cHJlc3Npb25GaWxlKCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9FeHByZXNzaW9ucykuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OCkuitmOWIpeOBmeOCi+WQjeWJje+8iOWIpeWQje+8ieOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g6KGo5oOF44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgZ2V0RXhwcmVzc2lvbk5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfRXhwcmVzc2lvbnMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTmFtZSlcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOihqOaDheioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldEV4cHJlc3Npb25GaWxlTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9FeHByZXNzaW9ucylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUGF0aClcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7mlbBcbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25Hcm91cENvdW50KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RNb3Rpb25Hcm91cHMoKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgIC5nZXRLZXlzKClcbiAgICAgIC5nZXRTaXplKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25Hcm91cE5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RNb3Rpb25Hcm91cHMoKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgIC5nZXRLZXlzKClcbiAgICAgIC5hdChpbmRleCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gr5ZCr44G+44KM44KL44Oi44O844K344On44Oz44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uQ291bnQoZ3JvdXBOYW1lOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uR3JvdXBOYW1lKGdyb3VwTmFtZSkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCsOODq+ODvOODl+WQjeOBqOOCpOODs+ODh+ODg+OCr+OCueWApOOBi+OCieODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+WQjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcGFyYW0gaW5kZXggICAgIOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkZpbGVOYW1lKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdE1vdGlvbkdyb3VwTmFtZShncm91cE5hbWUpKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUGF0aClcbiAgICAgIC5nZXRSYXdTdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgavlr77lv5zjgZnjgovjgrXjgqbjg7Pjg4njg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOOCteOCpuODs+ODieODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvblNvdW5kRmlsZU5hbWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uU291bmRGaWxlKGdyb3VwTmFtZSwgaW5kZXgpKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhTb3VuZFBhdGgpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz6ZaL5aeL5pmC44Gu44OV44Kn44O844OJ44Kk44Oz5Yem55CG5pmC6ZaT44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7Plh6bnkIbmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkZhZGVJblRpbWVWYWx1ZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RNb3Rpb25GYWRlSW4oZ3JvdXBOYW1lLCBpbmRleCkpIHtcbiAgICAgIHJldHVybiAtMS4wO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz57WC5LqG5pmC44Gu44OV44Kn44O844OJ44Ki44Km44OI5Yem55CG5pmC6ZaT44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jlh6bnkIbmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkZhZGVPdXRUaW1lVmFsdWUoZ3JvdXBOYW1lOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5pc0V4aXN0TW90aW9uRmFkZU91dChncm91cE5hbWUsIGluZGV4KSkge1xuICAgICAgcmV0dXJuIC0xLjA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2pzb25WYWx1ZVxuICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfTW90aW9ucylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKGdyb3VwTmFtZSlcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCN44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCNXG4gICAqL1xuICBwdWJsaWMgZ2V0VXNlckRhdGFGaWxlKCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLmlzRXhpc3RVc2VyRGF0YUZpbGUoKSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGaWxlUmVmZXJlbmNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODrOOCpOOCouOCpuODiOaDheWgseOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gb3V0TGF5b3V0TWFwIGNzbU1hcOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKiBAcmV0dXJuIHRydWUg44Os44Kk44Ki44Km44OI5oOF5aCx44GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Os44Kk44Ki44Km44OI5oOF5aCx44GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgZ2V0TGF5b3V0TWFwKG91dExheW91dE1hcDogY3NtTWFwPHN0cmluZywgbnVtYmVyPik6IGJvb2xlYW4ge1xuICAgIC8vIOWtmOWcqOOBl+OBquOBhOimgee0oOOBq+OCouOCr+OCu+OCueOBmeOCi+OBqOOCqOODqeODvOOBq+OBquOCi+OBn+OCgVZhbHVl44GMbnVsbOOBruWgtOWQiOOBr251bGzjgpLku6PlhaXjgZnjgotcbiAgICBjb25zdCBtYXA6IGNzbU1hcDxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKExheW91dClcbiAgICAgIC5nZXRNYXAoKTtcblxuICAgIGlmIChtYXAgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxldCByZXQgPSBmYWxzZTtcblxuICAgIGZvciAoXG4gICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPHN0cmluZywgVmFsdWU+ID0gbWFwLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwobWFwLmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgb3V0TGF5b3V0TWFwLnNldFZhbHVlKGl0ZS5wdHIoKS5maXJzdCwgaXRlLnB0cigpLnNlY29uZC50b0Zsb2F0KCkpO1xuICAgICAgcmV0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsFxuICAgKi9cbiAgcHVibGljIGdldEV5ZUJsaW5rUGFyYW1ldGVyQ291bnQoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdEV5ZUJsaW5rUGFyYW1ldGVycygpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBsZXQgbnVtID0gMDtcbiAgICBmb3IgKFxuICAgICAgbGV0IGkgPSAwO1xuICAgICAgaSA8IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcykuZ2V0U2l6ZSgpO1xuICAgICAgaSsrXG4gICAgKSB7XG4gICAgICBjb25zdCByZWZJOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZVxuICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XG4gICAgICBpZiAocmVmSS5pc051bGwoKSB8fCByZWZJLmlzRXJyb3IoKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlZkkuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKS5nZXRSYXdTdHJpbmcoKSA9PSBFeWVCbGluaykge1xuICAgICAgICBudW0gPSByZWZJLmdldFZhbHVlQnlTdHJpbmcoSWRzKS5nZXRWZWN0b3IoKS5nZXRTaXplKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudW07XG4gIH1cblxuICAvKipcbiAgICog55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44GuSUTjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lEXG4gICAqL1xuICBwdWJsaWMgZ2V0RXllQmxpbmtQYXJhbWV0ZXJJZChpbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgIGlmICghdGhpcy5pc0V4aXN0RXllQmxpbmtQYXJhbWV0ZXJzKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZvciAoXG4gICAgICBsZXQgaSA9IDA7XG4gICAgICBpIDwgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5nZXRTaXplKCk7XG4gICAgICBpKytcbiAgICApIHtcbiAgICAgIGNvbnN0IHJlZkk6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKTtcbiAgICAgIGlmIChyZWZJLmlzTnVsbCgpIHx8IHJlZkkuaXNFcnJvcigpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVmSS5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpLmdldFJhd1N0cmluZygpID09IEV5ZUJsaW5rKSB7XG4gICAgICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgcmVmSS5nZXRWYWx1ZUJ5U3RyaW5nKElkcykuZ2V0VmFsdWVCeUluZGV4KGluZGV4KS5nZXRSYXdTdHJpbmcoKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbBcbiAgICovXG4gIHB1YmxpYyBnZXRMaXBTeW5jUGFyYW1ldGVyQ291bnQoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdExpcFN5bmNQYXJhbWV0ZXJzKCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGxldCBudW0gPSAwO1xuICAgIGZvciAoXG4gICAgICBsZXQgaSA9IDA7XG4gICAgICBpIDwgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5nZXRTaXplKCk7XG4gICAgICBpKytcbiAgICApIHtcbiAgICAgIGNvbnN0IHJlZkk6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKTtcbiAgICAgIGlmIChyZWZJLmlzTnVsbCgpIHx8IHJlZkkuaXNFcnJvcigpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVmSS5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpLmdldFJhd1N0cmluZygpID09IExpcFN5bmMpIHtcbiAgICAgICAgbnVtID0gcmVmSS5nZXRWYWx1ZUJ5U3RyaW5nKElkcykuZ2V0VmVjdG9yKCkuZ2V0U2l6ZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVtO1xuICB9XG5cbiAgLyoqXG4gICAqIOODquODg+ODl+OCt+ODs+OCr+OBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/SURcbiAgICovXG4gIHB1YmxpYyBnZXRMaXBTeW5jUGFyYW1ldGVySWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICBpZiAoIXRoaXMuaXNFeGlzdExpcFN5bmNQYXJhbWV0ZXJzKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZvciAoXG4gICAgICBsZXQgaSA9IDA7XG4gICAgICBpIDwgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5nZXRTaXplKCk7XG4gICAgICBpKytcbiAgICApIHtcbiAgICAgIGNvbnN0IHJlZkk6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0dyb3VwcylcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKTtcbiAgICAgIGlmIChyZWZJLmlzTnVsbCgpIHx8IHJlZkkuaXNFcnJvcigpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVmSS5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpLmdldFJhd1N0cmluZygpID09IExpcFN5bmMpIHtcbiAgICAgICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICByZWZJLmdldFZhbHVlQnlTdHJpbmcoSWRzKS5nZXRWYWx1ZUJ5SW5kZXgoaW5kZXgpLmdldFJhd1N0cmluZygpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+ODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RNb2RlbEZpbGUoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb2MpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog44OG44Kv44K544OB44Oj44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdFRleHR1cmVGaWxlcygpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1RleHR1cmVzKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW9k+OBn+OCiuWIpOWumuOBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RIaXRBcmVhcygpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0hpdEFyZWFzKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+ODleOCoeOCpOODq+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RQaHlzaWNzRmlsZSgpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25WYWx1ZS5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX1BoeXNpY3MpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog44Od44O844K66Kit5a6a44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdFBvc2VGaWxlKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfUG9zZSk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0RXhwcmVzc2lvbkZpbGUoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoXG4gICAgICBGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX0V4cHJlc3Npb25zXG4gICAgKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGlzRXhpc3RNb3Rpb25Hcm91cHMoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruOCreODvOOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lICDjgrDjg6vjg7zjg5flkI1cbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0TW90aW9uR3JvdXBOYW1lKGdyb3VwTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gn5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu44Kt44O844GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUgIOOCsOODq+ODvOODl+WQjVxuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdE1vdGlvblNvdW5kRmlsZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNvdW5kUGF0aCk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjgavlr77lv5zjgZnjgovjg5Xjgqfjg7zjg4njgqTjg7PmmYLplpPjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSAg44Kw44Or44O844OX5ZCNXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0TW90aW9uRmFkZUluKGdyb3VwTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZTogVmFsdWUgPSB0aGlzLl9qc29uVmFsdWVcbiAgICAgIC5hdChGcmVxdWVzdE5vZGUuRnJlcXVlc3ROb2RlX01vdGlvbnMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhncm91cE5hbWUpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSk7XG4gICAgcmV0dXJuICFub2RlLmlzTnVsbCgpICYmICFub2RlLmlzRXJyb3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjgavlr77lv5zjgZnjgovjg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpPjga7jgq3jg7zjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSAg44Kw44Or44O844OX5ZCNXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0TW90aW9uRmFkZU91dChncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG5vZGU6IFZhbHVlID0gdGhpcy5fanNvblZhbHVlXG4gICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Nb3Rpb25zKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoZ3JvdXBOYW1lKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKTtcbiAgICByZXR1cm4gIW5vZGUuaXNOdWxsKCkgJiYgIW5vZGUuaXNFcnJvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZXJEYXRh44Gu44OV44Kh44Kk44Or5ZCN44GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdFVzZXJEYXRhRmlsZSgpOiBib29sZWFuIHtcbiAgICBjb25zdCBub2RlOiBWYWx1ZSA9IHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZpbGVSZWZlcmVuY2VzKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpO1xuICAgIHJldHVybiAhbm9kZS5pc051bGwoKSAmJiAhbm9kZS5pc0Vycm9yKCk7XG4gIH1cblxuICAvKipcbiAgICog55uu44Gx44Gh44Gr5a++5b+c5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44GM5a2Y5Zyo44GZ44KL44GL44Gp44GG44GL44KS56K66KqN44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq3jg7zjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHByaXZhdGUgaXNFeGlzdEV5ZUJsaW5rUGFyYW1ldGVycygpOiBib29sZWFuIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmlzTnVsbCgpIHx8XG4gICAgICB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmlzRXJyb3IoKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAoXG4gICAgICBsZXQgaSA9IDA7XG4gICAgICBpIDwgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5nZXRTaXplKCk7XG4gICAgICArK2lcbiAgICApIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5fanNvblZhbHVlXG4gICAgICAgICAgLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSlcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOYW1lKVxuICAgICAgICAgIC5nZXRSYXdTdHJpbmcoKSA9PSBFeWVCbGlua1xuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavlr77lv5zku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICogQHJldHVybiB0cnVlIOOCreODvOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHJpdmF0ZSBpc0V4aXN0TGlwU3luY1BhcmFtZXRlcnMoKTogYm9vbGVhbiB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5pc051bGwoKSB8fFxuICAgICAgdGhpcy5fanNvblZhbHVlLmF0KEZyZXF1ZXN0Tm9kZS5GcmVxdWVzdE5vZGVfR3JvdXBzKS5pc0Vycm9yKClcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGkgPCB0aGlzLl9qc29uVmFsdWUuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpLmdldFNpemUoKTtcbiAgICAgICsraVxuICAgICkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9qc29uVmFsdWVcbiAgICAgICAgICAuYXQoRnJlcXVlc3ROb2RlLkZyZXF1ZXN0Tm9kZV9Hcm91cHMpXG4gICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5hbWUpXG4gICAgICAgICAgLmdldFJhd1N0cmluZygpID09IExpcFN5bmNcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBfanNvbjogQ3ViaXNtSnNvbjtcbiAgcHJpdmF0ZSBfanNvblZhbHVlOiBjc21WZWN0b3I8VmFsdWU+O1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb2RlbHNldHRpbmdqc29uJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb2RlbFNldHRpbmdKc29uID0gJC5DdWJpc21Nb2RlbFNldHRpbmdKc29uO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb2RlbFNldHRpbmdKc29uID0gJC5DdWJpc21Nb2RlbFNldHRpbmdKc29uO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcblxuLyoqXG4gKiDlkbzlkLjmqZ/og71cbiAqXG4gKiDlkbzlkLjmqZ/og73jgpLmj5DkvpvjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbUJyZWF0aCB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7kvZzmiJBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCk6IEN1YmlzbUJyZWF0aCB7XG4gICAgcmV0dXJuIG5ldyBDdWJpc21CcmVhdGgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7noLTmo4RcbiAgICogQHBhcmFtIGluc3RhbmNlIOWvvuixoeOBrkN1YmlzbUJyZWF0aFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkZWxldGUoaW5zdGFuY2U6IEN1YmlzbUJyZWF0aCk6IHZvaWQge1xuICAgIGlmIChpbnN0YW5jZSAhPSBudWxsKSB7XG4gICAgICBpbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOWRvOWQuOOBruODkeODqeODoeODvOOCv+OBrue0kOOBpeOBkVxuICAgKiBAcGFyYW0gYnJlYXRoUGFyYW1ldGVycyDlkbzlkLjjgpLntJDjgaXjgZHjgZ/jgYTjg5Hjg6njg6Hjg7zjgr/jga7jg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBzZXRQYXJhbWV0ZXJzKGJyZWF0aFBhcmFtZXRlcnM6IGNzbVZlY3RvcjxCcmVhdGhQYXJhbWV0ZXJEYXRhPik6IHZvaWQge1xuICAgIHRoaXMuX2JyZWF0aFBhcmFtZXRlcnMgPSBicmVhdGhQYXJhbWV0ZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIOWRvOWQuOOBq+e0kOOBpeOBhOOBpuOBhOOCi+ODkeODqeODoeODvOOCv+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOWRvOWQuOOBq+e0kOOBpeOBhOOBpuOBhOOCi+ODkeODqeODoeODvOOCv+OBruODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlcnMoKTogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+IHtcbiAgICByZXR1cm4gdGhpcy5fYnJlYXRoUGFyYW1ldGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrBcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHVwZGF0ZVBhcmFtZXRlcnMobW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9jdXJyZW50VGltZSArPSBkZWx0YVRpbWVTZWNvbmRzO1xuXG4gICAgY29uc3QgdDogbnVtYmVyID0gdGhpcy5fY3VycmVudFRpbWUgKiAyLjAgKiAzLjE0MTU5O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICBjb25zdCBkYXRhOiBCcmVhdGhQYXJhbWV0ZXJEYXRhID0gdGhpcy5fYnJlYXRoUGFyYW1ldGVycy5hdChpKTtcblxuICAgICAgbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgICBkYXRhLnBhcmFtZXRlcklkLFxuICAgICAgICBkYXRhLm9mZnNldCArIGRhdGEucGVhayAqIE1hdGguc2luKHQgLyBkYXRhLmN5Y2xlKSxcbiAgICAgICAgZGF0YS53ZWlnaHRcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2N1cnJlbnRUaW1lID0gMC4wO1xuICB9XG5cbiAgX2JyZWF0aFBhcmFtZXRlcnM6IGNzbVZlY3RvcjxCcmVhdGhQYXJhbWV0ZXJEYXRhPjsgLy8g5ZG85ZC444Gr44Gy44KC44Gl44GE44Gm44GE44KL44OR44Op44Oh44O844K/44Gu44Oq44K544OIXG4gIF9jdXJyZW50VGltZTogbnVtYmVyOyAvLyDnqY3nrpfmmYLplpNb56eSXVxufVxuXG4vKipcbiAqIOWRvOWQuOOBruODkeODqeODoeODvOOCv+aDheWgsVxuICovXG5leHBvcnQgY2xhc3MgQnJlYXRoUGFyYW1ldGVyRGF0YSB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogQHBhcmFtIHBhcmFtZXRlcklkICAg5ZG85ZC444KS44Gy44KC44Gl44GR44KL44OR44Op44Oh44O844K/SURcbiAgICogQHBhcmFtIG9mZnNldCAgICAgICAg5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu44Kq44OV44K744OD44OIXG4gICAqIEBwYXJhbSBwZWFrICAgICAgICAgIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBrumrmOOBlVxuICAgKiBAcGFyYW0gY3ljbGUgICAgICAgICDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7lkajmnJ9cbiAgICogQHBhcmFtIHdlaWdodCAgICAgICAg44OR44Op44Oh44O844K/44G444Gu6YeN44G/XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwYXJhbWV0ZXJJZD86IEN1YmlzbUlkSGFuZGxlLFxuICAgIG9mZnNldD86IG51bWJlcixcbiAgICBwZWFrPzogbnVtYmVyLFxuICAgIGN5Y2xlPzogbnVtYmVyLFxuICAgIHdlaWdodD86IG51bWJlclxuICApIHtcbiAgICB0aGlzLnBhcmFtZXRlcklkID0gcGFyYW1ldGVySWQgPT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtZXRlcklkO1xuICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0ID09IHVuZGVmaW5lZCA/IDAuMCA6IG9mZnNldDtcbiAgICB0aGlzLnBlYWsgPSBwZWFrID09IHVuZGVmaW5lZCA/IDAuMCA6IHBlYWs7XG4gICAgdGhpcy5jeWNsZSA9IGN5Y2xlID09IHVuZGVmaW5lZCA/IDAuMCA6IGN5Y2xlO1xuICAgIHRoaXMud2VpZ2h0ID0gd2VpZ2h0ID09IHVuZGVmaW5lZCA/IDAuMCA6IHdlaWdodDtcbiAgfVxuXG4gIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZTsgLy8g5ZG85ZC444KS44Gy44KC44Gl44GR44KL44OR44Op44Oh44O844K/SURcXFxuICBvZmZzZXQ6IG51bWJlcjsgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu44Kq44OV44K744OD44OIXG4gIHBlYWs6IG51bWJlcjsgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu6auY44GVXG4gIGN5Y2xlOiBudW1iZXI7IC8vIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBruWRqOacn1xuICB3ZWlnaHQ6IG51bWJlcjsgLy8g44OR44Op44Oh44O844K/44G444Gu6YeN44G/XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWJyZWF0aCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQnJlYXRoUGFyYW1ldGVyRGF0YSA9ICQuQnJlYXRoUGFyYW1ldGVyRGF0YTtcbiAgZXhwb3J0IHR5cGUgQnJlYXRoUGFyYW1ldGVyRGF0YSA9ICQuQnJlYXRoUGFyYW1ldGVyRGF0YTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUJyZWF0aCA9ICQuQ3ViaXNtQnJlYXRoO1xuICBleHBvcnQgdHlwZSBDdWJpc21CcmVhdGggPSAkLkN1YmlzbUJyZWF0aDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IElDdWJpc21Nb2RlbFNldHRpbmcgfSBmcm9tICcuLi9pY3ViaXNtbW9kZWxzZXR0aW5nJztcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5cbi8qKlxuICog6Ieq5YuV44G+44Gw44Gf44GN5qmf6IO9XG4gKlxuICog6Ieq5YuV44G+44Gw44Gf44GN5qmf6IO944KS5o+Q5L6b44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21FeWVCbGluayB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgZnjgotcbiAgICogQHBhcmFtIG1vZGVsU2V0dGluZyDjg6Ljg4fjg6vjga7oqK3lrprmg4XloLFcbiAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICogQG5vdGUg5byV5pWw44GMTlVMTOOBruWgtOWQiOOAgeODkeODqeODoeODvOOCv0lE44GM6Kit5a6a44GV44KM44Gm44GE44Gq44GE56m644Gu44Kk44Oz44K544K/44Oz44K544KS5L2c5oiQ44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcbiAgICBtb2RlbFNldHRpbmc6IElDdWJpc21Nb2RlbFNldHRpbmcgPSBudWxsXG4gICk6IEN1YmlzbUV5ZUJsaW5rIHtcbiAgICByZXR1cm4gbmV3IEN1YmlzbUV5ZUJsaW5rKG1vZGVsU2V0dGluZyk7XG4gIH1cblxuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu56C05qOEXG4gICAqIEBwYXJhbSBleWVCbGluayDlr77osaHjga5DdWJpc21FeWVCbGlua1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkZWxldGUoZXllQmxpbms6IEN1YmlzbUV5ZUJsaW5rKTogdm9pZCB7XG4gICAgaWYgKGV5ZUJsaW5rICE9IG51bGwpIHtcbiAgICAgIGV5ZUJsaW5rID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44G+44Gw44Gf44GN44Gu6ZaT6ZqU44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBibGlua2luZ0ludGVydmFsIOOBvuOBsOOBn+OBjeOBrumWk+malOOBruaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgc2V0QmxpbmtpbmdJbnRlcnZhbChibGlua2luZ0ludGVydmFsOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9ibGlua2luZ0ludGVydmFsU2Vjb25kcyA9IGJsaW5raW5nSW50ZXJ2YWw7XG4gIH1cblxuICAvKipcbiAgICog44G+44Gw44Gf44GN44Gu44Oi44O844K344On44Oz44Gu6Kmz57Sw6Kit5a6aXG4gICAqIEBwYXJhbSBjbG9zaW5nICAg44G+44G244Gf44KS6ZaJ44GY44KL5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cbiAgICogQHBhcmFtIGNsb3NlZCAgICDjgb7jgbbjgZ/jgpLplonjgZjjgabjgYTjgovli5XkvZzjga7miYDopoHmmYLplpNb56eSXVxuICAgKiBAcGFyYW0gb3BlbmluZyAgIOOBvuOBtuOBn+OCkumWi+OBj+WLleS9nOOBruaJgOimgeaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgc2V0QmxpbmtpbmdTZXR0aW5nKFxuICAgIGNsb3Npbmc6IG51bWJlcixcbiAgICBjbG9zZWQ6IG51bWJlcixcbiAgICBvcGVuaW5nOiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5fY2xvc2luZ1NlY29uZHMgPSBjbG9zaW5nO1xuICAgIHRoaXMuX2Nsb3NlZFNlY29uZHMgPSBjbG9zZWQ7XG4gICAgdGhpcy5fb3BlbmluZ1NlY29uZHMgPSBvcGVuaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIOOBvuOBsOOBn+OBjeOBleOBm+OCi+ODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OI44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZHMg44OR44Op44Oh44O844K/44GuSUTjga7jg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBzZXRQYXJhbWV0ZXJJZHMocGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KTogdm9pZCB7XG4gICAgdGhpcy5fcGFyYW1ldGVySWRzID0gcGFyYW1ldGVySWRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOOBvuOBsOOBn+OBjeOBleOBm+OCi+ODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJJZHMoKTogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPiB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmFtZXRlcklkcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrBcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHVwZGF0ZVBhcmFtZXRlcnMobW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKz0gZGVsdGFUaW1lU2Vjb25kcztcbiAgICBsZXQgcGFyYW1ldGVyVmFsdWU6IG51bWJlcjtcbiAgICBsZXQgdCA9IDAuMDtcblxuICAgIHN3aXRjaCAodGhpcy5fYmxpbmtpbmdTdGF0ZSkge1xuICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9DbG9zaW5nOlxuICAgICAgICB0ID1cbiAgICAgICAgICAodGhpcy5fdXNlclRpbWVTZWNvbmRzIC0gdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzKSAvXG4gICAgICAgICAgdGhpcy5fY2xvc2luZ1NlY29uZHM7XG5cbiAgICAgICAgaWYgKHQgPj0gMS4wKSB7XG4gICAgICAgICAgdCA9IDEuMDtcbiAgICAgICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfQ2xvc2VkO1xuICAgICAgICAgIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcyA9IHRoaXMuX3VzZXJUaW1lU2Vjb25kcztcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmFtZXRlclZhbHVlID0gMS4wIC0gdDtcblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfQ2xvc2VkOlxuICAgICAgICB0ID1cbiAgICAgICAgICAodGhpcy5fdXNlclRpbWVTZWNvbmRzIC0gdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzKSAvXG4gICAgICAgICAgdGhpcy5fY2xvc2VkU2Vjb25kcztcblxuICAgICAgICBpZiAodCA+PSAxLjApIHtcbiAgICAgICAgICB0aGlzLl9ibGlua2luZ1N0YXRlID0gRXllU3RhdGUuRXllU3RhdGVfT3BlbmluZztcbiAgICAgICAgICB0aGlzLl9zdGF0ZVN0YXJ0VGltZVNlY29uZHMgPSB0aGlzLl91c2VyVGltZVNlY29uZHM7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDAuMDtcblxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRXllU3RhdGUuRXllU3RhdGVfT3BlbmluZzpcbiAgICAgICAgdCA9XG4gICAgICAgICAgKHRoaXMuX3VzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcykgL1xuICAgICAgICAgIHRoaXMuX29wZW5pbmdTZWNvbmRzO1xuXG4gICAgICAgIGlmICh0ID49IDEuMCkge1xuICAgICAgICAgIHQgPSAxLjA7XG4gICAgICAgICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0ludGVydmFsO1xuICAgICAgICAgIHRoaXMuX25leHRCbGlua2luZ1RpbWUgPSB0aGlzLmRldGVybWluTmV4dEJsaW5raW5nVGltaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IHQ7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEV5ZVN0YXRlLkV5ZVN0YXRlX0ludGVydmFsOlxuICAgICAgICBpZiAodGhpcy5fbmV4dEJsaW5raW5nVGltZSA8IHRoaXMuX3VzZXJUaW1lU2Vjb25kcykge1xuICAgICAgICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9DbG9zaW5nO1xuICAgICAgICAgIHRoaXMuX3N0YXRlU3RhcnRUaW1lU2Vjb25kcyA9IHRoaXMuX3VzZXJUaW1lU2Vjb25kcztcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmFtZXRlclZhbHVlID0gMS4wO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBFeWVTdGF0ZS5FeWVTdGF0ZV9GaXJzdDpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMuX2JsaW5raW5nU3RhdGUgPSBFeWVTdGF0ZS5FeWVTdGF0ZV9JbnRlcnZhbDtcbiAgICAgICAgdGhpcy5fbmV4dEJsaW5raW5nVGltZSA9IHRoaXMuZGV0ZXJtaW5OZXh0QmxpbmtpbmdUaW1pbmcoKTtcblxuICAgICAgICBwYXJhbWV0ZXJWYWx1ZSA9IDEuMDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCFDdWJpc21FeWVCbGluay5DbG9zZUlmWmVybykge1xuICAgICAgcGFyYW1ldGVyVmFsdWUgPSAtcGFyYW1ldGVyVmFsdWU7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9wYXJhbWV0ZXJJZHMuYXQoaSksIHBhcmFtZXRlclZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSBtb2RlbFNldHRpbmcg44Oi44OH44Or44Gu6Kit5a6a5oOF5aCxXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IobW9kZWxTZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nKSB7XG4gICAgdGhpcy5fYmxpbmtpbmdTdGF0ZSA9IEV5ZVN0YXRlLkV5ZVN0YXRlX0ZpcnN0O1xuICAgIHRoaXMuX25leHRCbGlua2luZ1RpbWUgPSAwLjA7XG4gICAgdGhpcy5fc3RhdGVTdGFydFRpbWVTZWNvbmRzID0gMC4wO1xuICAgIHRoaXMuX2JsaW5raW5nSW50ZXJ2YWxTZWNvbmRzID0gNC4wO1xuICAgIHRoaXMuX2Nsb3NpbmdTZWNvbmRzID0gMC4xO1xuICAgIHRoaXMuX2Nsb3NlZFNlY29uZHMgPSAwLjA1O1xuICAgIHRoaXMuX29wZW5pbmdTZWNvbmRzID0gMC4xNTtcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XG4gICAgdGhpcy5fcGFyYW1ldGVySWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4oKTtcblxuICAgIGlmIChtb2RlbFNldHRpbmcgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kZWxTZXR0aW5nLmdldEV5ZUJsaW5rUGFyYW1ldGVyQ291bnQoKTsgKytpKSB7XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJJZHMucHVzaEJhY2sobW9kZWxTZXR0aW5nLmdldEV5ZUJsaW5rUGFyYW1ldGVySWQoaSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDmrKHjga7nnqzjgY3jga7jgr/jgqTjg5/jg7PjgrDjga7msbrlrppcbiAgICpcbiAgICogQHJldHVybiDmrKHjga7jgb7jgbDjgZ/jgY3jgpLooYzjgYbmmYLliLtb56eSXVxuICAgKi9cbiAgcHVibGljIGRldGVybWluTmV4dEJsaW5raW5nVGltaW5nKCk6IG51bWJlciB7XG4gICAgY29uc3QgcjogbnVtYmVyID0gTWF0aC5yYW5kb20oKTtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICsgciAqICgyLjAgKiB0aGlzLl9ibGlua2luZ0ludGVydmFsU2Vjb25kcyAtIDEuMClcbiAgICApO1xuICB9XG5cbiAgX2JsaW5raW5nU3RhdGU6IG51bWJlcjsgLy8g54++5Zyo44Gu54q25oWLXG4gIF9wYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47IC8vIOaTjeS9nOWvvuixoeOBruODkeODqeODoeODvOOCv+OBrklE44Gu44Oq44K544OIXG4gIF9uZXh0QmxpbmtpbmdUaW1lOiBudW1iZXI7IC8vIOasoeOBruOBvuOBsOOBn+OBjeOBruaZguWIu1vnp5JdXG4gIF9zdGF0ZVN0YXJ0VGltZVNlY29uZHM6IG51bWJlcjsgLy8g54++5Zyo44Gu54q25oWL44GM6ZaL5aeL44GX44Gf5pmC5Yi7W+enkl1cbiAgX2JsaW5raW5nSW50ZXJ2YWxTZWNvbmRzOiBudW1iZXI7IC8vIOOBvuOBsOOBn+OBjeOBrumWk+malFvnp5JdXG4gIF9jbG9zaW5nU2Vjb25kczogbnVtYmVyOyAvLyDjgb7jgbbjgZ/jgpLplonjgZjjgovli5XkvZzjga7miYDopoHmmYLplpNb56eSXVxuICBfY2xvc2VkU2Vjb25kczogbnVtYmVyOyAvLyDjgb7jgbbjgZ/jgpLplonjgZjjgabjgYTjgovli5XkvZzjga7miYDopoHmmYLplpNb56eSXVxuICBfb3BlbmluZ1NlY29uZHM6IG51bWJlcjsgLy8g44G+44G244Gf44KS6ZaL44GP5YuV5L2c44Gu5omA6KaB5pmC6ZaTW+enkl1cbiAgX3VzZXJUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuXG4gIC8qKlxuICAgKiBJROOBp+aMh+WumuOBleOCjOOBn+ebruOBruODkeODqeODoeODvOOCv+OBjOOAgTDjga7jgajjgY3jgavplonjgZjjgovjgarjgokgdHJ1ZSDjgIEx44Gu5pmC44Gr6ZaJ44GY44KL44Gq44KJIGZhbHNlIOOAglxuICAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IENsb3NlSWZaZXJvOiBib29sZWFuID0gdHJ1ZTtcbn1cblxuLyoqXG4gKiDjgb7jgbDjgZ/jgY3jga7nirbmhYtcbiAqXG4gKiDjgb7jgbDjgZ/jgY3jga7nirbmhYvjgpLooajjgZnliJfmjJnlnotcbiAqL1xuZXhwb3J0IGVudW0gRXllU3RhdGUge1xuICBFeWVTdGF0ZV9GaXJzdCA9IDAsIC8vIOWIneacn+eKtuaFi1xuICBFeWVTdGF0ZV9JbnRlcnZhbCwgLy8g44G+44Gw44Gf44GN44GX44Gm44GE44Gq44GE54q25oWLXG4gIEV5ZVN0YXRlX0Nsb3NpbmcsIC8vIOOBvuOBtuOBn+OBjOmWieOBmOOBpuOBhOOBj+mAlOS4reOBrueKtuaFi1xuICBFeWVTdGF0ZV9DbG9zZWQsIC8vIOOBvuOBtuOBn+OBjOmWieOBmOOBpuOBhOOCi+eKtuaFi1xuICBFeWVTdGF0ZV9PcGVuaW5nLCAvLyDjgb7jgbbjgZ/jgYzplovjgYTjgabjgYTjgY/pgJTkuK3jga7nirbmhYtcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtZXllYmxpbmsnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUV5ZUJsaW5rID0gJC5DdWJpc21FeWVCbGluaztcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtRXllQmxpbmsgPSAkLkN1YmlzbUV5ZUJsaW5rO1xuICBleHBvcnQgY29uc3QgRXllU3RhdGUgPSAkLkV5ZVN0YXRlO1xuICBleHBvcnQgdHlwZSBFeWVTdGF0ZSA9ICQuRXllU3RhdGU7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IGNzbVZlY3RvciwgaXRlcmF0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Kc29uLCBWYWx1ZSB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuXG5jb25zdCBFcHNpbG9uID0gMC4wMDE7XG5jb25zdCBEZWZhdWx0RmFkZUluU2Vjb25kcyA9IDAuNTtcblxuLy8gUG9zZS5qc29u44Gu44K/44KwXG5jb25zdCBGYWRlSW4gPSAnRmFkZUluVGltZSc7XG5jb25zdCBMaW5rID0gJ0xpbmsnO1xuY29uc3QgR3JvdXBzID0gJ0dyb3Vwcyc7XG5jb25zdCBJZCA9ICdJZCc7XG5cbi8qKlxuICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu6Kit5a6aXG4gKlxuICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu566h55CG44Go6Kit5a6a44KS6KGM44GG44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Qb3NlIHtcbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxuICAgKiBAcGFyYW0gcG9zZTNqc29uIHBvc2UzLmpzb27jga7jg4fjg7zjgr9cbiAgICogQHBhcmFtIHNpemUgcG9zZTMuanNvbuOBruODh+ODvOOCv+OBruOCteOCpOOCultieXRlXVxuICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUocG9zZTNqc29uOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogQ3ViaXNtUG9zZSB7XG4gICAgY29uc3QgcmV0OiBDdWJpc21Qb3NlID0gbmV3IEN1YmlzbVBvc2UoKTtcbiAgICBjb25zdCBqc29uOiBDdWJpc21Kc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUocG9zZTNqc29uLCBzaXplKTtcbiAgICBjb25zdCByb290OiBWYWx1ZSA9IGpzb24uZ2V0Um9vdCgpO1xuXG4gICAgLy8g44OV44Kn44O844OJ5pmC6ZaT44Gu5oyH5a6aXG4gICAgaWYgKCFyb290LmdldFZhbHVlQnlTdHJpbmcoRmFkZUluKS5pc051bGwoKSkge1xuICAgICAgcmV0Ll9mYWRlVGltZVNlY29uZHMgPSByb290XG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJbilcbiAgICAgICAgLnRvRmxvYXQoRGVmYXVsdEZhZGVJblNlY29uZHMpO1xuXG4gICAgICBpZiAocmV0Ll9mYWRlVGltZVNlY29uZHMgPD0gMC4wKSB7XG4gICAgICAgIHJldC5fZmFkZVRpbWVTZWNvbmRzID0gRGVmYXVsdEZhZGVJblNlY29uZHM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8g44OR44O844OE44Kw44Or44O844OXXG4gICAgY29uc3QgcG9zZUxpc3RJbmZvOiBWYWx1ZSA9IHJvb3QuZ2V0VmFsdWVCeVN0cmluZyhHcm91cHMpO1xuICAgIGNvbnN0IHBvc2VDb3VudDogbnVtYmVyID0gcG9zZUxpc3RJbmZvLmdldFNpemUoKTtcblxuICAgIGZvciAobGV0IHBvc2VJbmRleCA9IDA7IHBvc2VJbmRleCA8IHBvc2VDb3VudDsgKytwb3NlSW5kZXgpIHtcbiAgICAgIGNvbnN0IGlkTGlzdEluZm86IFZhbHVlID0gcG9zZUxpc3RJbmZvLmdldFZhbHVlQnlJbmRleChwb3NlSW5kZXgpO1xuICAgICAgY29uc3QgaWRDb3VudDogbnVtYmVyID0gaWRMaXN0SW5mby5nZXRTaXplKCk7XG4gICAgICBsZXQgZ3JvdXBDb3VudCA9IDA7XG5cbiAgICAgIGZvciAobGV0IGdyb3VwSW5kZXggPSAwOyBncm91cEluZGV4IDwgaWRDb3VudDsgKytncm91cEluZGV4KSB7XG4gICAgICAgIGNvbnN0IHBhcnRJbmZvOiBWYWx1ZSA9IGlkTGlzdEluZm8uZ2V0VmFsdWVCeUluZGV4KGdyb3VwSW5kZXgpO1xuICAgICAgICBjb25zdCBwYXJ0RGF0YTogUGFydERhdGEgPSBuZXcgUGFydERhdGEoKTtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlID1cbiAgICAgICAgICBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgICBwYXJ0SW5mby5nZXRWYWx1ZUJ5U3RyaW5nKElkKS5nZXRSYXdTdHJpbmcoKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgcGFydERhdGEucGFydElkID0gcGFyYW1ldGVySWQ7XG5cbiAgICAgICAgLy8g44Oq44Oz44Kv44GZ44KL44OR44O844OE44Gu6Kit5a6aXG4gICAgICAgIGlmICghcGFydEluZm8uZ2V0VmFsdWVCeVN0cmluZyhMaW5rKS5pc051bGwoKSkge1xuICAgICAgICAgIGNvbnN0IGxpbmtMaXN0SW5mbzogVmFsdWUgPSBwYXJ0SW5mby5nZXRWYWx1ZUJ5U3RyaW5nKExpbmspO1xuICAgICAgICAgIGNvbnN0IGxpbmtDb3VudDogbnVtYmVyID0gbGlua0xpc3RJbmZvLmdldFNpemUoKTtcblxuICAgICAgICAgIGZvciAobGV0IGxpbmtJbmRleCA9IDA7IGxpbmtJbmRleCA8IGxpbmtDb3VudDsgKytsaW5rSW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmtQYXJ0OiBQYXJ0RGF0YSA9IG5ldyBQYXJ0RGF0YSgpO1xuICAgICAgICAgICAgY29uc3QgbGlua0lkOiBDdWJpc21JZEhhbmRsZSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgICAgICAgICAgbGlua0xpc3RJbmZvLmdldFZhbHVlQnlJbmRleChsaW5rSW5kZXgpLmdldFN0cmluZygpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBsaW5rUGFydC5wYXJ0SWQgPSBsaW5rSWQ7XG5cbiAgICAgICAgICAgIHBhcnREYXRhLmxpbmsucHVzaEJhY2sobGlua1BhcnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldC5fcGFydEdyb3Vwcy5wdXNoQmFjayhwYXJ0RGF0YS5jbG9uZSgpKTtcblxuICAgICAgICArK2dyb3VwQ291bnQ7XG4gICAgICB9XG5cbiAgICAgIHJldC5fcGFydEdyb3VwQ291bnRzLnB1c2hCYWNrKGdyb3VwQ291bnQpO1xuICAgIH1cblxuICAgIEN1YmlzbUpzb24uZGVsZXRlKGpzb24pO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnoLTmo4TjgZnjgotcbiAgICogQHBhcmFtIHBvc2Ug5a++6LGh44GuQ3ViaXNtUG9zZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkZWxldGUocG9zZTogQ3ViaXNtUG9zZSk6IHZvaWQge1xuICAgIGlmIChwb3NlICE9IG51bGwpIHtcbiAgICAgIHBvc2UgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrBcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHVwZGF0ZVBhcmFtZXRlcnMobW9kZWw6IEN1YmlzbU1vZGVsLCBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyDliY3lm57jga7jg6Ljg4fjg6vjgajlkIzjgZjjgafjgarjgYTloLTlkIjjga/liJ3mnJ/ljJbjgYzlv4XopoFcbiAgICBpZiAobW9kZWwgIT0gdGhpcy5fbGFzdE1vZGVsKSB7XG4gICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jgqTjg7Pjg4fjg4Pjgq/jgrnjga7liJ3mnJ/ljJZcbiAgICAgIHRoaXMucmVzZXQobW9kZWwpO1xuICAgIH1cblxuICAgIHRoaXMuX2xhc3RNb2RlbCA9IG1vZGVsO1xuXG4gICAgLy8g6Kit5a6a44GL44KJ5pmC6ZaT44KS5aSJ5pu044GZ44KL44Go44CB57WM6YGO5pmC6ZaT44GM44Oe44Kk44OK44K544Gr44Gq44KL5LqL44GM44GC44KL44Gu44Gn44CB57WM6YGO5pmC6ZaTMOOBqOOBl+OBpuWvvuW/nFxuICAgIGlmIChkZWx0YVRpbWVTZWNvbmRzIDwgMC4wKSB7XG4gICAgICBkZWx0YVRpbWVTZWNvbmRzID0gMC4wO1xuICAgIH1cblxuICAgIGxldCBiZWdpbkluZGV4ID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGFydEdyb3VwQ291bnRzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBjb25zdCBwYXJ0R3JvdXBDb3VudDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3VwQ291bnRzLmF0KGkpO1xuXG4gICAgICB0aGlzLmRvRmFkZShtb2RlbCwgZGVsdGFUaW1lU2Vjb25kcywgYmVnaW5JbmRleCwgcGFydEdyb3VwQ291bnQpO1xuXG4gICAgICBiZWdpbkluZGV4ICs9IHBhcnRHcm91cENvdW50O1xuICAgIH1cblxuICAgIHRoaXMuY29weVBhcnRPcGFjaXRpZXMobW9kZWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIOihqOekuuOCkuWIneacn+WMllxuICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBub3RlIOS4jemAj+aYjuW6puOBruWIneacn+WApOOBjDDjgafjgarjgYTjg5Hjg6njg6Hjg7zjgr/jga/jgIHkuI3pgI/mmI7luqbjgpLvvJHjgavoqK3lrprjgZnjgotcbiAgICovXG4gIHB1YmxpYyByZXNldChtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICBsZXQgYmVnaW5JbmRleCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BhcnRHcm91cENvdW50cy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgY29uc3QgZ3JvdXBDb3VudDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3VwQ291bnRzLmF0KGkpO1xuXG4gICAgICBmb3IgKGxldCBqOiBudW1iZXIgPSBiZWdpbkluZGV4OyBqIDwgYmVnaW5JbmRleCArIGdyb3VwQ291bnQ7ICsraikge1xuICAgICAgICB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLmluaXRpYWxpemUobW9kZWwpO1xuXG4gICAgICAgIGNvbnN0IHBhcnRzSW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaikucGFydEluZGV4O1xuICAgICAgICBjb25zdCBwYXJhbUluZGV4OiBudW1iZXIgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGopLnBhcmFtZXRlckluZGV4O1xuXG4gICAgICAgIGlmIChwYXJ0c0luZGV4IDwgMCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbW9kZWwuc2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRzSW5kZXgsIGogPT0gYmVnaW5JbmRleCA/IDEuMCA6IDAuMCk7XG4gICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbUluZGV4LCBqID09IGJlZ2luSW5kZXggPyAxLjAgOiAwLjApO1xuXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdGhpcy5fcGFydEdyb3Vwcy5hdChqKS5saW5rLmdldFNpemUoKTsgKytrKSB7XG4gICAgICAgICAgdGhpcy5fcGFydEdyb3Vwcy5hdChqKS5saW5rLmF0KGspLmluaXRpYWxpemUobW9kZWwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGJlZ2luSW5kZXggKz0gZ3JvdXBDb3VudDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44KS44Kz44OU44O8XG4gICAqXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICovXG4gIHB1YmxpYyBjb3B5UGFydE9wYWNpdGllcyhtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICBmb3IgKFxuICAgICAgbGV0IGdyb3VwSW5kZXggPSAwO1xuICAgICAgZ3JvdXBJbmRleCA8IHRoaXMuX3BhcnRHcm91cHMuZ2V0U2l6ZSgpO1xuICAgICAgKytncm91cEluZGV4XG4gICAgKSB7XG4gICAgICBjb25zdCBwYXJ0RGF0YTogUGFydERhdGEgPSB0aGlzLl9wYXJ0R3JvdXBzLmF0KGdyb3VwSW5kZXgpO1xuXG4gICAgICBpZiAocGFydERhdGEubGluay5nZXRTaXplKCkgPT0gMCkge1xuICAgICAgICBjb250aW51ZTsgLy8g6YCj5YuV44GZ44KL44OR44Op44Oh44O844K/44Gv44Gq44GEXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBhcnRJbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChncm91cEluZGV4KS5wYXJ0SW5kZXg7XG4gICAgICBjb25zdCBvcGFjaXR5OiBudW1iZXIgPSBtb2RlbC5nZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydEluZGV4KTtcblxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGxpbmtJbmRleCA9IDA7XG4gICAgICAgIGxpbmtJbmRleCA8IHBhcnREYXRhLmxpbmsuZ2V0U2l6ZSgpO1xuICAgICAgICArK2xpbmtJbmRleFxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IGxpbmtQYXJ0OiBQYXJ0RGF0YSA9IHBhcnREYXRhLmxpbmsuYXQobGlua0luZGV4KTtcbiAgICAgICAgY29uc3QgbGlua1BhcnRJbmRleDogbnVtYmVyID0gbGlua1BhcnQucGFydEluZGV4O1xuXG4gICAgICAgIGlmIChsaW5rUGFydEluZGV4IDwgMCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbW9kZWwuc2V0UGFydE9wYWNpdHlCeUluZGV4KGxpbmtQYXJ0SW5kZXgsIG9wYWNpdHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7jg5Xjgqfjg7zjg4nmk43kvZzjgpLooYzjgYbjgIJcbiAgICogQHBhcmFtIG1vZGVsIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpNb56eSXVxuICAgKiBAcGFyYW0gYmVnaW5JbmRleCDjg5Xjgqfjg7zjg4nmk43kvZzjgpLooYzjgYbjg5Hjg7zjg4TjgrDjg6vjg7zjg5fjga7lhYjpoK3jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHBhcnRHcm91cENvdW50IOODleOCp+ODvOODieaTjeS9nOOCkuihjOOBhuODkeODvOODhOOCsOODq+ODvOODl+OBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGRvRmFkZShcbiAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyLFxuICAgIGJlZ2luSW5kZXg6IG51bWJlcixcbiAgICBwYXJ0R3JvdXBDb3VudDogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIGxldCB2aXNpYmxlUGFydEluZGV4ID0gLTE7XG4gICAgbGV0IG5ld09wYWNpdHkgPSAxLjA7XG5cbiAgICBjb25zdCBwaGkgPSAwLjU7XG4gICAgY29uc3QgYmFja09wYWNpdHlUaHJlc2hvbGQgPSAwLjE1O1xuXG4gICAgLy8g54++5Zyo44CB6KGo56S654q25oWL44Gr44Gq44Gj44Gm44GE44KL44OR44O844OE44KS5Y+W5b6XXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gYmVnaW5JbmRleDsgaSA8IGJlZ2luSW5kZXggKyBwYXJ0R3JvdXBDb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBwYXJ0SW5kZXg6IG51bWJlciA9IHRoaXMuX3BhcnRHcm91cHMuYXQoaSkucGFydEluZGV4O1xuICAgICAgY29uc3QgcGFyYW1JbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChpKS5wYXJhbWV0ZXJJbmRleDtcblxuICAgICAgaWYgKG1vZGVsLmdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbUluZGV4KSA+IEVwc2lsb24pIHtcbiAgICAgICAgaWYgKHZpc2libGVQYXJ0SW5kZXggPj0gMCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdmlzaWJsZVBhcnRJbmRleCA9IGk7XG4gICAgICAgIG5ld09wYWNpdHkgPSBtb2RlbC5nZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydEluZGV4KTtcblxuICAgICAgICAvLyDmlrDjgZfjgYTkuI3pgI/mmI7luqbjgpLoqIjnrpdcbiAgICAgICAgbmV3T3BhY2l0eSArPSBkZWx0YVRpbWVTZWNvbmRzIC8gdGhpcy5fZmFkZVRpbWVTZWNvbmRzO1xuXG4gICAgICAgIGlmIChuZXdPcGFjaXR5ID4gMS4wKSB7XG4gICAgICAgICAgbmV3T3BhY2l0eSA9IDEuMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2aXNpYmxlUGFydEluZGV4IDwgMCkge1xuICAgICAgdmlzaWJsZVBhcnRJbmRleCA9IDA7XG4gICAgICBuZXdPcGFjaXR5ID0gMS4wO1xuICAgIH1cblxuICAgIC8vIOihqOekuuODkeODvOODhOOAgemdnuihqOekuuODkeODvOODhOOBruS4jemAj+aYjuW6puOCkuioreWumuOBmeOCi1xuICAgIGZvciAobGV0IGk6IG51bWJlciA9IGJlZ2luSW5kZXg7IGkgPCBiZWdpbkluZGV4ICsgcGFydEdyb3VwQ291bnQ7ICsraSkge1xuICAgICAgY29uc3QgcGFydHNJbmRleDogbnVtYmVyID0gdGhpcy5fcGFydEdyb3Vwcy5hdChpKS5wYXJ0SW5kZXg7XG5cbiAgICAgIC8vIOihqOekuuODkeODvOODhOOBruioreWumlxuICAgICAgaWYgKHZpc2libGVQYXJ0SW5kZXggPT0gaSkge1xuICAgICAgICBtb2RlbC5zZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydHNJbmRleCwgbmV3T3BhY2l0eSk7IC8vIOWFiOOBq+ioreWumlxuICAgICAgfVxuICAgICAgLy8g6Z2e6KGo56S644OR44O844OE44Gu6Kit5a6aXG4gICAgICBlbHNlIHtcbiAgICAgICAgbGV0IG9wYWNpdHk6IG51bWJlciA9IG1vZGVsLmdldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0c0luZGV4KTtcbiAgICAgICAgbGV0IGExOiBudW1iZXI7IC8vIOioiOeul+OBq+OCiOOBo+OBpuaxguOCgeOCieOCjOOCi+S4jemAj+aYjuW6plxuXG4gICAgICAgIGlmIChuZXdPcGFjaXR5IDwgcGhpKSB7XG4gICAgICAgICAgYTEgPSAobmV3T3BhY2l0eSAqIChwaGkgLSAxKSkgLyBwaGkgKyAxLjA7IC8vICgwLDEpLChwaGkscGhpKeOCkumAmuOCi+ebtOe3muW8j1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGExID0gKCgxIC0gbmV3T3BhY2l0eSkgKiBwaGkpIC8gKDEuMCAtIHBoaSk7IC8vICgxLDApLChwaGkscGhpKeOCkumAmuOCi+ebtOe3muW8j1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g6IOM5pmv44Gu6KaL44GI44KL5Ymy5ZCI44KS5Yi26ZmQ44GZ44KL5aC05ZCIXG4gICAgICAgIGNvbnN0IGJhY2tPcGFjaXR5OiBudW1iZXIgPSAoMS4wIC0gYTEpICogKDEuMCAtIG5ld09wYWNpdHkpO1xuXG4gICAgICAgIGlmIChiYWNrT3BhY2l0eSA+IGJhY2tPcGFjaXR5VGhyZXNob2xkKSB7XG4gICAgICAgICAgYTEgPSAxLjAgLSBiYWNrT3BhY2l0eVRocmVzaG9sZCAvICgxLjAgLSBuZXdPcGFjaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcGFjaXR5ID4gYTEpIHtcbiAgICAgICAgICBvcGFjaXR5ID0gYTE7IC8vIOioiOeul+OBruS4jemAj+aYjuW6puOCiOOCiuOCguWkp+OBjeOBkeOCjOOBsO+8iOa/g+OBkeOCjOOBsO+8ieS4jemAj+aYjuW6puOCkuS4iuOBkuOCi1xuICAgICAgICB9XG5cbiAgICAgICAgbW9kZWwuc2V0UGFydE9wYWNpdHlCeUluZGV4KHBhcnRzSW5kZXgsIG9wYWNpdHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9mYWRlVGltZVNlY29uZHMgPSBEZWZhdWx0RmFkZUluU2Vjb25kcztcbiAgICB0aGlzLl9sYXN0TW9kZWwgPSBudWxsO1xuICAgIHRoaXMuX3BhcnRHcm91cHMgPSBuZXcgY3NtVmVjdG9yPFBhcnREYXRhPigpO1xuICAgIHRoaXMuX3BhcnRHcm91cENvdW50cyA9IG5ldyBjc21WZWN0b3I8bnVtYmVyPigpO1xuICB9XG5cbiAgX3BhcnRHcm91cHM6IGNzbVZlY3RvcjxQYXJ0RGF0YT47IC8vIOODkeODvOODhOOCsOODq+ODvOODl1xuICBfcGFydEdyb3VwQ291bnRzOiBjc21WZWN0b3I8bnVtYmVyPjsgLy8g44Gd44KM44Ge44KM44Gu44OR44O844OE44Kw44Or44O844OX44Gu5YCL5pWwXG4gIF9mYWRlVGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OV44Kn44O844OJ5pmC6ZaTW+enkl1cbiAgX2xhc3RNb2RlbDogQ3ViaXNtTW9kZWw7IC8vIOWJjeWbnuaTjeS9nOOBl+OBn+ODouODh+ODq1xufVxuXG4vKipcbiAqIOODkeODvOODhOOBq+OBvuOBpOOCj+OCi+ODh+ODvOOCv+OCkueuoeeQhlxuICovXG5leHBvcnQgY2xhc3MgUGFydERhdGEge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2PzogUGFydERhdGEpIHtcbiAgICB0aGlzLnBhcmFtZXRlckluZGV4ID0gMDtcbiAgICB0aGlzLnBhcnRJbmRleCA9IDA7XG4gICAgdGhpcy5saW5rID0gbmV3IGNzbVZlY3RvcjxQYXJ0RGF0YT4oKTtcblxuICAgIGlmICh2ICE9IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5wYXJ0SWQgPSB2LnBhcnRJZDtcblxuICAgICAgZm9yIChcbiAgICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxQYXJ0RGF0YT4gPSB2LmxpbmsuYmVnaW4oKTtcbiAgICAgICAgaXRlLm5vdEVxdWFsKHYubGluay5lbmQoKSk7XG4gICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMubGluay5wdXNoQmFjayhpdGUucHRyKCkuY2xvbmUoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqID3mvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBhc3NpZ25tZW50KHY6IFBhcnREYXRhKTogUGFydERhdGEge1xuICAgIHRoaXMucGFydElkID0gdi5wYXJ0SWQ7XG5cbiAgICBmb3IgKFxuICAgICAgY29uc3QgaXRlOiBpdGVyYXRvcjxQYXJ0RGF0YT4gPSB2LmxpbmsuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh2LmxpbmsuZW5kKCkpO1xuICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICB0aGlzLmxpbmsucHVzaEJhY2soaXRlLnB0cigpLmNsb25lKCkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIneacn+WMllxuICAgKiBAcGFyYW0gbW9kZWwg5Yid5pyf5YyW44Gr5L2/55So44GZ44KL44Oi44OH44OrXG4gICAqL1xuICBwdWJsaWMgaW5pdGlhbGl6ZShtb2RlbDogQ3ViaXNtTW9kZWwpOiB2b2lkIHtcbiAgICB0aGlzLnBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgodGhpcy5wYXJ0SWQpO1xuICAgIHRoaXMucGFydEluZGV4ID0gbW9kZWwuZ2V0UGFydEluZGV4KHRoaXMucGFydElkKTtcblxuICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleCh0aGlzLnBhcmFtZXRlckluZGV4LCAxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqrjg5bjgrjjgqfjgq/jg4jjga7jgrPjg5Tjg7zjgpLnlJ/miJDjgZnjgotcbiAgICovXG4gIHB1YmxpYyBjbG9uZSgpOiBQYXJ0RGF0YSB7XG4gICAgY29uc3QgY2xvbmVQYXJ0RGF0YTogUGFydERhdGEgPSBuZXcgUGFydERhdGEoKTtcblxuICAgIGNsb25lUGFydERhdGEucGFydElkID0gdGhpcy5wYXJ0SWQ7XG4gICAgY2xvbmVQYXJ0RGF0YS5wYXJhbWV0ZXJJbmRleCA9IHRoaXMucGFyYW1ldGVySW5kZXg7XG4gICAgY2xvbmVQYXJ0RGF0YS5wYXJ0SW5kZXggPSB0aGlzLnBhcnRJbmRleDtcbiAgICBjbG9uZVBhcnREYXRhLmxpbmsgPSBuZXcgY3NtVmVjdG9yPFBhcnREYXRhPigpO1xuXG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPFBhcnREYXRhPiA9IHRoaXMubGluay5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMubGluay5lbmQoKSk7XG4gICAgICBpdGUuaW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGNsb25lUGFydERhdGEubGluay5wdXNoQmFjayhpdGUucHRyKCkuY2xvbmUoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lUGFydERhdGE7XG4gIH1cblxuICBwYXJ0SWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg7zjg4RJRFxuICBwYXJhbWV0ZXJJbmRleDogbnVtYmVyOyAvLyDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgcGFydEluZGV4OiBudW1iZXI7IC8vIOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICBsaW5rOiBjc21WZWN0b3I8UGFydERhdGE+OyAvLyDpgKPli5XjgZnjgovjg5Hjg6njg6Hjg7zjgr9cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtcG9zZSc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUG9zZSA9ICQuQ3ViaXNtUG9zZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUG9zZSA9ICQuQ3ViaXNtUG9zZTtcbiAgZXhwb3J0IGNvbnN0IFBhcnREYXRhID0gJC5QYXJ0RGF0YTtcbiAgZXhwb3J0IHR5cGUgUGFydERhdGEgPSAkLlBhcnREYXRhO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IGNzbU1hcCB9IGZyb20gJy4vdHlwZS9jc21tYXAnO1xuXG4vKipcbiAqIOODouODh+ODq+ioreWumuaDheWgseOCkuWPluOCiuaJseOBhumWouaVsOOCkuWuo+iogOOBl+OBn+e0lOeyi+S7ruaDs+OCr+ODqeOCueOAglxuICpcbiAqIOOBk+OBruOCr+ODqeOCueOCkue2meaJv+OBmeOCi+OBk+OBqOOBp+OAgeODouODh+ODq+ioreWumuaDheWgseOCkuWPluOCiuaJseOBhuOCr+ODqeOCueOBq+OBquOCi+OAglxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSUN1YmlzbU1vZGVsU2V0dGluZyB7XG4gIC8qKlxuICAgKiBNb2Pjg5XjgqHjgqTjg6vjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiBNb2Pjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNb2RlbEZpbGVOYW1lKCk6IHN0cmluZztcblxuICAvKipcbiAgICog44Oi44OH44Or44GM5L2/55So44GZ44KL44OG44Kv44K544OB44Oj44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIOODhuOCr+OCueODgeODo+OBruaVsFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldFRleHR1cmVDb3VudCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIOODhuOCr+OCueODgeODo+OBjOmFjee9ruOBleOCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBjOmFjee9ruOBleOCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldFRleHR1cmVEaXJlY3RvcnkoKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgYzkvb/nlKjjgZnjgovjg4bjgq/jgrnjg4Hjg6Pjga7lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODhuOCr+OCueODgeODo+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldFRleHR1cmVGaWxlTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/lvZPjgZ/jgorliKTlrprjga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgZ/lvZPjgZ/jgorliKTlrprjga7mlbBcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRIaXRBcmVhc0NvdW50KCk6IG51bWJlcjtcblxuICAvKipcbiAgICog5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44GfSUTjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBrmluZGV4XG4gICAqIEByZXR1cm4g5b2T44Gf44KK5Yik5a6a44Gr6Kit5a6a44GV44KM44GfSURcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRIaXRBcmVhSWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlO1xuXG4gIC8qKlxuICAgKiDlvZPjgZ/jgorliKTlrprjgavoqK3lrprjgZXjgozjgZ/lkI3liY3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOW9k+OBn+OCiuWIpOWumuOBq+ioreWumuOBleOCjOOBn+WQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEhpdEFyZWFOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOeJqeeQhua8lOeul+ioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOeJqeeQhua8lOeul+ioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldFBoeXNpY3NGaWxlTmFtZSgpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOODkeODvOODhOWIh+OCiuabv+OBiOioreWumuODleOCoeOCpOODq+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODkeODvOODhOWIh+OCiuabv+OBiOioreWumuODleOCoeOCpOODq+OBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldFBvc2VGaWxlTmFtZSgpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOihqOaDheioreWumuODleOCoeOCpOODq+OBruaVsFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEV4cHJlc3Npb25Db3VudCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIOihqOaDheioreWumuODleOCoeOCpOODq+OCkuitmOWIpeOBmeOCi+WQjeWJje+8iOWIpeWQje+8ieOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g6KGo5oOF44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXhwcmVzc2lvbk5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAvKipcbiAgICog6KGo5oOF6Kit5a6a44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDooajmg4XoqK3lrprjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRFeHByZXNzaW9uRmlsZU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uR3JvdXBDb3VudCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjeOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXgg6YWN5YiX44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uR3JvdXBOYW1lKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBq+WQq+OBvuOCjOOCi+ODouODvOOCt+ODp+ODs+OBruaVsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gZ3JvdXBOYW1lIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruWQjeWJjVxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+OBruaVsFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldE1vdGlvbkNvdW50KGdyb3VwTmFtZTogc3RyaW5nKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiDjgrDjg6vjg7zjg5flkI3jgajjgqTjg7Pjg4fjg4Pjgq/jgrnlgKTjgYvjgonjg6Ljg7zjgrfjg6fjg7Pjg5XjgqHjgqTjg6vlkI3jgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHBhcmFtIGluZGV4ICAgICDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25GaWxlTmFtZShncm91cE5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gr5a++5b+c44GZ44KL44K144Km44Oz44OJ44OV44Kh44Kk44Or44Gu5ZCN5YmN44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBncm91cE5hbWUg44Oi44O844K344On44Oz44Kw44Or44O844OX44Gu5ZCN5YmNXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjgrXjgqbjg7Pjg4njg5XjgqHjgqTjg6vjga7lkI3liY1cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNb3Rpb25Tb3VuZEZpbGVOYW1lKFxuICAgIGdyb3VwTmFtZTogc3RyaW5nLFxuICAgIGluZGV4OiBudW1iZXJcbiAgKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pplovlp4vmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Plh6bnkIbmmYLplpPjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCpOODs+WHpueQhuaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uRmFkZUluVGltZVZhbHVlKFxuICAgIGdyb3VwTmFtZTogc3RyaW5nLFxuICAgIGluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PntYLkuobmmYLjga7jg5Xjgqfjg7zjg4njgqLjgqbjg4jlh6bnkIbmmYLplpPjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwTmFtZSDjg6Ljg7zjgrfjg6fjg7PjgrDjg6vjg7zjg5fjga7lkI3liY1cbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOWHpueQhuaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TW90aW9uRmFkZU91dFRpbWVWYWx1ZShcbiAgICBncm91cE5hbWU6IHN0cmluZyxcbiAgICBpbmRleDogbnVtYmVyXG4gICk6IG51bWJlcjtcblxuICAvKipcbiAgICog44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCN44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44OV44Kh44Kk44Or5ZCNXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0VXNlckRhdGFGaWxlKCk6IHN0cmluZztcblxuICAvKipcbiAgICog44Os44Kk44Ki44Km44OI5oOF5aCx44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBvdXRMYXlvdXRNYXAgY3NtTWFw44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqIEByZXR1cm4gdHJ1ZSDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYzlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYzlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRMYXlvdXRNYXAob3V0TGF5b3V0TWFwOiBjc21NYXA8c3RyaW5nLCBudW1iZXI+KTogYm9vbGVhbjtcblxuICAvKipcbiAgICog55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g55uu44OR44OB44Gr6Zai6YCj5LuY44GR44KJ44KM44Gf44OR44Op44Oh44O844K/44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIOebruODkeODgeOBq+mWoumAo+S7mOOBkeOCieOCjOOBn+ODkeODqeODoeODvOOCv+OBrklE44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDphY3liJfjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr9JRFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEV5ZUJsaW5rUGFyYW1ldGVySWQoaW5kZXg6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlO1xuXG4gIC8qKlxuICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbBcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRMaXBTeW5jUGFyYW1ldGVyQ291bnQoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiDjg6rjg4Pjg5fjgrfjg7Pjgq/jgavplqLpgKPku5jjgZHjgonjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7mlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IOmFjeWIl+OBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv0lEXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0TGlwU3luY1BhcmFtZXRlcklkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZTtcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vaWN1YmlzbW1vZGVsc2V0dGluZyc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgSUN1YmlzbU1vZGVsU2V0dGluZyA9ICQuSUN1YmlzbU1vZGVsU2V0dGluZztcbiAgZXhwb3J0IHR5cGUgSUN1YmlzbU1vZGVsU2V0dGluZyA9ICQuSUN1YmlzbU1vZGVsU2V0dGluZztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcblxuLyoqXG4gKiDjg5Hjg6njg6Hjg7zjgr/lkI3jg7vjg5Hjg7zjg4TlkI3jg7tEcmF3YWJsZeWQjeOCkuS/neaMgVxuICpcbiAqIOODkeODqeODoeODvOOCv+WQjeODu+ODkeODvOODhOWQjeODu0RyYXdhYmxl5ZCN44KS5L+d5oyB44GZ44KL44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21JZCB7XG4gIC8qKlxuICAgKiBJROWQjeOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldFN0cmluZygpOiBjc21TdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihpZDogc3RyaW5nIHwgY3NtU3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX2lkID0gbmV3IGNzbVN0cmluZyhpZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faWQgPSBpZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBpZOOCkuavlOi8g1xuICAgKiBAcGFyYW0gYyDmr5TovIPjgZnjgotpZFxuICAgKiBAcmV0dXJuIOWQjOOBmOOBquOCieOBsHRydWUs55Ww44Gq44Gj44Gm44GE44KM44GwZmFsc2XjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBpc0VxdWFsKGM6IHN0cmluZyB8IGNzbVN0cmluZyB8IEN1YmlzbUlkKTogYm9vbGVhbiB7XG4gICAgaWYgKHR5cGVvZiBjID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2lkLmlzRXF1YWwoYyk7XG4gICAgfSBlbHNlIGlmIChjIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5faWQuaXNFcXVhbChjLnMpO1xuICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIEN1YmlzbUlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5faWQuaXNFcXVhbChjLl9pZC5zKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIGlk44KS5q+U6LyDXG4gICAqIEBwYXJhbSBjIOavlOi8g+OBmeOCi2lkXG4gICAqIEByZXR1cm4g5ZCM44GY44Gq44KJ44GwdHJ1ZSznlbDjgarjgaPjgabjgYTjgozjgbBmYWxzZeOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGlzTm90RXF1YWwoYzogc3RyaW5nIHwgY3NtU3RyaW5nIHwgQ3ViaXNtSWQpOiBib29sZWFuIHtcbiAgICBpZiAodHlwZW9mIGMgPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiAhdGhpcy5faWQuaXNFcXVhbChjKTtcbiAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcbiAgICAgIHJldHVybiAhdGhpcy5faWQuaXNFcXVhbChjLnMpO1xuICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIEN1YmlzbUlkKSB7XG4gICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYy5faWQucyk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgX2lkOiBjc21TdHJpbmc7IC8vIElE5ZCNXG59XG5cbmV4cG9ydCBkZWNsYXJlIHR5cGUgQ3ViaXNtSWRIYW5kbGUgPSBDdWJpc21JZDtcblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtaWQnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUlkID0gJC5DdWJpc21JZDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtSWQgPSAkLkN1YmlzbUlkO1xuICBleHBvcnQgdHlwZSBDdWJpc21JZEhhbmRsZSA9ICQuQ3ViaXNtSWRIYW5kbGU7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21JZCB9IGZyb20gJy4vY3ViaXNtaWQnO1xuXG4vKipcbiAqIElE5ZCN44Gu566h55CGXG4gKlxuICogSUTlkI3jgpLnrqHnkIbjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbUlkTWFuYWdlciB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9pZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pZHMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIHRoaXMuX2lkcy5zZXQoaSwgdm9pZCAwKTtcbiAgICB9XG4gICAgdGhpcy5faWRzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJROWQjeOCkuODquOCueODiOOBi+OCieeZu+mMslxuICAgKlxuICAgKiBAcGFyYW0gaWRzIElE5ZCN44Oq44K544OIXG4gICAqIEBwYXJhbSBjb3VudCBJROOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIHJlZ2lzdGVySWRzKGlkczogc3RyaW5nW10gfCBjc21TdHJpbmdbXSk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdGVySWQoaWRzW2ldKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSUTlkI3jgpLnmbvpjLJcbiAgICpcbiAgICogQHBhcmFtIGlkIElE5ZCNXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0ZXJJZChpZDogc3RyaW5nIHwgY3NtU3RyaW5nKTogQ3ViaXNtSWQge1xuICAgIGxldCByZXN1bHQ6IEN1YmlzbUlkID0gbnVsbDtcblxuICAgIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgaWQpIHtcbiAgICAgIGlmICgocmVzdWx0ID0gdGhpcy5maW5kSWQoaWQpKSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCA9IG5ldyBDdWJpc21JZChpZCk7XG4gICAgICB0aGlzLl9pZHMucHVzaEJhY2socmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJJZChpZC5zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIElE5ZCN44GL44KJSUTjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGlkIElE5ZCNXG4gICAqL1xuICBwdWJsaWMgZ2V0SWQoaWQ6IGNzbVN0cmluZyB8IHN0cmluZyk6IEN1YmlzbUlkIHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RlcklkKGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJROWQjeOBi+OCiUlE44Gu56K66KqNXG4gICAqXG4gICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcbiAgICogQHJldHVybiBmYWxzZSDlrZjlnKjjgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0V4aXN0KGlkOiBjc21TdHJpbmcgfCBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kSWQoaWQpICE9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmlzRXhpc3QoaWQucyk7XG4gIH1cblxuICAvKipcbiAgICogSUTlkI3jgYvjgolJROOCkuaknOe0ouOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gaWQgSUTlkI1cbiAgICogQHJldHVybiDnmbvpjLLjgZXjgozjgabjgYTjgotJROOAguOBquOBkeOCjOOBsE5VTEzjgIJcbiAgICovXG4gIHByaXZhdGUgZmluZElkKGlkOiBzdHJpbmcpOiBDdWJpc21JZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pZHMuZ2V0U2l6ZSgpOyArK2kpIHtcbiAgICAgIGlmICh0aGlzLl9pZHMuYXQoaSkuZ2V0U3RyaW5nKCkuaXNFcXVhbChpZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkcy5hdChpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgX2lkczogY3NtVmVjdG9yPEN1YmlzbUlkPjsgLy8g55m76Yyy44GV44KM44Gm44GE44KLSUTjga7jg6rjgrnjg4hcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtaWRtYW5hZ2VyJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21JZE1hbmFnZXIgPSAkLkN1YmlzbUlkTWFuYWdlcjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtSWRNYW5hZ2VyID0gJC5DdWJpc21JZE1hbmFnZXI7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZE1hbmFnZXIgfSBmcm9tICcuL2lkL2N1YmlzbWlkbWFuYWdlcic7XG5pbXBvcnQgeyBDdWJpc21SZW5kZXJlciB9IGZyb20gJy4vcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyJztcbmltcG9ydCB7XG4gIENTTV9BU1NFUlQsXG4gIEN1YmlzbUxvZ0luZm8sXG4gIEN1YmlzbUxvZ1dhcm5pbmcsXG59IGZyb20gJy4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IHsgVmFsdWUgfSBmcm9tICcuL3V0aWxzL2N1YmlzbWpzb24nO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RydG9kKHM6IHN0cmluZywgZW5kUHRyOiBzdHJpbmdbXSk6IG51bWJlciB7XG4gIGxldCBpbmRleCA9IDA7XG4gIGZvciAobGV0IGkgPSAxOyA7IGkrKykge1xuICAgIGNvbnN0IHRlc3RDOiBzdHJpbmcgPSBzLnNsaWNlKGkgLSAxLCBpKTtcblxuICAgIC8vIOaMh+aVsOODu+ODnuOCpOODiuOCueOBruWPr+iDveaAp+OBjOOBguOCi+OBruOBp+OCueOCreODg+ODl+OBmeOCi1xuICAgIGlmICh0ZXN0QyA9PSAnZScgfHwgdGVzdEMgPT0gJy0nIHx8IHRlc3RDID09ICdFJykge1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyDmloflrZfliJfjga7nr4Tlm7LjgpLluoPjgZLjgabjgYTjgY9cblxuICAgIGNvbnN0IHRlc3Q6IHN0cmluZyA9IHMuc3Vic3RyaW5nKDAsIGkpO1xuICAgIGNvbnN0IG51bWJlciA9IE51bWJlcih0ZXN0KTtcbiAgICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgICAgLy8g5pWw5YCk44Go44GX44Gm6KqN6K2Y44Gn44GN44Gq44GP44Gq44Gj44Gf44Gu44Gn57WC5LqGXG4gICAgICBicmVhaztcbiAgICB9IC8vIOacgOW+jOOBq+aVsOWApOOBqOOBl+OBpuOBp+OBjeOBn2luZGV444KS5qC857SN44GX44Gm44GK44GPXG5cbiAgICBpbmRleCA9IGk7XG4gIH1cbiAgbGV0IGQgPSBwYXJzZUZsb2F0KHMpOyAvLyDjg5Hjg7zjgrnjgZfjgZ/mlbDlgKRcblxuICBpZiAoaXNOYU4oZCkpIHtcbiAgICAvLyDmlbDlgKTjgajjgZfjgaboqo3orZjjgafjgY3jgarjgY/jgarjgaPjgZ/jga7jgafntYLkuoZcbiAgICBkID0gTmFOO1xuICB9XG5cbiAgZW5kUHRyWzBdID0gcy5zbGljZShpbmRleCk7IC8vIOW+jOe2muOBruaWh+Wtl+WIl1xuICByZXR1cm4gZDtcbn1cblxuLy8g44OV44Kh44Kk44Or44K544Kz44O844OX44Gu5aSJ5pWw44KS5Yid5pyf5YyWXG5cbmxldCBzX2lzU3RhcnRlZCA9IGZhbHNlO1xubGV0IHNfaXNJbml0aWFsaXplZCA9IGZhbHNlO1xubGV0IHNfb3B0aW9uOiBPcHRpb24gPSBudWxsO1xubGV0IHNfY3ViaXNtSWRNYW5hZ2VyOiBDdWJpc21JZE1hbmFnZXIgPSBudWxsO1xuXG4vKipcbiAqIEZyYW1ld29ya+WGheOBp+S9v+OBhuWumuaVsOOBruWuo+iogFxuICovXG5leHBvcnQgY29uc3QgQ29uc3RhbnQgPSBPYmplY3QuZnJlZXplPFJlY29yZDxzdHJpbmcsIG51bWJlcj4+KHtcbiAgdmVydGV4T2Zmc2V0OiAwLCAvLyDjg6Hjg4Pjgrfjg6XpoILngrnjga7jgqrjg5Xjgrvjg4Pjg4jlgKRcbiAgdmVydGV4U3RlcDogMiwgLy8g44Oh44OD44K344Ol6aCC54K544Gu44K544OG44OD44OX5YCkXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNzbURlbGV0ZTxUPihhZGRyZXNzOiBUKTogdm9pZCB7XG4gIGlmICghYWRkcmVzcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGFkZHJlc3MgPSB2b2lkIDA7XG59XG5cbi8qKlxuICogTGl2ZTJEIEN1YmlzbSBTREsgT3JpZ2luYWwgV29ya2Zsb3cgU0RL44Gu44Ko44Oz44OI44Oq44Od44Kk44Oz44OIXG4gKiDliKnnlKjplovlp4vmmYLjga9DdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgp44KS5ZG844Gz44CBQ3ViaXNtRnJhbWV3b3JrLmRpc3Bvc2UoKeOBp+e1guS6huOBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtRnJhbWV3b3JrIHtcbiAgLyoqXG4gICAqIEN1YmlzbSBGcmFtZXdvcmvjga5BUEnjgpLkvb/nlKjlj6/og73jgavjgZnjgovjgIJcbiAgICogIEFQSeOCkuWun+ihjOOBmeOCi+WJjeOBq+W/heOBmuOBk+OBrumWouaVsOOCkuWun+ihjOOBmeOCi+OBk+OBqOOAglxuICAgKiAg5LiA5bqm5rqW5YKZ44GM5a6M5LqG44GX44Gm5Lul6ZmN44Gv44CB5YaN44Gz5a6f6KGM44GX44Gm44KC5YaF6YOo5Yem55CG44GM44K544Kt44OD44OX44GV44KM44G+44GZ44CCXG4gICAqXG4gICAqIEBwYXJhbSAgICBvcHRpb24gICAgICBPcHRpb27jgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICpcbiAgICogQHJldHVybiAgIOa6luWCmeWHpueQhuOBjOWujOS6huOBl+OBn+OCiXRydWXjgYzov5Tjgorjgb7jgZnjgIJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc3RhcnRVcChvcHRpb246IE9wdGlvbiA9IG51bGwpOiBib29sZWFuIHtcbiAgICBpZiAoc19pc1N0YXJ0ZWQpIHtcbiAgICAgIEN1YmlzbUxvZ0luZm8oJ0N1YmlzbUZyYW1ld29yay5zdGFydFVwKCkgaXMgYWxyZWFkeSBkb25lLicpO1xuICAgICAgcmV0dXJuIHNfaXNTdGFydGVkO1xuICAgIH1cblxuICAgIHNfb3B0aW9uID0gb3B0aW9uO1xuXG4gICAgaWYgKHNfb3B0aW9uICE9IG51bGwpIHtcbiAgICAgIExpdmUyREN1YmlzbUNvcmUuTG9nZ2luZy5jc21TZXRMb2dGdW5jdGlvbihzX29wdGlvbi5sb2dGdW5jdGlvbik7XG4gICAgfVxuXG4gICAgc19pc1N0YXJ0ZWQgPSB0cnVlO1xuXG4gICAgLy8gTGl2ZTJEIEN1YmlzbSBDb3Jl44OQ44O844K444On44Oz5oOF5aCx44KS6KGo56S6XG4gICAgaWYgKHNfaXNTdGFydGVkKSB7XG4gICAgICBjb25zdCB2ZXJzaW9uOiBudW1iZXIgPSBMaXZlMkRDdWJpc21Db3JlLlZlcnNpb24uY3NtR2V0VmVyc2lvbigpO1xuICAgICAgY29uc3QgbWFqb3I6IG51bWJlciA9ICh2ZXJzaW9uICYgMHhmZjAwMDAwMCkgPj4gMjQ7XG4gICAgICBjb25zdCBtaW5vcjogbnVtYmVyID0gKHZlcnNpb24gJiAweDAwZmYwMDAwKSA+PiAxNjtcbiAgICAgIGNvbnN0IHBhdGNoOiBudW1iZXIgPSB2ZXJzaW9uICYgMHgwMDAwZmZmZjtcbiAgICAgIGNvbnN0IHZlcnNpb25OdW1iZXI6IG51bWJlciA9IHZlcnNpb247XG5cbiAgICAgIEN1YmlzbUxvZ0luZm8oXG4gICAgICAgIGBMaXZlMkQgQ3ViaXNtIENvcmUgdmVyc2lvbjogezB9LnsxfS57Mn0gKHszfSlgLFxuICAgICAgICAoJzAwJyArIG1ham9yKS5zbGljZSgtMiksXG4gICAgICAgICgnMDAnICsgbWlub3IpLnNsaWNlKC0yKSxcbiAgICAgICAgKCcwMDAwJyArIHBhdGNoKS5zbGljZSgtNCksXG4gICAgICAgIHZlcnNpb25OdW1iZXJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgQ3ViaXNtTG9nSW5mbygnQ3ViaXNtRnJhbWV3b3JrLnN0YXJ0VXAoKSBpcyBjb21wbGV0ZS4nKTtcblxuICAgIHJldHVybiBzX2lzU3RhcnRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydFVwKCnjgafliJ3mnJ/ljJbjgZfjgZ9DdWJpc21GcmFtZXdvcmvjga7lkITjg5Hjg6njg6Hjg7zjgr/jgpLjgq/jg6rjgqLjgZfjgb7jgZnjgIJcbiAgICogRGlzcG9zZSgp44GX44GfQ3ViaXNtRnJhbWV3b3Jr44KS5YaN5Yip55So44GZ44KL6Zqb44Gr5Yip55So44GX44Gm44GP44Gg44GV44GE44CCXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNsZWFuVXAoKTogdm9pZCB7XG4gICAgc19pc1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICBzX2lzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICBzX29wdGlvbiA9IG51bGw7XG4gICAgc19jdWJpc21JZE1hbmFnZXIgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEN1YmlzbSBGcmFtZXdvcmvlhoXjga7jg6rjgr3jg7zjgrnjgpLliJ3mnJ/ljJbjgZfjgabjg6Ljg4fjg6vjgpLooajnpLrlj6/og73jgarnirbmhYvjgavjgZfjgb7jgZnjgII8YnI+XG4gICAqICAgICDlho3luqZJbml0aWFsaXplKCnjgZnjgovjgavjga/lhYjjgatEaXNwb3NlKCnjgpLlrp/ooYzjgZnjgovlv4XopoHjgYzjgYLjgorjgb7jgZnjgIJcbiAgICpcbiAgICogQHBhcmFtIG1lbW9yeVNpemUg5Yid5pyf5YyW5pmC44Oh44Oi44Oq6YePIFtieXRlKHMpXVxuICAgKiAgICDopIfmlbDjg6Ljg4fjg6vooajnpLrmmYLjgarjganjgavjg6Ljg4fjg6vjgYzmm7TmlrDjgZXjgozjgarjgYTpmpvjgavkvb/nlKjjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICogICAg5oyH5a6a44GZ44KL6Zqb44Gv5b+F44GaMTAyNCoxMDI0KjE2IGJ5dGUoMTZNQinku6XkuIrjga7lgKTjgpLmjIflrprjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICogICAg44Gd44KM5Lul5aSW44Gv44GZ44G544GmMTAyNCoxMDI0KjE2IGJ5dGXjgavkuLjjgoHjgb7jgZnjgIJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaW5pdGlhbGl6ZShtZW1vcnlTaXplID0gMCk6IHZvaWQge1xuICAgIENTTV9BU1NFUlQoc19pc1N0YXJ0ZWQpO1xuICAgIGlmICghc19pc1N0YXJ0ZWQpIHtcbiAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoJ0N1YmlzbUZyYW1ld29yayBpcyBub3Qgc3RhcnRlZC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyAtLS0gc19pc0luaXRpYWxpemVk44Gr44KI44KL6YCj57aa5Yid5pyf5YyW44Ks44O844OJIC0tLVxuICAgIC8vIOmAo+e2muOBl+OBpuODquOCveODvOOCueeiuuS/neOBjOihjOOCj+OCjOOBquOBhOOCiOOBhuOBq+OBmeOCi+OAglxuICAgIC8vIOWGjeW6pkluaXRpYWxpemUoKeOBmeOCi+OBq+OBr+WFiOOBq0Rpc3Bvc2UoKeOCkuWun+ihjOOBmeOCi+W/heimgeOBjOOBguOCi+OAglxuICAgIGlmIChzX2lzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoXG4gICAgICAgICdDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgpIHNraXBwZWQsIGFscmVhZHkgaW5pdGlhbGl6ZWQuJ1xuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLy0tLS0gc3RhdGljIOWIneacn+WMliAtLS0tXG4gICAgVmFsdWUuc3RhdGljSW5pdGlhbGl6ZU5vdEZvckNsaWVudENhbGwoKTtcblxuICAgIHNfY3ViaXNtSWRNYW5hZ2VyID0gbmV3IEN1YmlzbUlkTWFuYWdlcigpO1xuXG4gICAgLy8gLS0tIEhBQ0s6IOWIneacn+WMluaZguODoeODouODqumHj+OBruaLoeW8tSjljZjkvY1ieXRlKSAtLS1cbiAgICAvLyDopIfmlbDjg6Ljg4fjg6vooajnpLrmmYLjgarjganjgavjg6Ljg4fjg6vjgYzmm7TmlrDjgZXjgozjgarjgYTpmpvjgavkvb/nlKjjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICAvLyDmjIflrprjgZnjgovpmpvjga/lv4XjgZoxMDI0KjEwMjQqMTYgYnl0ZSgxNk1CKeS7peS4iuOBruWApOOCkuaMh+WumuOBl+OBpuOBj+OBoOOBleOBhOOAglxuICAgIC8vIOOBneOCjOS7peWkluOBr+OBmeOBueOBpjEwMjQqMTAyNCoxNiBieXRl44Gr5Li444KB44G+44GZ44CCXG4gICAgTGl2ZTJEQ3ViaXNtQ29yZS5NZW1vcnkuaW5pdGlhbGl6ZUFtb3VudE9mTWVtb3J5KG1lbW9yeVNpemUpO1xuXG4gICAgc19pc0luaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgIEN1YmlzbUxvZ0luZm8oJ0N1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCkgaXMgY29tcGxldGUuJyk7XG4gIH1cblxuICAvKipcbiAgICogQ3ViaXNtIEZyYW1ld29ya+WGheOBruWFqOOBpuOBruODquOCveODvOOCueOCkuino+aUvuOBl+OBvuOBmeOAglxuICAgKiAgICAgIOOBn+OBoOOBl+OAgeWklumDqOOBp+eiuuS/neOBleOCjOOBn+ODquOCveODvOOCueOBq+OBpOOBhOOBpuOBr+ino+aUvuOBl+OBvuOBm+OCk+OAglxuICAgKiAgICAgIOWklumDqOOBp+mBqeWIh+OBq+egtOajhOOBmeOCi+W/heimgeOBjOOBguOCiuOBvuOBmeOAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkaXNwb3NlKCk6IHZvaWQge1xuICAgIENTTV9BU1NFUlQoc19pc1N0YXJ0ZWQpO1xuICAgIGlmICghc19pc1N0YXJ0ZWQpIHtcbiAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoJ0N1YmlzbUZyYW1ld29yayBpcyBub3Qgc3RhcnRlZC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyAtLS0gc19pc0luaXRpYWxpemVk44Gr44KI44KL5pyq5Yid5pyf5YyW6Kej5pS+44Ks44O844OJIC0tLVxuICAgIC8vIGRpc3Bvc2UoKeOBmeOCi+OBq+OBr+WFiOOBq2luaXRpYWxpemUoKeOCkuWun+ihjOOBmeOCi+W/heimgeOBjOOBguOCi+OAglxuICAgIGlmICghc19pc0luaXRpYWxpemVkKSB7XG4gICAgICAvLyBmYWxzZS4uLuODquOCveODvOOCueacqueiuuS/neOBruWgtOWQiFxuICAgICAgQ3ViaXNtTG9nV2FybmluZygnQ3ViaXNtRnJhbWV3b3JrLmRpc3Bvc2UoKSBza2lwcGVkLCBub3QgaW5pdGlhbGl6ZWQuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgVmFsdWUuc3RhdGljUmVsZWFzZU5vdEZvckNsaWVudENhbGwoKTtcblxuICAgIHNfY3ViaXNtSWRNYW5hZ2VyLnJlbGVhc2UoKTtcbiAgICBzX2N1YmlzbUlkTWFuYWdlciA9IG51bGw7XG5cbiAgICAvLyDjg6zjg7Pjg4Djg6njga7pnZnnmoTjg6rjgr3jg7zjgrnvvIjjgrfjgqfjg7zjg4Djg5fjg63jgrDjg6njg6Dku5bvvInjgpLop6PmlL7jgZnjgotcbiAgICBDdWJpc21SZW5kZXJlci5zdGF0aWNSZWxlYXNlKCk7XG5cbiAgICBzX2lzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIEN1YmlzbUxvZ0luZm8oJ0N1YmlzbUZyYW1ld29yay5kaXNwb3NlKCkgaXMgY29tcGxldGUuJyk7XG4gIH1cblxuICAvKipcbiAgICogQ3ViaXNtIEZyYW1ld29ya+OBrkFQSeOCkuS9v+eUqOOBmeOCi+a6luWCmeOBjOWujOS6huOBl+OBn+OBi+OBqeOBhuOBi1xuICAgKiBAcmV0dXJuIEFQSeOCkuS9v+eUqOOBmeOCi+a6luWCmeOBjOWujOS6huOBl+OBpuOBhOOCjOOBsHRydWXjgYzov5Tjgorjgb7jgZnjgIJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaXNTdGFydGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzX2lzU3RhcnRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdWJpc20gRnJhbWV3b3Jr44Gu44Oq44K944O844K55Yid5pyf5YyW44GM44GZ44Gn44Gr6KGM44KP44KM44Gm44GE44KL44GL44Gp44GG44GLXG4gICAqIEByZXR1cm4g44Oq44K944O844K556K65L+d44GM5a6M5LqG44GX44Gm44GE44KM44GwdHJ1ZeOBjOi/lOOCiuOBvuOBmVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc0luaXRpYWxpemVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzX2lzSW5pdGlhbGl6ZWQ7XG4gIH1cblxuICAvKipcbiAgICogQ29yZSBBUEnjgavjg5DjgqTjg7Pjg4njgZfjgZ/jg63jgrDplqLmlbDjgpLlrp/ooYzjgZnjgotcbiAgICpcbiAgICogQHByYXJhbSBtZXNzYWdlIOODreOCsOODoeODg+OCu+ODvOOCuFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjb3JlTG9nRnVuY3Rpb24obWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgLy8gUmV0dXJuIGlmIGxvZ2dpbmcgbm90IHBvc3NpYmxlLlxuICAgIGlmICghTGl2ZTJEQ3ViaXNtQ29yZS5Mb2dnaW5nLmNzbUdldExvZ0Z1bmN0aW9uKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBMaXZlMkRDdWJpc21Db3JlLkxvZ2dpbmcuY3NtR2V0TG9nRnVuY3Rpb24oKShtZXNzYWdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7jg63jgrDlh7rlipvjg6zjg5njg6voqK3lrprjga7lgKTjgpLov5TjgZnjgIJcbiAgICpcbiAgICogQHJldHVybiAg54++5Zyo44Gu44Ot44Kw5Ye65Yqb44Os44OZ44Or6Kit5a6a44Gu5YCkXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldExvZ2dpbmdMZXZlbCgpOiBMb2dMZXZlbCB7XG4gICAgaWYgKHNfb3B0aW9uICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBzX29wdGlvbi5sb2dnaW5nTGV2ZWw7XG4gICAgfVxuICAgIHJldHVybiBMb2dMZXZlbC5Mb2dMZXZlbF9PZmY7XG4gIH1cblxuICAvKipcbiAgICogSUTjg57jg43jg7zjgrjjg6Pjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiBDdWJpc21NYW5hZ2Vy44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldElkTWFuYWdlcigpOiBDdWJpc21JZE1hbmFnZXIge1xuICAgIHJldHVybiBzX2N1YmlzbUlkTWFuYWdlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDpnZnnmoTjgq/jg6njgrnjgajjgZfjgabkvb/nlKjjgZnjgotcbiAgICog44Kk44Oz44K544K/44Oz44K55YyW44GV44Gb44Gq44GEXG4gICAqL1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cbn1cblxuZXhwb3J0IGNsYXNzIE9wdGlvbiB7XG4gIGxvZ0Z1bmN0aW9uOiBMaXZlMkRDdWJpc21Db3JlLmNzbUxvZ0Z1bmN0aW9uOyAvLyDjg63jgrDlh7rlipvjga7plqLmlbDjgqrjg5bjgrjjgqfjgq/jg4hcbiAgbG9nZ2luZ0xldmVsOiBMb2dMZXZlbDsgLy8g44Ot44Kw5Ye65Yqb44Os44OZ44Or44Gu6Kit5a6aXG59XG5cbi8qKlxuICog44Ot44Kw5Ye65Yqb44Gu44Os44OZ44OrXG4gKi9cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgTG9nTGV2ZWxfVmVyYm9zZSA9IDAsIC8vIOips+e0sOODreOCsFxuICBMb2dMZXZlbF9EZWJ1ZywgLy8g44OH44OQ44OD44Kw44Ot44KwXG4gIExvZ0xldmVsX0luZm8sIC8vIEluZm/jg63jgrBcbiAgTG9nTGV2ZWxfV2FybmluZywgLy8g6K2m5ZGK44Ot44KwXG4gIExvZ0xldmVsX0Vycm9yLCAvLyDjgqjjg6njg7zjg63jgrBcbiAgTG9nTGV2ZWxfT2ZmLCAvLyDjg63jgrDlh7rlipvnhKHlirlcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDb25zdGFudCA9ICQuQ29uc3RhbnQ7XG4gIGV4cG9ydCBjb25zdCBjc21EZWxldGUgPSAkLmNzbURlbGV0ZTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUZyYW1ld29yayA9ICQuQ3ViaXNtRnJhbWV3b3JrO1xuICBleHBvcnQgdHlwZSBDdWJpc21GcmFtZXdvcmsgPSAkLkN1YmlzbUZyYW1ld29yaztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbVZlY3RvcjIgfSBmcm9tICcuL2N1YmlzbXZlY3RvcjInO1xuXG4vKipcbiAqIOaVsOWApOioiOeul+OBquOBqeOBq+S9v+eUqOOBmeOCi+ODpuODvOODhuOCo+ODquODhuOCo+OCr+ODqeOCuVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTWF0aCB7XG4gIHN0YXRpYyByZWFkb25seSBFcHNpbG9uOiBudW1iZXIgPSAwLjAwMDAxO1xuXG4gIC8qKlxuICAgKiDnrKzkuIDlvJXmlbDjga7lgKTjgpLmnIDlsI/lgKTjgajmnIDlpKflgKTjga7nr4Tlm7Ljgavlj47jgoHjgZ/lgKTjgpLov5TjgZlcbiAgICpcbiAgICogQHBhcmFtIHZhbHVlIOWPjuOCgeOCieOCjOOCi+WApFxuICAgKiBAcGFyYW0gbWluICAg56+E5Zuy44Gu5pyA5bCP5YCkXG4gICAqIEBwYXJhbSBtYXggICDnr4Tlm7Ljga7mnIDlpKflgKRcbiAgICogQHJldHVybiDmnIDlsI/lgKTjgajmnIDlpKflgKTjga7nr4Tlm7Ljgavlj47jgoHjgZ/lgKRcbiAgICovXG4gIHN0YXRpYyByYW5nZSh2YWx1ZTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICh2YWx1ZSA8IG1pbikge1xuICAgICAgdmFsdWUgPSBtaW47XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA+IG1heCkge1xuICAgICAgdmFsdWUgPSBtYXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCteOCpOODs+mWouaVsOOBruWApOOCkuaxguOCgeOCi1xuICAgKlxuICAgKiBAcGFyYW0geCDop5LluqblgKTvvIjjg6njgrjjgqLjg7PvvIlcbiAgICogQHJldHVybiDjgrXjgqTjg7PplqLmlbBzaW4oeCnjga7lgKRcbiAgICovXG4gIHN0YXRpYyBzaW4oeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zaW4oeCk7XG4gIH1cblxuICAvKipcbiAgICog44Kz44K144Kk44Oz6Zai5pWw44Gu5YCk44KS5rGC44KB44KLXG4gICAqXG4gICAqIEBwYXJhbSB4IOinkuW6puWApCjjg6njgrjjgqLjg7MpXG4gICAqIEByZXR1cm4g44Kz44K144Kk44Oz6Zai5pWwY29zKHgp44Gu5YCkXG4gICAqL1xuICBzdGF0aWMgY29zKHg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguY29zKHgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWApOOBrue1tuWvvuWApOOCkuaxguOCgeOCi1xuICAgKlxuICAgKiBAcGFyYW0geCDntbblr77lgKTjgpLmsYLjgoHjgovlgKRcbiAgICogQHJldHVybiDlgKTjga7ntbblr77lgKRcbiAgICovXG4gIHN0YXRpYyBhYnMoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCk7XG4gIH1cblxuICAvKipcbiAgICog5bmz5pa55qC5KOODq+ODvOODiCnjgpLmsYLjgoHjgotcbiAgICogQHBhcmFtIHggLT4g5bmz5pa55qC544KS5rGC44KB44KL5YCkXG4gICAqIEByZXR1cm4g5YCk44Gu5bmz5pa55qC5XG4gICAqL1xuICBzdGF0aWMgc3FydCh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCk7XG4gIH1cblxuICAvKipcbiAgICog56uL5pa55qC544KS5rGC44KB44KLXG4gICAqIEBwYXJhbSB4IC0+IOeri+aWueagueOCkuaxguOCgeOCi+WApFxuICAgKiBAcmV0dXJuIOWApOOBrueri+aWueaguVxuICAgKi9cbiAgc3RhdGljIGNicnQoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfVxuXG4gICAgbGV0IGN4OiBudW1iZXIgPSB4O1xuICAgIGNvbnN0IGlzTmVnYXRpdmVOdW1iZXI6IGJvb2xlYW4gPSBjeCA8IDA7XG5cbiAgICBpZiAoaXNOZWdhdGl2ZU51bWJlcikge1xuICAgICAgY3ggPSAtY3g7XG4gICAgfVxuXG4gICAgbGV0IHJldDogbnVtYmVyO1xuICAgIGlmIChjeCA9PT0gSW5maW5pdHkpIHtcbiAgICAgIHJldCA9IEluZmluaXR5O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXQgPSBNYXRoLmV4cChNYXRoLmxvZyhjeCkgLyAzKTtcbiAgICAgIHJldCA9IChjeCAvIChyZXQgKiByZXQpICsgMiAqIHJldCkgLyAzO1xuICAgIH1cbiAgICByZXR1cm4gaXNOZWdhdGl2ZU51bWJlciA/IC1yZXQgOiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog44Kk44O844K444Oz44Kw5Yem55CG44GV44KM44Gf44K144Kk44Oz44KS5rGC44KB44KLXG4gICAqIOODleOCp+ODvOODieOCpOODs+ODu+OCouOCpuODiOaZguOBruOCpOODvOOCuOODs+OCsOOBq+WIqeeUqOOBp+OBjeOCi1xuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUg44Kk44O844K444Oz44Kw44KS6KGM44GG5YCkXG4gICAqIEByZXR1cm4g44Kk44O844K444Oz44Kw5Yem55CG44GV44KM44Gf44K144Kk44Oz5YCkXG4gICAqL1xuICBzdGF0aWMgZ2V0RWFzaW5nU2luZSh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodmFsdWUgPCAwLjApIHtcbiAgICAgIHJldHVybiAwLjA7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA+IDEuMCkge1xuICAgICAgcmV0dXJuIDEuMDtcbiAgICB9XG5cbiAgICByZXR1cm4gMC41IC0gMC41ICogdGhpcy5jb3ModmFsdWUgKiBNYXRoLlBJKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlpKfjgY3jgYTmlrnjga7lgKTjgpLov5TjgZlcbiAgICpcbiAgICogQHBhcmFtIGxlZnQg5bem6L6644Gu5YCkXG4gICAqIEBwYXJhbSByaWdodCDlj7Povrrjga7lgKRcbiAgICogQHJldHVybiDlpKfjgY3jgYTmlrnjga7lgKRcbiAgICovXG4gIHN0YXRpYyBtYXgobGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gbGVmdCA+IHJpZ2h0ID8gbGVmdCA6IHJpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOWwj+OBleOBhOaWueOBruWApOOCkui/lOOBmVxuICAgKlxuICAgKiBAcGFyYW0gbGVmdCAg5bem6L6644Gu5YCkXG4gICAqIEBwYXJhbSByaWdodCDlj7Povrrjga7lgKRcbiAgICogQHJldHVybiDlsI/jgZXjgYTmlrnjga7lgKRcbiAgICovXG4gIHN0YXRpYyBtaW4obGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gbGVmdCA+IHJpZ2h0ID8gcmlnaHQgOiBsZWZ0O1xuICB9XG5cbiAgLyoqXG4gICAqIOinkuW6puWApOOCkuODqeOCuOOCouODs+WApOOBq+WkieaPm+OBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gZGVncmVlcyAgIOinkuW6puWApFxuICAgKiBAcmV0dXJuIOinkuW6puWApOOBi+OCieWkieaPm+OBl+OBn+ODqeOCuOOCouODs+WApFxuICAgKi9cbiAgc3RhdGljIGRlZ3JlZXNUb1JhZGlhbihkZWdyZWVzOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiAoZGVncmVlcyAvIDE4MC4wKSAqIE1hdGguUEk7XG4gIH1cblxuICAvKipcbiAgICog44Op44K444Ki44Oz5YCk44KS6KeS5bqm5YCk44Gr5aSJ5o+b44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSByYWRpYW4gICAg44Op44K444Ki44Oz5YCkXG4gICAqIEByZXR1cm4g44Op44K444Ki44Oz5YCk44GL44KJ5aSJ5o+b44GX44Gf6KeS5bqm5YCkXG4gICAqL1xuICBzdGF0aWMgcmFkaWFuVG9EZWdyZWVzKHJhZGlhbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHJhZGlhbiAqIDE4MC4wKSAvIE1hdGguUEk7XG4gIH1cblxuICAvKipcbiAgICog77yS44Gk44Gu44OZ44Kv44OI44Or44GL44KJ44Op44K444Ki44Oz5YCk44KS5rGC44KB44KLXG4gICAqXG4gICAqIEBwYXJhbSBmcm9tICDlp4vngrnjg5njgq/jg4jjg6tcbiAgICogQHBhcmFtIHRvICAgIOe1gueCueODmeOCr+ODiOODq1xuICAgKiBAcmV0dXJuIOODqeOCuOOCouODs+WApOOBi+OCieaxguOCgeOBn+aWueWQkeODmeOCr+ODiOODq1xuICAgKi9cbiAgc3RhdGljIGRpcmVjdGlvblRvUmFkaWFuKGZyb206IEN1YmlzbVZlY3RvcjIsIHRvOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyIHtcbiAgICBjb25zdCBxMTogbnVtYmVyID0gTWF0aC5hdGFuMih0by55LCB0by54KTtcbiAgICBjb25zdCBxMjogbnVtYmVyID0gTWF0aC5hdGFuMihmcm9tLnksIGZyb20ueCk7XG5cbiAgICBsZXQgcmV0OiBudW1iZXIgPSBxMSAtIHEyO1xuXG4gICAgd2hpbGUgKHJldCA8IC1NYXRoLlBJKSB7XG4gICAgICByZXQgKz0gTWF0aC5QSSAqIDIuMDtcbiAgICB9XG5cbiAgICB3aGlsZSAocmV0ID4gTWF0aC5QSSkge1xuICAgICAgcmV0IC09IE1hdGguUEkgKiAyLjA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDvvJLjgaTjga7jg5njgq/jg4jjg6vjgYvjgonop5LluqblgKTjgpLmsYLjgoHjgotcbiAgICpcbiAgICogQHBhcmFtIGZyb20gIOWni+eCueODmeOCr+ODiOODq1xuICAgKiBAcGFyYW0gdG8gICAg57WC54K544OZ44Kv44OI44OrXG4gICAqIEByZXR1cm4g6KeS5bqm5YCk44GL44KJ5rGC44KB44Gf5pa55ZCR44OZ44Kv44OI44OrXG4gICAqL1xuICBzdGF0aWMgZGlyZWN0aW9uVG9EZWdyZWVzKGZyb206IEN1YmlzbVZlY3RvcjIsIHRvOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyIHtcbiAgICBjb25zdCByYWRpYW46IG51bWJlciA9IHRoaXMuZGlyZWN0aW9uVG9SYWRpYW4oZnJvbSwgdG8pO1xuICAgIGxldCBkZWdyZWU6IG51bWJlciA9IHRoaXMucmFkaWFuVG9EZWdyZWVzKHJhZGlhbik7XG5cbiAgICBpZiAodG8ueCAtIGZyb20ueCA+IDAuMCkge1xuICAgICAgZGVncmVlID0gLWRlZ3JlZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVncmVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODqeOCuOOCouODs+WApOOCkuaWueWQkeODmeOCr+ODiOODq+OBq+WkieaPm+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gdG90YWxBbmdsZSAgICDjg6njgrjjgqLjg7PlgKRcbiAgICogQHJldHVybiDjg6njgrjjgqLjg7PlgKTjgYvjgonlpInmj5vjgZfjgZ/mlrnlkJHjg5njgq/jg4jjg6tcbiAgICovXG5cbiAgc3RhdGljIHJhZGlhblRvRGlyZWN0aW9uKHRvdGFsQW5nbGU6IG51bWJlcik6IEN1YmlzbVZlY3RvcjIge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKCk7XG5cbiAgICByZXQueCA9IHRoaXMuc2luKHRvdGFsQW5nbGUpO1xuICAgIHJldC55ID0gdGhpcy5jb3ModG90YWxBbmdsZSk7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOS4ieasoeaWueeoi+W8j+OBruS4ieasoemgheOBruS/guaVsOOBjDDjgavjgarjgaPjgZ/jgajjgY3jgavoo5zmrKDnmoTjgavkuozmrKHmlrnnqIvlvI/jga7op6PjgpLjgoLjgajjgoHjgovjgIJcbiAgICogYSAqIHheMiArIGIgKiB4ICsgYyA9IDBcbiAgICpcbiAgICogQHBhcmFtICAgYSAtPiDkuozmrKHpoIXjga7kv4LmlbDlgKRcbiAgICogQHBhcmFtICAgYiAtPiDkuIDmrKHpoIXjga7kv4LmlbDlgKRcbiAgICogQHBhcmFtICAgYyAtPiDlrprmlbDpoIXjga7lgKRcbiAgICogQHJldHVybiAg5LqM5qyh5pa556iL5byP44Gu6KejXG4gICAqL1xuICBzdGF0aWMgcXVhZHJhdGljRXF1YXRpb24oYTogbnVtYmVyLCBiOiBudW1iZXIsIGM6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuYWJzKGEpIDwgQ3ViaXNtTWF0aC5FcHNpbG9uKSB7XG4gICAgICBpZiAodGhpcy5hYnMoYikgPCBDdWJpc21NYXRoLkVwc2lsb24pIHtcbiAgICAgICAgcmV0dXJuIC1jO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC1jIC8gYjtcbiAgICB9XG5cbiAgICByZXR1cm4gLShiICsgdGhpcy5zcXJ0KGIgKiBiIC0gNC4wICogYSAqIGMpKSAvICgyLjAgKiBhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqvjg6vjg4Djg47jga7lhazlvI/jgavjgojjgaPjgabjg5njgrjjgqfjga505YCk44Gr6Kmy5b2T44GZ44KL77yT5qyh5pa556iL5byP44Gu6Kej44KS5rGC44KB44KL44CCXG4gICAqIOmHjeino+OBq+OBquOBo+OBn+OBqOOBjeOBq+OBrzAuMO+9njEuMOOBruWApOOBq+OBquOCi+ino+OCkui/lOOBmeOAglxuICAgKlxuICAgKiBhICogeF4zICsgYiAqIHheMiArIGMgKiB4ICsgZCA9IDBcbiAgICpcbiAgICogQHBhcmFtICAgYSAtPiDkuInmrKHpoIXjga7kv4LmlbDlgKRcbiAgICogQHBhcmFtICAgYiAtPiDkuozmrKHpoIXjga7kv4LmlbDlgKRcbiAgICogQHBhcmFtICAgYyAtPiDkuIDmrKHpoIXjga7kv4LmlbDlgKRcbiAgICogQHBhcmFtICAgZCAtPiDlrprmlbDpoIXjga7lgKRcbiAgICogQHJldHVybiAgMC4w772eMS4w44Gu6ZaT44Gr44GC44KL6KejXG4gICAqL1xuICBzdGF0aWMgY2FyZGFub0FsZ29yaXRobUZvckJlemllcihcbiAgICBhOiBudW1iZXIsXG4gICAgYjogbnVtYmVyLFxuICAgIGM6IG51bWJlcixcbiAgICBkOiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5zcXJ0KGEpIDwgQ3ViaXNtTWF0aC5FcHNpbG9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5yYW5nZSh0aGlzLnF1YWRyYXRpY0VxdWF0aW9uKGIsIGMsIGQpLCAwLjAsIDEuMCk7XG4gICAgfVxuXG4gICAgY29uc3QgYmE6IG51bWJlciA9IGIgLyBhO1xuICAgIGNvbnN0IGNhOiBudW1iZXIgPSBjIC8gYTtcbiAgICBjb25zdCBkYTogbnVtYmVyID0gZCAvIGE7XG5cbiAgICBjb25zdCBwOiBudW1iZXIgPSAoMy4wICogY2EgLSBiYSAqIGJhKSAvIDMuMDtcbiAgICBjb25zdCBwMzogbnVtYmVyID0gcCAvIDMuMDtcbiAgICBjb25zdCBxOiBudW1iZXIgPSAoMi4wICogYmEgKiBiYSAqIGJhIC0gOS4wICogYmEgKiBjYSArIDI3LjAgKiBkYSkgLyAyNy4wO1xuICAgIGNvbnN0IHEyOiBudW1iZXIgPSBxIC8gMi4wO1xuICAgIGNvbnN0IGRpc2NyaW1pbmFudDogbnVtYmVyID0gcTIgKiBxMiArIHAzICogcDMgKiBwMztcblxuICAgIGNvbnN0IGNlbnRlciA9IDAuNTtcbiAgICBjb25zdCB0aHJlc2hvbGQ6IG51bWJlciA9IGNlbnRlciArIDAuMDE7XG5cbiAgICBpZiAoZGlzY3JpbWluYW50IDwgMC4wKSB7XG4gICAgICBjb25zdCBtcDM6IG51bWJlciA9IC1wIC8gMy4wO1xuICAgICAgY29uc3QgbXAzMzogbnVtYmVyID0gbXAzICogbXAzICogbXAzO1xuICAgICAgY29uc3QgcjogbnVtYmVyID0gdGhpcy5zcXJ0KG1wMzMpO1xuICAgICAgY29uc3QgdDogbnVtYmVyID0gLXEgLyAoMi4wICogcik7XG4gICAgICBjb25zdCBjb3NwaGk6IG51bWJlciA9IHRoaXMucmFuZ2UodCwgLTEuMCwgMS4wKTtcbiAgICAgIGNvbnN0IHBoaTogbnVtYmVyID0gTWF0aC5hY29zKGNvc3BoaSk7XG4gICAgICBjb25zdCBjcnRyOiBudW1iZXIgPSB0aGlzLmNicnQocik7XG4gICAgICBjb25zdCB0MTogbnVtYmVyID0gMi4wICogY3J0cjtcblxuICAgICAgY29uc3Qgcm9vdDE6IG51bWJlciA9IHQxICogdGhpcy5jb3MocGhpIC8gMy4wKSAtIGJhIC8gMy4wO1xuICAgICAgaWYgKHRoaXMuYWJzKHJvb3QxIC0gY2VudGVyKSA8IHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZShyb290MSwgMC4wLCAxLjApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByb290MjogbnVtYmVyID1cbiAgICAgICAgdDEgKiB0aGlzLmNvcygocGhpICsgMi4wICogTWF0aC5QSSkgLyAzLjApIC0gYmEgLyAzLjA7XG4gICAgICBpZiAodGhpcy5hYnMocm9vdDIgLSBjZW50ZXIpIDwgdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlKHJvb3QyLCAwLjAsIDEuMCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJvb3QzOiBudW1iZXIgPVxuICAgICAgICB0MSAqIHRoaXMuY29zKChwaGkgKyA0LjAgKiBNYXRoLlBJKSAvIDMuMCkgLSBiYSAvIDMuMDtcbiAgICAgIHJldHVybiB0aGlzLnJhbmdlKHJvb3QzLCAwLjAsIDEuMCk7XG4gICAgfVxuXG4gICAgaWYgKGRpc2NyaW1pbmFudCA9PSAwLjApIHtcbiAgICAgIGxldCB1MTogbnVtYmVyO1xuICAgICAgaWYgKHEyIDwgMC4wKSB7XG4gICAgICAgIHUxID0gdGhpcy5jYnJ0KC1xMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1MSA9IC10aGlzLmNicnQocTIpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByb290MTogbnVtYmVyID0gMi4wICogdTEgLSBiYSAvIDMuMDtcbiAgICAgIGlmICh0aGlzLmFicyhyb290MSAtIGNlbnRlcikgPCB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2Uocm9vdDEsIDAuMCwgMS4wKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgcm9vdDI6IG51bWJlciA9IC11MSAtIGJhIC8gMy4wO1xuICAgICAgcmV0dXJuIHRoaXMucmFuZ2Uocm9vdDIsIDAuMCwgMS4wKTtcbiAgICB9XG5cbiAgICBjb25zdCBzZDogbnVtYmVyID0gdGhpcy5zcXJ0KGRpc2NyaW1pbmFudCk7XG4gICAgY29uc3QgdTE6IG51bWJlciA9IHRoaXMuY2JydChzZCAtIHEyKTtcbiAgICBjb25zdCB2MTogbnVtYmVyID0gdGhpcy5jYnJ0KHNkICsgcTIpO1xuICAgIGNvbnN0IHJvb3QxOiBudW1iZXIgPSB1MSAtIHYxIC0gYmEgLyAzLjA7XG4gICAgcmV0dXJuIHRoaXMucmFuZ2Uocm9vdDEsIDAuMCwgMS4wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tYXRoJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21NYXRoID0gJC5DdWJpc21NYXRoO1xuICBleHBvcnQgdHlwZSBDdWJpc21NYXRoID0gJC5DdWJpc21NYXRoO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiA0eDTjga7ooYzliJdcbiAqXG4gKiA0eDTooYzliJfjga7kvr/liKnjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1hdHJpeDQ0IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3RyID0gbmV3IEZsb2F0MzJBcnJheSgxNik7IC8vIDQgKiA044Gu44K144Kk44K6XG4gICAgdGhpcy5sb2FkSWRlbnRpdHkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlj5fjgZHlj5bjgaPjgZ/vvJLjgaTjga7ooYzliJfjga7kuZfnrpfjgpLooYzjgYbjgIJcbiAgICpcbiAgICogQHBhcmFtIGEg6KGM5YiXYVxuICAgKiBAcGFyYW0gYiDooYzliJdiXG4gICAqIEByZXR1cm4g5LmX566X57WQ5p6c44Gu6KGM5YiXXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIG11bHRpcGx5KFxuICAgIGE6IEZsb2F0MzJBcnJheSxcbiAgICBiOiBGbG9hdDMyQXJyYXksXG4gICAgZHN0OiBGbG9hdDMyQXJyYXlcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgYzogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLFxuICAgICAgMC4wLFxuICAgIF0pO1xuXG4gICAgY29uc3QgbiA9IDQ7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBuOyArK2opIHtcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBuOyArK2spIHtcbiAgICAgICAgICBjW2ogKyBpICogNF0gKz0gYVtrICsgaSAqIDRdICogYltqICsgayAqIDRdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICBkc3RbaV0gPSBjW2ldO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDljZjkvY3ooYzliJfjgavliJ3mnJ/ljJbjgZnjgotcbiAgICovXG4gIHB1YmxpYyBsb2FkSWRlbnRpdHkoKTogdm9pZCB7XG4gICAgY29uc3QgYzogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLFxuICAgICAgMS4wLFxuICAgIF0pO1xuXG4gICAgdGhpcy5zZXRNYXRyaXgoYyk7XG4gIH1cblxuICAvKipcbiAgICog6KGM5YiX44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB0ciAxNuWAi+OBrua1ruWLleWwj+aVsOeCueaVsOOBp+ihqOOBleOCjOOCizR4NOOBruihjOWIl1xuICAgKi9cbiAgcHVibGljIHNldE1hdHJpeCh0cjogRmxvYXQzMkFycmF5KTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICB0aGlzLl90cltpXSA9IHRyW2ldO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDooYzliJfjgpLmta7li5XlsI/mlbDngrnmlbDjga7phY3liJfjgaflj5blvpdcbiAgICpcbiAgICogQHJldHVybiAxNuWAi+OBrua1ruWLleWwj+aVsOeCueaVsOOBp+ihqOOBleOCjOOCizR4NOOBruihjOWIl1xuICAgKi9cbiAgcHVibGljIGdldEFycmF5KCk6IEZsb2F0MzJBcnJheSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7mi6HlpKfnjofjgpLlj5blvpdcbiAgICogQHJldHVybiBY6Lu444Gu5ouh5aSn546HXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NhbGVYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RyWzBdO1xuICB9XG5cbiAgLyoqXG4gICAqIFnou7jjga7mi6HlpKfnjofjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHJldHVybiBZ6Lu444Gu5ouh5aSn546HXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NhbGVZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RyWzVdO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7np7vli5Xph4/jgpLlj5blvpdcbiAgICogQHJldHVybiBY6Lu444Gu56e75YuV6YePXG4gICAqL1xuICBwdWJsaWMgZ2V0VHJhbnNsYXRlWCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl90clsxMl07XG4gIH1cblxuICAvKipcbiAgICogWei7uOOBruenu+WLlemHj+OCkuWPluW+l1xuICAgKiBAcmV0dXJuIFnou7jjga7np7vli5Xph49cbiAgICovXG4gIHB1YmxpYyBnZXRUcmFuc2xhdGVZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RyWzEzXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBY6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6KiI566XXG4gICAqXG4gICAqIEBwYXJhbSBzcmMgWOi7uOOBruWApFxuICAgKiBAcmV0dXJuIOePvuWcqOOBruihjOWIl+OBp+ioiOeul+OBleOCjOOBn1jou7jjga7lgKRcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm1YKHNyYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fdHJbMF0gKiBzcmMgKyB0aGlzLl90clsxMl07XG4gIH1cblxuICAvKipcbiAgICogWei7uOOBruWApOOCkuePvuWcqOOBruihjOWIl+OBp+ioiOeul1xuICAgKlxuICAgKiBAcGFyYW0gc3JjIFnou7jjga7lgKRcbiAgICogQHJldHVybiDnj77lnKjjga7ooYzliJfjgafoqIjnrpfjgZXjgozjgZ9Z6Lu444Gu5YCkXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtWShzcmM6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RyWzVdICogc3JjICsgdGhpcy5fdHJbMTNdO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7lgKTjgpLnj77lnKjjga7ooYzliJfjgafpgIboqIjnrpdcbiAgICovXG4gIHB1YmxpYyBpbnZlcnRUcmFuc2Zvcm1YKHNyYzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHNyYyAtIHRoaXMuX3RyWzEyXSkgLyB0aGlzLl90clswXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBZ6Lu444Gu5YCk44KS54++5Zyo44Gu6KGM5YiX44Gn6YCG6KiI566XXG4gICAqL1xuICBwdWJsaWMgaW52ZXJ0VHJhbnNmb3JtWShzcmM6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIChzcmMgLSB0aGlzLl90clsxM10pIC8gdGhpcy5fdHJbNV07XG4gIH1cblxuICAvKipcbiAgICog54++5Zyo44Gu6KGM5YiX44Gu5L2N572u44KS6LW354K544Gr44GX44Gm56e75YuVXG4gICAqXG4gICAqIOePvuWcqOOBruihjOWIl+OBruS9jee9ruOCkui1t+eCueOBq+OBl+OBpuebuOWvvueahOOBq+enu+WLleOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu56e75YuV6YePXG4gICAqIEBwYXJhbSB5IFnou7jjga7np7vli5Xph49cbiAgICovXG4gIHB1YmxpYyB0cmFuc2xhdGVSZWxhdGl2ZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHRyMTogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAxLjAsXG4gICAgICAwLjAsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICBdKTtcblxuICAgIEN1YmlzbU1hdHJpeDQ0Lm11bHRpcGx5KHRyMSwgdGhpcy5fdHIsIHRoaXMuX3RyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7ooYzliJfjga7kvY3nva7jgpLnp7vli5VcbiAgICpcbiAgICog54++5Zyo44Gu6KGM5YiX44Gu5L2N572u44KS5oyH5a6a44GX44Gf5L2N572u44G456e75YuV44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7np7vli5Xph49cbiAgICogQHBhcmFtIHkgeei7uOOBruenu+WLlemHj1xuICAgKi9cbiAgcHVibGljIHRyYW5zbGF0ZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3RyWzEyXSA9IHg7XG4gICAgdGhpcy5fdHJbMTNdID0geTtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7ooYzliJfjga5Y6Lu444Gu5L2N572u44KS5oyH5a6a44GX44Gf5L2N572u44G456e75YuV44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7np7vli5Xph49cbiAgICovXG4gIHB1YmxpYyB0cmFuc2xhdGVYKHg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3RyWzEyXSA9IHg7XG4gIH1cblxuICAvKipcbiAgICog54++5Zyo44Gu6KGM5YiX44GuWei7uOOBruS9jee9ruOCkuaMh+WumuOBl+OBn+S9jee9ruOBuOenu+WLleOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0geSBZ6Lu444Gu56e75YuV6YePXG4gICAqL1xuICBwdWJsaWMgdHJhbnNsYXRlWSh5OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl90clsxM10gPSB5O1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruihjOWIl+OBruaLoeWkp+eOh+OCkuebuOWvvueahOOBq+ioreWumuOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu5ouh5aSn546HXG4gICAqIEBwYXJhbSB5IFnou7jjga7mi6HlpKfnjodcbiAgICovXG4gIHB1YmxpYyBzY2FsZVJlbGF0aXZlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgdHIxOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgIHgsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICAwLjAsXG4gICAgICB5LFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgIF0pO1xuXG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOePvuWcqOOBruihjOWIl+OBruaLoeWkp+eOh+OCkuaMh+WumuOBl+OBn+WAjeeOh+OBq+ioreWumuOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu5ouh5aSn546HXG4gICAqIEBwYXJhbSB5IFnou7jjga7mi6HlpKfnjodcbiAgICovXG4gIHB1YmxpYyBzY2FsZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3RyWzBdID0geDtcbiAgICB0aGlzLl90cls1XSA9IHk7XG4gIH1cblxuICAvKipcbiAgICog54++5Zyo44Gu6KGM5YiX44Gr6KGM5YiX44KS5LmX566XXG4gICAqXG4gICAqIEBwYXJhbSBtIOihjOWIl1xuICAgKi9cbiAgcHVibGljIG11bHRpcGx5QnlNYXRyaXgobTogQ3ViaXNtTWF0cml4NDQpOiB2b2lkIHtcbiAgICBDdWJpc21NYXRyaXg0NC5tdWx0aXBseShtLmdldEFycmF5KCksIHRoaXMuX3RyLCB0aGlzLl90cik7XG4gIH1cblxuICAvKipcbiAgICog44Kq44OW44K444Kn44Kv44OI44Gu44Kz44OU44O844KS55Sf5oiQ44GZ44KLXG4gICAqL1xuICBwdWJsaWMgY2xvbmUoKTogQ3ViaXNtTWF0cml4NDQge1xuICAgIGNvbnN0IGNsb25lTWF0cml4OiBDdWJpc21NYXRyaXg0NCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ci5sZW5ndGg7IGkrKykge1xuICAgICAgY2xvbmVNYXRyaXguX3RyW2ldID0gdGhpcy5fdHJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lTWF0cml4O1xuICB9XG5cbiAgcHJvdGVjdGVkIF90cjogRmxvYXQzMkFycmF5OyAvLyA0eDTooYzliJfjg4fjg7zjgr9cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbWF0cml4NDQnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1hdHJpeDQ0ID0gJC5DdWJpc21NYXRyaXg0NDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTWF0cml4NDQgPSAkLkN1YmlzbU1hdHJpeDQ0O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgY3NtTWFwLCBpdGVyYXRvciB9IGZyb20gJy4uL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IEN1YmlzbU1hdHJpeDQ0IH0gZnJvbSAnLi9jdWJpc21tYXRyaXg0NCc7XG5cbi8qKlxuICog44Oi44OH44Or5bqn5qiZ6Kit5a6a55So44GuNHg06KGM5YiXXG4gKlxuICog44Oi44OH44Or5bqn5qiZ6Kit5a6a55So44GuNHg06KGM5YiX44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbE1hdHJpeCBleHRlbmRzIEN1YmlzbU1hdHJpeDQ0IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKlxuICAgKiBAcGFyYW0gdyDmqKrluYVcbiAgICogQHBhcmFtIGgg57im5bmFXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih3PzogbnVtYmVyLCBoPzogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX3dpZHRoID0gdyAhPT0gdW5kZWZpbmVkID8gdyA6IDAuMDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoICE9PSB1bmRlZmluZWQgPyBoIDogMC4wO1xuXG4gICAgdGhpcy5zZXRIZWlnaHQoMi4wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmqKrluYXjgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHcg5qiq5bmFXG4gICAqL1xuICBwdWJsaWMgc2V0V2lkdGgodzogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3Qgc2NhbGVYOiBudW1iZXIgPSB3IC8gdGhpcy5fd2lkdGg7XG4gICAgY29uc3Qgc2NhbGVZOiBudW1iZXIgPSBzY2FsZVg7XG4gICAgdGhpcy5zY2FsZShzY2FsZVgsIHNjYWxlWSk7XG4gIH1cblxuICAvKipcbiAgICog57im5bmF44KS6Kit5a6aXG4gICAqIEBwYXJhbSBoIOe4puW5hVxuICAgKi9cbiAgcHVibGljIHNldEhlaWdodChoOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBzY2FsZVg6IG51bWJlciA9IGggLyB0aGlzLl9oZWlnaHQ7XG4gICAgY29uc3Qgc2NhbGVZOiBudW1iZXIgPSBzY2FsZVg7XG4gICAgdGhpcy5zY2FsZShzY2FsZVgsIHNjYWxlWSk7XG4gIH1cblxuICAvKipcbiAgICog5L2N572u44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7kvY3nva5cbiAgICogQHBhcmFtIHkgWei7uOOBruS9jee9rlxuICAgKi9cbiAgcHVibGljIHNldFBvc2l0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy50cmFuc2xhdGUoeCwgeSk7XG4gIH1cblxuICAvKipcbiAgICog5Lit5b+D5L2N572u44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB4IFjou7jjga7kuK3lv4PkvY3nva5cbiAgICogQHBhcmFtIHkgWei7uOOBruS4reW/g+S9jee9rlxuICAgKlxuICAgKiBAbm90ZSB3aWR0aOOBi2hlaWdodOOCkuioreWumuOBl+OBn+OBguOBqOOBp+OBquOBhOOBqOOAgeaLoeWkp+eOh+OBjOato+OBl+OBj+WPluW+l+OBp+OBjeOBquOBhOOBn+OCgeOBmuOCjOOCi+OAglxuICAgKi9cbiAgcHVibGljIHNldENlbnRlclBvc2l0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgdGhpcy5jZW50ZXJYKHgpO1xuICAgIHRoaXMuY2VudGVyWSh5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuIrovrrjga7kvY3nva7jgpLoqK3lrprjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIHkg5LiK6L6644GuWei7uOS9jee9rlxuICAgKi9cbiAgcHVibGljIHRvcCh5OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnNldFkoeSk7XG4gIH1cblxuICAvKipcbiAgICog5LiL6L6644Gu5L2N572u44KS6Kit5a6a44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB5IOS4i+i+uuOBrlnou7jkvY3nva5cbiAgICovXG4gIHB1YmxpYyBib3R0b20oeTogbnVtYmVyKSB7XG4gICAgY29uc3QgaDogbnVtYmVyID0gdGhpcy5faGVpZ2h0ICogdGhpcy5nZXRTY2FsZVkoKTtcblxuICAgIHRoaXMudHJhbnNsYXRlWSh5IC0gaCk7XG4gIH1cblxuICAvKipcbiAgICog5bem6L6644Gu5L2N572u44KS6Kit5a6aXG4gICAqXG4gICAqIEBwYXJhbSB4IOW3pui+uuOBrljou7jkvY3nva5cbiAgICovXG4gIHB1YmxpYyBsZWZ0KHg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuc2V0WCh4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlj7Povrrjga7kvY3nva7jgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHgg5Y+z6L6644GuWOi7uOS9jee9rlxuICAgKi9cbiAgcHVibGljIHJpZ2h0KHg6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHcgPSB0aGlzLl93aWR0aCAqIHRoaXMuZ2V0U2NhbGVYKCk7XG5cbiAgICB0aGlzLnRyYW5zbGF0ZVgoeCAtIHcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7kuK3lv4PkvY3nva7jgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBruS4reW/g+S9jee9rlxuICAgKi9cbiAgcHVibGljIGNlbnRlclgoeDogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgdyA9IHRoaXMuX3dpZHRoICogdGhpcy5nZXRTY2FsZVgoKTtcblxuICAgIHRoaXMudHJhbnNsYXRlWCh4IC0gdyAvIDIuMCk7XG4gIH1cblxuICAvKipcbiAgICogWOi7uOOBruS9jee9ruOCkuioreWumlxuICAgKlxuICAgKiBAcGFyYW0geCBY6Lu444Gu5L2N572uXG4gICAqL1xuICBwdWJsaWMgc2V0WCh4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnRyYW5zbGF0ZVgoeCk7XG4gIH1cblxuICAvKipcbiAgICogWei7uOOBruS4reW/g+S9jee9ruOCkuioreWumlxuICAgKlxuICAgKiBAcGFyYW0geSBZ6Lu444Gu5Lit5b+D5L2N572uXG4gICAqL1xuICBwdWJsaWMgY2VudGVyWSh5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBoOiBudW1iZXIgPSB0aGlzLl9oZWlnaHQgKiB0aGlzLmdldFNjYWxlWSgpO1xuXG4gICAgdGhpcy50cmFuc2xhdGVZKHkgLSBoIC8gMi4wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBZ6Lu444Gu5L2N572u44KS6Kit5a6a44GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSB5IFnou7jjga7kvY3nva5cbiAgICovXG4gIHB1YmxpYyBzZXRZKHk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMudHJhbnNsYXRlWSh5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjgqTjgqLjgqbjg4jmg4XloLHjgYvjgonkvY3nva7jgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIGxheW91dCDjg6zjgqTjgqLjgqbjg4jmg4XloLFcbiAgICovXG4gIHB1YmxpYyBzZXR1cEZyb21MYXlvdXQobGF5b3V0OiBjc21NYXA8c3RyaW5nLCBudW1iZXI+KTogdm9pZCB7XG4gICAgY29uc3Qga2V5V2lkdGggPSAnd2lkdGgnO1xuICAgIGNvbnN0IGtleUhlaWdodCA9ICdoZWlnaHQnO1xuICAgIGNvbnN0IGtleVggPSAneCc7XG4gICAgY29uc3Qga2V5WSA9ICd5JztcbiAgICBjb25zdCBrZXlDZW50ZXJYID0gJ2NlbnRlcl94JztcbiAgICBjb25zdCBrZXlDZW50ZXJZID0gJ2NlbnRlcl95JztcbiAgICBjb25zdCBrZXlUb3AgPSAndG9wJztcbiAgICBjb25zdCBrZXlCb3R0b20gPSAnYm90dG9tJztcbiAgICBjb25zdCBrZXlMZWZ0ID0gJ2xlZnQnO1xuICAgIGNvbnN0IGtleVJpZ2h0ID0gJ3JpZ2h0JztcblxuICAgIGZvciAoXG4gICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPHN0cmluZywgbnVtYmVyPiA9IGxheW91dC5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKGxheW91dC5lbmQoKSk7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGNvbnN0IGtleTogc3RyaW5nID0gaXRlLnB0cigpLmZpcnN0O1xuICAgICAgY29uc3QgdmFsdWU6IG51bWJlciA9IGl0ZS5wdHIoKS5zZWNvbmQ7XG5cbiAgICAgIGlmIChrZXkgPT0ga2V5V2lkdGgpIHtcbiAgICAgICAgdGhpcy5zZXRXaWR0aCh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5zZXRIZWlnaHQodmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoXG4gICAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPHN0cmluZywgbnVtYmVyPiA9IGxheW91dC5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKGxheW91dC5lbmQoKSk7XG4gICAgICBpdGUucHJlSW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGNvbnN0IGtleTogc3RyaW5nID0gaXRlLnB0cigpLmZpcnN0O1xuICAgICAgY29uc3QgdmFsdWU6IG51bWJlciA9IGl0ZS5wdHIoKS5zZWNvbmQ7XG5cbiAgICAgIGlmIChrZXkgPT0ga2V5WCkge1xuICAgICAgICB0aGlzLnNldFgodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5WSkge1xuICAgICAgICB0aGlzLnNldFkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5Q2VudGVyWCkge1xuICAgICAgICB0aGlzLmNlbnRlclgodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5Q2VudGVyWSkge1xuICAgICAgICB0aGlzLmNlbnRlclkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT0ga2V5VG9wKSB7XG4gICAgICAgIHRoaXMudG9wKHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09IGtleUJvdHRvbSkge1xuICAgICAgICB0aGlzLmJvdHRvbSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlMZWZ0KSB7XG4gICAgICAgIHRoaXMubGVmdCh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PSBrZXlSaWdodCkge1xuICAgICAgICB0aGlzLnJpZ2h0KHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF93aWR0aDogbnVtYmVyOyAvLyDmqKrluYVcbiAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXI7IC8vIOe4puW5hVxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb2RlbG1hdHJpeCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWxNYXRyaXggPSAkLkN1YmlzbU1vZGVsTWF0cml4O1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb2RlbE1hdHJpeCA9ICQuQ3ViaXNtTW9kZWxNYXRyaXg7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21NYXRoIH0gZnJvbSAnLi9jdWJpc21tYXRoJztcblxuY29uc3QgRnJhbWVSYXRlID0gMzA7XG5jb25zdCBFcHNpbG9uID0gMC4wMTtcblxuLyoqXG4gKiDpoZTjga7lkJHjgY3jga7liLblvqHmqZ/og71cbiAqXG4gKiDpoZTjga7lkJHjgY3jga7liLblvqHmqZ/og73jgpLmj5DkvpvjgZnjgovjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVRhcmdldFBvaW50IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2ZhY2VUYXJnZXRYID0gMC4wO1xuICAgIHRoaXMuX2ZhY2VUYXJnZXRZID0gMC4wO1xuICAgIHRoaXMuX2ZhY2VYID0gMC4wO1xuICAgIHRoaXMuX2ZhY2VZID0gMC4wO1xuICAgIHRoaXMuX2ZhY2VWWCA9IDAuMDtcbiAgICB0aGlzLl9mYWNlVlkgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFRpbWVTZWNvbmRzID0gMC4wO1xuICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmm7TmlrDlh6bnkIZcbiAgICovXG4gIHB1YmxpYyB1cGRhdGUoZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8g44OH44Or44K/5pmC6ZaT44KS5Yqg566X44GZ44KLXG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICs9IGRlbHRhVGltZVNlY29uZHM7XG5cbiAgICAvLyDpppbjgpLkuK3lpK7jgYvjgonlt6blj7PjgavmjK/jgovjgajjgY3jga7lubPlnYfnmoTjgarpgJ/jgZXjga8g56eS6YCf5bqm44CC5Yqg6YCf44O75rib6YCf44KS6ICD5oWu44GX44Gm44CB44Gd44Gu77yS5YCN44KS5pyA6auY6YCf5bqm44Go44GZ44KLXG4gICAgLy8g6aGU44Gu5oyv44KK5YW35ZCI44KS44CB5Lit5aSu77yIMC4w77yJ44GL44KJ44CB5bem5Y+z44Gv77yIKy0xLjDvvInjgajjgZnjgotcbiAgICBjb25zdCBmYWNlUGFyYW1NYXhWOiBudW1iZXIgPSA0MC4wIC8gMTAuMDsgLy8gNy4156eS6ZaT44GrNDDliIbnp7vli5UoNS4zL3NjKVxuICAgIGNvbnN0IG1heFY6IG51bWJlciA9IChmYWNlUGFyYW1NYXhWICogMS4wKSAvIEZyYW1lUmF0ZTsgLy8gMWZyYW1l44GC44Gf44KK44Gr5aSJ5YyW44Gn44GN44KL6YCf5bqm44Gu5LiK6ZmQXG5cbiAgICBpZiAodGhpcy5fbGFzdFRpbWVTZWNvbmRzID09IDAuMCkge1xuICAgICAgdGhpcy5fbGFzdFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRlbHRhVGltZVdlaWdodDogbnVtYmVyID1cbiAgICAgICh0aGlzLl91c2VyVGltZVNlY29uZHMgLSB0aGlzLl9sYXN0VGltZVNlY29uZHMpICogRnJhbWVSYXRlO1xuICAgIHRoaXMuX2xhc3RUaW1lU2Vjb25kcyA9IHRoaXMuX3VzZXJUaW1lU2Vjb25kcztcblxuICAgIC8vIOacgOmrmOmAn+W6puOBq+OBquOCi+OBvuOBp+OBruaZgumWk+OCklxuICAgIGNvbnN0IHRpbWVUb01heFNwZWVkID0gMC4xNTtcbiAgICBjb25zdCBmcmFtZVRvTWF4U3BlZWQ6IG51bWJlciA9IHRpbWVUb01heFNwZWVkICogRnJhbWVSYXRlOyAvLyBzZWMgKiBmcmFtZS9zZWNcbiAgICBjb25zdCBtYXhBOiBudW1iZXIgPSAoZGVsdGFUaW1lV2VpZ2h0ICogbWF4VikgLyBmcmFtZVRvTWF4U3BlZWQ7IC8vIDFmcmFtZeOBguOBn+OCiuOBruWKoOmAn+W6plxuXG4gICAgLy8g55uu5oyH44GZ5ZCR44GN44Gv44CB77yIZHgsIGR577yJ5pa55ZCR44Gu44OZ44Kv44OI44Or44Go44Gq44KLXG4gICAgY29uc3QgZHg6IG51bWJlciA9IHRoaXMuX2ZhY2VUYXJnZXRYIC0gdGhpcy5fZmFjZVg7XG4gICAgY29uc3QgZHk6IG51bWJlciA9IHRoaXMuX2ZhY2VUYXJnZXRZIC0gdGhpcy5fZmFjZVk7XG5cbiAgICBpZiAoQ3ViaXNtTWF0aC5hYnMoZHgpIDw9IEVwc2lsb24gJiYgQ3ViaXNtTWF0aC5hYnMoZHkpIDw9IEVwc2lsb24pIHtcbiAgICAgIHJldHVybjsgLy8g5aSJ5YyW44Gq44GXXG4gICAgfVxuXG4gICAgLy8g6YCf5bqm44Gu5pyA5aSn44KI44KK44KC5aSn44GN44GE5aC05ZCI44Gv44CB6YCf5bqm44KS6JC944Go44GZXG4gICAgY29uc3QgZDogbnVtYmVyID0gQ3ViaXNtTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblxuICAgIC8vIOmAsuihjOaWueWQkeOBruacgOWkp+mAn+W6puODmeOCr+ODiOODq1xuICAgIGNvbnN0IHZ4OiBudW1iZXIgPSAobWF4ViAqIGR4KSAvIGQ7XG4gICAgY29uc3Qgdnk6IG51bWJlciA9IChtYXhWICogZHkpIC8gZDtcblxuICAgIC8vIOePvuWcqOOBrumAn+W6puOBi+OCieOAgeaWsOimj+mAn+W6puOBuOOBruWkieWMlu+8iOWKoOmAn+W6pu+8ieOCkuaxguOCgeOCi1xuICAgIGxldCBheDogbnVtYmVyID0gdnggLSB0aGlzLl9mYWNlVlg7XG4gICAgbGV0IGF5OiBudW1iZXIgPSB2eSAtIHRoaXMuX2ZhY2VWWTtcblxuICAgIGNvbnN0IGE6IG51bWJlciA9IEN1YmlzbU1hdGguc3FydChheCAqIGF4ICsgYXkgKiBheSk7XG5cbiAgICAvLyDliqDpgJ/jga7jgajjgY1cbiAgICBpZiAoYSA8IC1tYXhBIHx8IGEgPiBtYXhBKSB7XG4gICAgICBheCAqPSBtYXhBIC8gYTtcbiAgICAgIGF5ICo9IG1heEEgLyBhO1xuICAgIH1cblxuICAgIC8vIOWKoOmAn+W6puOCkuWFg+OBrumAn+W6puOBq+i2s+OBl+OBpuOAgeaWsOmAn+W6puOBqOOBmeOCi1xuICAgIHRoaXMuX2ZhY2VWWCArPSBheDtcbiAgICB0aGlzLl9mYWNlVlkgKz0gYXk7XG5cbiAgICAvLyDnm67nmoTjga7mlrnlkJHjgavov5HjgaXjgYTjgZ/jgajjgY3jgIHmu5HjgonjgYvjgavmuJvpgJ/jgZnjgovjgZ/jgoHjga7lh6bnkIZcbiAgICAvLyDoqK3lrprjgZXjgozjgZ/liqDpgJ/luqbjgafmraLjgb7jgovkuovjga7lh7rmnaXjgovot53pm6LjgajpgJ/luqbjga7plqLkv4LjgYvjgolcbiAgICAvLyDnj77lnKjjgajjgorjgYbjgovmnIDpq5jpgJ/luqbjgpLoqIjnrpfjgZfjgIHjgZ3jgozku6XkuIrjga7mmYLjga/pgJ/luqbjgpLokL3jgajjgZlcbiAgICAvLyDigLvmnKzmnaXjgIHkurrplpPjga/nrYvlipvjgaflipvvvIjliqDpgJ/luqbvvInjgpLoqr/mlbTjgafjgY3jgovjgZ/jgoHjgIHjgojjgoroh6rnlLHluqbjgYzpq5jjgYTjgYzjgIHnsKHljZjjgarlh6bnkIbjgafmuIjjgb7jgZvjgabjgYTjgotcbiAgICB7XG4gICAgICAvLyDliqDpgJ/luqbjgIHpgJ/luqbjgIHot53pm6Ljga7plqLkv4LlvI/jgIJcbiAgICAgIC8vICAgICAgICAgICAgMiAgNiAgICAgICAgICAgMiAgICAgICAgICAgICAgIDNcbiAgICAgIC8vICAgICAgc3FydChhICB0ICArIDE2IGEgaCB0ICAtIDggYSBoKSAtIGEgdFxuICAgICAgLy8gdiA9IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgMlxuICAgICAgLy8gICAgICAgICAgICAgICAgIDQgdCAgLSAyXG4gICAgICAvLyAodD0xKVxuICAgICAgLy8gXHTmmYLliLt044Gv44CB44GC44KJ44GL44GY44KB5Yqg6YCf5bqm44CB6YCf5bqm44KSMS82MCjjg5Xjg6zjg7zjg6Djg6zjg7zjg4jjgIHljZjkvY3jgarjgZcp44GnXG4gICAgICAvLyBcdOiAg+OBiOOBpuOBhOOCi+OBruOBp+OAgXTvvJ3vvJHjgajjgZfjgabmtojjgZfjgabjgojjgYTvvIjigLvmnKrmpJzoqLzvvIlcblxuICAgICAgY29uc3QgbWF4VjogbnVtYmVyID1cbiAgICAgICAgMC41ICpcbiAgICAgICAgKEN1YmlzbU1hdGguc3FydChtYXhBICogbWF4QSArIDE2LjAgKiBtYXhBICogZCAtIDguMCAqIG1heEEgKiBkKSAtXG4gICAgICAgICAgbWF4QSk7XG4gICAgICBjb25zdCBjdXJWOiBudW1iZXIgPSBDdWJpc21NYXRoLnNxcnQoXG4gICAgICAgIHRoaXMuX2ZhY2VWWCAqIHRoaXMuX2ZhY2VWWCArIHRoaXMuX2ZhY2VWWSAqIHRoaXMuX2ZhY2VWWVxuICAgICAgKTtcblxuICAgICAgaWYgKGN1clYgPiBtYXhWKSB7XG4gICAgICAgIC8vIOePvuWcqOOBrumAn+W6piA+IOacgOmrmOmAn+W6puOBruOBqOOBjeOAgeacgOmrmOmAn+W6puOBvuOBp+a4m+mAn1xuICAgICAgICB0aGlzLl9mYWNlVlggKj0gbWF4ViAvIGN1clY7XG4gICAgICAgIHRoaXMuX2ZhY2VWWSAqPSBtYXhWIC8gY3VyVjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9mYWNlWCArPSB0aGlzLl9mYWNlVlg7XG4gICAgdGhpcy5fZmFjZVkgKz0gdGhpcy5fZmFjZVZZO1xuICB9XG5cbiAgLyoqXG4gICAqIFjou7jjga7poZTjga7lkJHjgY3jga7lgKTjgpLlj5blvpdcbiAgICpcbiAgICogQHJldHVybiBY6Lu444Gu6aGU44Gu5ZCR44GN44Gu5YCk77yILTEuMCB+IDEuMO+8iVxuICAgKi9cbiAgcHVibGljIGdldFgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZmFjZVg7XG4gIH1cblxuICAvKipcbiAgICogWei7uOOBrumhlOOBruWQkeOBjeOBruWApOOCkuWPluW+l1xuICAgKlxuICAgKiBAcmV0dXJuIFnou7jjga7poZTjga7lkJHjgY3jga7lgKTvvIgtMS4wIH4gMS4w77yJXG4gICAqL1xuICBwdWJsaWMgZ2V0WSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9mYWNlWTtcbiAgfVxuXG4gIC8qKlxuICAgKiDpoZTjga7lkJHjgY3jga7nm67mqJnlgKTjgpLoqK3lrppcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBrumhlOOBruWQkeOBjeOBruWApO+8iC0xLjAgfiAxLjDvvIlcbiAgICogQHBhcmFtIHkgWei7uOOBrumhlOOBruWQkeOBjeOBruWApO+8iC0xLjAgfiAxLjDvvIlcbiAgICovXG4gIHB1YmxpYyBzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9mYWNlVGFyZ2V0WCA9IHg7XG4gICAgdGhpcy5fZmFjZVRhcmdldFkgPSB5O1xuICB9XG5cbiAgcHJpdmF0ZSBfZmFjZVRhcmdldFg6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GN44GuWOebruaomeWApO+8iOOBk+OBruWApOOBq+i/keOBpeOBhOOBpuOBhOOBj++8iVxuICBwcml2YXRlIF9mYWNlVGFyZ2V0WTogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY3jga5Z55uu5qiZ5YCk77yI44GT44Gu5YCk44Gr6L+R44Gl44GE44Gm44GE44GP77yJXG4gIHByaXZhdGUgX2ZhY2VYOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjVjvvIgtMS4wIH4gMS4w77yJXG4gIHByaXZhdGUgX2ZhY2VZOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjVnvvIgtMS4wIH4gMS4w77yJXG4gIHByaXZhdGUgX2ZhY2VWWDogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY3jga7lpInljJbpgJ/luqZYXG4gIHByaXZhdGUgX2ZhY2VWWTogbnVtYmVyOyAvLyDpoZTjga7lkJHjgY3jga7lpInljJbpgJ/luqZZXG4gIHByaXZhdGUgX2xhc3RUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDmnIDlvozjga7lrp/ooYzmmYLplpNb56eSXVxuICBwcml2YXRlIF91c2VyVGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtdGFyZ2V0cG9pbnQnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVRhcmdldFBvaW50ID0gJC5DdWJpc21UYXJnZXRQb2ludDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtVGFyZ2V0UG9pbnQgPSAkLkN1YmlzbVRhcmdldFBvaW50O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiAy5qyh5YWD44OZ44Kv44OI44Or5Z6LXG4gKlxuICogMuasoeWFg+ODmeOCr+ODiOODq+Wei+OBruapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtVmVjdG9yMiB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgeD86IG51bWJlciwgcHVibGljIHk/OiBudW1iZXIpIHtcbiAgICB0aGlzLnggPSB4ID09IHVuZGVmaW5lZCA/IDAuMCA6IHg7XG5cbiAgICB0aGlzLnkgPSB5ID09IHVuZGVmaW5lZCA/IDAuMCA6IHk7XG4gIH1cblxuICAvKipcbiAgICog44OZ44Kv44OI44Or44Gu5Yqg566XXG4gICAqXG4gICAqIEBwYXJhbSB2ZWN0b3IyIOWKoOeul+OBmeOCi+ODmeOCr+ODiOODq+WApFxuICAgKiBAcmV0dXJuIOWKoOeul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICovXG4gIHB1YmxpYyBhZGQodmVjdG9yMjogQ3ViaXNtVmVjdG9yMik6IEN1YmlzbVZlY3RvcjIge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICByZXQueCA9IHRoaXMueCArIHZlY3RvcjIueDtcbiAgICByZXQueSA9IHRoaXMueSArIHZlY3RvcjIueTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODmeOCr+ODiOODq+OBrua4m+eul1xuICAgKlxuICAgKiBAcGFyYW0gdmVjdG9yMiDmuJvnrpfjgZnjgovjg5njgq/jg4jjg6vlgKRcbiAgICogQHJldHVybiDmuJvnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXG4gICAqL1xuICBwdWJsaWMgc3Vic3RyYWN0KHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgcmV0LnggPSB0aGlzLnggLSB2ZWN0b3IyLng7XG4gICAgcmV0LnkgPSB0aGlzLnkgLSB2ZWN0b3IyLnk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7kuZfnrpdcbiAgICpcbiAgICogQHBhcmFtIHZlY3RvcjIg5LmX566X44GZ44KL44OZ44Kv44OI44Or5YCkXG4gICAqIEByZXR1cm4g5LmX566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgKi9cbiAgcHVibGljIG11bHRpcGx5KHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgcmV0LnggPSB0aGlzLnggKiB2ZWN0b3IyLng7XG4gICAgcmV0LnkgPSB0aGlzLnkgKiB2ZWN0b3IyLnk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7kuZfnrpco44K544Kr44Op44O8KVxuICAgKlxuICAgKiBAcGFyYW0gc2NhbGFyIOS5l+eul+OBmeOCi+OCueOCq+ODqeODvOWApFxuICAgKiBAcmV0dXJuIOS5l+eul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICovXG4gIHB1YmxpYyBtdWx0aXBseUJ5U2NhbGVyKHNjYWxhcjogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMubXVsdGlwbHkobmV3IEN1YmlzbVZlY3RvcjIoc2NhbGFyLCBzY2FsYXIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7pmaTnrpdcbiAgICpcbiAgICogQHBhcmFtIHZlY3RvcjIg6Zmk566X44GZ44KL44OZ44Kv44OI44Or5YCkXG4gICAqIEByZXR1cm4g6Zmk566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxuICAgKi9cbiAgcHVibGljIGRpdmlzaW9uKHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gICAgcmV0LnggPSB0aGlzLnggLyB2ZWN0b3IyLng7XG4gICAgcmV0LnkgPSB0aGlzLnkgLyB2ZWN0b3IyLnk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7pmaTnrpco44K544Kr44Op44O8KVxuICAgKlxuICAgKiBAcGFyYW0gc2NhbGFyIOmZpOeul+OBmeOCi+OCueOCq+ODqeODvOWApFxuICAgKiBAcmV0dXJuIOmZpOeul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcbiAgICovXG4gIHB1YmxpYyBkaXZpc2lvbkJ5U2NhbGFyKHNjYWxhcjogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuZGl2aXNpb24obmV3IEN1YmlzbVZlY3RvcjIoc2NhbGFyLCBzY2FsYXIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5njgq/jg4jjg6vjga7plbfjgZXjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHJldHVybiDjg5njgq/jg4jjg6vjga7plbfjgZVcbiAgICovXG4gIHB1YmxpYyBnZXRMZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSk7XG4gIH1cblxuICAvKipcbiAgICog44OZ44Kv44OI44Or44Gu6Led6Zui44Gu5Y+W5b6XXG4gICAqXG4gICAqIEBwYXJhbSBhIOeCuVxuICAgKiBAcmV0dXJuIOODmeOCr+ODiOODq+OBrui3nembolxuICAgKi9cbiAgcHVibGljIGdldERpc3RhbmNlV2l0aChhOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KFxuICAgICAgKHRoaXMueCAtIGEueCkgKiAodGhpcy54IC0gYS54KSArICh0aGlzLnkgLSBhLnkpICogKHRoaXMueSAtIGEueSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODieODg+ODiOepjeOBruioiOeul1xuICAgKlxuICAgKiBAcGFyYW0gYSDlgKRcbiAgICogQHJldHVybiDntZDmnpxcbiAgICovXG4gIHB1YmxpYyBkb3QoYTogQ3ViaXNtVmVjdG9yMik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMueCAqIGEueCArIHRoaXMueSAqIGEueTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjga7pgannlKhcbiAgICovXG4gIHB1YmxpYyBub3JtYWxpemUoKTogdm9pZCB7XG4gICAgY29uc3QgbGVuZ3RoOiBudW1iZXIgPSBNYXRoLnBvdyh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnksIDAuNSk7XG5cbiAgICB0aGlzLnggPSB0aGlzLnggLyBsZW5ndGg7XG4gICAgdGhpcy55ID0gdGhpcy55IC8gbGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIOetieOBl+OBleOBrueiuuiqje+8iOetieOBl+OBhOOBi++8n++8iVxuICAgKlxuICAgKiDlgKTjgYznrYnjgZfjgYTjgYvvvJ9cbiAgICpcbiAgICogQHBhcmFtIHJocyDnorroqo3jgZnjgovlgKRcbiAgICogQHJldHVybiB0cnVlIOWApOOBr+etieOBl+OBhFxuICAgKiBAcmV0dXJuIGZhbHNlIOWApOOBr+etieOBl+OBj+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRXF1YWwocmhzOiBDdWJpc21WZWN0b3IyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMueCA9PSByaHMueCAmJiB0aGlzLnkgPT0gcmhzLnk7XG4gIH1cblxuICAvKipcbiAgICog562J44GX44GV44Gu56K66KqN77yI562J44GX44GP44Gq44GE44GL77yf77yJXG4gICAqXG4gICAqIOWApOOBjOetieOBl+OBj+OBquOBhOOBi++8n1xuICAgKlxuICAgKiBAcGFyYW0gcmhzIOeiuuiqjeOBmeOCi+WApFxuICAgKiBAcmV0dXJuIHRydWUg5YCk44Gv562J44GX44GP44Gq44GEXG4gICAqIEByZXR1cm4gZmFsc2Ug5YCk44Gv562J44GX44GEXG4gICAqL1xuICBwdWJsaWMgaXNOb3RFcXVhbChyaHM6IEN1YmlzbVZlY3RvcjIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuaXNFcXVhbChyaHMpO1xuICB9XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXZlY3RvcjInO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVZlY3RvcjIgPSAkLkN1YmlzbVZlY3RvcjI7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVZlY3RvcjIgPSAkLkN1YmlzbVZlY3RvcjI7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJy4vY3ViaXNtbWF0cml4NDQnO1xuXG4vKipcbiAqIOOCq+ODoeODqeOBruS9jee9ruWkieabtOOBq+S9v+OBhuOBqOS+v+WIqeOBqjR4NOihjOWIl1xuICpcbiAqIOOCq+ODoeODqeOBruS9jee9ruWkieabtOOBq+S9v+OBhuOBqOS+v+WIqeOBqjR4NOihjOWIl+OBruOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtVmlld01hdHJpeCBleHRlbmRzIEN1YmlzbU1hdHJpeDQ0IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc2NyZWVuTGVmdCA9IDAuMDtcbiAgICB0aGlzLl9zY3JlZW5SaWdodCA9IDAuMDtcbiAgICB0aGlzLl9zY3JlZW5Ub3AgPSAwLjA7XG4gICAgdGhpcy5fc2NyZWVuQm90dG9tID0gMC4wO1xuICAgIHRoaXMuX21heExlZnQgPSAwLjA7XG4gICAgdGhpcy5fbWF4UmlnaHQgPSAwLjA7XG4gICAgdGhpcy5fbWF4VG9wID0gMC4wO1xuICAgIHRoaXMuX21heEJvdHRvbSA9IDAuMDtcbiAgICB0aGlzLl9tYXhTY2FsZSA9IDAuMDtcbiAgICB0aGlzLl9taW5TY2FsZSA9IDAuMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnp7vli5XjgpLoqr/mlbRcbiAgICpcbiAgICogQHBhcmFtIHggWOi7uOOBruenu+WLlemHj1xuICAgKiBAcGFyYW0geSBZ6Lu444Gu56e75YuV6YePXG4gICAqL1xuICBwdWJsaWMgYWRqdXN0VHJhbnNsYXRlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3RyWzBdICogdGhpcy5fbWF4TGVmdCArICh0aGlzLl90clsxMl0gKyB4KSA+IHRoaXMuX3NjcmVlbkxlZnQpIHtcbiAgICAgIHggPSB0aGlzLl9zY3JlZW5MZWZ0IC0gdGhpcy5fdHJbMF0gKiB0aGlzLl9tYXhMZWZ0IC0gdGhpcy5fdHJbMTJdO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl90clswXSAqIHRoaXMuX21heFJpZ2h0ICsgKHRoaXMuX3RyWzEyXSArIHgpIDwgdGhpcy5fc2NyZWVuUmlnaHQpIHtcbiAgICAgIHggPSB0aGlzLl9zY3JlZW5SaWdodCAtIHRoaXMuX3RyWzBdICogdGhpcy5fbWF4UmlnaHQgLSB0aGlzLl90clsxMl07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RyWzVdICogdGhpcy5fbWF4VG9wICsgKHRoaXMuX3RyWzEzXSArIHkpIDwgdGhpcy5fc2NyZWVuVG9wKSB7XG4gICAgICB5ID0gdGhpcy5fc2NyZWVuVG9wIC0gdGhpcy5fdHJbNV0gKiB0aGlzLl9tYXhUb3AgLSB0aGlzLl90clsxM107XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdGhpcy5fdHJbNV0gKiB0aGlzLl9tYXhCb3R0b20gKyAodGhpcy5fdHJbMTNdICsgeSkgPlxuICAgICAgdGhpcy5fc2NyZWVuQm90dG9tXG4gICAgKSB7XG4gICAgICB5ID0gdGhpcy5fc2NyZWVuQm90dG9tIC0gdGhpcy5fdHJbNV0gKiB0aGlzLl9tYXhCb3R0b20gLSB0aGlzLl90clsxM107XG4gICAgfVxuXG4gICAgY29uc3QgdHIxOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgIF0pO1xuXG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOaLoeWkp+eOh+OCkuiqv+aVtFxuICAgKlxuICAgKiBAcGFyYW0gY3gg5ouh5aSn44KS6KGM44GGWOi7uOOBruS4reW/g+S9jee9rlxuICAgKiBAcGFyYW0gY3kg5ouh5aSn44KS6KGM44GGWei7uOOBruS4reW/g+S9jee9rlxuICAgKiBAcGFyYW0gc2NhbGUg5ouh5aSn546HXG4gICAqL1xuICBwdWJsaWMgYWRqdXN0U2NhbGUoY3g6IG51bWJlciwgY3k6IG51bWJlciwgc2NhbGU6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IG1heFNjYWxlOiBudW1iZXIgPSB0aGlzLmdldE1heFNjYWxlKCk7XG4gICAgY29uc3QgbWluU2NhbGU6IG51bWJlciA9IHRoaXMuZ2V0TWluU2NhbGUoKTtcblxuICAgIGNvbnN0IHRhcmdldFNjYWxlID0gc2NhbGUgKiB0aGlzLl90clswXTtcblxuICAgIGlmICh0YXJnZXRTY2FsZSA8IG1pblNjYWxlKSB7XG4gICAgICBpZiAodGhpcy5fdHJbMF0gPiAwLjApIHtcbiAgICAgICAgc2NhbGUgPSBtaW5TY2FsZSAvIHRoaXMuX3RyWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGFyZ2V0U2NhbGUgPiBtYXhTY2FsZSkge1xuICAgICAgaWYgKHRoaXMuX3RyWzBdID4gMC4wKSB7XG4gICAgICAgIHNjYWxlID0gbWF4U2NhbGUgLyB0aGlzLl90clswXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB0cjE6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgY3gsXG4gICAgICBjeSxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICBdKTtcblxuICAgIGNvbnN0IHRyMjogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICBzY2FsZSxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIHNjYWxlLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMC4wLFxuICAgICAgMS4wLFxuICAgIF0pO1xuXG4gICAgY29uc3QgdHIzOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICAgIDAuMCxcbiAgICAgIC1jeCxcbiAgICAgIC1jeSxcbiAgICAgIDAuMCxcbiAgICAgIDEuMCxcbiAgICBdKTtcblxuICAgIEN1YmlzbU1hdHJpeDQ0Lm11bHRpcGx5KHRyMywgdGhpcy5fdHIsIHRoaXMuX3RyKTtcbiAgICBDdWJpc21NYXRyaXg0NC5tdWx0aXBseSh0cjIsIHRoaXMuX3RyLCB0aGlzLl90cik7XG4gICAgQ3ViaXNtTWF0cml4NDQubXVsdGlwbHkodHIxLCB0aGlzLl90ciwgdGhpcy5fdHIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+mkiueUn+OBruevhOWbsuOBruioreWumlxuICAgKlxuICAgKiBAcGFyYW0gbGVmdCAgICAgIOW3pui+uuOBrljou7jjga7kvY3nva5cbiAgICogQHBhcmFtIHJpZ2h0ICAgICDlj7Povrrjga5Y6Lu444Gu5L2N572uXG4gICAqIEBwYXJhbSBib3R0b20gICAg5LiL6L6644GuWei7uOOBruS9jee9rlxuICAgKiBAcGFyYW0gdG9wICAgICAgIOS4iui+uuOBrlnou7jjga7kvY3nva5cbiAgICovXG4gIHB1YmxpYyBzZXRTY3JlZW5SZWN0KFxuICAgIGxlZnQ6IG51bWJlcixcbiAgICByaWdodDogbnVtYmVyLFxuICAgIGJvdHRvbTogbnVtYmVyLFxuICAgIHRvcDogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIHRoaXMuX3NjcmVlbkxlZnQgPSBsZWZ0O1xuICAgIHRoaXMuX3NjcmVlblJpZ2h0ID0gcmlnaHQ7XG4gICAgdGhpcy5fc2NyZWVuQm90dG9tID0gYm90dG9tO1xuICAgIHRoaXMuX3NjcmVlblRvcCA9IHRvcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnkuIrjga7np7vli5Xlj6/og73nr4Tlm7Ljga7oqK3lrppcbiAgICogQHBhcmFtIGxlZnQgICAgICDlt6bovrrjga5Y6Lu444Gu5L2N572uXG4gICAqIEBwYXJhbSByaWdodCAgICAg5Y+z6L6644GuWOi7uOOBruS9jee9rlxuICAgKiBAcGFyYW0gYm90dG9tICAgIOS4i+i+uuOBrlnou7jjga7kvY3nva5cbiAgICogQHBhcmFtIHRvcCAgICAgICDkuIrovrrjga5Z6Lu444Gu5L2N572uXG4gICAqL1xuICBwdWJsaWMgc2V0TWF4U2NyZWVuUmVjdChcbiAgICBsZWZ0OiBudW1iZXIsXG4gICAgcmlnaHQ6IG51bWJlcixcbiAgICBib3R0b206IG51bWJlcixcbiAgICB0b3A6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9tYXhMZWZ0ID0gbGVmdDtcbiAgICB0aGlzLl9tYXhSaWdodCA9IHJpZ2h0O1xuICAgIHRoaXMuX21heFRvcCA9IHRvcDtcbiAgICB0aGlzLl9tYXhCb3R0b20gPSBib3R0b207XG4gIH1cblxuICAvKipcbiAgICog5pyA5aSn5ouh5aSn546H44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBtYXhTY2FsZSDmnIDlpKfmi6HlpKfnjodcbiAgICovXG4gIHB1YmxpYyBzZXRNYXhTY2FsZShtYXhTY2FsZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbWF4U2NhbGUgPSBtYXhTY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmnIDlsI/mi6HlpKfnjofjga7oqK3lrppcbiAgICogQHBhcmFtIG1pblNjYWxlIOacgOWwj+aLoeWkp+eOh1xuICAgKi9cbiAgcHVibGljIHNldE1pblNjYWxlKG1pblNjYWxlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9taW5TY2FsZSA9IG1pblNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOacgOWkp+aLoeWkp+eOh+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOacgOWkp+aLoeWkp+eOh1xuICAgKi9cbiAgcHVibGljIGdldE1heFNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21heFNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOacgOWwj+aLoeWkp+eOh+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOacgOWwj+aLoeWkp+eOh1xuICAgKi9cbiAgcHVibGljIGdldE1pblNjYWxlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21pblNjYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOaLoeWkp+eOh+OBjOacgOWkp+OBq+OBquOBo+OBpuOBhOOCi+OBi+OCkueiuuiqjeOBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJuIHRydWUg5ouh5aSn546H44Gv5pyA5aSnXG4gICAqIEByZXR1cm4gZmFsc2Ug5ouh5aSn546H44Gv5pyA5aSn44Gn44Gv44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNNYXhTY2FsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTY2FsZVgoKSA+PSB0aGlzLl9tYXhTY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmi6HlpKfnjofjgYzmnIDlsI/jgavjgarjgaPjgabjgYTjgovjgYvjgpLnorroqo3jgZnjgotcbiAgICpcbiAgICogQHJldHVybiB0cnVlIOaLoeWkp+eOh+OBr+acgOWwj1xuICAgKiBAcmV0dXJuIGZhbHNlIOaLoeWkp+eOh+OBr+acgOWwj+OBp+OBr+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzTWluU2NhbGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2NhbGVYKCkgPD0gdGhpcy5fbWluU2NhbGU7XG4gIH1cblxuICAvKipcbiAgICog44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5bem6L6644Gu77y46Lu45L2N572u44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5bem6L6644GuWOi7uOS9jee9rlxuICAgKi9cbiAgcHVibGljIGdldFNjcmVlbkxlZnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuTGVmdDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7lj7Povrrjga7vvLjou7jkvY3nva7jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7lj7Povrrjga5Y6Lu45L2N572uXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NyZWVuUmlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuUmlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ44Gu5LiL6L6644GuWei7uOS9jee9ruOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruS4i+i+uuOBrlnou7jkvY3nva5cbiAgICovXG4gIHB1YmxpYyBnZXRTY3JlZW5Cb3R0b20oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuQm90dG9tO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeOBruS4iui+uuOBrlnou7jkvY3nva7jgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovoq5bnkIbluqfmqJnjga7kuIrovrrjga5Z6Lu45L2N572uXG4gICAqL1xuICBwdWJsaWMgZ2V0U2NyZWVuVG9wKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NjcmVlblRvcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlt6bovrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5bem6L6644GuWOi7uOS9jee9ruOBruacgOWkp+WApFxuICAgKi9cbiAgcHVibGljIGdldE1heExlZnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4TGVmdDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlj7Povrrjga5Y6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5Y+z6L6644GuWOi7uOS9jee9ruOBruacgOWkp+WApFxuICAgKi9cbiAgcHVibGljIGdldE1heFJpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21heFJpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOS4i+i+uuOBrlnou7jkvY3nva7jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHJldHVybiDkuIvovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0TWF4Qm90dG9tKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21heEJvdHRvbTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuIrovrrjga5Z6Lu45L2N572u44Gu5pyA5aSn5YCk44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g5LiK6L6644GuWei7uOS9jee9ruOBruacgOWkp+WApFxuICAgKi9cbiAgcHVibGljIGdldE1heFRvcCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9tYXhUb3A7XG4gIH1cblxuICBwcml2YXRlIF9zY3JlZW5MZWZ0OiBudW1iZXI7IC8vIOODh+ODkOOCpOOCueOBq+WvvuW/nOOBmeOCi+irlueQhuW6p+aomeS4iuOBruevhOWbsu+8iOW3pui+uljou7jkvY3nva7vvIlcbiAgcHJpdmF0ZSBfc2NyZWVuUmlnaHQ6IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5Y+z6L66WOi7uOS9jee9ru+8iVxuICBwcml2YXRlIF9zY3JlZW5Ub3A6IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5LiK6L66Wei7uOS9jee9ru+8iVxuICBwcml2YXRlIF9zY3JlZW5Cb3R0b206IG51bWJlcjsgLy8g44OH44OQ44Kk44K544Gr5a++5b+c44GZ44KL6KuW55CG5bqn5qiZ5LiK44Gu56+E5Zuy77yI5LiL6L66Wei7uOS9jee9ru+8iVxuICBwcml2YXRlIF9tYXhMZWZ0OiBudW1iZXI7IC8vIOirlueQhuW6p+aomeS4iuOBruenu+WLleWPr+iDveevhOWbsu+8iOW3pui+uljou7jkvY3nva7vvIlcbiAgcHJpdmF0ZSBfbWF4UmlnaHQ6IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5Y+z6L66WOi7uOS9jee9ru+8iVxuICBwcml2YXRlIF9tYXhUb3A6IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5LiK6L66Wei7uOS9jee9ru+8iVxuICBwcml2YXRlIF9tYXhCb3R0b206IG51bWJlcjsgLy8g6KuW55CG5bqn5qiZ5LiK44Gu56e75YuV5Y+v6IO956+E5Zuy77yI5LiL6L66Wei7uOS9jee9ru+8iVxuICBwcml2YXRlIF9tYXhTY2FsZTogbnVtYmVyOyAvLyDmi6HlpKfnjofjga7mnIDlpKflgKRcbiAgcHJpdmF0ZSBfbWluU2NhbGU6IG51bWJlcjsgLy8g5ouh5aSn546H44Gu5pyA5bCP5YCkXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXZpZXdtYXRyaXgnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVZpZXdNYXRyaXggPSAkLkN1YmlzbVZpZXdNYXRyaXg7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVZpZXdNYXRyaXggPSAkLkN1YmlzbVZpZXdNYXRyaXg7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDU01fQVNTRVJULCBDdWJpc21Mb2dFcnJvciB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWRlYnVnJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi9jdWJpc21tb2RlbCc7XG5cbi8qKlxuICogTW9j44OH44O844K/44Gu566h55CGXG4gKlxuICogTW9j44OH44O844K/44Gu566h55CG44KS6KGM44GG44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb2Mge1xuICAvKipcbiAgICogTW9j44OH44O844K/44Gu5L2c5oiQXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcbiAgICBtb2NCeXRlczogQXJyYXlCdWZmZXIsXG4gICAgc2hvdWxkQ2hlY2tNb2NDb25zaXN0ZW5jeTogYm9vbGVhblxuICApOiBDdWJpc21Nb2Mge1xuICAgIGxldCBjdWJpc21Nb2M6IEN1YmlzbU1vYyA9IG51bGw7XG5cbiAgICBpZiAoc2hvdWxkQ2hlY2tNb2NDb25zaXN0ZW5jeSkge1xuICAgICAgLy8gLm1vYzPjga7mlbTlkIjmgKfjgpLnorroqo1cbiAgICAgIGNvbnN0IGNvbnNpc3RlbmN5ID0gdGhpcy5oYXNNb2NDb25zaXN0ZW5jeShtb2NCeXRlcyk7XG5cbiAgICAgIGlmICghY29uc2lzdGVuY3kpIHtcbiAgICAgICAgLy8g5pW05ZCI5oCn44GM56K66KqN44Gn44GN44Gq44GR44KM44Gw5Yem55CG44GX44Gq44GEXG4gICAgICAgIEN1YmlzbUxvZ0Vycm9yKGBJbmNvbnNpc3RlbnQgTU9DMy5gKTtcbiAgICAgICAgcmV0dXJuIGN1YmlzbU1vYztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBtb2M6IExpdmUyREN1YmlzbUNvcmUuTW9jID1cbiAgICAgIExpdmUyREN1YmlzbUNvcmUuTW9jLmZyb21BcnJheUJ1ZmZlcihtb2NCeXRlcyk7XG5cbiAgICBpZiAobW9jKSB7XG4gICAgICBjdWJpc21Nb2MgPSBuZXcgQ3ViaXNtTW9jKG1vYyk7XG4gICAgICBjdWJpc21Nb2MuX21vY1ZlcnNpb24gPSBMaXZlMkRDdWJpc21Db3JlLlZlcnNpb24uY3NtR2V0TW9jVmVyc2lvbihcbiAgICAgICAgbW9jLFxuICAgICAgICBtb2NCeXRlc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3ViaXNtTW9jO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vY+ODh+ODvOOCv+OCkuWJiumZpFxuICAgKlxuICAgKiBNb2Pjg4fjg7zjgr/jgpLliYrpmaTjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vYzogQ3ViaXNtTW9jKTogdm9pZCB7XG4gICAgbW9jLl9tb2MuX3JlbGVhc2UoKTtcbiAgICBtb2MuX21vYyA9IG51bGw7XG4gICAgbW9jID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgpLkvZzmiJDjgZnjgotcbiAgICpcbiAgICogQHJldHVybiBNb2Pjg4fjg7zjgr/jgYvjgonkvZzmiJDjgZXjgozjgZ/jg6Ljg4fjg6tcbiAgICovXG4gIGNyZWF0ZU1vZGVsKCk6IEN1YmlzbU1vZGVsIHtcbiAgICBsZXQgY3ViaXNtTW9kZWw6IEN1YmlzbU1vZGVsID0gbnVsbDtcblxuICAgIGNvbnN0IG1vZGVsOiBMaXZlMkRDdWJpc21Db3JlLk1vZGVsID0gTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbC5mcm9tTW9jKFxuICAgICAgdGhpcy5fbW9jXG4gICAgKTtcblxuICAgIGlmIChtb2RlbCkge1xuICAgICAgY3ViaXNtTW9kZWwgPSBuZXcgQ3ViaXNtTW9kZWwobW9kZWwpO1xuICAgICAgY3ViaXNtTW9kZWwuaW5pdGlhbGl6ZSgpO1xuXG4gICAgICArK3RoaXMuX21vZGVsQ291bnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1YmlzbU1vZGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuWJiumZpOOBmeOCi1xuICAgKi9cbiAgZGVsZXRlTW9kZWwobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XG4gICAgaWYgKG1vZGVsICE9IG51bGwpIHtcbiAgICAgIG1vZGVsLnJlbGVhc2UoKTtcbiAgICAgIG1vZGVsID0gbnVsbDtcbiAgICAgIC0tdGhpcy5fbW9kZWxDb3VudDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKG1vYzogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2MpIHtcbiAgICB0aGlzLl9tb2MgPSBtb2M7XG4gICAgdGhpcy5fbW9kZWxDb3VudCA9IDA7XG4gICAgdGhpcy5fbW9jVmVyc2lvbiA9IDA7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBDU01fQVNTRVJUKHRoaXMuX21vZGVsQ291bnQgPT0gMCk7XG5cbiAgICB0aGlzLl9tb2MuX3JlbGVhc2UoKTtcbiAgICB0aGlzLl9tb2MgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOacgOaWsOOBri5tb2MzIFZlcnNpb27jgpLlj5blvpdcbiAgICovXG4gIHB1YmxpYyBnZXRMYXRlc3RNb2NWZXJzaW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVmVyc2lvbi5jc21HZXRMYXRlc3RNb2NWZXJzaW9uKCk7XG4gIH1cblxuICAvKipcbiAgICog6Kqt44G/6L6844KT44Gg44Oi44OH44Or44GuLm1vYzMgVmVyc2lvbuOCkuWPluW+l1xuICAgKi9cbiAgcHVibGljIGdldE1vY1ZlcnNpb24oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9jVmVyc2lvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiAubW9jMyDjga7mlbTlkIjmgKfjgpLmpJzoqLzjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaGFzTW9jQ29uc2lzdGVuY3kobW9jQnl0ZXM6IEFycmF5QnVmZmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaXNDb25zaXN0ZW50ID1cbiAgICAgIExpdmUyREN1YmlzbUNvcmUuTW9jLnByb3RvdHlwZS5oYXNNb2NDb25zaXN0ZW5jeShtb2NCeXRlcyk7XG4gICAgcmV0dXJuIGlzQ29uc2lzdGVudCA9PT0gMSA/IHRydWUgOiBmYWxzZTtcbiAgfVxuXG4gIF9tb2M6IExpdmUyREN1YmlzbUNvcmUuTW9jOyAvLyBNb2Pjg4fjg7zjgr9cbiAgX21vZGVsQ291bnQ6IG51bWJlcjsgLy8gTW9j44OH44O844K/44GL44KJ5L2c44KJ44KM44Gf44Oi44OH44Or44Gu5YCL5pWwXG4gIF9tb2NWZXJzaW9uOiBudW1iZXI7IC8vIOiqreOBv+i+vOOCk+OBoOODouODh+ODq+OBri5tb2MzIFZlcnNpb25cbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9jJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb2MgPSAkLkN1YmlzbU1vYztcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9jID0gJC5DdWJpc21Nb2M7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQge1xuICBDdWJpc21CbGVuZE1vZGUsXG4gIEN1YmlzbVRleHR1cmVDb2xvcixcbn0gZnJvbSAnLi4vcmVuZGVyaW5nL2N1YmlzbXJlbmRlcmVyJztcbmltcG9ydCB7IGNzbU1hcCB9IGZyb20gJy4uL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IENTTV9BU1NFUlQgfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5cbi8qKlxuICogU0RL5YG044GL44KJ5LiO44GI44KJ44KM44GfRHJhd2FibGXjga7kuZfnrpfoibLjg7vjgrnjgq/jg6rjg7zjg7PoibLkuIrmm7jjgY3jg5Xjg6njgrDjgahcbiAqIOOBneOBruiJsuOCkuS/neaMgeOBmeOCi+ani+mAoOS9k1xuICovXG5leHBvcnQgY2xhc3MgRHJhd2FibGVDb2xvckRhdGEge1xuICBjb25zdHJ1Y3RvcihcbiAgICBpc092ZXJ3cml0dGVuID0gZmFsc2UsXG4gICAgY29sb3I6IEN1YmlzbVRleHR1cmVDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKVxuICApIHtcbiAgICB0aGlzLmlzT3ZlcndyaXR0ZW4gPSBpc092ZXJ3cml0dGVuO1xuICAgIHRoaXMuQ29sb3IgPSBjb2xvcjtcbiAgfVxuXG4gIHB1YmxpYyBpc092ZXJ3cml0dGVuOiBib29sZWFuO1xuICBwdWJsaWMgQ29sb3I6IEN1YmlzbVRleHR1cmVDb2xvcjtcbn1cbi8qKlxuICogQGJyaWVmIOODhuOCr+OCueODgeODo+OBruiJsuOCklJHQkHjgafmibHjgYbjgZ/jgoHjga7mp4vpgKDkvZNcbiAqL1xuZXhwb3J0IGNsYXNzIFBhcnRDb2xvckRhdGEge1xuICBjb25zdHJ1Y3RvcihcbiAgICBpc092ZXJ3cml0dGVuID0gZmFsc2UsXG4gICAgY29sb3I6IEN1YmlzbVRleHR1cmVDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKVxuICApIHtcbiAgICB0aGlzLmlzT3ZlcndyaXR0ZW4gPSBpc092ZXJ3cml0dGVuO1xuICAgIHRoaXMuQ29sb3IgPSBjb2xvcjtcbiAgfVxuXG4gIHB1YmxpYyBpc092ZXJ3cml0dGVuOiBib29sZWFuO1xuICBwdWJsaWMgQ29sb3I6IEN1YmlzbVRleHR1cmVDb2xvcjtcbn1cblxuLyoqXG4gKiDjg4bjgq/jgrnjg4Hjg6Pjga7jgqvjg6rjg7PjgrDoqK3lrprjgpLnrqHnkIbjgZnjgovjgZ/jgoHjga7mp4vpgKDkvZNcbiAqL1xuZXhwb3J0IGNsYXNzIERyYXdhYmxlQ3VsbGluZ0RhdGEge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqXG4gICAqIEBwYXJhbSBpc092ZXJ3cml0dGVuXG4gICAqIEBwYXJhbSBpc0N1bGxpbmdcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihpc092ZXJ3cml0dGVuID0gZmFsc2UsIGlzQ3VsbGluZyA9IGZhbHNlKSB7XG4gICAgdGhpcy5pc092ZXJ3cml0dGVuID0gaXNPdmVyd3JpdHRlbjtcbiAgICB0aGlzLmlzQ3VsbGluZyA9IGlzQ3VsbGluZztcbiAgfVxuXG4gIHB1YmxpYyBpc092ZXJ3cml0dGVuOiBib29sZWFuO1xuICBwdWJsaWMgaXNDdWxsaW5nOiBib29sZWFuO1xufVxuXG4vKipcbiAqIOODouODh+ODq1xuICpcbiAqIE1vY+ODh+ODvOOCv+OBi+OCieeUn+aIkOOBleOCjOOCi+ODouODh+ODq+OBruOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWwge1xuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xuICAgIC8vIFVwZGF0ZSBtb2RlbFxuICAgIHRoaXMuX21vZGVsLnVwZGF0ZSgpO1xuXG4gICAgdGhpcy5fbW9kZWwuZHJhd2FibGVzLnJlc2V0RHluYW1pY0ZsYWdzKCk7XG4gIH1cblxuICAvKipcbiAgICogUGl4ZWxzUGVyVW5pdOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJucyBQaXhlbHNQZXJVbml0XG4gICAqL1xuICBwdWJsaWMgZ2V0UGl4ZWxzUGVyVW5pdCgpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLl9tb2RlbCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gMC4wO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9tb2RlbC5jYW52YXNpbmZvLlBpeGVsc1BlclVuaXQ7XG4gIH1cblxuICAvKipcbiAgICog44Kt44Oj44Oz44OQ44K544Gu5bmF44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2FudmFzV2lkdGgoKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5fbW9kZWwgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIDAuMDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5fbW9kZWwuY2FudmFzaW5mby5DYW52YXNXaWR0aCAvIHRoaXMuX21vZGVsLmNhbnZhc2luZm8uUGl4ZWxzUGVyVW5pdFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44Kt44Oj44Oz44OQ44K544Gu6auY44GV44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2FudmFzSGVpZ2h0KCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuX21vZGVsID09IG51bGwpIHtcbiAgICAgIHJldHVybiAwLjA7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX21vZGVsLmNhbnZhc2luZm8uQ2FudmFzSGVpZ2h0IC8gdGhpcy5fbW9kZWwuY2FudmFzaW5mby5QaXhlbHNQZXJVbml0XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jgpLkv53lrZjjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzYXZlUGFyYW1ldGVycygpOiB2b2lkIHtcbiAgICBjb25zdCBwYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5jb3VudDtcbiAgICBjb25zdCBzYXZlZFBhcmFtZXRlckNvdW50OiBudW1iZXIgPSB0aGlzLl9zYXZlZFBhcmFtZXRlcnMuZ2V0U2l6ZSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJDb3VudDsgKytpKSB7XG4gICAgICBpZiAoaSA8IHNhdmVkUGFyYW1ldGVyQ291bnQpIHtcbiAgICAgICAgdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLnNldChpLCB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXNbaV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLnB1c2hCYWNrKHRoaXMuX3BhcmFtZXRlclZhbHVlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOS5l+eul+iJsuOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXggRHJhd2FibGVz44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm5zIOaMh+WumuOBl+OBn2RyYXdhYmxl44Gu5LmX566X6ImyKFJHQkEpXG4gICAqL1xuICBwdWJsaWMgZ2V0TXVsdGlwbHlDb2xvcihpbmRleDogbnVtYmVyKTogQ3ViaXNtVGV4dHVyZUNvbG9yIHtcbiAgICAvLyBEcmF3YWJsZeOBqOODouODh+ODq+WFqOS9k+OBruS5l+eul+iJsuS4iuabuOOBjeODleODqeOCsOOBjOOBqeOBoeOCieOCgnRydWXjgarloLTlkIjjgIHjg6Ljg4fjg6vlhajkvZPjga7kuIrmm7jjgY3jg5Xjg6njgrDjgYzlhKrlhYjjgZXjgozjgotcbiAgICBpZiAoXG4gICAgICB0aGlzLmdldE92ZXJ3cml0ZUZsYWdGb3JNb2RlbE11bHRpcGx5Q29sb3JzKCkgfHxcbiAgICAgIHRoaXMuZ2V0T3ZlcndyaXRlRmxhZ0ZvckRyYXdhYmxlTXVsdGlwbHlDb2xvcnMoaW5kZXgpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdXNlck11bHRpcGx5Q29sb3JzLmF0KGluZGV4KS5Db2xvcjtcbiAgICB9XG5cbiAgICBjb25zdCBjb2xvciA9IHRoaXMuZ2V0RHJhd2FibGVNdWx0aXBseUNvbG9yKGluZGV4KTtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICAvKipcbiAgICog44K544Kv44Oq44O844Oz6Imy44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCBEcmF3YWJsZXPjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybnMg5oyH5a6a44GX44GfZHJhd2FibGXjga7jgrnjgq/jg6rjg7zjg7PoibIoUkdCQSlcbiAgICovXG4gIHB1YmxpYyBnZXRTY3JlZW5Db2xvcihpbmRleDogbnVtYmVyKTogQ3ViaXNtVGV4dHVyZUNvbG9yIHtcbiAgICAvLyBEcmF3YWJsZeOBqOODouODh+ODq+WFqOS9k+OBruOCueOCr+ODquODvOODs+iJsuS4iuabuOOBjeODleODqeOCsOOBjOOBqeOBoeOCieOCgnRydWXjgarloLTlkIjjgIHjg6Ljg4fjg6vlhajkvZPjga7kuIrmm7jjgY3jg5Xjg6njgrDjgYzlhKrlhYjjgZXjgozjgotcbiAgICBpZiAoXG4gICAgICB0aGlzLmdldE92ZXJ3cml0ZUZsYWdGb3JNb2RlbFNjcmVlbkNvbG9ycygpIHx8XG4gICAgICB0aGlzLmdldE92ZXJ3cml0ZUZsYWdGb3JEcmF3YWJsZVNjcmVlbkNvbG9ycyhpbmRleClcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLl91c2VyU2NyZWVuQ29sb3JzLmF0KGluZGV4KS5Db2xvcjtcbiAgICB9XG5cbiAgICBjb25zdCBjb2xvciA9IHRoaXMuZ2V0RHJhd2FibGVTY3JlZW5Db2xvcihpbmRleCk7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIOS5l+eul+iJsuOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiBAcGFyYW0gaW5kZXggRHJhd2FibGVz44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBjb2xvciDoqK3lrprjgZnjgovkuZfnrpfoibIoQ3ViaXNtVGV4dHVyZUNvbG9yKVxuICAgKi9cbiAgcHVibGljIHNldE11bHRpcGx5Q29sb3JCeVRleHR1cmVDb2xvcihcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIGNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3JcbiAgKSB7XG4gICAgdGhpcy5zZXRNdWx0aXBseUNvbG9yQnlSR0JBKGluZGV4LCBjb2xvci5SLCBjb2xvci5HLCBjb2xvci5CLCBjb2xvci5BKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuZfnrpfoibLjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IERyYXdhYmxlc+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gciDoqK3lrprjgZnjgovkuZfnrpfoibLjga5S5YCkXG4gICAqIEBwYXJhbSBnIOioreWumuOBmeOCi+S5l+eul+iJsuOBrkflgKRcbiAgICogQHBhcmFtIGIg6Kit5a6a44GZ44KL5LmX566X6Imy44GuQuWApFxuICAgKiBAcGFyYW0gYSDoqK3lrprjgZnjgovkuZfnrpfoibLjga5B5YCkXG4gICAqL1xuICBwdWJsaWMgc2V0TXVsdGlwbHlDb2xvckJ5UkdCQShcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIHI6IG51bWJlcixcbiAgICBnOiBudW1iZXIsXG4gICAgYjogbnVtYmVyLFxuICAgIGEgPSAxLjBcbiAgKSB7XG4gICAgdGhpcy5fdXNlck11bHRpcGx5Q29sb3JzLmF0KGluZGV4KS5Db2xvci5SID0gcjtcbiAgICB0aGlzLl91c2VyTXVsdGlwbHlDb2xvcnMuYXQoaW5kZXgpLkNvbG9yLkcgPSBnO1xuICAgIHRoaXMuX3VzZXJNdWx0aXBseUNvbG9ycy5hdChpbmRleCkuQ29sb3IuQiA9IGI7XG4gICAgdGhpcy5fdXNlck11bHRpcGx5Q29sb3JzLmF0KGluZGV4KS5Db2xvci5BID0gYTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrnjgq/jg6rjg7zjg7PoibLjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IERyYXdhYmxlc+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gY29sb3Ig6Kit5a6a44GZ44KL44K544Kv44Oq44O844Oz6ImyKEN1YmlzbVRleHR1cmVDb2xvcilcbiAgICovXG4gIHB1YmxpYyBzZXRTY3JlZW5Db2xvckJ5VGV4dHVyZUNvbG9yKFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgY29sb3I6IEN1YmlzbVRleHR1cmVDb2xvclxuICApIHtcbiAgICB0aGlzLnNldFNjcmVlbkNvbG9yQnlSR0JBKGluZGV4LCBjb2xvci5SLCBjb2xvci5HLCBjb2xvci5CLCBjb2xvci5BKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrnjgq/jg6rjg7zjg7PoibLjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICogQHBhcmFtIGluZGV4IERyYXdhYmxlc+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gciDoqK3lrprjgZnjgovjgrnjgq/jg6rjg7zjg7PoibLjga5S5YCkXG4gICAqIEBwYXJhbSBnIOioreWumuOBmeOCi+OCueOCr+ODquODvOODs+iJsuOBrkflgKRcbiAgICogQHBhcmFtIGIg6Kit5a6a44GZ44KL44K544Kv44Oq44O844Oz6Imy44GuQuWApFxuICAgKiBAcGFyYW0gYSDoqK3lrprjgZnjgovjgrnjgq/jg6rjg7zjg7PoibLjga5B5YCkXG4gICAqL1xuICBwdWJsaWMgc2V0U2NyZWVuQ29sb3JCeVJHQkEoXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICByOiBudW1iZXIsXG4gICAgZzogbnVtYmVyLFxuICAgIGI6IG51bWJlcixcbiAgICBhID0gMS4wXG4gICkge1xuICAgIHRoaXMuX3VzZXJTY3JlZW5Db2xvcnMuYXQoaW5kZXgpLkNvbG9yLlIgPSByO1xuICAgIHRoaXMuX3VzZXJTY3JlZW5Db2xvcnMuYXQoaW5kZXgpLkNvbG9yLkcgPSBnO1xuICAgIHRoaXMuX3VzZXJTY3JlZW5Db2xvcnMuYXQoaW5kZXgpLkNvbG9yLkIgPSBiO1xuICAgIHRoaXMuX3VzZXJTY3JlZW5Db2xvcnMuYXQoaW5kZXgpLkNvbG9yLkEgPSBhO1xuICB9XG4gIC8qKlxuICAgKiBwYXJ044Gu5LmX566X6Imy44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBwYXJ0SW5kZXggcGFydOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJucyDmjIflrprjgZfjgZ9wYXJ044Gu5LmX566X6ImyXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydE11bHRpcGx5Q29sb3IocGFydEluZGV4OiBudW1iZXIpOiBDdWJpc21UZXh0dXJlQ29sb3Ige1xuICAgIHJldHVybiB0aGlzLl91c2VyUGFydE11bHRpcGx5Q29sb3JzLmF0KHBhcnRJbmRleCkuQ29sb3I7XG4gIH1cblxuICAvKipcbiAgICogcGFydOOBruOCueOCr+ODquODvOODs+iJsuOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gcGFydEluZGV4IHBhcnTjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybnMg5oyH5a6a44GX44GfcGFydOOBruOCueOCr+ODquODvOODs+iJslxuICAgKi9cbiAgcHVibGljIGdldFBhcnRTY3JlZW5Db2xvcihwYXJ0SW5kZXg6IG51bWJlcik6IEN1YmlzbVRleHR1cmVDb2xvciB7XG4gICAgcmV0dXJuIHRoaXMuX3VzZXJQYXJ0U2NyZWVuQ29sb3JzLmF0KHBhcnRJbmRleCkuQ29sb3I7XG4gIH1cblxuICAvKipcbiAgICogcGFydOOBrk92ZXJ3cml0ZUNvbG9yIHNldHRlcumWouaVsFxuICAgKiBAcGFyYW0gcGFydEluZGV4IHBhcnTjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHIg6Kit5a6a44GZ44KL6Imy44GuUuWApFxuICAgKiBAcGFyYW0gZyDoqK3lrprjgZnjgovoibLjga5H5YCkXG4gICAqIEBwYXJhbSBiIOioreWumuOBmeOCi+iJsuOBrkLlgKRcbiAgICogQHBhcmFtIGEg6Kit5a6a44GZ44KL6Imy44GuQeWApFxuICAgKiBAcGFyYW0gcGFydENvbG9ycyDoqK3lrprjgZnjgotwYXJ044Gu44Kr44Op44O844OH44O844K/6YWN5YiXXG4gICAqIEBwYXJhbSBkcmF3YWJsZUNvbG9ycyBwYXJ044Gr6Zai6YCj44GZ44KLRHJhd2FibGXjga7jgqvjg6njg7zjg4fjg7zjgr/phY3liJdcbiAgICovXG4gIHB1YmxpYyBzZXRQYXJ0Q29sb3IoXG4gICAgcGFydEluZGV4OiBudW1iZXIsXG4gICAgcjogbnVtYmVyLFxuICAgIGc6IG51bWJlcixcbiAgICBiOiBudW1iZXIsXG4gICAgYTogbnVtYmVyLFxuICAgIHBhcnRDb2xvcnM6IGNzbVZlY3RvcjxQYXJ0Q29sb3JEYXRhPixcbiAgICBkcmF3YWJsZUNvbG9yczogY3NtVmVjdG9yPERyYXdhYmxlQ29sb3JEYXRhPlxuICApIHtcbiAgICBwYXJ0Q29sb3JzLmF0KHBhcnRJbmRleCkuQ29sb3IuUiA9IHI7XG4gICAgcGFydENvbG9ycy5hdChwYXJ0SW5kZXgpLkNvbG9yLkcgPSBnO1xuICAgIHBhcnRDb2xvcnMuYXQocGFydEluZGV4KS5Db2xvci5CID0gYjtcbiAgICBwYXJ0Q29sb3JzLmF0KHBhcnRJbmRleCkuQ29sb3IuQSA9IGE7XG5cbiAgICBpZiAocGFydENvbG9ycy5hdChwYXJ0SW5kZXgpLmlzT3ZlcndyaXR0ZW4pIHtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaSA8IHRoaXMuX3BhcnRDaGlsZERyYXdhYmxlcy5hdChwYXJ0SW5kZXgpLmdldFNpemUoKTtcbiAgICAgICAgKytpXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgZHJhd2FibGVJbmRleCA9IHRoaXMuX3BhcnRDaGlsZERyYXdhYmxlcy5hdChwYXJ0SW5kZXgpLmF0KGkpO1xuICAgICAgICBkcmF3YWJsZUNvbG9ycy5hdChkcmF3YWJsZUluZGV4KS5Db2xvci5SID0gcjtcbiAgICAgICAgZHJhd2FibGVDb2xvcnMuYXQoZHJhd2FibGVJbmRleCkuQ29sb3IuRyA9IGc7XG4gICAgICAgIGRyYXdhYmxlQ29sb3JzLmF0KGRyYXdhYmxlSW5kZXgpLkNvbG9yLkIgPSBiO1xuICAgICAgICBkcmF3YWJsZUNvbG9ycy5hdChkcmF3YWJsZUluZGV4KS5Db2xvci5BID0gYTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5LmX566X6Imy44KS44K744OD44OI44GZ44KLXG4gICAqIEBwYXJhbSBwYXJ0SW5kZXggcGFydOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gY29sb3Ig6Kit5a6a44GZ44KL5LmX566X6ImyKEN1YmlzbVRleHR1cmVDb2xvcilcbiAgICovXG4gIHB1YmxpYyBzZXRQYXJ0TXVsdGlwbHlDb2xvckJ5VGV4dHVyZUNvbG9yKFxuICAgIHBhcnRJbmRleDogbnVtYmVyLFxuICAgIGNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3JcbiAgKSB7XG4gICAgdGhpcy5zZXRQYXJ0TXVsdGlwbHlDb2xvckJ5UkdCQShcbiAgICAgIHBhcnRJbmRleCxcbiAgICAgIGNvbG9yLlIsXG4gICAgICBjb2xvci5HLFxuICAgICAgY29sb3IuQixcbiAgICAgIGNvbG9yLkFcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOS5l+eul+iJsuOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiBAcGFyYW0gcGFydEluZGV4IHBhcnTjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHIg6Kit5a6a44GZ44KL5LmX566X6Imy44GuUuWApFxuICAgKiBAcGFyYW0gZyDoqK3lrprjgZnjgovkuZfnrpfoibLjga5H5YCkXG4gICAqIEBwYXJhbSBiIOioreWumuOBmeOCi+S5l+eul+iJsuOBrkLlgKRcbiAgICogQHBhcmFtIGEg6Kit5a6a44GZ44KL5LmX566X6Imy44GuQeWApFxuICAgKi9cbiAgcHVibGljIHNldFBhcnRNdWx0aXBseUNvbG9yQnlSR0JBKFxuICAgIHBhcnRJbmRleDogbnVtYmVyLFxuICAgIHI6IG51bWJlcixcbiAgICBnOiBudW1iZXIsXG4gICAgYjogbnVtYmVyLFxuICAgIGE6IG51bWJlclxuICApIHtcbiAgICB0aGlzLnNldFBhcnRDb2xvcihcbiAgICAgIHBhcnRJbmRleCxcbiAgICAgIHIsXG4gICAgICBnLFxuICAgICAgYixcbiAgICAgIGEsXG4gICAgICB0aGlzLl91c2VyUGFydE11bHRpcGx5Q29sb3JzLFxuICAgICAgdGhpcy5fdXNlck11bHRpcGx5Q29sb3JzXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrnjgq/jg6rjg7zjg7PoibLjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICogQHBhcmFtIHBhcnRJbmRleCBwYXJ044Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBjb2xvciDoqK3lrprjgZnjgovjgrnjgq/jg6rjg7zjg7PoibIoQ3ViaXNtVGV4dHVyZUNvbG9yKVxuICAgKi9cbiAgcHVibGljIHNldFBhcnRTY3JlZW5Db2xvckJ5VGV4dHVyZUNvbG9yKFxuICAgIHBhcnRJbmRleDogbnVtYmVyLFxuICAgIGNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3JcbiAgKSB7XG4gICAgdGhpcy5zZXRQYXJ0U2NyZWVuQ29sb3JCeVJHQkEoXG4gICAgICBwYXJ0SW5kZXgsXG4gICAgICBjb2xvci5SLFxuICAgICAgY29sb3IuRyxcbiAgICAgIGNvbG9yLkIsXG4gICAgICBjb2xvci5BXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrnjgq/jg6rjg7zjg7PoibLjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICogQHBhcmFtIHBhcnRJbmRleCBwYXJ044Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSByIOioreWumuOBmeOCi+OCueOCr+ODquODvOODs+iJsuOBrlLlgKRcbiAgICogQHBhcmFtIGcg6Kit5a6a44GZ44KL44K544Kv44Oq44O844Oz6Imy44GuR+WApFxuICAgKiBAcGFyYW0gYiDoqK3lrprjgZnjgovjgrnjgq/jg6rjg7zjg7PoibLjga5C5YCkXG4gICAqIEBwYXJhbSBhIOioreWumuOBmeOCi+OCueOCr+ODquODvOODs+iJsuOBrkHlgKRcbiAgICovXG4gIHB1YmxpYyBzZXRQYXJ0U2NyZWVuQ29sb3JCeVJHQkEoXG4gICAgcGFydEluZGV4OiBudW1iZXIsXG4gICAgcjogbnVtYmVyLFxuICAgIGc6IG51bWJlcixcbiAgICBiOiBudW1iZXIsXG4gICAgYTogbnVtYmVyXG4gICkge1xuICAgIHRoaXMuc2V0UGFydENvbG9yKFxuICAgICAgcGFydEluZGV4LFxuICAgICAgcixcbiAgICAgIGcsXG4gICAgICBiLFxuICAgICAgYSxcbiAgICAgIHRoaXMuX3VzZXJQYXJ0U2NyZWVuQ29sb3JzLFxuICAgICAgdGhpcy5fdXNlclNjcmVlbkNvbG9yc1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU0RL44GL44KJ5oyH5a6a44GX44Gf44Oi44OH44Or44Gu5LmX566X6Imy44KS5LiK5pu444GN44GZ44KL44GLXG4gICAqIEByZXR1cm5zIHRydWUgLT4gU0RL44GL44KJ44Gu5oOF5aCx44KS5YSq5YWI44GZ44KLXG4gICAqICAgICAgICAgIGZhbHNlIC0+IOODouODh+ODq+OBq+ioreWumuOBleOCjOOBpuOBhOOCi+iJsuaDheWgseOCkuS9v+eUqFxuICAgKi9cbiAgcHVibGljIGdldE92ZXJ3cml0ZUZsYWdGb3JNb2RlbE11bHRpcGx5Q29sb3JzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc092ZXJ3cml0dGVuTW9kZWxNdWx0aXBseUNvbG9ycztcbiAgfVxuXG4gIC8qKlxuICAgKiBTREvjgYvjgonmjIflrprjgZfjgZ/jg6Ljg4fjg6vjga7jgrnjgq/jg6rjg7zjg7PoibLjgpLkuIrmm7jjgY3jgZnjgovjgYtcbiAgICogQHJldHVybnMgdHJ1ZSAtPiBTREvjgYvjgonjga7mg4XloLHjgpLlhKrlhYjjgZnjgotcbiAgICogICAgICAgICAgZmFsc2UgLT4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gm44GE44KL6Imy5oOF5aCx44KS5L2/55SoXG4gICAqL1xuICBwdWJsaWMgZ2V0T3ZlcndyaXRlRmxhZ0Zvck1vZGVsU2NyZWVuQ29sb3JzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc092ZXJ3cml0dGVuTW9kZWxTY3JlZW5Db2xvcnM7XG4gIH1cblxuICAvKipcbiAgICogU0RL44GL44KJ5oyH5a6a44GX44Gf44Oi44OH44Or44Gu5LmX566X6Imy44KS5LiK5pu444GN44GZ44KL44GL44K744OD44OI44GZ44KLXG4gICAqIEBwYXJhbSB2YWx1ZSB0cnVlIC0+IFNES+OBi+OCieOBruaDheWgseOCkuWEquWFiOOBmeOCi1xuICAgKiAgICAgICAgICAgICAgZmFsc2UgLT4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gm44GE44KL6Imy5oOF5aCx44KS5L2/55SoXG4gICAqL1xuICBwdWJsaWMgc2V0T3ZlcndyaXRlRmxhZ0Zvck1vZGVsTXVsdGlwbHlDb2xvcnModmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pc092ZXJ3cml0dGVuTW9kZWxNdWx0aXBseUNvbG9ycyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNES+OBi+OCieaMh+WumuOBl+OBn+ODouODh+ODq+OBruOCueOCr+ODquODvOODs+iJsuOCkuS4iuabuOOBjeOBmeOCi+OBi+OCu+ODg+ODiOOBmeOCi1xuICAgKiBAcGFyYW0gdmFsdWUgdHJ1ZSAtPiBTREvjgYvjgonjga7mg4XloLHjgpLlhKrlhYjjgZnjgotcbiAgICogICAgICAgICAgICAgIGZhbHNlIC0+IOODouODh+ODq+OBq+ioreWumuOBleOCjOOBpuOBhOOCi+iJsuaDheWgseOCkuS9v+eUqFxuICAgKi9cbiAgcHVibGljIHNldE92ZXJ3cml0ZUZsYWdGb3JNb2RlbFNjcmVlbkNvbG9ycyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2lzT3ZlcndyaXR0ZW5Nb2RlbFNjcmVlbkNvbG9ycyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNES+OBi+OCieaMh+WumuOBl+OBn0RyYXdhYmxlSW5kZXjjga7kuZfnrpfoibLjgpLkuIrmm7jjgY3jgZnjgovjgYtcbiAgICogQHJldHVybnMgdHJ1ZSAtPiBTREvjgYvjgonjga7mg4XloLHjgpLlhKrlhYjjgZnjgotcbiAgICogICAgICAgICAgZmFsc2UgLT4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gm44GE44KL6Imy5oOF5aCx44KS5L2/55SoXG4gICAqL1xuICBwdWJsaWMgZ2V0T3ZlcndyaXRlRmxhZ0ZvckRyYXdhYmxlTXVsdGlwbHlDb2xvcnMoXG4gICAgZHJhd2FibGVpbmRleDogbnVtYmVyXG4gICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl91c2VyTXVsdGlwbHlDb2xvcnMuYXQoZHJhd2FibGVpbmRleCkuaXNPdmVyd3JpdHRlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTREvjgYvjgonmjIflrprjgZfjgZ9EcmF3YWJsZUluZGV444Gu44K544Kv44Oq44O844Oz6Imy44KS5LiK5pu444GN44GZ44KL44GLXG4gICAqIEByZXR1cm5zIHRydWUgLT4gU0RL44GL44KJ44Gu5oOF5aCx44KS5YSq5YWI44GZ44KLXG4gICAqICAgICAgICAgIGZhbHNlIC0+IOODouODh+ODq+OBq+ioreWumuOBleOCjOOBpuOBhOOCi+iJsuaDheWgseOCkuS9v+eUqFxuICAgKi9cbiAgcHVibGljIGdldE92ZXJ3cml0ZUZsYWdGb3JEcmF3YWJsZVNjcmVlbkNvbG9ycyhcbiAgICBkcmF3YWJsZWluZGV4OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3VzZXJTY3JlZW5Db2xvcnMuYXQoZHJhd2FibGVpbmRleCkuaXNPdmVyd3JpdHRlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTREvjgYvjgonmjIflrprjgZfjgZ9EcmF3YWJsZUluZGV444Gu5LmX566X6Imy44KS5LiK5pu444GN44GZ44KL44GL44K744OD44OI44GZ44KLXG4gICAqIEBwYXJhbSB2YWx1ZSB0cnVlIC0+IFNES+OBi+OCieOBruaDheWgseOCkuWEquWFiOOBmeOCi1xuICAgKiAgICAgICAgICAgICAgZmFsc2UgLT4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gm44GE44KL6Imy5oOF5aCx44KS5L2/55SoXG4gICAqL1xuICBwdWJsaWMgc2V0T3ZlcndyaXRlRmxhZ0ZvckRyYXdhYmxlTXVsdGlwbHlDb2xvcnMoXG4gICAgZHJhd2FibGVpbmRleDogbnVtYmVyLFxuICAgIHZhbHVlOiBib29sZWFuXG4gICkge1xuICAgIHRoaXMuX3VzZXJNdWx0aXBseUNvbG9ycy5hdChkcmF3YWJsZWluZGV4KS5pc092ZXJ3cml0dGVuID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogU0RL44GL44KJ5oyH5a6a44GX44GfRHJhd2FibGVJbmRleOOBruOCueOCr+ODquODvOODs+iJsuOCkuS4iuabuOOBjeOBmeOCi+OBi+OCu+ODg+ODiOOBmeOCi1xuICAgKiBAcGFyYW0gdmFsdWUgdHJ1ZSAtPiBTREvjgYvjgonjga7mg4XloLHjgpLlhKrlhYjjgZnjgotcbiAgICogICAgICAgICAgICAgIGZhbHNlIC0+IOODouODh+ODq+OBq+ioreWumuOBleOCjOOBpuOBhOOCi+iJsuaDheWgseOCkuS9v+eUqFxuICAgKi9cbiAgcHVibGljIHNldE92ZXJ3cml0ZUZsYWdGb3JEcmF3YWJsZVNjcmVlbkNvbG9ycyhcbiAgICBkcmF3YWJsZWluZGV4OiBudW1iZXIsXG4gICAgdmFsdWU6IGJvb2xlYW5cbiAgKSB7XG4gICAgdGhpcy5fdXNlclNjcmVlbkNvbG9ycy5hdChkcmF3YWJsZWluZGV4KS5pc092ZXJ3cml0dGVuID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogU0RL44GL44KJcGFydOOBruS5l+eul+iJsuOCkuS4iuabuOOBjeOBmeOCi+OBi1xuICAgKiBAcGFyYW0gcGFydEluZGV4IHBhcnTjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybnMgdHJ1ZSAgICAtPiAgU0RL44GL44KJ44Gu5oOF5aCx44KS5YSq5YWI44GZ44KLXG4gICAqICAgICAgICAgIGZhbHNlICAgLT4gIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBpuOBhOOCi+iJsuaDheWgseOCkuS9v+eUqFxuICAgKi9cbiAgcHVibGljIGdldE92ZXJ3cml0ZUNvbG9yRm9yUGFydE11bHRpcGx5Q29sb3JzKHBhcnRJbmRleDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VzZXJQYXJ0TXVsdGlwbHlDb2xvcnMuYXQocGFydEluZGV4KS5pc092ZXJ3cml0dGVuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNES+OBi+OCiXBhcnTjga7jgrnjgq/jg6rjg7zjg7PoibLjgpLkuIrmm7jjgY3jgZnjgovjgYtcbiAgICogQHBhcmFtIHBhcnRJbmRleCBwYXJ044Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm5zIHRydWUgICAgLT4gIFNES+OBi+OCieOBruaDheWgseOCkuWEquWFiOOBmeOCi1xuICAgKiAgICAgICAgICBmYWxzZSAgIC0+ICDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgabjgYTjgovoibLmg4XloLHjgpLkvb/nlKhcbiAgICovXG4gIHB1YmxpYyBnZXRPdmVyd3JpdGVDb2xvckZvclBhcnRTY3JlZW5Db2xvcnMocGFydEluZGV4OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fdXNlclBhcnRTY3JlZW5Db2xvcnMuYXQocGFydEluZGV4KS5pc092ZXJ3cml0dGVuO1xuICB9XG5cbiAgLyoqXG4gICAqIHBhcnTjga5PdmVyd3JpdGVGbGFnIHNldHRlcumWouaVsFxuICAgKiBAcGFyYW0gcGFydEluZGV4IHBhcnTjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHZhbHVlIHRydWUgLT4gU0RL44GL44KJ44Gu5oOF5aCx44KS5YSq5YWI44GZ44KLXG4gICAqICAgICAgICAgICAgICBmYWxzZSAtPiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgabjgYTjgovoibLmg4XloLHjgpLkvb/nlKhcbiAgICogQHBhcmFtIHBhcnRDb2xvcnMg6Kit5a6a44GZ44KLcGFydOOBruOCq+ODqeODvOODh+ODvOOCv+mFjeWIl1xuICAgKiBAcGFyYW0gZHJhd2FibGVDb2xvcnMgcGFydOOBq+mWoumAo+OBmeOCi0RyYXdhYmxl44Gu44Kr44Op44O844OH44O844K/6YWN5YiXXG4gICAqL1xuICBwdWJsaWMgc2V0T3ZlcndyaXRlQ29sb3JGb3JQYXJ0Q29sb3JzKFxuICAgIHBhcnRJbmRleDogbnVtYmVyLFxuICAgIHZhbHVlOiBib29sZWFuLFxuICAgIHBhcnRDb2xvcnM6IGNzbVZlY3RvcjxQYXJ0Q29sb3JEYXRhPixcbiAgICBkcmF3YWJsZUNvbG9yczogY3NtVmVjdG9yPERyYXdhYmxlQ29sb3JEYXRhPlxuICApIHtcbiAgICBwYXJ0Q29sb3JzLmF0KHBhcnRJbmRleCkuaXNPdmVyd3JpdHRlbiA9IHZhbHVlO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYXJ0Q2hpbGREcmF3YWJsZXMuYXQocGFydEluZGV4KS5nZXRTaXplKCk7ICsraSkge1xuICAgICAgY29uc3QgZHJhd2FibGVJbmRleCA9IHRoaXMuX3BhcnRDaGlsZERyYXdhYmxlcy5hdChwYXJ0SW5kZXgpLmF0KGkpO1xuICAgICAgZHJhd2FibGVDb2xvcnMuYXQoZHJhd2FibGVJbmRleCkuaXNPdmVyd3JpdHRlbiA9IHZhbHVlO1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZHJhd2FibGVDb2xvcnMuYXQoZHJhd2FibGVJbmRleCkuQ29sb3IuUiA9XG4gICAgICAgICAgcGFydENvbG9ycy5hdChwYXJ0SW5kZXgpLkNvbG9yLlI7XG4gICAgICAgIGRyYXdhYmxlQ29sb3JzLmF0KGRyYXdhYmxlSW5kZXgpLkNvbG9yLkcgPVxuICAgICAgICAgIHBhcnRDb2xvcnMuYXQocGFydEluZGV4KS5Db2xvci5HO1xuICAgICAgICBkcmF3YWJsZUNvbG9ycy5hdChkcmF3YWJsZUluZGV4KS5Db2xvci5CID1cbiAgICAgICAgICBwYXJ0Q29sb3JzLmF0KHBhcnRJbmRleCkuQ29sb3IuQjtcbiAgICAgICAgZHJhd2FibGVDb2xvcnMuYXQoZHJhd2FibGVJbmRleCkuQ29sb3IuQSA9XG4gICAgICAgICAgcGFydENvbG9ycy5hdChwYXJ0SW5kZXgpLkNvbG9yLkE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNES+OBi+OCiXBhcnTjga7jgrnjgq/jg6rjg7zjg7PoibLjgpLkuIrmm7jjgY3jgZnjgovjgYvjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICogQHBhcmFtIHBhcnRJbmRleCBwYXJ044Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSB2YWx1ZSB0cnVlIC0+IFNES+OBi+OCieOBruaDheWgseOCkuWEquWFiOOBmeOCi1xuICAgKiAgICAgICAgICAgICAgZmFsc2UgLT4g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gm44GE44KL6Imy5oOF5aCx44KS5L2/55SoXG4gICAqL1xuICBwdWJsaWMgc2V0T3ZlcndyaXRlQ29sb3JGb3JQYXJ0TXVsdGlwbHlDb2xvcnMoXG4gICAgcGFydEluZGV4OiBudW1iZXIsXG4gICAgdmFsdWU6IGJvb2xlYW5cbiAgKSB7XG4gICAgdGhpcy5fdXNlclBhcnRNdWx0aXBseUNvbG9ycy5hdChwYXJ0SW5kZXgpLmlzT3ZlcndyaXR0ZW4gPSB2YWx1ZTtcbiAgICB0aGlzLnNldE92ZXJ3cml0ZUNvbG9yRm9yUGFydENvbG9ycyhcbiAgICAgIHBhcnRJbmRleCxcbiAgICAgIHZhbHVlLFxuICAgICAgdGhpcy5fdXNlclBhcnRNdWx0aXBseUNvbG9ycyxcbiAgICAgIHRoaXMuX3VzZXJNdWx0aXBseUNvbG9yc1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU0RL44GL44KJcGFydOOBruOCueOCr+ODquODvOODs+iJsuOCkuS4iuabuOOBjeOBmeOCi+OBi+OCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiBAcGFyYW0gcGFydEluZGV4IHBhcnTjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHZhbHVlIHRydWUgLT4gU0RL44GL44KJ44Gu5oOF5aCx44KS5YSq5YWI44GZ44KLXG4gICAqICAgICAgICAgICAgICBmYWxzZSAtPiDjg6Ljg4fjg6vjgavoqK3lrprjgZXjgozjgabjgYTjgovoibLmg4XloLHjgpLkvb/nlKhcbiAgICovXG4gIHB1YmxpYyBzZXRPdmVyd3JpdGVDb2xvckZvclBhcnRTY3JlZW5Db2xvcnMoXG4gICAgcGFydEluZGV4OiBudW1iZXIsXG4gICAgdmFsdWU6IGJvb2xlYW5cbiAgKSB7XG4gICAgdGhpcy5fdXNlclBhcnRTY3JlZW5Db2xvcnMuYXQocGFydEluZGV4KS5pc092ZXJ3cml0dGVuID0gdmFsdWU7XG4gICAgdGhpcy5zZXRPdmVyd3JpdGVDb2xvckZvclBhcnRDb2xvcnMoXG4gICAgICBwYXJ0SW5kZXgsXG4gICAgICB2YWx1ZSxcbiAgICAgIHRoaXMuX3VzZXJQYXJ0U2NyZWVuQ29sb3JzLFxuICAgICAgdGhpcy5fdXNlclNjcmVlbkNvbG9yc1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7jgqvjg6rjg7PjgrDmg4XloLHjgpLlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtICAgZHJhd2FibGVJbmRleCAgIERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gIERyYXdhYmxl44Gu44Kr44Oq44Oz44Kw5oOF5aCxXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVDdWxsaW5nKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGlmIChcbiAgICAgIHRoaXMuZ2V0T3ZlcndyaXRlRmxhZ0Zvck1vZGVsQ3VsbGluZ3MoKSB8fFxuICAgICAgdGhpcy5nZXRPdmVyd3JpdGVGbGFnRm9yRHJhd2FibGVDdWxsaW5ncyhkcmF3YWJsZUluZGV4KVxuICAgICkge1xuICAgICAgcmV0dXJuIHRoaXMuX3VzZXJDdWxsaW5ncy5hdChkcmF3YWJsZUluZGV4KS5pc0N1bGxpbmc7XG4gICAgfVxuXG4gICAgY29uc3QgY29uc3RhbnRGbGFncyA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb25zdGFudEZsYWdzO1xuICAgIHJldHVybiAhTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNJc0RvdWJsZVNpZGVkQml0KFxuICAgICAgY29uc3RhbnRGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7jgqvjg6rjg7PjgrDmg4XloLHjgpLoqK3lrprjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIGlzQ3VsbGluZyDjgqvjg6rjg7PjgrDmg4XloLFcbiAgICovXG4gIHB1YmxpYyBzZXREcmF3YWJsZUN1bGxpbmcoZHJhd2FibGVJbmRleDogbnVtYmVyLCBpc0N1bGxpbmc6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl91c2VyQ3VsbGluZ3MuYXQoZHJhd2FibGVJbmRleCkuaXNDdWxsaW5nID0gaXNDdWxsaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIFNES+OBi+OCieODouODh+ODq+WFqOS9k+OBruOCq+ODquODs+OCsOioreWumuOCkuS4iuabuOOBjeOBmeOCi+OBi+OAglxuICAgKlxuICAgKiBAcmV0dmFsICB0cnVlICAgIC0+ICBTREvkuIrjga7jgqvjg6rjg7PjgrDoqK3lrprjgpLkvb/nlKhcbiAgICogQHJldHZhbCAgZmFsc2UgICAtPiAg44Oi44OH44Or44Gu44Kr44Oq44Oz44Kw6Kit5a6a44KS5L2/55SoXG4gICAqL1xuICBwdWJsaWMgZ2V0T3ZlcndyaXRlRmxhZ0Zvck1vZGVsQ3VsbGluZ3MoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzT3ZlcndyaXR0ZW5DdWxsaW5ncztcbiAgfVxuXG4gIC8qKlxuICAgKiBTREvjgYvjgonjg6Ljg4fjg6vlhajkvZPjga7jgqvjg6rjg7PjgrDoqK3lrprjgpLkuIrmm7jjgY3jgZnjgovjgYvjgpLoqK3lrprjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGlzT3ZlcndyaXR0ZW5DdWxsaW5ncyBTREvkuIrjga7jgqvjg6rjg7PjgrDoqK3lrprjgpLkvb/jgYbjgarjgol0cnVl44CB44Oi44OH44Or44Gu44Kr44Oq44Oz44Kw6Kit5a6a44KS5L2/44GG44Gq44KJZmFsc2VcbiAgICovXG4gIHB1YmxpYyBzZXRPdmVyd3JpdGVGbGFnRm9yTW9kZWxDdWxsaW5ncyhcbiAgICBpc092ZXJ3cml0dGVuQ3VsbGluZ3M6IGJvb2xlYW5cbiAgKTogdm9pZCB7XG4gICAgdGhpcy5faXNPdmVyd3JpdHRlbkN1bGxpbmdzID0gaXNPdmVyd3JpdHRlbkN1bGxpbmdzO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR2YWwgIHRydWUgICAgLT4gIFNES+S4iuOBruOCq+ODquODs+OCsOioreWumuOCkuS9v+eUqFxuICAgKiBAcmV0dmFsICBmYWxzZSAgIC0+ICDjg6Ljg4fjg6vjga7jgqvjg6rjg7PjgrDoqK3lrprjgpLkvb/nlKhcbiAgICovXG4gIHB1YmxpYyBnZXRPdmVyd3JpdGVGbGFnRm9yRHJhd2FibGVDdWxsaW5ncyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdXNlckN1bGxpbmdzLmF0KGRyYXdhYmxlSW5kZXgpLmlzT3ZlcndyaXR0ZW47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIGlzT3ZlcndyaXR0ZW5DdWxsaW5ncyBTREvkuIrjga7jgqvjg6rjg7PjgrDoqK3lrprjgpLkvb/jgYbjgarjgol0cnVl44CB44Oi44OH44Or44Gu44Kr44Oq44Oz44Kw6Kit5a6a44KS5L2/44GG44Gq44KJZmFsc2VcbiAgICovXG4gIHB1YmxpYyBzZXRPdmVyd3JpdGVGbGFnRm9yRHJhd2FibGVDdWxsaW5ncyhcbiAgICBkcmF3YWJsZUluZGV4OiBudW1iZXIsXG4gICAgaXNPdmVyd3JpdHRlbkN1bGxpbmdzOiBib29sZWFuXG4gICk6IHZvaWQge1xuICAgIHRoaXMuX3VzZXJDdWxsaW5ncy5hdChkcmF3YWJsZUluZGV4KS5pc092ZXJ3cml0dGVuID0gaXNPdmVyd3JpdHRlbkN1bGxpbmdzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruS4jemAj+aYjuW6puOCkuWPluW+l+OBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJucyDkuI3pgI/mmI7luqbjga7lgKRcbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbE9hcGNpdHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWxPcGFjaXR5O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruS4jemAj+aYjuW6puOCkuioreWumuOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUg5LiN6YCP5piO5bqm44Gu5YCkXG4gICAqL1xuICBwdWJsaWMgc2V0TW9kZWxPYXBjaXR5KHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9tb2RlbE9wYWNpdHkgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgpLlj5blvpdcbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbCgpOiBMaXZlMkRDdWJpc21Db3JlLk1vZGVsIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWw7XG4gIH1cblxuICAvKipcbiAgICog44OR44O844OE44Gu44Kk44Oz44OH44OD44Kv44K544KS5Y+W5b6XXG4gICAqIEBwYXJhbSBwYXJ0SWQg44OR44O844OE44GuSURcbiAgICogQHJldHVybiDjg5Hjg7zjg4Tjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICovXG4gIHB1YmxpYyBnZXRQYXJ0SW5kZXgocGFydElkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XG4gICAgbGV0IHBhcnRJbmRleDogbnVtYmVyO1xuICAgIGNvbnN0IHBhcnRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFydHMuY291bnQ7XG5cbiAgICBmb3IgKHBhcnRJbmRleCA9IDA7IHBhcnRJbmRleCA8IHBhcnRDb3VudDsgKytwYXJ0SW5kZXgpIHtcbiAgICAgIGlmIChwYXJ0SWQgPT0gdGhpcy5fcGFydElkcy5hdChwYXJ0SW5kZXgpKSB7XG4gICAgICAgIHJldHVybiBwYXJ0SW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8g44Oi44OH44Or44Gr5a2Y5Zyo44GX44Gm44GE44Gq44GE5aC05ZCI44CB6Z2e5a2Y5Zyo44OR44O844OESUTjg6rjgrnjg4jlhoXjgavjgYLjgovjgYvjgpLmpJzntKLjgZfjgIHjgZ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrnjgpLov5TjgZlcbiAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJ0SWQuaXNFeGlzdChwYXJ0SWQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbm90RXhpc3RQYXJ0SWQuZ2V0VmFsdWUocGFydElkKTtcbiAgICB9XG5cbiAgICAvLyDpnZ7lrZjlnKjjg5Hjg7zjg4RJROODquOCueODiOOBq+OBquOBhOWgtOWQiOOAgeaWsOOBl+OBj+imgee0oOOCkui/veWKoOOBmeOCi1xuICAgIHBhcnRJbmRleCA9IHBhcnRDb3VudCArIHRoaXMuX25vdEV4aXN0UGFydElkLmdldFNpemUoKTtcbiAgICB0aGlzLl9ub3RFeGlzdFBhcnRJZC5zZXRWYWx1ZShwYXJ0SWQsIHBhcnRJbmRleCk7XG4gICAgdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmFwcGVuZEtleShwYXJ0SW5kZXgpO1xuXG4gICAgcmV0dXJuIHBhcnRJbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga5JROOCkuWPluW+l+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gcGFydEluZGV4IOWPluW+l+OBmeOCi+ODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODvOODhOOBrklEXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydElkKHBhcnRJbmRleDogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgIGNvbnN0IHBhcnRJZCA9IHRoaXMuX21vZGVsLnBhcnRzLmlkc1twYXJ0SW5kZXhdO1xuICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQocGFydElkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHJldHVybiDjg5Hjg7zjg4Tjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRQYXJ0Q291bnQoKTogbnVtYmVyIHtcbiAgICBjb25zdCBwYXJ0Q291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcnRzLmNvdW50O1xuICAgIHJldHVybiBwYXJ0Q291bnQ7XG4gIH1cblxuICAvKipcbiAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu6Kit5a6aKEluZGV4KVxuICAgKiBAcGFyYW0gcGFydEluZGV4IOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gb3BhY2l0eSDkuI3pgI/mmI7luqZcbiAgICovXG4gIHB1YmxpYyBzZXRQYXJ0T3BhY2l0eUJ5SW5kZXgocGFydEluZGV4OiBudW1iZXIsIG9wYWNpdHk6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuaXNFeGlzdChwYXJ0SW5kZXgpKSB7XG4gICAgICB0aGlzLl9ub3RFeGlzdFBhcnRPcGFjaXRpZXMuc2V0VmFsdWUocGFydEluZGV4LCBvcGFjaXR5KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjga7nr4Tlm7LlhoXmpJznn6VcbiAgICBDU01fQVNTRVJUKDAgPD0gcGFydEluZGV4ICYmIHBhcnRJbmRleCA8IHRoaXMuZ2V0UGFydENvdW50KCkpO1xuXG4gICAgdGhpcy5fcGFydE9wYWNpdGllc1twYXJ0SW5kZXhdID0gb3BhY2l0eTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjga7oqK3lrpooSWQpXG4gICAqIEBwYXJhbSBwYXJ0SWQg44OR44O844OE44GuSURcbiAgICogQHBhcmFtIG9wYWNpdHkg44OR44O844OE44Gu5LiN6YCP5piO5bqmXG4gICAqL1xuICBwdWJsaWMgc2V0UGFydE9wYWNpdHlCeUlkKHBhcnRJZDogQ3ViaXNtSWRIYW5kbGUsIG9wYWNpdHk6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIOmrmOmAn+WMluOBruOBn+OCgeOBq1BhcnRJbmRleOOCkuWPluW+l+OBp+OBjeOCi+apn+ani+OBq+OBquOBo+OBpuOBhOOCi+OBjOOAgeWklumDqOOBi+OCieOBruioreWumuOBruaZguOBr+WRvOOBs+WHuuOBl+mgu+W6puOBjOS9juOBhOOBn+OCgeS4jeimgVxuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcnRJbmRleChwYXJ0SWQpO1xuXG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuOyAvLyDjg5Hjg7zjg4TjgYzjgarjgYTjga7jgafjgrnjgq3jg4Pjg5dcbiAgICB9XG5cbiAgICB0aGlzLnNldFBhcnRPcGFjaXR5QnlJbmRleChpbmRleCwgb3BhY2l0eSk7XG4gIH1cblxuICAvKipcbiAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu5Y+W5b6XKGluZGV4KVxuICAgKiBAcGFyYW0gcGFydEluZGV4IOODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODvOODhOOBruS4jemAj+aYjuW6plxuICAgKi9cbiAgcHVibGljIGdldFBhcnRPcGFjaXR5QnlJbmRleChwYXJ0SW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuX25vdEV4aXN0UGFydE9wYWNpdGllcy5pc0V4aXN0KHBhcnRJbmRleCkpIHtcbiAgICAgIC8vIOODouODh+ODq+OBq+WtmOWcqOOBl+OBquOBhOODkeODvOODhElE44Gu5aC05ZCI44CB6Z2e5a2Y5Zyo44OR44O844OE44Oq44K544OI44GL44KJ5LiN6YCP5piO5bqm44KS6L+U44GZ44CCXG4gICAgICByZXR1cm4gdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzLmdldFZhbHVlKHBhcnRJbmRleCk7XG4gICAgfVxuXG4gICAgLy8g44Kk44Oz44OH44OD44Kv44K544Gu56+E5Zuy5YaF5qSc55+lXG4gICAgQ1NNX0FTU0VSVCgwIDw9IHBhcnRJbmRleCAmJiBwYXJ0SW5kZXggPCB0aGlzLmdldFBhcnRDb3VudCgpKTtcblxuICAgIHJldHVybiB0aGlzLl9wYXJ0T3BhY2l0aWVzW3BhcnRJbmRleF07XG4gIH1cblxuICAvKipcbiAgICog44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu5Y+W5b6XKGlkKVxuICAgKiBAcGFyYW0gcGFydElkIOODkeODvOODhOOBru+8qe+9hFxuICAgKiBAcmV0dXJuIOODkeODvOODhOOBruS4jemAj+aYjuW6plxuICAgKi9cbiAgcHVibGljIGdldFBhcnRPcGFjaXR5QnlJZChwYXJ0SWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcbiAgICAvLyDpq5jpgJ/ljJbjga7jgZ/jgoHjgatQYXJ0SW5kZXjjgpLlj5blvpfjgafjgY3jgovmqZ/mp4vjgavjgarjgaPjgabjgYTjgovjgYzjgIHlpJbpg6jjgYvjgonjga7oqK3lrprjga7mmYLjga/lkbzjgbPlh7rjgZfpoLvluqbjgYzkvY7jgYTjgZ/jgoHkuI3opoFcbiAgICBjb25zdCBpbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJ0SW5kZXgocGFydElkKTtcblxuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIHJldHVybiAwOyAvLyDjg5Hjg7zjg4TjgYznhKHjgYTjga7jgafjgrnjgq3jg4Pjg5dcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nZXRQYXJ0T3BhY2l0eUJ5SW5kZXgoaW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCueOBruWPluW+l1xuICAgKiBAcGFyYW0g44OR44Op44Oh44O844K/SURcbiAgICogQHJldHVybiDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICovXG4gIHB1YmxpYyBnZXRQYXJhbWV0ZXJJbmRleChwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgIGxldCBwYXJhbWV0ZXJJbmRleDogbnVtYmVyO1xuICAgIGNvbnN0IGlkQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XG5cbiAgICBmb3IgKHBhcmFtZXRlckluZGV4ID0gMDsgcGFyYW1ldGVySW5kZXggPCBpZENvdW50OyArK3BhcmFtZXRlckluZGV4KSB7XG4gICAgICBpZiAocGFyYW1ldGVySWQgIT0gdGhpcy5fcGFyYW1ldGVySWRzLmF0KHBhcmFtZXRlckluZGV4KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmFtZXRlckluZGV4O1xuICAgIH1cblxuICAgIC8vIOODouODh+ODq+OBq+WtmOWcqOOBl+OBpuOBhOOBquOBhOWgtOWQiOOAgemdnuWtmOWcqOODkeODqeODoeODvOOCv0lE44Oq44K544OI5YaF44KS5qSc57Si44GX44CB44Gd44Gu44Kk44Oz44OH44OD44Kv44K544KS6L+U44GZXG4gICAgaWYgKHRoaXMuX25vdEV4aXN0UGFyYW1ldGVySWQuaXNFeGlzdChwYXJhbWV0ZXJJZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkLmdldFZhbHVlKHBhcmFtZXRlcklkKTtcbiAgICB9XG5cbiAgICAvLyDpnZ7lrZjlnKjjg5Hjg6njg6Hjg7zjgr9JROODquOCueODiOOBq+OBquOBhOWgtOWQiOaWsOOBl+OBj+imgee0oOOCkui/veWKoOOBmeOCi1xuICAgIHBhcmFtZXRlckluZGV4ID1cbiAgICAgIHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQgKyB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlcklkLmdldFNpemUoKTtcblxuICAgIHRoaXMuX25vdEV4aXN0UGFyYW1ldGVySWQuc2V0VmFsdWUocGFyYW1ldGVySWQsIHBhcmFtZXRlckluZGV4KTtcbiAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5hcHBlbmRLZXkocGFyYW1ldGVySW5kZXgpO1xuXG4gICAgcmV0dXJuIHBhcmFtZXRlckluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlckNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu56iu6aGe44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBjc21QYXJhbWV0ZXJUeXBlX05vcm1hbCAtPiDpgJrluLjjga7jg5Hjg6njg6Hjg7zjgr9cbiAgICogICAgICAgICAgY3NtUGFyYW1ldGVyVHlwZV9CbGVuZFNoYXBlIC0+IOODluODrOODs+ODieOCt+OCp+OCpOODl+ODkeODqeODoeODvOOCv1xuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlclR5cGUoXG4gICAgcGFyYW1ldGVySW5kZXg6IG51bWJlclxuICApOiBMaXZlMkRDdWJpc21Db3JlLmNzbVBhcmFtZXRlclR5cGUge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLnR5cGVzW3BhcmFtZXRlckluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruacgOWkp+WApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlck1heGltdW1WYWx1ZShwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlsI/lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruacgOWwj+WApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlck1pbmltdW1WYWx1ZShwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7jg4fjg5Xjgqnjg6vjg4jlgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruODh+ODleOCqeODq+ODiOWApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlckRlZmF1bHRWYWx1ZShwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5kZWZhdWx0VmFsdWVzW3BhcmFtZXRlckluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4ICAgIOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruWApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuaXNFeGlzdChwYXJhbWV0ZXJJbmRleCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5nZXRWYWx1ZShwYXJhbWV0ZXJJbmRleCk7XG4gICAgfVxuXG4gICAgLy8g44Kk44Oz44OH44OD44Kv44K544Gu56+E5Zuy5YaF5qSc55+lXG4gICAgQ1NNX0FTU0VSVChcbiAgICAgIDAgPD0gcGFyYW1ldGVySW5kZXggJiYgcGFyYW1ldGVySW5kZXggPCB0aGlzLmdldFBhcmFtZXRlckNvdW50KClcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMuX3BhcmFtZXRlclZhbHVlc1twYXJhbWV0ZXJJbmRleF07XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCAgICDjg5Hjg6njg6Hjg7zjgr/jga5JRFxuICAgKiBAcmV0dXJuIOODkeODqeODoeODvOOCv+OBruWApFxuICAgKi9cbiAgcHVibGljIGdldFBhcmFtZXRlclZhbHVlQnlJZChwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgIC8vIOmrmOmAn+WMluOBruOBn+OCgeOBq3BhcmFtZXRlckluZGV444KS5Y+W5b6X44Gn44GN44KL5qmf5qeL44Gr44Gq44Gj44Gm44GE44KL44GM44CB5aSW6YOo44GL44KJ44Gu6Kit5a6a44Gu5pmC44Gv5ZG844Gz5Ye644GX6aC75bqm44GM5L2O44GE44Gf44KB5LiN6KaBXG4gICAgY29uc3QgcGFyYW1ldGVySW5kZXg6IG51bWJlciA9IHRoaXMuZ2V0UGFyYW1ldGVySW5kZXgocGFyYW1ldGVySWQpO1xuICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCk7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJbmRleCDjg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHZhbHVlIOODkeODqeODoeODvOOCv+OBruWApFxuICAgKiBAcGFyYW0gd2VpZ2h0IOmHjeOBv1xuICAgKi9cbiAgcHVibGljIHNldFBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICBwYXJhbWV0ZXJJbmRleDogbnVtYmVyLFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAgd2VpZ2h0ID0gMS4wXG4gICk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcy5pc0V4aXN0KHBhcmFtZXRlckluZGV4KSkge1xuICAgICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJWYWx1ZXMuc2V0VmFsdWUoXG4gICAgICAgIHBhcmFtZXRlckluZGV4LFxuICAgICAgICB3ZWlnaHQgPT0gMVxuICAgICAgICAgID8gdmFsdWVcbiAgICAgICAgICA6IHRoaXMuX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzLmdldFZhbHVlKHBhcmFtZXRlckluZGV4KSAqXG4gICAgICAgICAgICAgICgxIC0gd2VpZ2h0KSArXG4gICAgICAgICAgICAgIHZhbHVlICogd2VpZ2h0XG4gICAgICApO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8g44Kk44Oz44OH44OD44Kv44K544Gu56+E5Zuy5YaF5qSc55+lXG4gICAgQ1NNX0FTU0VSVChcbiAgICAgIDAgPD0gcGFyYW1ldGVySW5kZXggJiYgcGFyYW1ldGVySW5kZXggPCB0aGlzLmdldFBhcmFtZXRlckNvdW50KClcbiAgICApO1xuXG4gICAgaWYgKHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF0gPCB2YWx1ZSkge1xuICAgICAgdmFsdWUgPSB0aGlzLl9tb2RlbC5wYXJhbWV0ZXJzLm1heGltdW1WYWx1ZXNbcGFyYW1ldGVySW5kZXhdO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzW3BhcmFtZXRlckluZGV4XSA+IHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWluaW11bVZhbHVlc1twYXJhbWV0ZXJJbmRleF07XG4gICAgfVxuXG4gICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW3BhcmFtZXRlckluZGV4XSA9XG4gICAgICB3ZWlnaHQgPT0gMVxuICAgICAgICA/IHZhbHVlXG4gICAgICAgIDogKHRoaXMuX3BhcmFtZXRlclZhbHVlc1twYXJhbWV0ZXJJbmRleF0gPVxuICAgICAgICAgICAgdGhpcy5fcGFyYW1ldGVyVmFsdWVzW3BhcmFtZXRlckluZGV4XSAqICgxIC0gd2VpZ2h0KSArXG4gICAgICAgICAgICB2YWx1ZSAqIHdlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCDjg5Hjg6njg6Hjg7zjgr/jga5JRFxuICAgKiBAcGFyYW0gdmFsdWUg44OR44Op44Oh44O844K/44Gu5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgc2V0UGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSxcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHdlaWdodCA9IDEuMFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleDogbnVtYmVyID0gdGhpcy5nZXRQYXJhbWV0ZXJJbmRleChwYXJhbWV0ZXJJZCk7XG4gICAgdGhpcy5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoaW5kZXgsIHZhbHVlLCB3ZWlnaHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBruWApOOBruWKoOeulyhpbmRleClcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmFsdWUg5Yqg566X44GZ44KL5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgYWRkUGFyYW1ldGVyVmFsdWVCeUluZGV4KFxuICAgIHBhcmFtZXRlckluZGV4OiBudW1iZXIsXG4gICAgdmFsdWU6IG51bWJlcixcbiAgICB3ZWlnaHQgPSAxLjBcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoXG4gICAgICBwYXJhbWV0ZXJJbmRleCxcbiAgICAgIHRoaXMuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4KSArIHZhbHVlICogd2VpZ2h0XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7liqDnrpcoaWQpXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCDjg5Hjg6njg6Hjg7zjgr/vvKnvvKRcbiAgICogQHBhcmFtIHZhbHVlIOWKoOeul+OBmeOCi+WApFxuICAgKiBAcGFyYW0gd2VpZ2h0IOmHjeOBv1xuICAgKi9cbiAgcHVibGljIGFkZFBhcmFtZXRlclZhbHVlQnlJZChcbiAgICBwYXJhbWV0ZXJJZDogYW55LFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAgd2VpZ2h0ID0gMS4wXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcmFtZXRlckluZGV4KHBhcmFtZXRlcklkKTtcbiAgICB0aGlzLmFkZFBhcmFtZXRlclZhbHVlQnlJbmRleChpbmRleCwgdmFsdWUsIHdlaWdodCk7XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gu5YCk44Gu5LmX566XXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCDjg5Hjg6njg6Hjg7zjgr/jga5JRFxuICAgKiBAcGFyYW0gdmFsdWUg5LmX566X44GZ44KL5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLFxuICAgIHZhbHVlOiBudW1iZXIsXG4gICAgd2VpZ2h0ID0gMS4wXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFBhcmFtZXRlckluZGV4KHBhcmFtZXRlcklkKTtcbiAgICB0aGlzLm11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUluZGV4KGluZGV4LCB2YWx1ZSwgd2VpZ2h0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7kuZfnrpdcbiAgICogQHBhcmFtIHBhcmFtZXRlckluZGV4IOODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmFsdWUg5LmX566X44GZ44KL5YCkXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/XG4gICAqL1xuICBwdWJsaWMgbXVsdGlwbHlQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgoXG4gICAgcGFyYW1ldGVySW5kZXg6IG51bWJlcixcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHdlaWdodCA9IDEuMFxuICApOiB2b2lkIHtcbiAgICB0aGlzLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChcbiAgICAgIHBhcmFtZXRlckluZGV4LFxuICAgICAgdGhpcy5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgpICpcbiAgICAgICAgKDEuMCArICh2YWx1ZSAtIDEuMCkgKiB3ZWlnaHQpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCueOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJZCBEcmF3YWJsZeOBrklEXG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUluZGV4KGRyYXdhYmxlSWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcbiAgICBjb25zdCBkcmF3YWJsZUNvdW50ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50O1xuXG4gICAgZm9yIChcbiAgICAgIGxldCBkcmF3YWJsZUluZGV4ID0gMDtcbiAgICAgIGRyYXdhYmxlSW5kZXggPCBkcmF3YWJsZUNvdW50O1xuICAgICAgKytkcmF3YWJsZUluZGV4XG4gICAgKSB7XG4gICAgICBpZiAodGhpcy5fZHJhd2FibGVJZHMuYXQoZHJhd2FibGVJbmRleCkgPT0gZHJhd2FibGVJZCkge1xuICAgICAgICByZXR1cm4gZHJhd2FibGVJbmRleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlQ291bnQoKTogbnVtYmVyIHtcbiAgICBjb25zdCBkcmF3YWJsZUNvdW50ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvdW50O1xuICAgIHJldHVybiBkcmF3YWJsZUNvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44GuSUTjgpLlj5blvpfjgZnjgotcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBrklEXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVJZChkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgY29uc3QgcGFyYW1ldGVySWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5pZHM7XG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChwYXJhbWV0ZXJJZHNbZHJhd2FibGVJbmRleF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu5o+P55S76aCG44Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7mj4/nlLvpoIbjg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVJlbmRlck9yZGVycygpOiBJbnQzMkFycmF5IHtcbiAgICBjb25zdCByZW5kZXJPcmRlcnM6IEludDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMucmVuZGVyT3JkZXJzO1xuICAgIHJldHVybiByZW5kZXJPcmRlcnM7XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICog6Zai5pWw5ZCN44GM6Kqk44Gj44Gm44GE44Gf44Gf44KB44CB5Luj5pu/44Go44Gq44KLIGdldERyYXdhYmxlVGV4dHVyZUluZGV4IOOCkui/veWKoOOBl+OAgeOBk+OBrumWouaVsOOBr+mdnuaOqOWlqOOBqOOBquOCiuOBvuOBl+OBn+OAglxuICAgKlxuICAgKiBEcmF3YWJsZeOBruODhuOCr+OCueODgeODo+OCpOODs+ODh+ODg+OCr+OCueODquOCueODiOOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu44OG44Kv44K544OB44Oj44Kk44Oz44OH44OD44Kv44K544Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVUZXh0dXJlSW5kaWNlcyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmdldERyYXdhYmxlVGV4dHVyZUluZGV4KGRyYXdhYmxlSW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu44OG44Kv44K544OB44Oj44Kk44Oz44OH44OD44Kv44K544Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7jg4bjgq/jgrnjg4Hjg6PjgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVRleHR1cmVJbmRleChkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHRleHR1cmVJbmRpY2VzOiBJbnQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnRleHR1cmVJbmRpY2VzO1xuICAgIHJldHVybiB0ZXh0dXJlSW5kaWNlc1tkcmF3YWJsZUluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBrlZlcnRleFBvc2l0aW9uc+OBruWkieWMluaDheWgseOBruWPluW+l1xuICAgKlxuICAgKiDnm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgadEcmF3YWJsZeOBrumggueCueaDheWgseOBjOWkieWMluOBl+OBn+OBi+OCkuWPluW+l+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gICBkcmF3YWJsZUluZGV4ICAgRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHZhbCAgdHJ1ZSAgICBEcmF3YWJsZeOBrumggueCueaDheWgseOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBn1xuICAgKiBAcmV0dmFsICBmYWxzZSAgIERyYXdhYmxl44Gu6aCC54K55oOF5aCx44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVEeW5hbWljRmxhZ1ZlcnRleFBvc2l0aW9uc0RpZENoYW5nZShcbiAgICBkcmF3YWJsZUluZGV4OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNWZXJ0ZXhQb3NpdGlvbnNEaWRDaGFuZ2VCaXQoXG4gICAgICBkeW5hbWljRmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu6aCC54K544Kk44Oz44OH44OD44Kv44K544Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRleEluZGV4Q291bnQoZHJhd2FibGVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBpbmRleENvdW50czogSW50MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5pbmRleENvdW50cztcbiAgICByZXR1cm4gaW5kZXhDb3VudHNbZHJhd2FibGVJbmRleF07XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7poILngrnjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCueOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlVmVydGV4Q291bnQoZHJhd2FibGVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCB2ZXJ0ZXhDb3VudHMgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMudmVydGV4Q291bnRzO1xuICAgIHJldHVybiB2ZXJ0ZXhDb3VudHNbZHJhd2FibGVJbmRleF07XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7poILngrnjg6rjgrnjg4jjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggZHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBrumggueCueODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlVmVydGljZXMoZHJhd2FibGVJbmRleDogbnVtYmVyKTogRmxvYXQzMkFycmF5IHtcbiAgICByZXR1cm4gdGhpcy5nZXREcmF3YWJsZVZlcnRleFBvc2l0aW9ucyhkcmF3YWJsZUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBrumggueCueOCpOODs+ODh+ODg+OCr+OCueODquOCueODiOOBruWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu6aCC54K544Kk44Oz44OH44OD44Kv44K544Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVWZXJ0ZXhJbmRpY2VzKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IFVpbnQxNkFycmF5IHtcbiAgICBjb25zdCBpbmRpY2VzQXJyYXk6IFVpbnQxNkFycmF5W10gPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuaW5kaWNlcztcbiAgICByZXR1cm4gaW5kaWNlc0FycmF5W2RyYXdhYmxlSW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu6aCC54K544Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrnjg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVZlcnRleFBvc2l0aW9ucyhkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBGbG9hdDMyQXJyYXkge1xuICAgIGNvbnN0IHZlcnRpY2VzQXJyYXk6IEZsb2F0MzJBcnJheVtdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnZlcnRleFBvc2l0aW9ucztcbiAgICByZXR1cm4gdmVydGljZXNBcnJheVtkcmF3YWJsZUluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBrumggueCueOBrlVW44Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7poILngrlVVuODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlVmVydGV4VXZzKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEZsb2F0MzJBcnJheSB7XG4gICAgY29uc3QgdXZzQXJyYXk6IEZsb2F0MzJBcnJheVtdID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLnZlcnRleFV2cztcbiAgICByZXR1cm4gdXZzQXJyYXlbZHJhd2FibGVJbmRleF07XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7kuI3pgI/mmI7luqbjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruS4jemAj+aYjuW6plxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlT3BhY2l0eShkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IG9wYWNpdGllczogRmxvYXQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLm9wYWNpdGllcztcbiAgICByZXR1cm4gb3BhY2l0aWVzW2RyYXdhYmxlSW5kZXhdO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu5LmX566X6Imy44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gZHJhd2FibGXjga7kuZfnrpfoibIoUkdCQSlcbiAgICog44K544Kv44Oq44O844Oz6Imy44GvUkdCQeOBp+WPluW+l+OBleOCjOOCi+OBjOOAgUHjga/lv4XjgZowXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVNdWx0aXBseUNvbG9yKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEN1YmlzbVRleHR1cmVDb2xvciB7XG4gICAgY29uc3QgbXVsdGlwbHlDb2xvcnM6IEZsb2F0MzJBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5tdWx0aXBseUNvbG9ycztcbiAgICBjb25zdCBpbmRleCA9IGRyYXdhYmxlSW5kZXggKiA0O1xuICAgIGNvbnN0IG11bHRpcGx5Q29sb3I6IEN1YmlzbVRleHR1cmVDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcbiAgICBtdWx0aXBseUNvbG9yLlIgPSBtdWx0aXBseUNvbG9yc1tpbmRleF07XG4gICAgbXVsdGlwbHlDb2xvci5HID0gbXVsdGlwbHlDb2xvcnNbaW5kZXggKyAxXTtcbiAgICBtdWx0aXBseUNvbG9yLkIgPSBtdWx0aXBseUNvbG9yc1tpbmRleCArIDJdO1xuICAgIG11bHRpcGx5Q29sb3IuQSA9IG11bHRpcGx5Q29sb3JzW2luZGV4ICsgM107XG4gICAgcmV0dXJuIG11bHRpcGx5Q29sb3I7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7jgrnjgq/jg6rjg7zjg7PoibLjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruOCueOCr+ODquODvOODs+iJsihSR0JBKVxuICAgKiDjgrnjgq/jg6rjg7zjg7PoibLjga9SR0JB44Gn5Y+W5b6X44GV44KM44KL44GM44CBQeOBr+W/heOBmjBcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZVNjcmVlbkNvbG9yKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IEN1YmlzbVRleHR1cmVDb2xvciB7XG4gICAgY29uc3Qgc2NyZWVuQ29sb3JzOiBGbG9hdDMyQXJyYXkgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuc2NyZWVuQ29sb3JzO1xuICAgIGNvbnN0IGluZGV4ID0gZHJhd2FibGVJbmRleCAqIDQ7XG4gICAgY29uc3Qgc2NyZWVuQ29sb3I6IEN1YmlzbVRleHR1cmVDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcbiAgICBzY3JlZW5Db2xvci5SID0gc2NyZWVuQ29sb3JzW2luZGV4XTtcbiAgICBzY3JlZW5Db2xvci5HID0gc2NyZWVuQ29sb3JzW2luZGV4ICsgMV07XG4gICAgc2NyZWVuQ29sb3IuQiA9IHNjcmVlbkNvbG9yc1tpbmRleCArIDJdO1xuICAgIHNjcmVlbkNvbG9yLkEgPSBzY3JlZW5Db2xvcnNbaW5kZXggKyAzXTtcbiAgICByZXR1cm4gc2NyZWVuQ29sb3I7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7opqrjg5Hjg7zjg4Tjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiBkcmF3YWJsZeOBruimquODkeODvOODhOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlUGFyZW50UGFydEluZGV4KGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsLmRyYXdhYmxlcy5wYXJlbnRQYXJ0SW5kaWNlc1tkcmF3YWJsZUluZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruODluODrOODs+ODieODouODvOODieOCkuWPluW+l1xuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIGRyYXdhYmxl44Gu44OW44Os44Oz44OJ44Oi44O844OJXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVCbGVuZE1vZGUoZHJhd2FibGVJbmRleDogbnVtYmVyKTogQ3ViaXNtQmxlbmRNb2RlIHtcbiAgICBjb25zdCBjb25zdGFudEZsYWdzID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvbnN0YW50RmxhZ3M7XG5cbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNCbGVuZEFkZGl0aXZlQml0KFxuICAgICAgY29uc3RhbnRGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgIClcbiAgICAgID8gQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZVxuICAgICAgOiBMaXZlMkRDdWJpc21Db3JlLlV0aWxzLmhhc0JsZW5kTXVsdGlwbGljYXRpdmVCaXQoXG4gICAgICAgICAgY29uc3RhbnRGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICAgICApXG4gICAgICA/IEN1YmlzbUJsZW5kTW9kZS5DdWJpc21CbGVuZE1vZGVfTXVsdGlwbGljYXRpdmVcbiAgICAgIDogQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWw7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7jg57jgrnjgq/jga7lj43ou6Lkvb/nlKjjga7lj5blvpdcbiAgICpcbiAgICogRHJhd2FibGXjga7jg57jgrnjgq/kvb/nlKjmmYLjga7lj43ou6LoqK3lrprjgpLlj5blvpfjgZnjgovjgIJcbiAgICog44Oe44K544Kv44KS5L2/55So44GX44Gq44GE5aC05ZCI44Gv54Sh6KaW44GV44KM44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IERyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7lj43ou6LoqK3lrppcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUludmVydGVkTWFza0JpdChkcmF3YWJsZUluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBjb25zdGFudEZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmNvbnN0YW50RmxhZ3M7XG5cbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNJc0ludmVydGVkTWFza0JpdChcbiAgICAgIGNvbnN0YW50RmxhZ3NbZHJhd2FibGVJbmRleF1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdhYmxl44Gu44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Oq44K544OI44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4gRHJhd2FibGXjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZU1hc2tzKCk6IEludDMyQXJyYXlbXSB7XG4gICAgY29uc3QgbWFza3M6IEludDMyQXJyYXlbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5tYXNrcztcbiAgICByZXR1cm4gbWFza3M7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7lgIvmlbDjg6rjgrnjg4jjga7lj5blvpdcbiAgICogQHJldHVybiBEcmF3YWJsZeOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruWAi+aVsOODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlTWFza0NvdW50cygpOiBJbnQzMkFycmF5IHtcbiAgICBjb25zdCBtYXNrQ291bnRzOiBJbnQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLm1hc2tDb3VudHM7XG4gICAgcmV0dXJuIG1hc2tDb3VudHM7XG4gIH1cblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5L2/55So54q25oWLXG4gICAqXG4gICAqIEByZXR1cm4gdHJ1ZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLkvb/nlKjjgZfjgabjgYTjgotcbiAgICogQHJldHVybiBmYWxzZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLkvb/nlKjjgZfjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc1VzaW5nTWFza2luZygpOiBib29sZWFuIHtcbiAgICBmb3IgKGxldCBkID0gMDsgZCA8IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5jb3VudDsgKytkKSB7XG4gICAgICBpZiAodGhpcy5fbW9kZWwuZHJhd2FibGVzLm1hc2tDb3VudHNbZF0gPD0gMCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7ooajnpLrmg4XloLHjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44GM6KGo56S6XG4gICAqIEByZXR1cm4gZmFsc2UgRHJhd2FibGXjgYzpnZ7ooajnpLpcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnSXNWaXNpYmxlKGRyYXdhYmxlSW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzSXNWaXNpYmxlQml0KGR5bmFtaWNGbGFnc1tkcmF3YWJsZUluZGV4XSk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga5EcmF3T3JkZXLjga7lpInljJbmg4XloLHjga7lj5blvpdcbiAgICpcbiAgICog55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44GnZHJhd2FibGXjga5kcmF3T3JkZXLjgYzlpInljJbjgZfjgZ/jgYvjgpLlj5blvpfjgZnjgovjgIJcbiAgICogZHJhd09yZGVy44GvYXJ0TWVzaOS4iuOBp+aMh+WumuOBmeOCizDjgYvjgokxMDAw44Gu5oOF5aCxXG4gICAqIEBwYXJhbSBkcmF3YWJsZUluZGV4IGRyYXdhYmxl44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4gdHJ1ZSBkcmF3YWJsZeOBruS4jemAj+aYjuW6puOBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBn1xuICAgKiBAcmV0dXJuIGZhbHNlIGRyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44Gm44GE44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0RHJhd2FibGVEeW5hbWljRmxhZ1Zpc2liaWxpdHlEaWRDaGFuZ2UoXG4gICAgZHJhd2FibGVJbmRleDogbnVtYmVyXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGR5bmFtaWNGbGFnczogVWludDhBcnJheSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5keW5hbWljRmxhZ3M7XG4gICAgcmV0dXJuIExpdmUyREN1YmlzbUNvcmUuVXRpbHMuaGFzVmlzaWJpbGl0eURpZENoYW5nZUJpdChcbiAgICAgIGR5bmFtaWNGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7kuI3pgI/mmI7luqbjga7lpInljJbmg4XloLHjga7lj5blvpdcbiAgICpcbiAgICog55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44GnZHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYzlpInljJbjgZfjgZ/jgYvjgpLlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggZHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44Gu5LiN6YCP5piO5bqm44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXG4gICAqIEByZXR1cm4gZmFsc2UgRHJhd2FibGXjga7kuI3pgI/mmI7luqbjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgabjgarjgYRcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnT3BhY2l0eURpZENoYW5nZShcbiAgICBkcmF3YWJsZUluZGV4OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNPcGFjaXR5RGlkQ2hhbmdlQml0KFxuICAgICAgZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3YWJsZeOBruaPj+eUu+mghuW6j+OBruWkieWMluaDheWgseOBruWPluW+l1xuICAgKlxuICAgKiDnm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgadEcmF3YWJsZeOBruaPj+eUu+OBrumghuW6j+OBjOWkieWMluOBl+OBn+OBi+OCkuWPluW+l+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCBEcmF3YWJsZeOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIHRydWUgRHJhd2FibGXjga7mj4/nlLvjga7poIbluo/jgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgZ9cbiAgICogQHJldHVybiBmYWxzZSBEcmF3YWJsZeOBruaPj+eUu+OBrumghuW6j+OBjOebtOi/keOBrkN1YmlzbU1vZGVsLnVwZGF0ZemWouaVsOOBp+WkieWMluOBl+OBpuOBquOBhFxuICAgKi9cbiAgcHVibGljIGdldERyYXdhYmxlRHluYW1pY0ZsYWdSZW5kZXJPcmRlckRpZENoYW5nZShcbiAgICBkcmF3YWJsZUluZGV4OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNSZW5kZXJPcmRlckRpZENoYW5nZUJpdChcbiAgICAgIGR5bmFtaWNGbGFnc1tkcmF3YWJsZUluZGV4XVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd2FibGXjga7kuZfnrpfoibLjg7vjgrnjgq/jg6rjg7zjg7PoibLjga7lpInljJbmg4XloLHjga7lj5blvpdcbiAgICpcbiAgICog55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44GnRHJhd2FibGXjga7kuZfnrpfoibLjg7vjgrnjgq/jg6rjg7zjg7PoibLjgYzlpInljJbjgZfjgZ/jgYvjgpLlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGRyYXdhYmxlSW5kZXggRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiB0cnVlIERyYXdhYmxl44Gu5LmX566X6Imy44O744K544Kv44Oq44O844Oz6Imy44GM55u06L+R44GuQ3ViaXNtTW9kZWwudXBkYXRl6Zai5pWw44Gn5aSJ5YyW44GX44GfXG4gICAqIEByZXR1cm4gZmFsc2UgRHJhd2FibGXjga7kuZfnrpfoibLjg7vjgrnjgq/jg6rjg7zjg7PoibLjgYznm7Tov5Hjga5DdWJpc21Nb2RlbC51cGRhdGXplqLmlbDjgaflpInljJbjgZfjgabjgarjgYRcbiAgICovXG4gIHB1YmxpYyBnZXREcmF3YWJsZUR5bmFtaWNGbGFnQmxlbmRDb2xvckRpZENoYW5nZShcbiAgICBkcmF3YWJsZUluZGV4OiBudW1iZXJcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZHluYW1pY0ZsYWdzOiBVaW50OEFycmF5ID0gdGhpcy5fbW9kZWwuZHJhd2FibGVzLmR5bmFtaWNGbGFncztcbiAgICByZXR1cm4gTGl2ZTJEQ3ViaXNtQ29yZS5VdGlscy5oYXNCbGVuZENvbG9yRGlkQ2hhbmdlQml0KFxuICAgICAgZHluYW1pY0ZsYWdzW2RyYXdhYmxlSW5kZXhdXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkv53lrZjjgZXjgozjgZ/jg5Hjg6njg6Hjg7zjgr/jga7oqq3jgb/ovrzjgb9cbiAgICovXG4gIHB1YmxpYyBsb2FkUGFyYW1ldGVycygpOiB2b2lkIHtcbiAgICBsZXQgcGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XG4gICAgY29uc3Qgc2F2ZWRQYXJhbWV0ZXJDb3VudDogbnVtYmVyID0gdGhpcy5fc2F2ZWRQYXJhbWV0ZXJzLmdldFNpemUoKTtcblxuICAgIGlmIChwYXJhbWV0ZXJDb3VudCA+IHNhdmVkUGFyYW1ldGVyQ291bnQpIHtcbiAgICAgIHBhcmFtZXRlckNvdW50ID0gc2F2ZWRQYXJhbWV0ZXJDb3VudDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlckNvdW50OyArK2kpIHtcbiAgICAgIHRoaXMuX3BhcmFtZXRlclZhbHVlc1tpXSA9IHRoaXMuX3NhdmVkUGFyYW1ldGVycy5hdChpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5Yid5pyf5YyW44GZ44KLXG4gICAqL1xuICBwdWJsaWMgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcbiAgICBDU01fQVNTRVJUKHRoaXMuX21vZGVsKTtcblxuICAgIHRoaXMuX3BhcmFtZXRlclZhbHVlcyA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMudmFsdWVzO1xuICAgIHRoaXMuX3BhcnRPcGFjaXRpZXMgPSB0aGlzLl9tb2RlbC5wYXJ0cy5vcGFjaXRpZXM7XG4gICAgdGhpcy5fcGFyYW1ldGVyTWF4aW11bVZhbHVlcyA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlcztcbiAgICB0aGlzLl9wYXJhbWV0ZXJNaW5pbXVtVmFsdWVzID0gdGhpcy5fbW9kZWwucGFyYW1ldGVycy5taW5pbXVtVmFsdWVzO1xuXG4gICAge1xuICAgICAgY29uc3QgcGFyYW1ldGVySWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuaWRzO1xuICAgICAgY29uc3QgcGFyYW1ldGVyQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsLnBhcmFtZXRlcnMuY291bnQ7XG5cbiAgICAgIHRoaXMuX3BhcmFtZXRlcklkcy5wcmVwYXJlQ2FwYWNpdHkocGFyYW1ldGVyQ291bnQpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJDb3VudDsgKytpKSB7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlcklkcy5wdXNoQmFjayhcbiAgICAgICAgICBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQocGFyYW1ldGVySWRzW2ldKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHBhcnRDb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwucGFydHMuY291bnQ7XG4gICAge1xuICAgICAgY29uc3QgcGFydElkczogc3RyaW5nW10gPSB0aGlzLl9tb2RlbC5wYXJ0cy5pZHM7XG5cbiAgICAgIHRoaXMuX3BhcnRJZHMucHJlcGFyZUNhcGFjaXR5KHBhcnRDb3VudCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRDb3VudDsgKytpKSB7XG4gICAgICAgIHRoaXMuX3BhcnRJZHMucHVzaEJhY2soXG4gICAgICAgICAgQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKHBhcnRJZHNbaV0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3VzZXJQYXJ0TXVsdGlwbHlDb2xvcnMucHJlcGFyZUNhcGFjaXR5KHBhcnRDb3VudCk7XG4gICAgICB0aGlzLl91c2VyUGFydFNjcmVlbkNvbG9ycy5wcmVwYXJlQ2FwYWNpdHkocGFydENvdW50KTtcblxuICAgICAgdGhpcy5fcGFydENoaWxkRHJhd2FibGVzLnByZXBhcmVDYXBhY2l0eShwYXJ0Q291bnQpO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGNvbnN0IGRyYXdhYmxlSWRzOiBzdHJpbmdbXSA9IHRoaXMuX21vZGVsLmRyYXdhYmxlcy5pZHM7XG4gICAgICBjb25zdCBkcmF3YWJsZUNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5kcmF3YWJsZXMuY291bnQ7XG5cbiAgICAgIHRoaXMuX3VzZXJNdWx0aXBseUNvbG9ycy5wcmVwYXJlQ2FwYWNpdHkoZHJhd2FibGVDb3VudCk7XG4gICAgICB0aGlzLl91c2VyU2NyZWVuQ29sb3JzLnByZXBhcmVDYXBhY2l0eShkcmF3YWJsZUNvdW50KTtcblxuICAgICAgLy8g44Kr44Oq44Oz44Kw6Kit5a6aXG4gICAgICB0aGlzLl91c2VyQ3VsbGluZ3MucHJlcGFyZUNhcGFjaXR5KGRyYXdhYmxlQ291bnQpO1xuICAgICAgY29uc3QgdXNlckN1bGxpbmc6IERyYXdhYmxlQ3VsbGluZ0RhdGEgPSBuZXcgRHJhd2FibGVDdWxsaW5nRGF0YShcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGZhbHNlXG4gICAgICApO1xuXG4gICAgICAvLyBQYXJ0XG4gICAgICB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydENvdW50OyArK2kpIHtcbiAgICAgICAgICBjb25zdCBtdWx0aXBseUNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3IgPSBuZXcgQ3ViaXNtVGV4dHVyZUNvbG9yKFxuICAgICAgICAgICAgMS4wLFxuICAgICAgICAgICAgMS4wLFxuICAgICAgICAgICAgMS4wLFxuICAgICAgICAgICAgMS4wXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBzY3JlZW5Db2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcihcbiAgICAgICAgICAgIDAuMCxcbiAgICAgICAgICAgIDAuMCxcbiAgICAgICAgICAgIDAuMCxcbiAgICAgICAgICAgIDEuMFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBjb25zdCB1c2VyTXVsdGlwbHlDb2xvcjogUGFydENvbG9yRGF0YSA9IG5ldyBQYXJ0Q29sb3JEYXRhKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBtdWx0aXBseUNvbG9yXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCB1c2VyU2NyZWVuQ29sb3I6IFBhcnRDb2xvckRhdGEgPSBuZXcgUGFydENvbG9yRGF0YShcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgc2NyZWVuQ29sb3JcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgdGhpcy5fdXNlclBhcnRNdWx0aXBseUNvbG9ycy5wdXNoQmFjayh1c2VyTXVsdGlwbHlDb2xvcik7XG4gICAgICAgICAgdGhpcy5fdXNlclBhcnRTY3JlZW5Db2xvcnMucHVzaEJhY2sodXNlclNjcmVlbkNvbG9yKTtcbiAgICAgICAgICB0aGlzLl9wYXJ0Q2hpbGREcmF3YWJsZXMucHVzaEJhY2sobmV3IGNzbVZlY3RvcjxudW1iZXI+KCkpO1xuICAgICAgICAgIHRoaXMuX3BhcnRDaGlsZERyYXdhYmxlcy5hdChpKS5wcmVwYXJlQ2FwYWNpdHkoZHJhd2FibGVDb3VudCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRHJhd2FibGVzXG4gICAgICB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHJhd2FibGVDb3VudDsgKytpKSB7XG4gICAgICAgICAgY29uc3QgbXVsdGlwbHlDb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcihcbiAgICAgICAgICAgIDEuMCxcbiAgICAgICAgICAgIDEuMCxcbiAgICAgICAgICAgIDEuMCxcbiAgICAgICAgICAgIDEuMFxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3Qgc2NyZWVuQ29sb3I6IEN1YmlzbVRleHR1cmVDb2xvciA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoXG4gICAgICAgICAgICAwLjAsXG4gICAgICAgICAgICAwLjAsXG4gICAgICAgICAgICAwLjAsXG4gICAgICAgICAgICAxLjBcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgY29uc3QgdXNlck11bHRpcGx5Q29sb3I6IERyYXdhYmxlQ29sb3JEYXRhID0gbmV3IERyYXdhYmxlQ29sb3JEYXRhKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBtdWx0aXBseUNvbG9yXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCB1c2VyU2NyZWVuQ29sb3I6IERyYXdhYmxlQ29sb3JEYXRhID0gbmV3IERyYXdhYmxlQ29sb3JEYXRhKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBzY3JlZW5Db2xvclxuICAgICAgICAgICk7XG5cbiAgICAgICAgICB0aGlzLl9kcmF3YWJsZUlkcy5wdXNoQmFjayhcbiAgICAgICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChkcmF3YWJsZUlkc1tpXSlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgdGhpcy5fdXNlck11bHRpcGx5Q29sb3JzLnB1c2hCYWNrKHVzZXJNdWx0aXBseUNvbG9yKTtcbiAgICAgICAgICB0aGlzLl91c2VyU2NyZWVuQ29sb3JzLnB1c2hCYWNrKHVzZXJTY3JlZW5Db2xvcik7XG5cbiAgICAgICAgICB0aGlzLl91c2VyQ3VsbGluZ3MucHVzaEJhY2sodXNlckN1bGxpbmcpO1xuXG4gICAgICAgICAgY29uc3QgcGFyZW50SW5kZXggPSB0aGlzLmdldERyYXdhYmxlUGFyZW50UGFydEluZGV4KGkpO1xuICAgICAgICAgIGlmIChwYXJlbnRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJ0Q2hpbGREcmF3YWJsZXMuYXQocGFyZW50SW5kZXgpLnB1c2hCYWNrKGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogQHBhcmFtIG1vZGVsIOODouODh+ODq1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKG1vZGVsOiBMaXZlMkRDdWJpc21Db3JlLk1vZGVsKSB7XG4gICAgdGhpcy5fbW9kZWwgPSBtb2RlbDtcbiAgICB0aGlzLl9wYXJhbWV0ZXJWYWx1ZXMgPSBudWxsO1xuICAgIHRoaXMuX3BhcmFtZXRlck1heGltdW1WYWx1ZXMgPSBudWxsO1xuICAgIHRoaXMuX3BhcmFtZXRlck1pbmltdW1WYWx1ZXMgPSBudWxsO1xuICAgIHRoaXMuX3BhcnRPcGFjaXRpZXMgPSBudWxsO1xuICAgIHRoaXMuX3NhdmVkUGFyYW1ldGVycyA9IG5ldyBjc21WZWN0b3I8bnVtYmVyPigpO1xuICAgIHRoaXMuX3BhcmFtZXRlcklkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+KCk7XG4gICAgdGhpcy5fZHJhd2FibGVJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xuICAgIHRoaXMuX3BhcnRJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xuICAgIHRoaXMuX2lzT3ZlcndyaXR0ZW5Nb2RlbE11bHRpcGx5Q29sb3JzID0gZmFsc2U7XG4gICAgdGhpcy5faXNPdmVyd3JpdHRlbk1vZGVsU2NyZWVuQ29sb3JzID0gZmFsc2U7XG4gICAgdGhpcy5faXNPdmVyd3JpdHRlbkN1bGxpbmdzID0gZmFsc2U7XG4gICAgdGhpcy5fbW9kZWxPcGFjaXR5ID0gMS4wO1xuXG4gICAgdGhpcy5fdXNlck11bHRpcGx5Q29sb3JzID0gbmV3IGNzbVZlY3RvcjxEcmF3YWJsZUNvbG9yRGF0YT4oKTtcbiAgICB0aGlzLl91c2VyU2NyZWVuQ29sb3JzID0gbmV3IGNzbVZlY3RvcjxEcmF3YWJsZUNvbG9yRGF0YT4oKTtcbiAgICB0aGlzLl91c2VyQ3VsbGluZ3MgPSBuZXcgY3NtVmVjdG9yPERyYXdhYmxlQ3VsbGluZ0RhdGE+KCk7XG4gICAgdGhpcy5fdXNlclBhcnRNdWx0aXBseUNvbG9ycyA9IG5ldyBjc21WZWN0b3I8UGFydENvbG9yRGF0YT4oKTtcbiAgICB0aGlzLl91c2VyUGFydFNjcmVlbkNvbG9ycyA9IG5ldyBjc21WZWN0b3I8UGFydENvbG9yRGF0YT4oKTtcbiAgICB0aGlzLl9wYXJ0Q2hpbGREcmF3YWJsZXMgPSBuZXcgY3NtVmVjdG9yPGNzbVZlY3RvcjxudW1iZXI+PigpO1xuXG4gICAgdGhpcy5fbm90RXhpc3RQYXJ0SWQgPSBuZXcgY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+KCk7XG4gICAgdGhpcy5fbm90RXhpc3RQYXJhbWV0ZXJJZCA9IG5ldyBjc21NYXA8Q3ViaXNtSWRIYW5kbGUsIG51bWJlcj4oKTtcbiAgICB0aGlzLl9ub3RFeGlzdFBhcmFtZXRlclZhbHVlcyA9IG5ldyBjc21NYXA8bnVtYmVyLCBudW1iZXI+KCk7XG4gICAgdGhpcy5fbm90RXhpc3RQYXJ0T3BhY2l0aWVzID0gbmV3IGNzbU1hcDxudW1iZXIsIG51bWJlcj4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX21vZGVsLnJlbGVhc2UoKTtcbiAgICB0aGlzLl9tb2RlbCA9IG51bGw7XG4gIH1cblxuICBwcml2YXRlIF9ub3RFeGlzdFBhcnRPcGFjaXRpZXM6IGNzbU1hcDxudW1iZXIsIG51bWJlcj47IC8vIOWtmOWcqOOBl+OBpuOBhOOBquOBhOODkeODvOODhOOBruS4jemAj+aYjuW6puOBruODquOCueODiFxuICBwcml2YXRlIF9ub3RFeGlzdFBhcnRJZDogY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg7zjg4RJROOBruODquOCueODiFxuXG4gIHByaXZhdGUgX25vdEV4aXN0UGFyYW1ldGVyVmFsdWVzOiBjc21NYXA8bnVtYmVyLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg6njg6Hjg7zjgr/jga7lgKTjga7jg6rjgrnjg4hcbiAgcHJpdmF0ZSBfbm90RXhpc3RQYXJhbWV0ZXJJZDogY3NtTWFwPEN1YmlzbUlkSGFuZGxlLCBudW1iZXI+OyAvLyDlrZjlnKjjgZfjgabjgYTjgarjgYTjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiFxuXG4gIHByaXZhdGUgX3NhdmVkUGFyYW1ldGVyczogY3NtVmVjdG9yPG51bWJlcj47IC8vIOS/neWtmOOBleOCjOOBn+ODkeODqeODoeODvOOCv1xuXG4gIHByaXZhdGUgX2lzT3ZlcndyaXR0ZW5Nb2RlbE11bHRpcGx5Q29sb3JzOiBib29sZWFuOyAvLyBTREvkuIrjgafjg6Ljg4fjg6vlhajkvZPjga7kuZfnrpfoibLjgpLkuIrmm7jjgY3jgZnjgovjgYvliKTlrprjgZnjgovjg5Xjg6njgrBcbiAgcHJpdmF0ZSBfaXNPdmVyd3JpdHRlbk1vZGVsU2NyZWVuQ29sb3JzOiBib29sZWFuOyAvLyBTREvkuIrjgafjg6Ljg4fjg6vlhajkvZPjga7jgrnjgq/jg6rjg7zjg7PoibLjgpLkuIrmm7jjgY3jgZnjgovjgYvliKTlrprjgZnjgovjg5Xjg6njgrBcbiAgcHJpdmF0ZSBfdXNlck11bHRpcGx5Q29sb3JzOiBjc21WZWN0b3I8RHJhd2FibGVDb2xvckRhdGE+OyAvLyBEcmF3YWJsZeOBlOOBqOOBq+ioreWumuOBmeOCi+S5l+eul+iJsuOBqOS4iuabuOOBjeODleODqeOCsOOCkueuoeeQhuOBmeOCi+ODquOCueODiFxuICBwcml2YXRlIF91c2VyU2NyZWVuQ29sb3JzOiBjc21WZWN0b3I8RHJhd2FibGVDb2xvckRhdGE+OyAvLyBEcmF3YWJsZeOBlOOBqOOBq+ioreWumuOBmeOCi+OCueOCr+ODquODvOODs+iJsuOBqOS4iuabuOOBjeODleODqeOCsOOCkueuoeeQhuOBmeOCi+ODquOCueODiFxuICBwcml2YXRlIF91c2VyUGFydFNjcmVlbkNvbG9yczogY3NtVmVjdG9yPFBhcnRDb2xvckRhdGE+OyAvLyBQYXJ0IOS5l+eul+iJsuOBrumFjeWIl1xuICBwcml2YXRlIF91c2VyUGFydE11bHRpcGx5Q29sb3JzOiBjc21WZWN0b3I8UGFydENvbG9yRGF0YT47IC8vIFBhcnQg44K544Kv44Oq44O844Oz6Imy44Gu6YWN5YiXXG4gIHByaXZhdGUgX3BhcnRDaGlsZERyYXdhYmxlczogY3NtVmVjdG9yPGNzbVZlY3RvcjxudW1iZXI+PjsgLy8gUGFydOOBruWtkERyYXdhYmxlSW5kZXjjga7phY3liJdcblxuICBwcml2YXRlIF9tb2RlbDogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbDsgLy8g44Oi44OH44OrXG5cbiAgcHJpdmF0ZSBfcGFyYW1ldGVyVmFsdWVzOiBGbG9hdDMyQXJyYXk7IC8vIOODkeODqeODoeODvOOCv+OBruWApOOBruODquOCueODiFxuICBwcml2YXRlIF9wYXJhbWV0ZXJNYXhpbXVtVmFsdWVzOiBGbG9hdDMyQXJyYXk7IC8vIOODkeODqeODoeODvOOCv+OBruacgOWkp+WApOOBruODquOCueODiFxuICBwcml2YXRlIF9wYXJhbWV0ZXJNaW5pbXVtVmFsdWVzOiBGbG9hdDMyQXJyYXk7IC8vIOODkeODqeODoeODvOOCv+OBruacgOWwj+WApOOBruODquOCueODiFxuXG4gIHByaXZhdGUgX3BhcnRPcGFjaXRpZXM6IEZsb2F0MzJBcnJheTsgLy8g44OR44O844OE44Gu5LiN6YCP5piO5bqm44Gu44Oq44K544OIXG5cbiAgcHJpdmF0ZSBfbW9kZWxPcGFjaXR5OiBudW1iZXI7IC8vIOODouODh+ODq+OBruS4jemAj+aYjuW6plxuXG4gIHByaXZhdGUgX3BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjtcbiAgcHJpdmF0ZSBfcGFydElkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjtcbiAgcHJpdmF0ZSBfZHJhd2FibGVJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47XG5cbiAgcHJpdmF0ZSBfaXNPdmVyd3JpdHRlbkN1bGxpbmdzOiBib29sZWFuOyAvLyDjg6Ljg4fjg6vjga7jgqvjg6rjg7PjgrDoqK3lrprjgpLjgZnjgbnjgabkuIrmm7jjgY3jgZnjgovjgYvvvJ9cbiAgcHJpdmF0ZSBfdXNlckN1bGxpbmdzOiBjc21WZWN0b3I8RHJhd2FibGVDdWxsaW5nRGF0YT47IC8vIOOCq+ODquODs+OCsOioreWumuOBrumFjeWIl1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb2RlbCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWwgPSAkLkN1YmlzbU1vZGVsO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb2RlbCA9ICQuQ3ViaXNtTW9kZWw7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbiB9IGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24nO1xuXG5jb25zdCBBcnRNZXNoID0gJ0FydE1lc2gnO1xuXG4vKipcbiAqIOODpuODvOOCtuODvOODh+ODvOOCv+OCpOODs+OCv+ODvOODleOCp+ODvOOCuVxuICpcbiAqIEpzb27jgYvjgonoqq3jgb/ovrzjgpPjgaDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgpLoqJjpjLLjgZfjgabjgYrjgY/jgZ/jgoHjga7mp4vpgKDkvZNcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlIHtcbiAgdGFyZ2V0VHlwZTogQ3ViaXNtSWRIYW5kbGU7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+OCv+ODvOOCsuODg+ODiOOCv+OCpOODl1xuICB0YXJnZXRJZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+OCv+ODvOOCsuODg+ODiOOBrklEXG4gIHZhbHVlOiBjc21TdHJpbmc7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv1xufVxuXG4vKipcbiAqIOODpuODvOOCtuODh+ODvOOCv+OBrueuoeeQhuOCr+ODqeOCuVxuICpcbiAqIOODpuODvOOCtuODh+ODvOOCv+OCkuODreODvOODieOAgeeuoeeQhuOAgeaknOe0ouOCpOODs+OCv+ODvOODleOCp+OCpOOCueOAgeino+aUvuOBvuOBp+OCkuihjOOBhuOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxVc2VyRGF0YSB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7kvZzmiJBcbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciAgICB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogQ3ViaXNtTW9kZWxVc2VyRGF0YSB7XG4gICAgY29uc3QgcmV0OiBDdWJpc21Nb2RlbFVzZXJEYXRhID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGEoKTtcblxuICAgIHJldC5wYXJzZVVzZXJEYXRhKGJ1ZmZlciwgc2l6ZSk7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gbW9kZWxVc2VyRGF0YSDnoLTmo4TjgZnjgovjgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vZGVsVXNlckRhdGE6IEN1YmlzbU1vZGVsVXNlckRhdGEpOiB2b2lkIHtcbiAgICBpZiAobW9kZWxVc2VyRGF0YSAhPSBudWxsKSB7XG4gICAgICBtb2RlbFVzZXJEYXRhLnJlbGVhc2UoKTtcbiAgICAgIG1vZGVsVXNlckRhdGEgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcnRNZXNo44Gu44Om44O844K244O844OH44O844K/44Gu44Oq44K544OI44Gu5Y+W5b6XXG4gICAqXG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Oq44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0QXJ0TWVzaFVzZXJEYXRhcygpOiBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+IHtcbiAgICByZXR1cm4gdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1c2VyZGF0YTMuanNvbuOBruODkeODvOOCuVxuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyICAgIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgcGFyc2VVc2VyRGF0YShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICBsZXQganNvbjogQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24gPSBuZXcgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24oXG4gICAgICBidWZmZXIsXG4gICAgICBzaXplXG4gICAgKTtcblxuICAgIGNvbnN0IHR5cGVPZkFydE1lc2ggPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoQXJ0TWVzaCk7XG4gICAgY29uc3Qgbm9kZUNvdW50OiBudW1iZXIgPSBqc29uLmdldFVzZXJEYXRhQ291bnQoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IGFkZE5vZGU6IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlKCk7XG5cbiAgICAgIGFkZE5vZGUudGFyZ2V0SWQgPSBqc29uLmdldFVzZXJEYXRhSWQoaSk7XG4gICAgICBhZGROb2RlLnRhcmdldFR5cGUgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgIGpzb24uZ2V0VXNlckRhdGFUYXJnZXRUeXBlKGkpXG4gICAgICApO1xuICAgICAgYWRkTm9kZS52YWx1ZSA9IG5ldyBjc21TdHJpbmcoanNvbi5nZXRVc2VyRGF0YVZhbHVlKGkpKTtcbiAgICAgIHRoaXMuX3VzZXJEYXRhTm9kZXMucHVzaEJhY2soYWRkTm9kZSk7XG5cbiAgICAgIGlmIChhZGROb2RlLnRhcmdldFR5cGUgPT0gdHlwZU9mQXJ0TWVzaCkge1xuICAgICAgICB0aGlzLl9hcnRNZXNoVXNlckRhdGFOb2RlLnB1c2hCYWNrKGFkZE5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGpzb24ucmVsZWFzZSgpO1xuICAgIGpzb24gPSB2b2lkIDA7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdXNlckRhdGFOb2RlcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+KCk7XG4gICAgdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZSA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+ani+mAoOS9k+mFjeWIl+OCkuino+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl91c2VyRGF0YU5vZGVzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICB0aGlzLl91c2VyRGF0YU5vZGVzLnNldChpLCBudWxsKTtcbiAgICB9XG5cbiAgICB0aGlzLl91c2VyRGF0YU5vZGVzID0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgX3VzZXJEYXRhTm9kZXM6IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT47IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+ani+mAoOS9k+mFjeWIl1xuICBwcml2YXRlIF9hcnRNZXNoVXNlckRhdGFOb2RlOiBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+OyAvLyDplrLopqfjg6rjgrnjg4jjga7kv53mjIFcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YSc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWxVc2VyRGF0YSA9ICQuQ3ViaXNtTW9kZWxVc2VyRGF0YTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxVc2VyRGF0YSA9ICQuQ3ViaXNtTW9kZWxVc2VyRGF0YTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlID0gJC5DdWJpc21Nb2RlbFVzZXJEYXRhTm9kZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW9kZWxVc2VyRGF0YU5vZGUgPSAkLkN1YmlzbU1vZGVsVXNlckRhdGFOb2RlO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgQ3ViaXNtSnNvbiB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuXG5jb25zdCBNZXRhID0gJ01ldGEnO1xuY29uc3QgVXNlckRhdGFDb3VudCA9ICdVc2VyRGF0YUNvdW50JztcbmNvbnN0IFRvdGFsVXNlckRhdGFTaXplID0gJ1RvdGFsVXNlckRhdGFTaXplJztcbmNvbnN0IFVzZXJEYXRhID0gJ1VzZXJEYXRhJztcbmNvbnN0IFRhcmdldCA9ICdUYXJnZXQnO1xuY29uc3QgSWQgPSAnSWQnO1xuY29uc3QgVmFsdWUgPSAnVmFsdWUnO1xuXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24ge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSBidWZmZXIgICAgdXNlcmRhdGEzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpIHtcbiAgICB0aGlzLl9qc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIEN1YmlzbUpzb24uZGVsZXRlKHRoaXMuX2pzb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+WAi+aVsOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldFVzZXJEYXRhQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhQ291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/nt4/mloflrZfliJfmlbDjga7lj5blvpdcbiAgICpcbiAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/nt4/mloflrZfliJfmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRUb3RhbFVzZXJEYXRhU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVG90YWxVc2VyRGF0YVNpemUpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jgr/jgqTjg5fjga7lj5blvpdcbiAgICpcbiAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jgr/jgqTjg5dcbiAgICovXG4gIHB1YmxpYyBnZXRVc2VyRGF0YVRhcmdldFR5cGUoaTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUYXJnZXQpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog44Om44O844K244O844OH44O844K/44Gu44K/44O844Ky44OD44OISUTjga7lj5blvpdcbiAgICpcbiAgICogQHBhcmFtIGkg44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44K/44O844Ky44OD44OISURcbiAgICovXG4gIHB1YmxpYyBnZXRVc2VyRGF0YUlkKGk6IG51bWJlcik6IEN1YmlzbUlkSGFuZGxlIHtcbiAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruaWh+Wtl+WIl+OBruWPluW+l1xuICAgKlxuICAgKiBAcGFyYW0gaSDjgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr9cbiAgICovXG4gIHB1YmxpYyBnZXRVc2VyRGF0YVZhbHVlKGk6IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmFsdWUpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICBwcml2YXRlIF9qc29uOiBDdWJpc21Kc29uO1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb2RlbHVzZXJkYXRhanNvbic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24gPSAkLkN1YmlzbU1vZGVsVXNlckRhdGFKc29uO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbiA9ICQuQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb247XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21CcmVhdGggfSBmcm9tICcuLi9lZmZlY3QvY3ViaXNtYnJlYXRoJztcbmltcG9ydCB7IEN1YmlzbUV5ZUJsaW5rIH0gZnJvbSAnLi4vZWZmZWN0L2N1YmlzbWV5ZWJsaW5rJztcbmltcG9ydCB7IEN1YmlzbVBvc2UgfSBmcm9tICcuLi9lZmZlY3QvY3ViaXNtcG9zZSc7XG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IENvbnN0YW50IH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsTWF0cml4IH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tb2RlbG1hdHJpeCc7XG5pbXBvcnQgeyBDdWJpc21UYXJnZXRQb2ludCB9IGZyb20gJy4uL21hdGgvY3ViaXNtdGFyZ2V0cG9pbnQnO1xuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiwgRmluaXNoZWRNb3Rpb25DYWxsYmFjayB9IGZyb20gJy4uL21vdGlvbi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24gfSBmcm9tICcuLi9tb3Rpb24vY3ViaXNtZXhwcmVzc2lvbm1vdGlvbic7XG5pbXBvcnQgeyBDdWJpc21Nb3Rpb24gfSBmcm9tICcuLi9tb3Rpb24vY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvbk1hbmFnZXIgfSBmcm9tICcuLi9tb3Rpb24vY3ViaXNtbW90aW9ubWFuYWdlcic7XG5pbXBvcnQgeyBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIgfSBmcm9tICcuLi9tb3Rpb24vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyJztcbmltcG9ydCB7IEN1YmlzbVBoeXNpY3MgfSBmcm9tICcuLi9waHlzaWNzL2N1YmlzbXBoeXNpY3MnO1xuaW1wb3J0IHsgQ3ViaXNtUmVuZGVyZXJfV2ViR0wgfSBmcm9tICcuLi9yZW5kZXJpbmcvY3ViaXNtcmVuZGVyZXJfd2ViZ2wnO1xuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuaW1wb3J0IHsgQ3ViaXNtTG9nRXJyb3IsIEN1YmlzbUxvZ0luZm8gfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5pbXBvcnQgeyBDdWJpc21Nb2MgfSBmcm9tICcuL2N1YmlzbW1vYyc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4vY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWxVc2VyRGF0YSB9IGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YSc7XG5cbi8qKlxuICog44Om44O844K244O844GM5a6f6Zqb44Gr5L2/55So44GZ44KL44Oi44OH44OrXG4gKlxuICog44Om44O844K244O844GM5a6f6Zqb44Gr5L2/55So44GZ44KL44Oi44OH44Or44Gu5Z+65bqV44Kv44Op44K544CC44GT44KM44KS57aZ5om/44GX44Gm44Om44O844K244O844GM5a6f6KOF44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Vc2VyTW9kZWwge1xuICAvKipcbiAgICog5Yid5pyf5YyW54q25oWL44Gu5Y+W5b6XXG4gICAqXG4gICAqIOWIneacn+WMluOBleOCjOOBpuOBhOOCi+eKtuaFi+OBi++8n1xuICAgKlxuICAgKiBAcmV0dXJuIHRydWUgICAgIOWIneacn+WMluOBleOCjOOBpuOBhOOCi1xuICAgKiBAcmV0dXJuIGZhbHNlICAgIOWIneacn+WMluOBleOCjOOBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIGlzSW5pdGlhbGl6ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYWxpemVkO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIneacn+WMlueKtuaFi+OBruioreWumlxuICAgKlxuICAgKiDliJ3mnJ/ljJbnirbmhYvjgpLoqK3lrprjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIHYg5Yid5pyf5YyW54q25oWLXG4gICAqL1xuICBwdWJsaWMgc2V0SW5pdGlhbGl6ZWQodjogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2luaXRpYWxpemVkID0gdjtcbiAgfVxuXG4gIC8qKlxuICAgKiDmm7TmlrDnirbmhYvjga7lj5blvpdcbiAgICpcbiAgICog5pu05paw44GV44KM44Gm44GE44KL54q25oWL44GL77yfXG4gICAqXG4gICAqIEByZXR1cm4gdHJ1ZSAgICAg5pu05paw44GV44KM44Gm44GE44KLXG4gICAqIEByZXR1cm4gZmFsc2UgICAg5pu05paw44GV44KM44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNVcGRhdGluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRpbmc7XG4gIH1cblxuICAvKipcbiAgICog5pu05paw54q25oWL44Gu6Kit5a6aXG4gICAqXG4gICAqIOabtOaWsOeKtuaFi+OCkuioreWumuOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gdiDmm7TmlrDnirbmhYtcbiAgICovXG4gIHB1YmxpYyBzZXRVcGRhdGluZyh2OiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5fdXBkYXRpbmcgPSB2O1xuICB9XG5cbiAgLyoqXG4gICAqIOODnuOCpuOCueODieODqeODg+OCsOaDheWgseOBruioreWumlxuICAgKiBAcGFyYW0g44OJ44Op44OD44Kw44GX44Gm44GE44KL44Kr44O844K944Or44GuWOS9jee9rlxuICAgKiBAcGFyYW0g44OJ44Op44OD44Kw44GX44Gm44GE44KL44Kr44O844K944Or44GuWeS9jee9rlxuICAgKi9cbiAgcHVibGljIHNldERyYWdnaW5nKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZHJhZ01hbmFnZXIuc2V0KHgsIHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWKoOmAn+W6puOBruaDheWgseOCkuioreWumuOBmeOCi1xuICAgKiBAcGFyYW0geCBY6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXG4gICAqIEBwYXJhbSB5IFnou7jmlrnlkJHjga7liqDpgJ/luqZcbiAgICogQHBhcmFtIHogWui7uOaWueWQkeOBruWKoOmAn+W6plxuICAgKi9cbiAgcHVibGljIHNldEFjY2VsZXJhdGlvbih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fYWNjZWxlcmF0aW9uWCA9IHg7XG4gICAgdGhpcy5fYWNjZWxlcmF0aW9uWSA9IHk7XG4gICAgdGhpcy5fYWNjZWxlcmF0aW9uWiA9IHo7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or6KGM5YiX44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oi44OH44Or6KGM5YiXXG4gICAqL1xuICBwdWJsaWMgZ2V0TW9kZWxNYXRyaXgoKTogQ3ViaXNtTW9kZWxNYXRyaXgge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbE1hdHJpeDtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuI3pgI/mmI7luqbjga7oqK3lrppcbiAgICogQHBhcmFtIGEg5LiN6YCP5piO5bqmXG4gICAqL1xuICBwdWJsaWMgc2V0T3BhY2l0eShhOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9vcGFjaXR5ID0gYTtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuI3pgI/mmI7luqbjga7lj5blvpdcbiAgICogQHJldHVybiDkuI3pgI/mmI7luqZcbiAgICovXG4gIHB1YmxpYyBnZXRPcGFjaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX29wYWNpdHk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44OH44O844K/44KS6Kqt44G/6L6844KAXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgICAgbW9jM+ODleOCoeOCpOODq+OBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKi9cbiAgcHVibGljIGxvYWRNb2RlbChidWZmZXI6IEFycmF5QnVmZmVyLCBzaG91bGRDaGVja01vY0NvbnNpc3RlbmN5ID0gZmFsc2UpIHtcbiAgICB0aGlzLl9tb2MgPSBDdWJpc21Nb2MuY3JlYXRlKGJ1ZmZlciwgc2hvdWxkQ2hlY2tNb2NDb25zaXN0ZW5jeSk7XG5cbiAgICBpZiAodGhpcy5fbW9jID09IG51bGwpIHtcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdGYWlsZWQgdG8gQ3ViaXNtTW9jLmNyZWF0ZSgpLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX21vZGVsID0gdGhpcy5fbW9jLmNyZWF0ZU1vZGVsKCk7XG5cbiAgICBpZiAodGhpcy5fbW9kZWwgPT0gbnVsbCkge1xuICAgICAgQ3ViaXNtTG9nRXJyb3IoJ0ZhaWxlZCB0byBDcmVhdGVNb2RlbCgpLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX21vZGVsLnNhdmVQYXJhbWV0ZXJzKCk7XG4gICAgdGhpcy5fbW9kZWxNYXRyaXggPSBuZXcgQ3ViaXNtTW9kZWxNYXRyaXgoXG4gICAgICB0aGlzLl9tb2RlbC5nZXRDYW52YXNXaWR0aCgpLFxuICAgICAgdGhpcy5fbW9kZWwuZ2V0Q2FudmFzSGVpZ2h0KClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OCkuiqreOBv+i+vOOCgFxuICAgKiBAcGFyYW0gYnVmZmVyIG1vdGlvbjMuanNvbuODleOCoeOCpOODq+OBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICogQHBhcmFtIG5hbWUg44Oi44O844K344On44Oz44Gu5ZCN5YmNXG4gICAqIEBwYXJhbSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlciDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobmmYLjgavlkbzjgbPlh7rjgZXjgozjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjgq/jg6njgrlcbiAgICovXG4gIHB1YmxpYyBsb2FkTW90aW9uID0gKFxuICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXG4gICAgc2l6ZTogbnVtYmVyLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcj86IEZpbmlzaGVkTW90aW9uQ2FsbGJhY2tcbiAgKSA9PiBDdWJpc21Nb3Rpb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSwgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIpO1xuXG4gIC8qKlxuICAgKiDooajmg4Xjg4fjg7zjgr/jga7oqq3jgb/ovrzjgb9cbiAgICogQHBhcmFtIGJ1ZmZlciBleHDjg5XjgqHjgqTjg6vjgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqIEBwYXJhbSBuYW1lIOihqOaDheOBruWQjeWJjVxuICAgKi9cbiAgcHVibGljIGxvYWRFeHByZXNzaW9uKFxuICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXG4gICAgc2l6ZTogbnVtYmVyLFxuICAgIG5hbWU6IHN0cmluZ1xuICApOiBBQ3ViaXNtTW90aW9uIHtcbiAgICByZXR1cm4gQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg53jg7zjgrrjg4fjg7zjgr/jga7oqq3jgb/ovrzjgb9cbiAgICogQHBhcmFtIGJ1ZmZlciBwb3NlMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGxvYWRQb3NlKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3Bvc2UgPSBDdWJpc21Qb3NlLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBq+S7mOWxnuOBmeOCi+ODpuODvOOCtuODvOODh+ODvOOCv+OCkuiqreOBv+i+vOOCgFxuICAgKiBAcGFyYW0gYnVmZmVyIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGxvYWRVc2VyRGF0YShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9tb2RlbFVzZXJEYXRhID0gQ3ViaXNtTW9kZWxVc2VyRGF0YS5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfjg4fjg7zjgr/jga7oqq3jgb/ovrzjgb9cbiAgICogQHBhcmFtIGJ1ZmZlciAgcGh5c2ljczMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBsb2FkUGh5c2ljcyhidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9waHlzaWNzID0gQ3ViaXNtUGh5c2ljcy5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvZPjgZ/jgorliKTlrprjga7lj5blvpdcbiAgICogQHBhcmFtIGRyYXdhYmxlSWQg5qSc6Ki844GX44Gf44GERHJhd2FibGXjga5JRFxuICAgKiBAcGFyYW0gcG9pbnRYIFjkvY3nva5cbiAgICogQHBhcmFtIHBvaW50WSBZ5L2N572uXG4gICAqIEByZXR1cm4gdHJ1ZSDjg5Ljg4Pjg4jjgZfjgabjgYTjgotcbiAgICogQHJldHVybiBmYWxzZSDjg5Ljg4Pjg4jjgZfjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0hpdChcbiAgICBkcmF3YWJsZUlkOiBDdWJpc21JZEhhbmRsZSxcbiAgICBwb2ludFg6IG51bWJlcixcbiAgICBwb2ludFk6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBkcmF3SW5kZXg6IG51bWJlciA9IHRoaXMuX21vZGVsLmdldERyYXdhYmxlSW5kZXgoZHJhd2FibGVJZCk7XG5cbiAgICBpZiAoZHJhd0luZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIGZhbHNlOyAvLyDlrZjlnKjjgZfjgarjgYTloLTlkIjjga9mYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IGNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbC5nZXREcmF3YWJsZVZlcnRleENvdW50KGRyYXdJbmRleCk7XG4gICAgY29uc3QgdmVydGljZXM6IEZsb2F0MzJBcnJheSA9IHRoaXMuX21vZGVsLmdldERyYXdhYmxlVmVydGljZXMoZHJhd0luZGV4KTtcblxuICAgIGxldCBsZWZ0OiBudW1iZXIgPSB2ZXJ0aWNlc1swXTtcbiAgICBsZXQgcmlnaHQ6IG51bWJlciA9IHZlcnRpY2VzWzBdO1xuICAgIGxldCB0b3A6IG51bWJlciA9IHZlcnRpY2VzWzFdO1xuICAgIGxldCBib3R0b206IG51bWJlciA9IHZlcnRpY2VzWzFdO1xuXG4gICAgZm9yIChsZXQgaiA9IDE7IGogPCBjb3VudDsgKytqKSB7XG4gICAgICBjb25zdCB4ID0gdmVydGljZXNbQ29uc3RhbnQudmVydGV4T2Zmc2V0ICsgaiAqIENvbnN0YW50LnZlcnRleFN0ZXBdO1xuICAgICAgY29uc3QgeSA9IHZlcnRpY2VzW0NvbnN0YW50LnZlcnRleE9mZnNldCArIGogKiBDb25zdGFudC52ZXJ0ZXhTdGVwICsgMV07XG5cbiAgICAgIGlmICh4IDwgbGVmdCkge1xuICAgICAgICBsZWZ0ID0geDsgLy8gTWluIHhcbiAgICAgIH1cblxuICAgICAgaWYgKHggPiByaWdodCkge1xuICAgICAgICByaWdodCA9IHg7IC8vIE1heCB4XG4gICAgICB9XG5cbiAgICAgIGlmICh5IDwgdG9wKSB7XG4gICAgICAgIHRvcCA9IHk7IC8vIE1pbiB5XG4gICAgICB9XG5cbiAgICAgIGlmICh5ID4gYm90dG9tKSB7XG4gICAgICAgIGJvdHRvbSA9IHk7IC8vIE1heCB5XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdHg6IG51bWJlciA9IHRoaXMuX21vZGVsTWF0cml4LmludmVydFRyYW5zZm9ybVgocG9pbnRYKTtcbiAgICBjb25zdCB0eTogbnVtYmVyID0gdGhpcy5fbW9kZWxNYXRyaXguaW52ZXJ0VHJhbnNmb3JtWShwb2ludFkpO1xuXG4gICAgcmV0dXJuIGxlZnQgPD0gdHggJiYgdHggPD0gcmlnaHQgJiYgdG9wIDw9IHR5ICYmIHR5IDw9IGJvdHRvbTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjga7lj5blvpdcbiAgICogQHJldHVybiDjg6Ljg4fjg6tcbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbCgpOiBDdWJpc21Nb2RlbCB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODqeOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODrOODs+ODgOODqVxuICAgKi9cbiAgcHVibGljIGdldFJlbmRlcmVyKCk6IEN1YmlzbVJlbmRlcmVyX1dlYkdMIHtcbiAgICByZXR1cm4gdGhpcy5fcmVuZGVyZXI7XG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44Op44KS5L2c5oiQ44GX44Gm5Yid5pyf5YyW44KS5a6f6KGM44GZ44KLXG4gICAqIEBwYXJhbSBtYXNrQnVmZmVyQ291bnQg44OQ44OD44OV44Kh44Gu55Sf5oiQ5pWwXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlUmVuZGVyZXIobWFza0J1ZmZlckNvdW50ID0gMSk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9yZW5kZXJlcikge1xuICAgICAgdGhpcy5kZWxldGVSZW5kZXJlcigpO1xuICAgIH1cblxuICAgIHRoaXMuX3JlbmRlcmVyID0gbmV3IEN1YmlzbVJlbmRlcmVyX1dlYkdMKCk7XG4gICAgdGhpcy5fcmVuZGVyZXIuaW5pdGlhbGl6ZSh0aGlzLl9tb2RlbCwgbWFza0J1ZmZlckNvdW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7op6PmlL5cbiAgICovXG4gIHB1YmxpYyBkZWxldGVSZW5kZXJlcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fcmVuZGVyZXIgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fcmVuZGVyZXIucmVsZWFzZSgpO1xuICAgICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jnmbrngavmmYLjga7mqJnmupblh6bnkIZcbiAgICpcbiAgICogRXZlbnTjgYzlho3nlJ/lh6bnkIbmmYLjgavjgYLjgaPjgZ/loLTlkIjjga7lh6bnkIbjgpLjgZnjgovjgIJcbiAgICog57aZ5om/44Gn5LiK5pu444GN44GZ44KL44GT44Go44KS5oOz5a6a44GX44Gm44GE44KL44CCXG4gICAqIOS4iuabuOOBjeOBl+OBquOBhOWgtOWQiOOBr+ODreOCsOWHuuWKm+OCkuOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnRWYWx1ZSDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjga7mloflrZfliJfjg4fjg7zjgr9cbiAgICovXG4gIHB1YmxpYyBtb3Rpb25FdmVudEZpcmVkKGV2ZW50VmFsdWU6IGNzbVN0cmluZyk6IHZvaWQge1xuICAgIEN1YmlzbUxvZ0luZm8oJ3swfScsIGV2ZW50VmFsdWUucyk7XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI55So44Gu44Kz44O844Or44OQ44OD44KvXG4gICAqXG4gICAqIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBq+OCpOODmeODs+ODiOeUqOOBq+eZu+mMsuOBmeOCi+OBn+OCgeOBrkNhbGxiYWNr44CCXG4gICAqIEN1YmlzbVVzZXJNb2RlbOOBrue2meaJv+WFiOOBrkV2ZW50RmlyZWTjgpLlkbzjgbbjgIJcbiAgICpcbiAgICogQHBhcmFtIGNhbGxlciDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjgpLnrqHnkIbjgZfjgabjgYTjgZ/jg6Ljg7zjgrfjg6fjg7Pjg57jg43jg7zjgrjjg6Pjg7zjgIHmr5TovIPnlKhcbiAgICogQHBhcmFtIGV2ZW50VmFsdWUg55m654Gr44GX44Gf44Kk44OZ44Oz44OI44Gu5paH5a2X5YiX44OH44O844K/XG4gICAqIEBwYXJhbSBjdXN0b21EYXRhIEN1YmlzbVVzZXJNb2RlbOOCkue2meaJv+OBl+OBn+OCpOODs+OCueOCv+ODs+OCueOCkuaDs+WumlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjdWJpc21EZWZhdWx0TW90aW9uRXZlbnRDYWxsYmFjayhcbiAgICBjYWxsZXI6IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcixcbiAgICBldmVudFZhbHVlOiBjc21TdHJpbmcsXG4gICAgY3VzdG9tRGF0YTogQ3ViaXNtVXNlck1vZGVsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IG1vZGVsOiBDdWJpc21Vc2VyTW9kZWwgPSBjdXN0b21EYXRhO1xuXG4gICAgaWYgKG1vZGVsICE9IG51bGwpIHtcbiAgICAgIG1vZGVsLm1vdGlvbkV2ZW50RmlyZWQoZXZlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIOWQhOWkieaVsOWIneacn+WMllxuICAgIHRoaXMuX21vYyA9IG51bGw7XG4gICAgdGhpcy5fbW9kZWwgPSBudWxsO1xuICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBudWxsO1xuICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyID0gbnVsbDtcbiAgICB0aGlzLl9leWVCbGluayA9IG51bGw7XG4gICAgdGhpcy5fYnJlYXRoID0gbnVsbDtcbiAgICB0aGlzLl9tb2RlbE1hdHJpeCA9IG51bGw7XG4gICAgdGhpcy5fcG9zZSA9IG51bGw7XG4gICAgdGhpcy5fZHJhZ01hbmFnZXIgPSBudWxsO1xuICAgIHRoaXMuX3BoeXNpY3MgPSBudWxsO1xuICAgIHRoaXMuX21vZGVsVXNlckRhdGEgPSBudWxsO1xuICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5fdXBkYXRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9vcGFjaXR5ID0gMS4wO1xuICAgIHRoaXMuX2xpcHN5bmMgPSB0cnVlO1xuICAgIHRoaXMuX2xhc3RMaXBTeW5jVmFsdWUgPSAwLjA7XG4gICAgdGhpcy5fZHJhZ1ggPSAwLjA7XG4gICAgdGhpcy5fZHJhZ1kgPSAwLjA7XG4gICAgdGhpcy5fYWNjZWxlcmF0aW9uWCA9IDAuMDtcbiAgICB0aGlzLl9hY2NlbGVyYXRpb25ZID0gMC4wO1xuICAgIHRoaXMuX2FjY2VsZXJhdGlvblogPSAwLjA7XG4gICAgdGhpcy5fbW9jQ29uc2lzdGVuY3kgPSBmYWxzZTtcbiAgICB0aGlzLl9kZWJ1Z01vZGUgPSBmYWxzZTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XG5cbiAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjg57jg43jg7zjgrjjg6Pjg7zjgpLkvZzmiJBcbiAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyID0gbmV3IEN1YmlzbU1vdGlvbk1hbmFnZXIoKTtcbiAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnNldEV2ZW50Q2FsbGJhY2soXG4gICAgICBDdWJpc21Vc2VyTW9kZWwuY3ViaXNtRGVmYXVsdE1vdGlvbkV2ZW50Q2FsbGJhY2ssXG4gICAgICB0aGlzXG4gICAgKTtcblxuICAgIC8vIOihqOaDheODnuODjeODvOOCuOODo+ODvOOCkuS9nOaIkFxuICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyID0gbmV3IEN1YmlzbU1vdGlvbk1hbmFnZXIoKTtcblxuICAgIC8vIOODieODqeODg+OCsOOBq+OCiOOCi+OCouODi+ODoeODvOOCt+ODp+ODs1xuICAgIHRoaXMuX2RyYWdNYW5hZ2VyID0gbmV3IEN1YmlzbVRhcmdldFBvaW50KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/44Gr55u45b2T44GZ44KL5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpIHtcbiAgICBpZiAodGhpcy5fbW90aW9uTWFuYWdlciAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnJlbGVhc2UoKTtcbiAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9leHByZXNzaW9uTWFuYWdlciAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlci5yZWxlYXNlKCk7XG4gICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlciA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX21vYyAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9tb2MuZGVsZXRlTW9kZWwodGhpcy5fbW9kZWwpO1xuICAgICAgdGhpcy5fbW9jLnJlbGVhc2UoKTtcbiAgICAgIHRoaXMuX21vYyA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5fbW9kZWxNYXRyaXggPSBudWxsO1xuXG4gICAgQ3ViaXNtUG9zZS5kZWxldGUodGhpcy5fcG9zZSk7XG4gICAgQ3ViaXNtRXllQmxpbmsuZGVsZXRlKHRoaXMuX2V5ZUJsaW5rKTtcbiAgICBDdWJpc21CcmVhdGguZGVsZXRlKHRoaXMuX2JyZWF0aCk7XG5cbiAgICB0aGlzLl9kcmFnTWFuYWdlciA9IG51bGw7XG5cbiAgICBDdWJpc21QaHlzaWNzLmRlbGV0ZSh0aGlzLl9waHlzaWNzKTtcbiAgICBDdWJpc21Nb2RlbFVzZXJEYXRhLmRlbGV0ZSh0aGlzLl9tb2RlbFVzZXJEYXRhKTtcblxuICAgIHRoaXMuZGVsZXRlUmVuZGVyZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfbW9jOiBDdWJpc21Nb2M7IC8vIE1vY+ODh+ODvOOCv1xuICBwcm90ZWN0ZWQgX21vZGVsOiBDdWJpc21Nb2RlbDsgLy8gTW9kZWzjgqTjg7Pjgrnjgr/jg7PjgrlcblxuICBwcm90ZWN0ZWQgX21vdGlvbk1hbmFnZXI6IEN1YmlzbU1vdGlvbk1hbmFnZXI7IC8vIOODouODvOOCt+ODp+ODs+euoeeQhlxuICBwcm90ZWN0ZWQgX2V4cHJlc3Npb25NYW5hZ2VyOiBDdWJpc21Nb3Rpb25NYW5hZ2VyOyAvLyDooajmg4XnrqHnkIZcbiAgcHJvdGVjdGVkIF9leWVCbGluazogQ3ViaXNtRXllQmxpbms7IC8vIOiHquWLleOBvuOBsOOBn+OBjVxuICBwcm90ZWN0ZWQgX2JyZWF0aDogQ3ViaXNtQnJlYXRoOyAvLyDlkbzlkLhcbiAgcHJvdGVjdGVkIF9tb2RlbE1hdHJpeDogQ3ViaXNtTW9kZWxNYXRyaXg7IC8vIOODouODh+ODq+ihjOWIl1xuICBwcm90ZWN0ZWQgX3Bvc2U6IEN1YmlzbVBvc2U7IC8vIOODneODvOOCuueuoeeQhlxuICBwcm90ZWN0ZWQgX2RyYWdNYW5hZ2VyOiBDdWJpc21UYXJnZXRQb2ludDsgLy8g44Oe44Km44K544OJ44Op44OD44KwXG4gIHByb3RlY3RlZCBfcGh5c2ljczogQ3ViaXNtUGh5c2ljczsgLy8g54mp55CG5ryU566XXG4gIHByb3RlY3RlZCBfbW9kZWxVc2VyRGF0YTogQ3ViaXNtTW9kZWxVc2VyRGF0YTsgLy8g44Om44O844K244O844OH44O844K/XG5cbiAgcHJvdGVjdGVkIF9pbml0aWFsaXplZDogYm9vbGVhbjsgLy8g5Yid5pyf5YyW44GV44KM44Gf44GL44Gp44GG44GLXG4gIHByb3RlY3RlZCBfdXBkYXRpbmc6IGJvb2xlYW47IC8vIOabtOaWsOOBleOCjOOBn+OBi+OBqeOBhuOBi1xuICBwcm90ZWN0ZWQgX29wYWNpdHk6IG51bWJlcjsgLy8g5LiN6YCP5piO5bqmXG4gIHByb3RlY3RlZCBfbGlwc3luYzogYm9vbGVhbjsgLy8g44Oq44OD44OX44K344Oz44Kv44GZ44KL44GL44Gp44GG44GLXG4gIHByb3RlY3RlZCBfbGFzdExpcFN5bmNWYWx1ZTogbnVtYmVyOyAvLyDmnIDlvozjga7jg6rjg4Pjg5fjgrfjg7Pjgq/jga7liLblvqHlnLBcbiAgcHJvdGVjdGVkIF9kcmFnWDogbnVtYmVyOyAvLyDjg57jgqbjgrnjg4njg6njg4PjgrDjga5Y5L2N572uXG4gIHByb3RlY3RlZCBfZHJhZ1k6IG51bWJlcjsgLy8g44Oe44Km44K544OJ44Op44OD44Kw44GuWeS9jee9rlxuICBwcm90ZWN0ZWQgX2FjY2VsZXJhdGlvblg6IG51bWJlcjsgLy8gWOi7uOaWueWQkeOBruWKoOmAn+W6plxuICBwcm90ZWN0ZWQgX2FjY2VsZXJhdGlvblk6IG51bWJlcjsgLy8gWei7uOaWueWQkeOBruWKoOmAn+W6plxuICBwcm90ZWN0ZWQgX2FjY2VsZXJhdGlvblo6IG51bWJlcjsgLy8gWui7uOaWueWQkeOBruWKoOmAn+W6plxuICBwcm90ZWN0ZWQgX21vY0NvbnNpc3RlbmN5OiBib29sZWFuOyAvLyBNT0Mz5LiA6LKr5oCn5qSc6Ki844GZ44KL44GL44Gp44GG44GLXG4gIHByb3RlY3RlZCBfZGVidWdNb2RlOiBib29sZWFuOyAvLyDjg4fjg5Djg4PjgrDjg6Ljg7zjg4njgYvjganjgYbjgYtcblxuICBwcml2YXRlIF9yZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXJfV2ViR0w7IC8vIOODrOODs+ODgOODqVxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc211c2VybW9kZWwnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVVzZXJNb2RlbCA9ICQuQ3ViaXNtVXNlck1vZGVsO1xuICBleHBvcnQgdHlwZSBDdWJpc21Vc2VyTW9kZWwgPSAkLkN1YmlzbVVzZXJNb2RlbDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbU1hdGggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdGgnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDU01fQVNTRVJUIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSB9IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVlbnRyeSc7XG5cbi8qKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDlrprnvqkgKi9cbmV4cG9ydCB0eXBlIEZpbmlzaGVkTW90aW9uQ2FsbGJhY2sgPSAoc2VsZjogQUN1YmlzbU1vdGlvbikgPT4gdm9pZDtcblxuLyoqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7mir3osaHln7rlupXjgq/jg6njgrlcbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7mir3osaHln7rlupXjgq/jg6njgrnjgIJNb3Rpb25RdWV1ZU1hbmFnZXLjgavjgojjgaPjgabjg6Ljg7zjgrfjg6fjg7Pjga7lho3nlJ/jgpLnrqHnkIbjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFDdWJpc21Nb3Rpb24ge1xuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544Gu56C05qOEXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZShtb3Rpb246IEFDdWJpc21Nb3Rpb24pOiB2b2lkIHtcbiAgICBtb3Rpb24ucmVsZWFzZSgpO1xuICAgIG1vdGlvbiA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9IC0xLjA7XG4gICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPSAtMS4wO1xuICAgIHRoaXMuX3dlaWdodCA9IDEuMDtcbiAgICB0aGlzLl9vZmZzZXRTZWNvbmRzID0gMC4wOyAvLyDlho3nlJ/jga7plovlp4vmmYLliLtcbiAgICB0aGlzLl9maXJlZEV2ZW50VmFsdWVzID0gbmV3IGNzbVZlY3Rvcjxjc21TdHJpbmc+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLl93ZWlnaHQgPSAwLjA7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/XG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIG1vdGlvblF1ZXVlRW50cnkgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2Vy44Gn566h55CG44GV44KM44Gm44GE44KL44Oi44O844K344On44OzXG4gICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKFxuICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5LFxuICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIGlmICghbW90aW9uUXVldWVFbnRyeS5pc0F2YWlsYWJsZSgpIHx8IG1vdGlvblF1ZXVlRW50cnkuaXNGaW5pc2hlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFtb3Rpb25RdWV1ZUVudHJ5LmlzU3RhcnRlZCgpKSB7XG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldElzU3RhcnRlZCh0cnVlKTtcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0U3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyAtIHRoaXMuX29mZnNldFNlY29uZHMpOyAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vmmYLliLvjgpLoqJjpjLJcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0RmFkZUluU3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyk7IC8vIOODleOCp+ODvOODieOCpOODs+OBrumWi+Wni+aZguWIu1xuXG4gICAgICBjb25zdCBkdXJhdGlvbjogbnVtYmVyID0gdGhpcy5nZXREdXJhdGlvbigpO1xuXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwKSB7XG4gICAgICAgIC8vIOmWi+Wni+OBl+OBpuOBhOOBquOBhOOBhuOBoeOBq+e1guS6huioreWumuOBl+OBpuOBhOOCi+WgtOWQiOOBjOOBguOCi+OAglxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldEVuZFRpbWUoXG4gICAgICAgICAgZHVyYXRpb24gPD0gMCA/IC0xIDogbW90aW9uUXVldWVFbnRyeS5nZXRTdGFydFRpbWUoKSArIGR1cmF0aW9uXG4gICAgICAgICk7XG4gICAgICAgIC8vIGR1cmF0aW9uID09IC0xIOOBruWgtOWQiOOBr+ODq+ODvOODl+OBmeOCi1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBmYWRlV2VpZ2h0OiBudW1iZXIgPSB0aGlzLl93ZWlnaHQ7IC8vIOePvuWcqOOBruWApOOBqOaOm+OBkeWQiOOCj+OBm+OCi+WJsuWQiFxuXG4gICAgLy8tLS0tIOODleOCp+ODvOODieOCpOODs+ODu+OCouOCpuODiOOBruWHpueQhiAtLS0tXG4gICAgLy8g5Y2Y57SU44Gq44K144Kk44Oz6Zai5pWw44Gn44Kk44O844K444Oz44Kw44GZ44KLXG4gICAgY29uc3QgZmFkZUluOiBudW1iZXIgPVxuICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9PSAwLjBcbiAgICAgICAgPyAxLjBcbiAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAodXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlSW5TdGFydFRpbWUoKSkgL1xuICAgICAgICAgICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzXG4gICAgICAgICAgKTtcblxuICAgIGNvbnN0IGZhZGVPdXQ6IG51bWJlciA9XG4gICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9PSAwLjAgfHwgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwLjBcbiAgICAgICAgPyAxLjBcbiAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXG4gICAgICAgICAgICAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC9cbiAgICAgICAgICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHNcbiAgICAgICAgICApO1xuXG4gICAgZmFkZVdlaWdodCA9IGZhZGVXZWlnaHQgKiBmYWRlSW4gKiBmYWRlT3V0O1xuXG4gICAgbW90aW9uUXVldWVFbnRyeS5zZXRTdGF0ZSh1c2VyVGltZVNlY29uZHMsIGZhZGVXZWlnaHQpO1xuXG4gICAgQ1NNX0FTU0VSVCgwLjAgPD0gZmFkZVdlaWdodCAmJiBmYWRlV2VpZ2h0IDw9IDEuMCk7XG5cbiAgICAvLy0tLS0g5YWo44Gm44Gu44OR44Op44Oh44O844K/SUTjgpLjg6vjg7zjg5fjgZnjgosgLS0tLVxuICAgIHRoaXMuZG9VcGRhdGVQYXJhbWV0ZXJzKFxuICAgICAgbW9kZWwsXG4gICAgICB1c2VyVGltZVNlY29uZHMsXG4gICAgICBmYWRlV2VpZ2h0LFxuICAgICAgbW90aW9uUXVldWVFbnRyeVxuICAgICk7XG5cbiAgICAvLyDlvozlh6bnkIZcbiAgICAvLyDntYLkuobmmYLliLvjgpLpgY7jgY7jgZ/jgonntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgosoQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyKVxuICAgIGlmIChcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpID4gMCAmJlxuICAgICAgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCB1c2VyVGltZVNlY29uZHNcbiAgICApIHtcbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0SXNGaW5pc2hlZCh0cnVlKTsgLy8g57WC5LqGXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCpOODs+OBruaZgumWk+OCkuioreWumuOBmeOCi1xuICAgKiBAcGFyYW0gZmFkZUluU2Vjb25kcyDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldEZhZGVJblRpbWUoZmFkZUluU2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZmFkZUluU2Vjb25kcyA9IGZhZGVJblNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Ki44Km44OI44Gu5pmC6ZaT44KS6Kit5a6a44GZ44KLXG4gICAqIEBwYXJhbSBmYWRlT3V0U2Vjb25kcyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldEZhZGVPdXRUaW1lKGZhZGVPdXRTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IGZhZGVPdXRTZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RmFkZU91dFRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZmFkZU91dFNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaT44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRGYWRlSW5UaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2ZhZGVJblNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz6YGp55So44Gu6YeN44G/44Gu6Kit5a6aXG4gICAqIEBwYXJhbSB3ZWlnaHQg6YeN44G/77yIMC4wIC0gMS4w77yJXG4gICAqL1xuICBwdWJsaWMgc2V0V2VpZ2h0KHdlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fd2VpZ2h0ID0gd2VpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+mBqeeUqOOBrumHjeOBv+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOmHjeOBv++8iDAuMCAtIDEuMO+8iVxuICAgKi9cbiAgcHVibGljIGdldFdlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl93ZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu6ZW344GV44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu6ZW344GVW+enkl1cbiAgICpcbiAgICogQG5vdGUg44Or44O844OX44Gu5pmC44Gv44CMLTHjgI3jgIJcbiAgICogICAgICAg44Or44O844OX44Gn44Gq44GE5aC05ZCI44Gv44CB44Kq44O844OQ44O844Op44Kk44OJ44GZ44KL44CCXG4gICAqICAgICAgIOato+OBruWApOOBruaZguOBr+WPluW+l+OBleOCjOOCi+aZgumWk+OBp+e1guS6huOBmeOCi+OAglxuICAgKiAgICAgICDjgIwtMeOAjeOBruaZguOBr+WklumDqOOBi+OCieWBnOatouWRveS7pOOBjOOBquOBhOmZkOOCiue1guOCj+OCieOBquOBhOWHpueQhuOBqOOBquOCi+OAglxuICAgKi9cbiAgcHVibGljIGdldER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIC0xLjA7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Or44O844OXMeWbnuWIhuOBrumVt+OBleOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruODq+ODvOODl+S4gOWbnuWIhuOBrumVt+OBlVvnp5JdXG4gICAqXG4gICAqIEBub3RlIOODq+ODvOODl+OBl+OBquOBhOWgtOWQiOOBr+OAgWdldER1cmF0aW9uKCnjgajlkIzjgZjlgKTjgpLov5TjgZlcbiAgICogICAgICAg44Or44O844OX5LiA5Zue5YiG44Gu6ZW344GV44GM5a6a576p44Gn44GN44Gq44GE5aC05ZCIKOODl+ODreOCsOODqeODoOeahOOBq+WLleOBjee2muOBkeOCi+OCteODluOCr+ODqeOCueOBquOBqSnjga7loLTlkIjjga/jgIwtMeOAjeOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGdldExvb3BEdXJhdGlvbigpOiBudW1iZXIge1xuICAgIHJldHVybiAtMS4wO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+OBrumWi+Wni+aZguWIu+OBruioreWumlxuICAgKiBAcGFyYW0gb2Zmc2V0U2Vjb25kcyDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/jga7plovlp4vmmYLliLtb56eSXVxuICAgKi9cbiAgcHVibGljIHNldE9mZnNldFRpbWUob2Zmc2V0U2Vjb25kczogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fb2Zmc2V0U2Vjb25kcyA9IG9mZnNldFNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/5pu05pawXG4gICAqXG4gICAqIOOCpOODmeODs+ODiOeZuueBq+OBruODgeOCp+ODg+OCr+OAglxuICAgKiDlhaXlipvjgZnjgovmmYLplpPjga/lkbzjgbDjgozjgovjg6Ljg7zjgrfjg6fjg7Pjgr/jgqTjg5/jg7PjgrDjgpLvvJDjgajjgZfjgZ/np5LmlbDjgafooYzjgYbjgIJcbiAgICpcbiAgICogQHBhcmFtIGJlZm9yZUNoZWNrVGltZVNlY29uZHMg5YmN5Zue44Gu44Kk44OZ44Oz44OI44OB44Kn44OD44Kv5pmC6ZaTW+enkl1cbiAgICogQHBhcmFtIG1vdGlvblRpbWVTZWNvbmRzIOS7iuWbnuOBruWGjeeUn+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0RmlyZWRFdmVudChcbiAgICBiZWZvcmVDaGVja1RpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgbW90aW9uVGltZVNlY29uZHM6IG51bWJlclxuICApOiBjc21WZWN0b3I8Y3NtU3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXM7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44KS5pu05paw44GX44Gm44CB44Oi44OH44Or44Gr44OR44Op44Oh44O844K/5YCk44KS5Y+N5pig44GZ44KLXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICAgKiBAcGFyYW0gbW90aW9uUXVldWVFbnRyeSBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgafnrqHnkIbjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7NcbiAgICogQHJldHVybiB0cnVlIOODouODh+ODq+OBuOODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBguOCilxuICAgKiBAcmV0dXJuIGZhbHNlIOODouODh+ODq+OBuOOBruODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBquOBl++8iOODouODvOOCt+ODp+ODs+OBruWkieWMluOBquOBl++8iVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGRvVXBkYXRlUGFyYW1ldGVycyhcbiAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgdXNlclRpbWVTZWNvbmRzOiBudW1iZXIsXG4gICAgd2VpZ2h0OiBudW1iZXIsXG4gICAgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeVxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/jga7nmbvpjLJcbiAgICpcbiAgICog44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv44KS55m76Yyy44GZ44KL44CCXG4gICAqIGlzRmluaXNoZWTjg5Xjg6njgrDjgpLoqK3lrprjgZnjgovjgr/jgqTjg5/jg7PjgrDjgaflkbzjgbPlh7rjgZXjgozjgovjgIJcbiAgICog5Lul5LiL44Gu54q25oWL44Gu6Zqb44Gr44Gv5ZG844Gz5Ye644GV44KM44Gq44GEOlxuICAgKiAgIDEuIOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBjOOAjOODq+ODvOODl+OAjeOBqOOBl+OBpuioreWumuOBleOCjOOBpuOBhOOCi+OBqOOBjVxuICAgKiAgIDIuIOOCs+ODvOODq+ODkOODg+OCr+OBjOeZu+mMsuOBleOCjOOBpuOBhOOBquOBhOaZglxuICAgKlxuICAgKiBAcGFyYW0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIg44Oi44O844K344On44Oz5YaN55Sf57WC5LqG44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG4gICAqL1xuICBwdWJsaWMgc2V0RmluaXNoZWRNb3Rpb25IYW5kbGVyID0gKFxuICAgIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyOiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICkgPT4gKHRoaXMuX29uRmluaXNoZWRNb3Rpb24gPSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcik7XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+OBruWPluW+l1xuICAgKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/jgpLlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHJldHVybiDnmbvpjLLjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRGaW5pc2hlZE1vdGlvbkhhbmRsZXIgPSAoKSA9PiB0aGlzLl9vbkZpbmlzaGVkTW90aW9uO1xuXG4gIC8qKlxuICAgKiDpgI/mmI7luqbjga7jgqvjg7zjg5bjgYzlrZjlnKjjgZnjgovjgYvjganjgYbjgYvjgpLnorroqo3jgZnjgotcbiAgICpcbiAgICogQHJldHVybnMgdHJ1ZSAgLT4g44Kt44O844GM5a2Y5Zyo44GZ44KLXG4gICAqICAgICAgICAgIGZhbHNlIC0+IOOCreODvOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRXhpc3RNb2RlbE9wYWNpdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOmAj+aYjuW6puOBruOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCueOCkui/lOOBmVxuICAgKlxuICAgKiBAcmV0dXJucyBzdWNjZXNzOumAj+aYjuW6puOBruOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsT3BhY2l0eUluZGV4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIOmAj+aYjuW6puOBrklk44KS6L+U44GZXG4gICAqXG4gICAqIEBwYXJhbSBpbmRleCDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybnMgc3VjY2VzczrpgI/mmI7luqbjga5JZFxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsT3BhY2l0eUlkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a5pmC6ZaT44Gu6YCP5piO5bqm44Gu5YCk44KS6L+U44GZXG4gICAqXG4gICAqIEByZXR1cm5zIHN1Y2Nlc3M644Oi44O844K344On44Oz44Gu54++5Zyo5pmC6ZaT44Gr44GK44GR44KLT3BhY2l0eeOBruWApFxuICAgKlxuICAgKiBAbm90ZSAg5pu05paw5b6M44Gu5YCk44KS5Y+W44KL44Gr44GvVXBkYXRlUGFyYW1ldGVycygpIOOBruW+jOOBq+WRvOOBs+WHuuOBmeOAglxuICAgKi9cbiAgcHJvdGVjdGVkIGdldE1vZGVsT3BhY2l0eVZhbHVlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDEuMDtcbiAgfVxuXG4gIHB1YmxpYyBfZmFkZUluU2Vjb25kczogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICBwdWJsaWMgX2ZhZGVPdXRTZWNvbmRzOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gIHB1YmxpYyBfd2VpZ2h0OiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICBwdWJsaWMgX29mZnNldFNlY29uZHM6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz5YaN55Sf44Gu6ZaL5aeL5pmC6ZaTW+enkl1cblxuICBwdWJsaWMgX2ZpcmVkRXZlbnRWYWx1ZXM6IGNzbVZlY3Rvcjxjc21TdHJpbmc+O1xuXG4gIC8vIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICBwdWJsaWMgX29uRmluaXNoZWRNb3Rpb24/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrO1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEFDdWJpc21Nb3Rpb24gPSAkLkFDdWJpc21Nb3Rpb247XG4gIGV4cG9ydCB0eXBlIEFDdWJpc21Nb3Rpb24gPSAkLkFDdWJpc21Nb3Rpb247XG4gIGV4cG9ydCB0eXBlIEZpbmlzaGVkTW90aW9uQ2FsbGJhY2sgPSAkLkZpbmlzaGVkTW90aW9uQ2FsbGJhY2s7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbUpzb24sIFZhbHVlIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtanNvbic7XG5pbXBvcnQgeyBBQ3ViaXNtTW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnknO1xuXG4vLyBleHAzLmpzb27jga7jgq3jg7zjgajjg4fjg5Xjgqnjg6vjg4hcbmNvbnN0IEV4cHJlc3Npb25LZXlGYWRlSW4gPSAnRmFkZUluVGltZSc7XG5jb25zdCBFeHByZXNzaW9uS2V5RmFkZU91dCA9ICdGYWRlT3V0VGltZSc7XG5jb25zdCBFeHByZXNzaW9uS2V5UGFyYW1ldGVycyA9ICdQYXJhbWV0ZXJzJztcbmNvbnN0IEV4cHJlc3Npb25LZXlJZCA9ICdJZCc7XG5jb25zdCBFeHByZXNzaW9uS2V5VmFsdWUgPSAnVmFsdWUnO1xuY29uc3QgRXhwcmVzc2lvbktleUJsZW5kID0gJ0JsZW5kJztcbmNvbnN0IEJsZW5kVmFsdWVBZGQgPSAnQWRkJztcbmNvbnN0IEJsZW5kVmFsdWVNdWx0aXBseSA9ICdNdWx0aXBseSc7XG5jb25zdCBCbGVuZFZhbHVlT3ZlcndyaXRlID0gJ092ZXJ3cml0ZSc7XG5jb25zdCBEZWZhdWx0RmFkZVRpbWUgPSAxLjA7XG5cbi8qKlxuICog6KGo5oOF44Gu44Oi44O844K344On44OzXG4gKlxuICog6KGo5oOF44Gu44Oi44O844K344On44Oz44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21FeHByZXNzaW9uTW90aW9uIGV4dGVuZHMgQUN1YmlzbU1vdGlvbiB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgZnjgovjgIJcbiAgICogQHBhcmFtIGJ1ZmZlciBleHDjg5XjgqHjgqTjg6vjgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqIEByZXR1cm4g5L2c5oiQ44GV44KM44Gf44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcbiAgICBidWZmZXI6IEFycmF5QnVmZmVyLFxuICAgIHNpemU6IG51bWJlclxuICApOiBDdWJpc21FeHByZXNzaW9uTW90aW9uIHtcbiAgICBjb25zdCBleHByZXNzaW9uOiBDdWJpc21FeHByZXNzaW9uTW90aW9uID0gbmV3IEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24oKTtcbiAgICBleHByZXNzaW9uLnBhcnNlKGJ1ZmZlciwgc2l6ZSk7XG4gICAgcmV0dXJuIGV4cHJlc3Npb247XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05paw44Gu5a6f6KGMXG4gICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcbiAgICogQHBhcmFtIHVzZXJUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgKiBAcGFyYW0gd2VpZ2h0IOODouODvOOCt+ODp+ODs+OBrumHjeOBv1xuICAgKiBAcGFyYW0gbW90aW9uUXVldWVFbnRyeSBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgafnrqHnkIbjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7NcbiAgICovXG4gIHB1YmxpYyBkb1VwZGF0ZVBhcmFtZXRlcnMoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyLFxuICAgIHdlaWdodDogbnVtYmVyLFxuICAgIG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlcbiAgKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wYXJhbWV0ZXJzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICBjb25zdCBwYXJhbWV0ZXI6IEV4cHJlc3Npb25QYXJhbWV0ZXIgPSB0aGlzLl9wYXJhbWV0ZXJzLmF0KGkpO1xuXG4gICAgICBzd2l0Y2ggKHBhcmFtZXRlci5ibGVuZFR5cGUpIHtcbiAgICAgICAgY2FzZSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfQWRkOiB7XG4gICAgICAgICAgbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgICAgICAgcGFyYW1ldGVyLnBhcmFtZXRlcklkLFxuICAgICAgICAgICAgcGFyYW1ldGVyLnZhbHVlLFxuICAgICAgICAgICAgd2VpZ2h0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9NdWx0aXBseToge1xuICAgICAgICAgIG1vZGVsLm11bHRpcGx5UGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgICAgICAgcGFyYW1ldGVyLnBhcmFtZXRlcklkLFxuICAgICAgICAgICAgcGFyYW1ldGVyLnZhbHVlLFxuICAgICAgICAgICAgd2VpZ2h0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9PdmVyd3JpdGU6IHtcbiAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICBwYXJhbWV0ZXIucGFyYW1ldGVySWQsXG4gICAgICAgICAgICBwYXJhbWV0ZXIudmFsdWUsXG4gICAgICAgICAgICB3ZWlnaHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8g5LuV5qeY44Gr44Gq44GE5YCk44KS6Kit5a6a44GX44Gf5pmC44Gv44GZ44Gn44Gr5Yqg566X44Oi44O844OJ44Gr44Gq44Gj44Gm44GE44KLXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHBhcnNlKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcikge1xuICAgIGNvbnN0IGpzb246IEN1YmlzbUpzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xuICAgIGNvbnN0IHJvb3Q6IFZhbHVlID0ganNvbi5nZXRSb290KCk7XG5cbiAgICB0aGlzLnNldEZhZGVJblRpbWUoXG4gICAgICByb290LmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUZhZGVJbikudG9GbG9hdChEZWZhdWx0RmFkZVRpbWUpXG4gICAgKTsgLy8g44OV44Kn44O844OJ44Kk44OzXG4gICAgdGhpcy5zZXRGYWRlT3V0VGltZShcbiAgICAgIHJvb3QuZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5RmFkZU91dCkudG9GbG9hdChEZWZhdWx0RmFkZVRpbWUpXG4gICAgKTsgLy8g44OV44Kn44O844OJ44Ki44Km44OIXG5cbiAgICAvLyDlkITjg5Hjg6njg6Hjg7zjgr/jgavjgaTjgYTjgaZcbiAgICBjb25zdCBwYXJhbWV0ZXJDb3VudCA9IHJvb3RcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlQYXJhbWV0ZXJzKVxuICAgICAgLmdldFNpemUoKTtcbiAgICB0aGlzLl9wYXJhbWV0ZXJzLnByZXBhcmVDYXBhY2l0eShwYXJhbWV0ZXJDb3VudCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlckNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IHBhcmFtOiBWYWx1ZSA9IHJvb3RcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleVBhcmFtZXRlcnMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSk7XG4gICAgICBjb25zdCBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUgPSBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUlkKS5nZXRSYXdTdHJpbmcoKVxuICAgICAgKTsgLy8g44OR44Op44Oh44O844K/SURcblxuICAgICAgY29uc3QgdmFsdWU6IG51bWJlciA9IHBhcmFtXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlWYWx1ZSlcbiAgICAgICAgLnRvRmxvYXQoKTsgLy8g5YCkXG5cbiAgICAgIC8vIOioiOeul+aWueazleOBruioreWumlxuICAgICAgbGV0IGJsZW5kVHlwZTogRXhwcmVzc2lvbkJsZW5kVHlwZTtcblxuICAgICAgaWYgKFxuICAgICAgICBwYXJhbS5nZXRWYWx1ZUJ5U3RyaW5nKEV4cHJlc3Npb25LZXlCbGVuZCkuaXNOdWxsKCkgfHxcbiAgICAgICAgcGFyYW0uZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5QmxlbmQpLmdldFN0cmluZygpID09IEJsZW5kVmFsdWVBZGRcbiAgICAgICkge1xuICAgICAgICBibGVuZFR5cGUgPSBFeHByZXNzaW9uQmxlbmRUeXBlLkV4cHJlc3Npb25CbGVuZFR5cGVfQWRkO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcGFyYW0uZ2V0VmFsdWVCeVN0cmluZyhFeHByZXNzaW9uS2V5QmxlbmQpLmdldFN0cmluZygpID09XG4gICAgICAgIEJsZW5kVmFsdWVNdWx0aXBseVxuICAgICAgKSB7XG4gICAgICAgIGJsZW5kVHlwZSA9IEV4cHJlc3Npb25CbGVuZFR5cGUuRXhwcmVzc2lvbkJsZW5kVHlwZV9NdWx0aXBseTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHBhcmFtLmdldFZhbHVlQnlTdHJpbmcoRXhwcmVzc2lvbktleUJsZW5kKS5nZXRTdHJpbmcoKSA9PVxuICAgICAgICBCbGVuZFZhbHVlT3ZlcndyaXRlXG4gICAgICApIHtcbiAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX092ZXJ3cml0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIOOBneOBruS7liDku5Xmp5jjgavjgarjgYTlgKTjgpLoqK3lrprjgZfjgZ/mmYLjga/liqDnrpfjg6Ljg7zjg4njgavjgZnjgovjgZPjgajjgaflvqnml6dcbiAgICAgICAgYmxlbmRUeXBlID0gRXhwcmVzc2lvbkJsZW5kVHlwZS5FeHByZXNzaW9uQmxlbmRUeXBlX0FkZDtcbiAgICAgIH1cblxuICAgICAgLy8g6Kit5a6a44Kq44OW44K444Kn44Kv44OI44KS5L2c5oiQ44GX44Gm44Oq44K544OI44Gr6L+95Yqg44GZ44KLXG4gICAgICBjb25zdCBpdGVtOiBFeHByZXNzaW9uUGFyYW1ldGVyID0gbmV3IEV4cHJlc3Npb25QYXJhbWV0ZXIoKTtcblxuICAgICAgaXRlbS5wYXJhbWV0ZXJJZCA9IHBhcmFtZXRlcklkO1xuICAgICAgaXRlbS5ibGVuZFR5cGUgPSBibGVuZFR5cGU7XG4gICAgICBpdGVtLnZhbHVlID0gdmFsdWU7XG5cbiAgICAgIHRoaXMuX3BhcmFtZXRlcnMucHVzaEJhY2soaXRlbSk7XG4gICAgfVxuXG4gICAgQ3ViaXNtSnNvbi5kZWxldGUoanNvbik7IC8vIEpTT07jg4fjg7zjgr/jga/kuI3opoHjgavjgarjgaPjgZ/jgonliYrpmaTjgZnjgotcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fcGFyYW1ldGVycyA9IG5ldyBjc21WZWN0b3I8RXhwcmVzc2lvblBhcmFtZXRlcj4oKTtcbiAgfVxuXG4gIF9wYXJhbWV0ZXJzOiBjc21WZWN0b3I8RXhwcmVzc2lvblBhcmFtZXRlcj47IC8vIOihqOaDheOBruODkeODqeODoeODvOOCv+aDheWgseODquOCueODiFxufVxuXG4vKipcbiAqIOihqOaDheODkeODqeODoeODvOOCv+WApOOBruioiOeul+aWueW8j1xuICovXG5leHBvcnQgZW51bSBFeHByZXNzaW9uQmxlbmRUeXBlIHtcbiAgRXhwcmVzc2lvbkJsZW5kVHlwZV9BZGQgPSAwLCAvLyDliqDnrpdcbiAgRXhwcmVzc2lvbkJsZW5kVHlwZV9NdWx0aXBseSA9IDEsIC8vIOS5l+eul1xuICBFeHByZXNzaW9uQmxlbmRUeXBlX092ZXJ3cml0ZSA9IDIsIC8vIOS4iuabuOOBjVxufVxuXG4vKipcbiAqIOihqOaDheOBruODkeODqeODoeODvOOCv+aDheWgsVxuICovXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvblBhcmFtZXRlciB7XG4gIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/SURcbiAgYmxlbmRUeXBlOiBFeHByZXNzaW9uQmxlbmRUeXBlOyAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mvJTnrpfnqK7poZ5cbiAgdmFsdWU6IG51bWJlcjsgLy8g5YCkXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWV4cHJlc3Npb25tb3Rpb24nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24gPSAkLkN1YmlzbUV4cHJlc3Npb25Nb3Rpb247XG4gIGV4cG9ydCB0eXBlIEN1YmlzbUV4cHJlc3Npb25Nb3Rpb24gPSAkLkN1YmlzbUV4cHJlc3Npb25Nb3Rpb247XG4gIGV4cG9ydCBjb25zdCBFeHByZXNzaW9uQmxlbmRUeXBlID0gJC5FeHByZXNzaW9uQmxlbmRUeXBlO1xuICBleHBvcnQgdHlwZSBFeHByZXNzaW9uQmxlbmRUeXBlID0gJC5FeHByZXNzaW9uQmxlbmRUeXBlO1xuICBleHBvcnQgY29uc3QgRXhwcmVzc2lvblBhcmFtZXRlciA9ICQuRXhwcmVzc2lvblBhcmFtZXRlcjtcbiAgZXhwb3J0IHR5cGUgRXhwcmVzc2lvblBhcmFtZXRlciA9ICQuRXhwcmVzc2lvblBhcmFtZXRlcjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbU1hdGggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdGgnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQge1xuICBDU01fQVNTRVJULFxuICBDdWJpc21Mb2dEZWJ1ZyxcbiAgQ3ViaXNtTG9nV2FybmluZyxcbn0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiwgRmluaXNoZWRNb3Rpb25DYWxsYmFjayB9IGZyb20gJy4vYWN1YmlzbW1vdGlvbic7XG5pbXBvcnQge1xuICBDdWJpc21Nb3Rpb25DdXJ2ZSxcbiAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQsXG4gIEN1YmlzbU1vdGlvbkRhdGEsXG4gIEN1YmlzbU1vdGlvbkV2ZW50LFxuICBDdWJpc21Nb3Rpb25Qb2ludCxcbiAgQ3ViaXNtTW90aW9uU2VnbWVudCxcbiAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUsXG59IGZyb20gJy4vY3ViaXNtbW90aW9uaW50ZXJuYWwnO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uSnNvbiwgRXZhbHVhdGlvbk9wdGlvbkZsYWcgfSBmcm9tICcuL2N1YmlzbW1vdGlvbmpzb24nO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSB9IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVlbnRyeSc7XG5cbmNvbnN0IEVmZmVjdE5hbWVFeWVCbGluayA9ICdFeWVCbGluayc7XG5jb25zdCBFZmZlY3ROYW1lTGlwU3luYyA9ICdMaXBTeW5jJztcbmNvbnN0IFRhcmdldE5hbWVNb2RlbCA9ICdNb2RlbCc7XG5jb25zdCBUYXJnZXROYW1lUGFyYW1ldGVyID0gJ1BhcmFtZXRlcic7XG5jb25zdCBUYXJnZXROYW1lUGFydE9wYWNpdHkgPSAnUGFydE9wYWNpdHknO1xuXG4vLyBJZFxuY29uc3QgSWROYW1lT3BhY2l0eSA9ICdPcGFjaXR5JztcblxuLyoqXG4gKiBDdWJpc20gU0RLIFIyIOS7peWJjeOBruODouODvOOCt+ODp+ODs+OCkuWGjeePvuOBleOBm+OCi+OBquOCiSB0cnVlIOOAgeOCouODi+ODoeODvOOCv+OBruODouODvOOCt+ODp+ODs+OCkuato+OBl+OBj+WGjeePvuOBmeOCi+OBquOCiSBmYWxzZSDjgIJcbiAqL1xuY29uc3QgVXNlT2xkQmV6aWVyc0N1cnZlTW90aW9uID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGxlcnBQb2ludHMoXG4gIGE6IEN1YmlzbU1vdGlvblBvaW50LFxuICBiOiBDdWJpc21Nb3Rpb25Qb2ludCxcbiAgdDogbnVtYmVyXG4pOiBDdWJpc21Nb3Rpb25Qb2ludCB7XG4gIGNvbnN0IHJlc3VsdDogQ3ViaXNtTW90aW9uUG9pbnQgPSBuZXcgQ3ViaXNtTW90aW9uUG9pbnQoKTtcblxuICByZXN1bHQudGltZSA9IGEudGltZSArIChiLnRpbWUgLSBhLnRpbWUpICogdDtcbiAgcmVzdWx0LnZhbHVlID0gYS52YWx1ZSArIChiLnZhbHVlIC0gYS52YWx1ZSkgKiB0O1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGxpbmVhckV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgbGV0IHQ6IG51bWJlciA9ICh0aW1lIC0gcG9pbnRzWzBdLnRpbWUpIC8gKHBvaW50c1sxXS50aW1lIC0gcG9pbnRzWzBdLnRpbWUpO1xuXG4gIGlmICh0IDwgMC4wKSB7XG4gICAgdCA9IDAuMDtcbiAgfVxuXG4gIHJldHVybiBwb2ludHNbMF0udmFsdWUgKyAocG9pbnRzWzFdLnZhbHVlIC0gcG9pbnRzWzBdLnZhbHVlKSAqIHQ7XG59XG5cbmZ1bmN0aW9uIGJlemllckV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgbGV0IHQ6IG51bWJlciA9ICh0aW1lIC0gcG9pbnRzWzBdLnRpbWUpIC8gKHBvaW50c1szXS50aW1lIC0gcG9pbnRzWzBdLnRpbWUpO1xuXG4gIGlmICh0IDwgMC4wKSB7XG4gICAgdCA9IDAuMDtcbiAgfVxuXG4gIGNvbnN0IHAwMTogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1swXSwgcG9pbnRzWzFdLCB0KTtcbiAgY29uc3QgcDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzFdLCBwb2ludHNbMl0sIHQpO1xuICBjb25zdCBwMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMl0sIHBvaW50c1szXSwgdCk7XG5cbiAgY29uc3QgcDAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAwMSwgcDEyLCB0KTtcbiAgY29uc3QgcDEyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAxMiwgcDIzLCB0KTtcblxuICByZXR1cm4gbGVycFBvaW50cyhwMDEyLCBwMTIzLCB0KS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gYmV6aWVyRXZhbHVhdGVCaW5hcnlTZWFyY2goXG4gIHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSxcbiAgdGltZTogbnVtYmVyXG4pOiBudW1iZXIge1xuICBjb25zdCB4X2Vycm9yID0gMC4wMTtcblxuICBjb25zdCB4OiBudW1iZXIgPSB0aW1lO1xuICBsZXQgeDE6IG51bWJlciA9IHBvaW50c1swXS50aW1lO1xuICBsZXQgeDI6IG51bWJlciA9IHBvaW50c1szXS50aW1lO1xuICBsZXQgY3gxOiBudW1iZXIgPSBwb2ludHNbMV0udGltZTtcbiAgbGV0IGN4MjogbnVtYmVyID0gcG9pbnRzWzJdLnRpbWU7XG5cbiAgbGV0IHRhID0gMC4wO1xuICBsZXQgdGIgPSAxLjA7XG4gIGxldCB0ID0gMC4wO1xuICBsZXQgaSA9IDA7XG5cbiAgZm9yIChsZXQgdmFyMzMgPSB0cnVlOyBpIDwgMjA7ICsraSkge1xuICAgIGlmICh4IDwgeDEgKyB4X2Vycm9yKSB7XG4gICAgICB0ID0gdGE7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoeDIgLSB4X2Vycm9yIDwgeCkge1xuICAgICAgdCA9IHRiO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbGV0IGNlbnRlcng6IG51bWJlciA9IChjeDEgKyBjeDIpICogMC41O1xuICAgIGN4MSA9ICh4MSArIGN4MSkgKiAwLjU7XG4gICAgY3gyID0gKHgyICsgY3gyKSAqIDAuNTtcbiAgICBjb25zdCBjdHJseDEyOiBudW1iZXIgPSAoY3gxICsgY2VudGVyeCkgKiAwLjU7XG4gICAgY29uc3QgY3RybHgyMTogbnVtYmVyID0gKGN4MiArIGNlbnRlcngpICogMC41O1xuICAgIGNlbnRlcnggPSAoY3RybHgxMiArIGN0cmx4MjEpICogMC41O1xuICAgIGlmICh4IDwgY2VudGVyeCkge1xuICAgICAgdGIgPSAodGEgKyB0YikgKiAwLjU7XG4gICAgICBpZiAoY2VudGVyeCAtIHhfZXJyb3IgPCB4KSB7XG4gICAgICAgIHQgPSB0YjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHgyID0gY2VudGVyeDtcbiAgICAgIGN4MiA9IGN0cmx4MTI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhID0gKHRhICsgdGIpICogMC41O1xuICAgICAgaWYgKHggPCBjZW50ZXJ4ICsgeF9lcnJvcikge1xuICAgICAgICB0ID0gdGE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB4MSA9IGNlbnRlcng7XG4gICAgICBjeDEgPSBjdHJseDIxO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpID09IDIwKSB7XG4gICAgdCA9ICh0YSArIHRiKSAqIDAuNTtcbiAgfVxuXG4gIGlmICh0IDwgMC4wKSB7XG4gICAgdCA9IDAuMDtcbiAgfVxuICBpZiAodCA+IDEuMCkge1xuICAgIHQgPSAxLjA7XG4gIH1cblxuICBjb25zdCBwMDE6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMF0sIHBvaW50c1sxXSwgdCk7XG4gIGNvbnN0IHAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1sxXSwgcG9pbnRzWzJdLCB0KTtcbiAgY29uc3QgcDIzOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzJdLCBwb2ludHNbM10sIHQpO1xuXG4gIGNvbnN0IHAwMTI6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwMDEsIHAxMiwgdCk7XG4gIGNvbnN0IHAxMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwMTIsIHAyMywgdCk7XG5cbiAgcmV0dXJuIGxlcnBQb2ludHMocDAxMiwgcDEyMywgdCkudmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJlemllckV2YWx1YXRlQ2FyZGFub0ludGVycHJldGF0aW9uKFxuICBwb2ludHM6IEN1YmlzbU1vdGlvblBvaW50W10sXG4gIHRpbWU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgY29uc3QgeDogbnVtYmVyID0gdGltZTtcbiAgY29uc3QgeDE6IG51bWJlciA9IHBvaW50c1swXS50aW1lO1xuICBjb25zdCB4MjogbnVtYmVyID0gcG9pbnRzWzNdLnRpbWU7XG4gIGNvbnN0IGN4MTogbnVtYmVyID0gcG9pbnRzWzFdLnRpbWU7XG4gIGNvbnN0IGN4MjogbnVtYmVyID0gcG9pbnRzWzJdLnRpbWU7XG5cbiAgY29uc3QgYTogbnVtYmVyID0geDIgLSAzLjAgKiBjeDIgKyAzLjAgKiBjeDEgLSB4MTtcbiAgY29uc3QgYjogbnVtYmVyID0gMy4wICogY3gyIC0gNi4wICogY3gxICsgMy4wICogeDE7XG4gIGNvbnN0IGM6IG51bWJlciA9IDMuMCAqIGN4MSAtIDMuMCAqIHgxO1xuICBjb25zdCBkOiBudW1iZXIgPSB4MSAtIHg7XG5cbiAgY29uc3QgdDogbnVtYmVyID0gQ3ViaXNtTWF0aC5jYXJkYW5vQWxnb3JpdGhtRm9yQmV6aWVyKGEsIGIsIGMsIGQpO1xuXG4gIGNvbnN0IHAwMTogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1swXSwgcG9pbnRzWzFdLCB0KTtcbiAgY29uc3QgcDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocG9pbnRzWzFdLCBwb2ludHNbMl0sIHQpO1xuICBjb25zdCBwMjM6IEN1YmlzbU1vdGlvblBvaW50ID0gbGVycFBvaW50cyhwb2ludHNbMl0sIHBvaW50c1szXSwgdCk7XG5cbiAgY29uc3QgcDAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAwMSwgcDEyLCB0KTtcbiAgY29uc3QgcDEyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAxMiwgcDIzLCB0KTtcblxuICByZXR1cm4gbGVycFBvaW50cyhwMDEyLCBwMTIzLCB0KS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gc3RlcHBlZEV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIHBvaW50c1swXS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gaW52ZXJzZVN0ZXBwZWRFdmFsdWF0ZShcbiAgcG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLFxuICB0aW1lOiBudW1iZXJcbik6IG51bWJlciB7XG4gIHJldHVybiBwb2ludHNbMV0udmFsdWU7XG59XG5cbmZ1bmN0aW9uIGV2YWx1YXRlQ3VydmUoXG4gIG1vdGlvbkRhdGE6IEN1YmlzbU1vdGlvbkRhdGEsXG4gIGluZGV4OiBudW1iZXIsXG4gIHRpbWU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgLy8gRmluZCBzZWdtZW50IHRvIGV2YWx1YXRlLlxuICBjb25zdCBjdXJ2ZTogQ3ViaXNtTW90aW9uQ3VydmUgPSBtb3Rpb25EYXRhLmN1cnZlcy5hdChpbmRleCk7XG5cbiAgbGV0IHRhcmdldCA9IC0xO1xuICBjb25zdCB0b3RhbFNlZ21lbnRDb3VudDogbnVtYmVyID0gY3VydmUuYmFzZVNlZ21lbnRJbmRleCArIGN1cnZlLnNlZ21lbnRDb3VudDtcbiAgbGV0IHBvaW50UG9zaXRpb24gPSAwO1xuICBmb3IgKGxldCBpOiBudW1iZXIgPSBjdXJ2ZS5iYXNlU2VnbWVudEluZGV4OyBpIDwgdG90YWxTZWdtZW50Q291bnQ7ICsraSkge1xuICAgIC8vIEdldCBmaXJzdCBwb2ludCBvZiBuZXh0IHNlZ21lbnQuXG4gICAgcG9pbnRQb3NpdGlvbiA9XG4gICAgICBtb3Rpb25EYXRhLnNlZ21lbnRzLmF0KGkpLmJhc2VQb2ludEluZGV4ICtcbiAgICAgIChtb3Rpb25EYXRhLnNlZ21lbnRzLmF0KGkpLnNlZ21lbnRUeXBlID09XG4gICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXJcbiAgICAgICAgPyAzXG4gICAgICAgIDogMSk7XG5cbiAgICAvLyBCcmVhayBpZiB0aW1lIGxpZXMgd2l0aGluIGN1cnJlbnQgc2VnbWVudC5cbiAgICBpZiAobW90aW9uRGF0YS5wb2ludHMuYXQocG9pbnRQb3NpdGlvbikudGltZSA+IHRpbWUpIHtcbiAgICAgIHRhcmdldCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAodGFyZ2V0ID09IC0xKSB7XG4gICAgcmV0dXJuIG1vdGlvbkRhdGEucG9pbnRzLmF0KHBvaW50UG9zaXRpb24pLnZhbHVlO1xuICB9XG5cbiAgY29uc3Qgc2VnbWVudDogQ3ViaXNtTW90aW9uU2VnbWVudCA9IG1vdGlvbkRhdGEuc2VnbWVudHMuYXQodGFyZ2V0KTtcblxuICByZXR1cm4gc2VnbWVudC5ldmFsdWF0ZShtb3Rpb25EYXRhLnBvaW50cy5nZXQoc2VnbWVudC5iYXNlUG9pbnRJbmRleCksIHRpbWUpO1xufVxuXG4vKipcbiAqIOODouODvOOCt+ODp+ODs+OCr+ODqeOCuVxuICpcbiAqIOODouODvOOCt+ODp+ODs+OBruOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uIGV4dGVuZHMgQUN1YmlzbU1vdGlvbiB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvZzmiJDjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciBtb3Rpb24zLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqIEBwYXJhbSBvbkZpbmlzaGVkTW90aW9uSGFuZGxlciDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobmmYLjgavlkbzjgbPlh7rjgZXjgozjgovjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKFxuICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXG4gICAgc2l6ZTogbnVtYmVyLFxuICAgIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyPzogRmluaXNoZWRNb3Rpb25DYWxsYmFja1xuICApOiBDdWJpc21Nb3Rpb24ge1xuICAgIGNvbnN0IHJldCA9IG5ldyBDdWJpc21Nb3Rpb24oKTtcblxuICAgIHJldC5wYXJzZShidWZmZXIsIHNpemUpO1xuICAgIHJldC5fc291cmNlRnJhbWVSYXRlID0gcmV0Ll9tb3Rpb25EYXRhLmZwcztcbiAgICByZXQuX2xvb3BEdXJhdGlvblNlY29uZHMgPSByZXQuX21vdGlvbkRhdGEuZHVyYXRpb247XG4gICAgcmV0Ll9vbkZpbmlzaGVkTW90aW9uID0gb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI7XG5cbiAgICAvLyBOT1RFOiBFZGl0b3Ljgafjga/jg6vjg7zjg5fjgYLjgorjga7jg6Ljg7zjgrfjg6fjg7Pmm7jjgY3lh7rjgZfjga/pnZ7lr77lv5xcbiAgICAvLyByZXQtPl9sb29wID0gKHJldC0+X21vdGlvbkRhdGEtPkxvb3AgPiAwKTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OBruODkeODqeODoeODvOOCv+OBruabtOaWsOOBruWun+ihjFxuICAgKiBAcGFyYW0gbW9kZWwgICAgICAgICAgICAg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMgICDnj77lnKjjga7mmYLliLtb56eSXVxuICAgKiBAcGFyYW0gZmFkZVdlaWdodCAgICAgICAg44Oi44O844K344On44Oz44Gu6YeN44G/XG4gICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5ICBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgafnrqHnkIbjgZXjgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7NcbiAgICovXG4gIHB1YmxpYyBkb1VwZGF0ZVBhcmFtZXRlcnMoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyLFxuICAgIGZhZGVXZWlnaHQ6IG51bWJlcixcbiAgICBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5XG4gICk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9PSBudWxsKSB7XG4gICAgICB0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9XG4gICAgICAgIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChFZmZlY3ROYW1lRXllQmxpbmspO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9tb2RlbEN1cnZlSWRMaXBTeW5jID09IG51bGwpIHtcbiAgICAgIHRoaXMuX21vZGVsQ3VydmVJZExpcFN5bmMgPVxuICAgICAgICBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoRWZmZWN0TmFtZUxpcFN5bmMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9tb2RlbEN1cnZlSWRPcGFjaXR5ID09IG51bGwpIHtcbiAgICAgIHRoaXMuX21vZGVsQ3VydmVJZE9wYWNpdHkgPVxuICAgICAgICBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoSWROYW1lT3BhY2l0eSk7XG4gICAgfVxuXG4gICAgbGV0IHRpbWVPZmZzZXRTZWNvbmRzOiBudW1iZXIgPVxuICAgICAgdXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRTdGFydFRpbWUoKTtcblxuICAgIGlmICh0aW1lT2Zmc2V0U2Vjb25kcyA8IDAuMCkge1xuICAgICAgdGltZU9mZnNldFNlY29uZHMgPSAwLjA7IC8vIOOCqOODqeODvOWbnumBv1xuICAgIH1cblxuICAgIGxldCBsaXBTeW5jVmFsdWU6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgbGV0IGV5ZUJsaW5rVmFsdWU6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XG5cbiAgICAvL+OBvuOBsOOBn+OBjeOAgeODquODg+ODl+OCt+ODs+OCr+OBruOBhuOBoeODouODvOOCt+ODp+ODs+OBrumBqeeUqOOCkuaknOWHuuOBmeOCi+OBn+OCgeOBruODk+ODg+ODiO+8iG1heEZsYWdDb3VudOWAi+OBvuOBp1xuICAgIGNvbnN0IE1heFRhcmdldFNpemUgPSA2NDtcbiAgICBsZXQgbGlwU3luY0ZsYWdzID0gMDtcbiAgICBsZXQgZXllQmxpbmtGbGFncyA9IDA7XG5cbiAgICAvL+eerOOBjeOAgeODquODg+ODl+OCt+ODs+OCr+OBruOCv+ODvOOCsuODg+ODiOaVsOOBjOS4iumZkOOCkui2heOBiOOBpuOBhOOCi+WgtOWQiFxuICAgIGlmICh0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5nZXRTaXplKCkgPiBNYXhUYXJnZXRTaXplKSB7XG4gICAgICBDdWJpc21Mb2dEZWJ1ZyhcbiAgICAgICAgJ3RvbyBtYW55IGV5ZSBibGluayB0YXJnZXRzIDogezB9JyxcbiAgICAgICAgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKCkgPiBNYXhUYXJnZXRTaXplKSB7XG4gICAgICBDdWJpc21Mb2dEZWJ1ZyhcbiAgICAgICAgJ3RvbyBtYW55IGxpcCBzeW5jIHRhcmdldHMgOiB7MH0nLFxuICAgICAgICB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmdldFNpemUoKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB0bXBGYWRlSW46IG51bWJlciA9XG4gICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzIDw9IDAuMFxuICAgICAgICA/IDEuMFxuICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcbiAgICAgICAgICAgICh1c2VyVGltZVNlY29uZHMgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldEZhZGVJblN0YXJ0VGltZSgpKSAvXG4gICAgICAgICAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHNcbiAgICAgICAgICApO1xuXG4gICAgY29uc3QgdG1wRmFkZU91dDogbnVtYmVyID1cbiAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzIDw9IDAuMCB8fCBtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSA8IDAuMFxuICAgICAgICA/IDEuMFxuICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcbiAgICAgICAgICAgIChtb3Rpb25RdWV1ZUVudHJ5LmdldEVuZFRpbWUoKSAtIHVzZXJUaW1lU2Vjb25kcykgL1xuICAgICAgICAgICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kc1xuICAgICAgICAgICk7XG4gICAgbGV0IHZhbHVlOiBudW1iZXI7XG4gICAgbGV0IGM6IG51bWJlciwgcGFyYW1ldGVySW5kZXg6IG51bWJlcjtcblxuICAgIC8vICdSZXBlYXQnIHRpbWUgYXMgbmVjZXNzYXJ5LlxuICAgIGxldCB0aW1lOiBudW1iZXIgPSB0aW1lT2Zmc2V0U2Vjb25kcztcblxuICAgIGlmICh0aGlzLl9pc0xvb3ApIHtcbiAgICAgIHdoaWxlICh0aW1lID4gdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbikge1xuICAgICAgICB0aW1lIC09IHRoaXMuX21vdGlvbkRhdGEuZHVyYXRpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XG5cbiAgICAvLyBFdmFsdWF0ZSBtb2RlbCBjdXJ2ZXMuXG4gICAgZm9yIChcbiAgICAgIGMgPSAwO1xuICAgICAgYyA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCAmJlxuICAgICAgY3VydmVzLmF0KGMpLnR5cGUgPT1cbiAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWw7XG4gICAgICArK2NcbiAgICApIHtcbiAgICAgIC8vIEV2YWx1YXRlIGN1cnZlIGFuZCBjYWxsIGhhbmRsZXIuXG4gICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XG5cbiAgICAgIGlmIChjdXJ2ZXMuYXQoYykuaWQgPT0gdGhpcy5fbW9kZWxDdXJ2ZUlkRXllQmxpbmspIHtcbiAgICAgICAgZXllQmxpbmtWYWx1ZSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChjdXJ2ZXMuYXQoYykuaWQgPT0gdGhpcy5fbW9kZWxDdXJ2ZUlkTGlwU3luYykge1xuICAgICAgICBsaXBTeW5jVmFsdWUgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY3VydmVzLmF0KGMpLmlkID09IHRoaXMuX21vZGVsQ3VydmVJZE9wYWNpdHkpIHtcbiAgICAgICAgdGhpcy5fbW9kZWxPcGFjaXR5ID0gdmFsdWU7XG4gICAgICAgIG1vZGVsLnNldE1vZGVsT2FwY2l0eSh0aGlzLmdldE1vZGVsT3BhY2l0eVZhbHVlKCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBwYXJhbWV0ZXJNb3Rpb25DdXJ2ZUNvdW50ID0gMDtcblxuICAgIGZvciAoXG4gICAgICA7XG4gICAgICBjIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50ICYmXG4gICAgICBjdXJ2ZXMuYXQoYykudHlwZSA9PVxuICAgICAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJhbWV0ZXI7XG4gICAgICArK2NcbiAgICApIHtcbiAgICAgIHBhcmFtZXRlck1vdGlvbkN1cnZlQ291bnQrKztcblxuICAgICAgLy8gRmluZCBwYXJhbWV0ZXIgaW5kZXguXG4gICAgICBwYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KGN1cnZlcy5hdChjKS5pZCk7XG5cbiAgICAgIC8vIFNraXAgY3VydmUgZXZhbHVhdGlvbiBpZiBubyB2YWx1ZSBpbiBzaW5rLlxuICAgICAgaWYgKHBhcmFtZXRlckluZGV4ID09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzb3VyY2VWYWx1ZTogbnVtYmVyID1cbiAgICAgICAgbW9kZWwuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4KTtcblxuICAgICAgLy8gRXZhbHVhdGUgY3VydmUgYW5kIGFwcGx5IHZhbHVlLlxuICAgICAgdmFsdWUgPSBldmFsdWF0ZUN1cnZlKHRoaXMuX21vdGlvbkRhdGEsIGMsIHRpbWUpO1xuXG4gICAgICBpZiAoZXllQmxpbmtWYWx1ZSAhPSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgIGkgPCB0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5nZXRTaXplKCkgJiYgaSA8IE1heFRhcmdldFNpemU7XG4gICAgICAgICAgKytpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmICh0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5hdChpKSA9PSBjdXJ2ZXMuYXQoYykuaWQpIHtcbiAgICAgICAgICAgIHZhbHVlICo9IGV5ZUJsaW5rVmFsdWU7XG4gICAgICAgICAgICBleWVCbGlua0ZsYWdzIHw9IDEgPDwgaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobGlwU3luY1ZhbHVlICE9IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgaSA8IHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpICYmIGkgPCBNYXhUYXJnZXRTaXplO1xuICAgICAgICAgICsraVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAodGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5hdChpKSA9PSBjdXJ2ZXMuYXQoYykuaWQpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IGxpcFN5bmNWYWx1ZTtcbiAgICAgICAgICAgIGxpcFN5bmNGbGFncyB8PSAxIDw8IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV0IHY6IG51bWJlcjtcblxuICAgICAgLy8g44OR44Op44Oh44O844K/44GU44Go44Gu44OV44Kn44O844OJXG4gICAgICBpZiAoY3VydmVzLmF0KGMpLmZhZGVJblRpbWUgPCAwLjAgJiYgY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lIDwgMC4wKSB7XG4gICAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCkumBqeeUqFxuICAgICAgICB2ID0gc291cmNlVmFsdWUgKyAodmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBmYWRlV2VpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g44OR44Op44Oh44O844K/44Gr5a++44GX44Gm44OV44Kn44O844OJ44Kk44Oz44GL44OV44Kn44O844OJ44Ki44Km44OI44GM6Kit5a6a44GX44Gm44GC44KL5aC05ZCI44Gv44Gd44Gh44KJ44KS6YGp55SoXG4gICAgICAgIGxldCBmaW46IG51bWJlcjtcbiAgICAgICAgbGV0IGZvdXQ6IG51bWJlcjtcblxuICAgICAgICBpZiAoY3VydmVzLmF0KGMpLmZhZGVJblRpbWUgPCAwLjApIHtcbiAgICAgICAgICBmaW4gPSB0bXBGYWRlSW47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmluID1cbiAgICAgICAgICAgIGN1cnZlcy5hdChjKS5mYWRlSW5UaW1lID09IDAuMFxuICAgICAgICAgICAgICA/IDEuMFxuICAgICAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcbiAgICAgICAgICAgICAgICAgICh1c2VyVGltZVNlY29uZHMgLSBtb3Rpb25RdWV1ZUVudHJ5LmdldEZhZGVJblN0YXJ0VGltZSgpKSAvXG4gICAgICAgICAgICAgICAgICAgIGN1cnZlcy5hdChjKS5mYWRlSW5UaW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjdXJ2ZXMuYXQoYykuZmFkZU91dFRpbWUgPCAwLjApIHtcbiAgICAgICAgICBmb3V0ID0gdG1wRmFkZU91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3V0ID1cbiAgICAgICAgICAgIGN1cnZlcy5hdChjKS5mYWRlT3V0VGltZSA9PSAwLjAgfHxcbiAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpIDwgMC4wXG4gICAgICAgICAgICAgID8gMS4wXG4gICAgICAgICAgICAgIDogQ3ViaXNtTWF0aC5nZXRFYXNpbmdTaW5lKFxuICAgICAgICAgICAgICAgICAgKG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpIC0gdXNlclRpbWVTZWNvbmRzKSAvXG4gICAgICAgICAgICAgICAgICAgIGN1cnZlcy5hdChjKS5mYWRlT3V0VGltZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXJhbVdlaWdodDogbnVtYmVyID0gdGhpcy5fd2VpZ2h0ICogZmluICogZm91dDtcblxuICAgICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jgZTjgajjga7jg5Xjgqfjg7zjg4njgpLpgannlKhcbiAgICAgICAgdiA9IHNvdXJjZVZhbHVlICsgKHZhbHVlIC0gc291cmNlVmFsdWUpICogcGFyYW1XZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCwgdiwgMS4wKTtcbiAgICB9XG5cbiAgICB7XG4gICAgICBpZiAoZXllQmxpbmtWYWx1ZSAhPSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgIGkgPCB0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5nZXRTaXplKCkgJiYgaSA8IE1heFRhcmdldFNpemU7XG4gICAgICAgICAgKytpXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IHNvdXJjZVZhbHVlOiBudW1iZXIgPSBtb2RlbC5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICB0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcy5hdChpKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjgafjga7kuIrmm7jjgY3jgYzjgYLjgaPjgZ/mmYLjgavjga/jgb7jgbDjgZ/jgY3jga/pgannlKjjgZfjgarjgYRcbiAgICAgICAgICBpZiAoKGV5ZUJsaW5rRmxhZ3MgPj4gaSkgJiAweDAxKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCB2OiBudW1iZXIgPVxuICAgICAgICAgICAgc291cmNlVmFsdWUgKyAoZXllQmxpbmtWYWx1ZSAtIHNvdXJjZVZhbHVlKSAqIGZhZGVXZWlnaHQ7XG5cbiAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuYXQoaSksIHYpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChsaXBTeW5jVmFsdWUgIT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICBpIDwgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKCkgJiYgaSA8IE1heFRhcmdldFNpemU7XG4gICAgICAgICAgKytpXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IHNvdXJjZVZhbHVlOiBudW1iZXIgPSBtb2RlbC5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXG4gICAgICAgICAgICB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmF0KGkpXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBp+OBruS4iuabuOOBjeOBjOOBguOBo+OBn+aZguOBq+OBr+ODquODg+ODl+OCt+ODs+OCr+OBr+mBqeeUqOOBl+OBquOBhFxuICAgICAgICAgIGlmICgobGlwU3luY0ZsYWdzID4+IGkpICYgMHgwMSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgdjogbnVtYmVyID1cbiAgICAgICAgICAgIHNvdXJjZVZhbHVlICsgKGxpcFN5bmNWYWx1ZSAtIHNvdXJjZVZhbHVlKSAqIGZhZGVXZWlnaHQ7XG5cbiAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5hdChpKSwgdik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgO1xuICAgICAgYyA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCAmJlxuICAgICAgY3VydmVzLmF0KGMpLnR5cGUgPT1cbiAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFydE9wYWNpdHk7XG4gICAgICArK2NcbiAgICApIHtcbiAgICAgIC8vIEZpbmQgcGFyYW1ldGVyIGluZGV4LlxuICAgICAgcGFyYW1ldGVySW5kZXggPSBtb2RlbC5nZXRQYXJhbWV0ZXJJbmRleChjdXJ2ZXMuYXQoYykuaWQpO1xuXG4gICAgICAvLyBTa2lwIGN1cnZlIGV2YWx1YXRpb24gaWYgbm8gdmFsdWUgaW4gc2luay5cbiAgICAgIGlmIChwYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gRXZhbHVhdGUgY3VydmUgYW5kIGFwcGx5IHZhbHVlLlxuICAgICAgdmFsdWUgPSBldmFsdWF0ZUN1cnZlKHRoaXMuX21vdGlvbkRhdGEsIGMsIHRpbWUpO1xuXG4gICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SW5kZXgocGFyYW1ldGVySW5kZXgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodGltZU9mZnNldFNlY29uZHMgPj0gdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbikge1xuICAgICAgaWYgKHRoaXMuX2lzTG9vcCkge1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldFN0YXJ0VGltZSh1c2VyVGltZVNlY29uZHMpOyAvLyDmnIDliJ3jga7nirbmhYvjgbhcbiAgICAgICAgaWYgKHRoaXMuX2lzTG9vcEZhZGVJbikge1xuICAgICAgICAgIC8vIOODq+ODvOODl+WGheOBp+ODq+ODvOODl+eUqOODleOCp+ODvOODieOCpOODs+OBjOacieWKueOBruaZguOBr+OAgeODleOCp+ODvOODieOCpOODs+ioreWumuOBl+ebtOOBl1xuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0RmFkZUluU3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLl9vbkZpbmlzaGVkTW90aW9uKSB7XG4gICAgICAgICAgdGhpcy5fb25GaW5pc2hlZE1vdGlvbih0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0SXNGaW5pc2hlZCh0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fbGFzdFdlaWdodCA9IGZhZGVXZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog44Or44O844OX5oOF5aCx44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBsb29wIOODq+ODvOODl+aDheWgsVxuICAgKi9cbiAgcHVibGljIHNldElzTG9vcChsb29wOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5faXNMb29wID0gbG9vcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6vjg7zjg5fmg4XloLHjga7lj5blvpdcbiAgICogQHJldHVybiB0cnVlIOODq+ODvOODl+OBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOODq+ODvOODl+OBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzTG9vcCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNMb29wO1xuICB9XG5cbiAgLyoqXG4gICAqIOODq+ODvOODl+aZguOBruODleOCp+ODvOODieOCpOODs+aDheWgseOBruioreWumlxuICAgKiBAcGFyYW0gbG9vcEZhZGVJbiAg44Or44O844OX5pmC44Gu44OV44Kn44O844OJ44Kk44Oz5oOF5aCxXG4gICAqL1xuICBwdWJsaWMgc2V0SXNMb29wRmFkZUluKGxvb3BGYWRlSW46IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9pc0xvb3BGYWRlSW4gPSBsb29wRmFkZUluO1xuICB9XG5cbiAgLyoqXG4gICAqIOODq+ODvOODl+aZguOBruODleOCp+ODvOODieOCpOODs+aDheWgseOBruWPluW+l1xuICAgKlxuICAgKiBAcmV0dXJuICB0cnVlICAgIOOBmeOCi1xuICAgKiBAcmV0dXJuICBmYWxzZSAgIOOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzTG9vcEZhZGVJbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNMb29wRmFkZUluO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBrumVt+OBleOCkuWPluW+l+OBmeOCi+OAglxuICAgKlxuICAgKiBAcmV0dXJuICDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZVb56eSXVxuICAgKi9cbiAgcHVibGljIGdldER1cmF0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2lzTG9vcCA/IC0xLjAgOiB0aGlzLl9sb29wRHVyYXRpb25TZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruODq+ODvOODl+aZguOBrumVt+OBleOCkuWPluW+l+OBmeOCi+OAglxuICAgKlxuICAgKiBAcmV0dXJuICDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5fmmYLjga7plbfjgZVb56eSXVxuICAgKi9cbiAgcHVibGljIGdldExvb3BEdXJhdGlvbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sb29wRHVyYXRpb25TZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBq+WvvuOBmeOCi+ODleOCp+ODvOODieOCpOODs+OBruaZgumWk+OCkuioreWumuOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1ldGVySWQgICAgIOODkeODqeODoeODvOOCv0lEXG4gICAqIEBwYXJhbSB2YWx1ZSAgICAgICAgICAg44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBzZXRQYXJhbWV0ZXJGYWRlSW5UaW1lKFxuICAgIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSxcbiAgICB2YWx1ZTogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsraSkge1xuICAgICAgaWYgKHBhcmFtZXRlcklkID09IGN1cnZlcy5hdChpKS5pZCkge1xuICAgICAgICBjdXJ2ZXMuYXQoaSkuZmFkZUluVGltZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBq+WvvuOBmeOCi+ODleOCp+ODvOODieOCouOCpuODiOOBruaZgumWk+OBruioreWumlxuICAgKiBAcGFyYW0gcGFyYW1ldGVySWQgICAgIOODkeODqeODoeODvOOCv0lEXG4gICAqIEBwYXJhbSB2YWx1ZSAgICAgICAgICAg44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBzZXRQYXJhbWV0ZXJGYWRlT3V0VGltZShcbiAgICBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUsXG4gICAgdmFsdWU6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICBjb25zdCBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT4gPSB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50OyArK2kpIHtcbiAgICAgIGlmIChwYXJhbWV0ZXJJZCA9PSBjdXJ2ZXMuYXQoaSkuaWQpIHtcbiAgICAgICAgY3VydmVzLmF0KGkpLmZhZGVPdXRUaW1lID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OR44Op44Oh44O844K/44Gr5a++44GZ44KL44OV44Kn44O844OJ44Kk44Oz44Gu5pmC6ZaT44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSAgICBwYXJhbWV0ZXJJZCAgICAg44OR44Op44Oh44O844K/SURcbiAgICogQHJldHVybiAgIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVyRmFkZUluVGltZShwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGUpOiBudW1iZXIge1xuICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsraSkge1xuICAgICAgaWYgKHBhcmFtZXRlcklkID09IGN1cnZlcy5hdChpKS5pZCkge1xuICAgICAgICByZXR1cm4gY3VydmVzLmF0KGkpLmZhZGVJblRpbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODqeODoeODvOOCv+OBq+WvvuOBmeOCi+ODleOCp+ODvOODieOCouOCpuODiOOBruaZgumWk+OCkuWPluW+l1xuICAgKlxuICAgKiBAcGFyYW0gICBwYXJhbWV0ZXJJZCAgICAg44OR44Op44Oh44O844K/SURcbiAgICogQHJldHVybiAgIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyYW1ldGVyRmFkZU91dFRpbWUocGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcbiAgICBjb25zdCBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT4gPSB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50OyArK2kpIHtcbiAgICAgIGlmIChwYXJhbWV0ZXJJZCA9PSBjdXJ2ZXMuYXQoaSkuaWQpIHtcbiAgICAgICAgcmV0dXJuIGN1cnZlcy5hdChpKS5mYWRlT3V0VGltZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICog6Ieq5YuV44Ko44OV44Kn44Kv44OI44GM44GL44GL44Gj44Gm44GE44KL44OR44Op44Oh44O844K/SUTjg6rjgrnjg4jjga7oqK3lrppcbiAgICogQHBhcmFtIGV5ZUJsaW5rUGFyYW1ldGVySWRzICAgIOiHquWLleOBvuOBsOOBn+OBjeOBjOOBi+OBi+OBo+OBpuOBhOOCi+ODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OIXG4gICAqIEBwYXJhbSBsaXBTeW5jUGFyYW1ldGVySWRzICAgICDjg6rjg4Pjg5fjgrfjg7Pjgq/jgYzjgYvjgYvjgaPjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr9JROOBruODquOCueODiFxuICAgKi9cbiAgcHVibGljIHNldEVmZmVjdElkcyhcbiAgICBleWVCbGlua1BhcmFtZXRlcklkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPixcbiAgICBsaXBTeW5jUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+XG4gICk6IHZvaWQge1xuICAgIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzID0gZXllQmxpbmtQYXJhbWV0ZXJJZHM7XG4gICAgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcyA9IGxpcFN5bmNQYXJhbWV0ZXJJZHM7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2VGcmFtZVJhdGUgPSAzMC4wO1xuICAgIHRoaXMuX2xvb3BEdXJhdGlvblNlY29uZHMgPSAtMS4wO1xuICAgIHRoaXMuX2lzTG9vcCA9IGZhbHNlOyAvLyB0cnVl44GL44KJIGZhbHNlIOOBuOODh+ODleOCqeODq+ODiOOCkuWkieabtFxuICAgIHRoaXMuX2lzTG9vcEZhZGVJbiA9IHRydWU7IC8vIOODq+ODvOODl+aZguOBq+ODleOCp+ODvOODieOCpOODs+OBjOacieWKueOBi+OBqeOBhuOBi+OBruODleODqeOCsFxuICAgIHRoaXMuX2xhc3RXZWlnaHQgPSAwLjA7XG4gICAgdGhpcy5fbW90aW9uRGF0YSA9IG51bGw7XG4gICAgdGhpcy5fbW9kZWxDdXJ2ZUlkRXllQmxpbmsgPSBudWxsO1xuICAgIHRoaXMuX21vZGVsQ3VydmVJZExpcFN5bmMgPSBudWxsO1xuICAgIHRoaXMuX21vZGVsQ3VydmVJZE9wYWNpdHkgPSBudWxsO1xuICAgIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzID0gbnVsbDtcbiAgICB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzID0gbnVsbDtcbiAgICB0aGlzLl9tb2RlbE9wYWNpdHkgPSAxLjA7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9tb3Rpb25EYXRhID0gdm9pZCAwO1xuICAgIHRoaXMuX21vdGlvbkRhdGEgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIG1vdGlvbjMuanNvbuOCkuODkeODvOOCueOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gbW90aW9uSnNvbiAgbW90aW9uMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplICAgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBwYXJzZShtb3Rpb25Kc29uOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbW90aW9uRGF0YSA9IG5ldyBDdWJpc21Nb3Rpb25EYXRhKCk7XG5cbiAgICBsZXQganNvbjogQ3ViaXNtTW90aW9uSnNvbiA9IG5ldyBDdWJpc21Nb3Rpb25Kc29uKG1vdGlvbkpzb24sIHNpemUpO1xuXG4gICAgdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbiA9IGpzb24uZ2V0TW90aW9uRHVyYXRpb24oKTtcbiAgICB0aGlzLl9tb3Rpb25EYXRhLmxvb3AgPSBqc29uLmlzTW90aW9uTG9vcCgpO1xuICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCA9IGpzb24uZ2V0TW90aW9uQ3VydmVDb3VudCgpO1xuICAgIHRoaXMuX21vdGlvbkRhdGEuZnBzID0ganNvbi5nZXRNb3Rpb25GcHMoKTtcbiAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50Q291bnQgPSBqc29uLmdldEV2ZW50Q291bnQoKTtcblxuICAgIGNvbnN0IGFyZUJlemllcnNSZXN0cnVjdGVkOiBib29sZWFuID0ganNvbi5nZXRFdmFsdWF0aW9uT3B0aW9uRmxhZyhcbiAgICAgIEV2YWx1YXRpb25PcHRpb25GbGFnLkV2YWx1YXRpb25PcHRpb25GbGFnX0FyZUJlemllcnNSaXN0cmljdGVkXG4gICAgKTtcblxuICAgIGlmIChqc29uLmlzRXhpc3RNb3Rpb25GYWRlSW5UaW1lKCkpIHtcbiAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHMgPVxuICAgICAgICBqc29uLmdldE1vdGlvbkZhZGVJblRpbWUoKSA8IDAuMCA/IDEuMCA6IGpzb24uZ2V0TW90aW9uRmFkZUluVGltZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzID0gMS4wO1xuICAgIH1cblxuICAgIGlmIChqc29uLmlzRXhpc3RNb3Rpb25GYWRlT3V0VGltZSgpKSB7XG4gICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9XG4gICAgICAgIGpzb24uZ2V0TW90aW9uRmFkZU91dFRpbWUoKSA8IDAuMCA/IDEuMCA6IGpzb24uZ2V0TW90aW9uRmFkZU91dFRpbWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZmFkZU91dFNlY29uZHMgPSAxLjA7XG4gICAgfVxuXG4gICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMudXBkYXRlU2l6ZShcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCxcbiAgICAgIEN1YmlzbU1vdGlvbkN1cnZlLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy51cGRhdGVTaXplKFxuICAgICAganNvbi5nZXRNb3Rpb25Ub3RhbFNlZ21lbnRDb3VudCgpLFxuICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudCxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLnVwZGF0ZVNpemUoXG4gICAgICBqc29uLmdldE1vdGlvblRvdGFsUG9pbnRDb3VudCgpLFxuICAgICAgQ3ViaXNtTW90aW9uUG9pbnQsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy51cGRhdGVTaXplKFxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudENvdW50LFxuICAgICAgQ3ViaXNtTW90aW9uRXZlbnQsXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIGxldCB0b3RhbFBvaW50Q291bnQgPSAwO1xuICAgIGxldCB0b3RhbFNlZ21lbnRDb3VudCA9IDA7XG5cbiAgICAvLyBDdXJ2ZXNcbiAgICBmb3IgKFxuICAgICAgbGV0IGN1cnZlQ291bnQgPSAwO1xuICAgICAgY3VydmVDb3VudCA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDtcbiAgICAgICsrY3VydmVDb3VudFxuICAgICkge1xuICAgICAgaWYgKGpzb24uZ2V0TW90aW9uQ3VydmVUYXJnZXQoY3VydmVDb3VudCkgPT0gVGFyZ2V0TmFtZU1vZGVsKSB7XG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLnR5cGUgPVxuICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsO1xuICAgICAgfSBlbHNlIGlmIChqc29uLmdldE1vdGlvbkN1cnZlVGFyZ2V0KGN1cnZlQ291bnQpID09IFRhcmdldE5hbWVQYXJhbWV0ZXIpIHtcbiAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkudHlwZSA9XG4gICAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFyYW1ldGVyO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVRhcmdldChjdXJ2ZUNvdW50KSA9PSBUYXJnZXROYW1lUGFydE9wYWNpdHlcbiAgICAgICkge1xuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS50eXBlID1cbiAgICAgICAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJ0T3BhY2l0eTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEN1YmlzbUxvZ1dhcm5pbmcoXG4gICAgICAgICAgJ1dhcm5pbmcgOiBVbmFibGUgdG8gZ2V0IHNlZ21lbnQgdHlwZSBmcm9tIEN1cnZlISBUaGUgbnVtYmVyIG9mIFwiQ3VydmVDb3VudFwiIG1heSBiZSBpbmNvcnJlY3QhJ1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS5pZCA9XG4gICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVJZChjdXJ2ZUNvdW50KTtcblxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkuYmFzZVNlZ21lbnRJbmRleCA9XG4gICAgICAgIHRvdGFsU2VnbWVudENvdW50O1xuXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS5mYWRlSW5UaW1lID1cbiAgICAgICAganNvbi5pc0V4aXN0TW90aW9uQ3VydmVGYWRlSW5UaW1lKGN1cnZlQ291bnQpXG4gICAgICAgICAgPyBqc29uLmdldE1vdGlvbkN1cnZlRmFkZUluVGltZShjdXJ2ZUNvdW50KVxuICAgICAgICAgIDogLTEuMDtcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLmZhZGVPdXRUaW1lID1cbiAgICAgICAganNvbi5pc0V4aXN0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUNvdW50KVxuICAgICAgICAgID8ganNvbi5nZXRNb3Rpb25DdXJ2ZUZhZGVPdXRUaW1lKGN1cnZlQ291bnQpXG4gICAgICAgICAgOiAtMS4wO1xuXG4gICAgICAvLyBTZWdtZW50c1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IHNlZ21lbnRQb3NpdGlvbiA9IDA7XG4gICAgICAgIHNlZ21lbnRQb3NpdGlvbiA8IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50Q291bnQoY3VydmVDb3VudCk7XG5cbiAgICAgICkge1xuICAgICAgICBpZiAoc2VnbWVudFBvc2l0aW9uID09IDApIHtcbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5iYXNlUG9pbnRJbmRleCA9XG4gICAgICAgICAgICB0b3RhbFBvaW50Q291bnQ7XG5cbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpLnRpbWUgPVxuICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uKTtcbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpLnZhbHVlID1cbiAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDEpO1xuXG4gICAgICAgICAgdG90YWxQb2ludENvdW50ICs9IDE7XG4gICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuYmFzZVBvaW50SW5kZXggPVxuICAgICAgICAgICAgdG90YWxQb2ludENvdW50IC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNlZ21lbnQ6IG51bWJlciA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxuICAgICAgICAgIGN1cnZlQ291bnQsXG4gICAgICAgICAgc2VnbWVudFBvc2l0aW9uXG4gICAgICAgICk7XG4gICAgICAgIHN3aXRjaCAoc2VnbWVudCkge1xuICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfTGluZWFyOiB7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XG4gICAgICAgICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0xpbmVhcjtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLmV2YWx1YXRlID1cbiAgICAgICAgICAgICAgbGluZWFyRXZhbHVhdGU7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkudGltZSA9XG4gICAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDEpO1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS52YWx1ZSA9XG4gICAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDIpO1xuXG4gICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKz0gMTtcbiAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArPSAzO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXI6IHtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLnNlZ21lbnRUeXBlID1cbiAgICAgICAgICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyO1xuXG4gICAgICAgICAgICBpZiAoYXJlQmV6aWVyc1Jlc3RydWN0ZWQgfHwgVXNlT2xkQmV6aWVyc0N1cnZlTW90aW9uKSB7XG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLmV2YWx1YXRlID1cbiAgICAgICAgICAgICAgICBiZXppZXJFdmFsdWF0ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLmV2YWx1YXRlID1cbiAgICAgICAgICAgICAgICBiZXppZXJFdmFsdWF0ZUNhcmRhbm9JbnRlcnByZXRhdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS50aW1lID1cbiAgICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgMSk7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpLnZhbHVlID1cbiAgICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgMik7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCArIDEpLnRpbWUgPVxuICAgICAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24gKyAzKTtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCArIDEpLnZhbHVlID1cbiAgICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgNCk7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCArIDIpLnRpbWUgPVxuICAgICAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24gKyA1KTtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCArIDIpLnZhbHVlID1cbiAgICAgICAgICAgICAganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoY3VydmVDb3VudCwgc2VnbWVudFBvc2l0aW9uICsgNik7XG5cbiAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAzO1xuICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDc7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfU3RlcHBlZDoge1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPVxuICAgICAgICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9TdGVwcGVkO1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuZXZhbHVhdGUgPVxuICAgICAgICAgICAgICBzdGVwcGVkRXZhbHVhdGU7XG5cbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkudGltZSA9XG4gICAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDEpO1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KS52YWx1ZSA9XG4gICAgICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbiArIDIpO1xuXG4gICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKz0gMTtcbiAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArPSAzO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkOiB7XG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XG4gICAgICAgICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkO1xuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuZXZhbHVhdGUgPVxuICAgICAgICAgICAgICBpbnZlcnNlU3RlcHBlZEV2YWx1YXRlO1xuXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpLnRpbWUgPVxuICAgICAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24gKyAxKTtcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkudmFsdWUgPVxuICAgICAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChjdXJ2ZUNvdW50LCBzZWdtZW50UG9zaXRpb24gKyAyKTtcblxuICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICs9IDE7XG4gICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMztcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIENTTV9BU1NFUlQoMCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICArK3RoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLnNlZ21lbnRDb3VudDtcbiAgICAgICAgKyt0b3RhbFNlZ21lbnRDb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IHVzZXJkYXRhY291bnQgPSAwO1xuICAgICAgdXNlcmRhdGFjb3VudCA8IGpzb24uZ2V0RXZlbnRDb3VudCgpO1xuICAgICAgKyt1c2VyZGF0YWNvdW50XG4gICAgKSB7XG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1c2VyZGF0YWNvdW50KS5maXJlVGltZSA9XG4gICAgICAgIGpzb24uZ2V0RXZlbnRUaW1lKHVzZXJkYXRhY291bnQpO1xuICAgICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudHMuYXQodXNlcmRhdGFjb3VudCkudmFsdWUgPVxuICAgICAgICBqc29uLmdldEV2ZW50VmFsdWUodXNlcmRhdGFjb3VudCk7XG4gICAgfVxuXG4gICAganNvbi5yZWxlYXNlKCk7XG4gICAganNvbiA9IHZvaWQgMDtcbiAgICBqc29uID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/mm7TmlrBcbiAgICpcbiAgICog44Kk44OZ44Oz44OI55m654Gr44Gu44OB44Kn44OD44Kv44CCXG4gICAqIOWFpeWKm+OBmeOCi+aZgumWk+OBr+WRvOOBsOOCjOOCi+ODouODvOOCt+ODp+ODs+OCv+OCpOODn+ODs+OCsOOCku+8kOOBqOOBl+OBn+enkuaVsOOBp+ihjOOBhuOAglxuICAgKlxuICAgKiBAcGFyYW0gYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyAgIOWJjeWbnuOBruOCpOODmeODs+ODiOODgeOCp+ODg+OCr+aZgumWk1vnp5JdXG4gICAqIEBwYXJhbSBtb3Rpb25UaW1lU2Vjb25kcyAgICAgICAg5LuK5Zue44Gu5YaN55Sf5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRGaXJlZEV2ZW50KFxuICAgIGJlZm9yZUNoZWNrVGltZVNlY29uZHM6IG51bWJlcixcbiAgICBtb3Rpb25UaW1lU2Vjb25kczogbnVtYmVyXG4gICk6IGNzbVZlY3Rvcjxjc21TdHJpbmc+IHtcbiAgICB0aGlzLl9maXJlZEV2ZW50VmFsdWVzLnVwZGF0ZVNpemUoMCk7XG5cbiAgICAvLyDjgqTjg5njg7Pjg4jjga7nmbrngavjg4Hjgqfjg4Pjgq9cbiAgICBmb3IgKGxldCB1ID0gMDsgdSA8IHRoaXMuX21vdGlvbkRhdGEuZXZlbnRDb3VudDsgKyt1KSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHUpLmZpcmVUaW1lID4gYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyAmJlxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1KS5maXJlVGltZSA8PSBtb3Rpb25UaW1lU2Vjb25kc1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXMucHVzaEJhY2soXG4gICAgICAgICAgbmV3IGNzbVN0cmluZyh0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1KS52YWx1ZS5zKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9maXJlZEV2ZW50VmFsdWVzO1xuICB9XG5cbiAgLyoqXG4gICAqIOmAj+aYjuW6puOBruOCq+ODvOODluOBjOWtmOWcqOOBmeOCi+OBi+OBqeOBhuOBi+OCkueiuuiqjeOBmeOCi1xuICAgKlxuICAgKiBAcmV0dXJucyB0cnVlICAtPiDjgq3jg7zjgYzlrZjlnKjjgZnjgotcbiAgICogICAgICAgICAgZmFsc2UgLT4g44Kt44O844GM5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNFeGlzdE1vZGVsT3BhY2l0eSgpOiBib29sZWFuIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBjdXJ2ZTogQ3ViaXNtTW90aW9uQ3VydmUgPSB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChpKTtcblxuICAgICAgaWYgKGN1cnZlLnR5cGUgIT0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJ2ZS5pZC5nZXRTdHJpbmcoKS5zLmxvY2FsZUNvbXBhcmUoSWROYW1lT3BhY2l0eSkgPT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog6YCP5piO5bqm44Gu44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K544KS6L+U44GZXG4gICAqXG4gICAqIEByZXR1cm5zIHN1Y2Nlc3M66YCP5piO5bqm44Gu44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqL1xuICBwdWJsaWMgZ2V0TW9kZWxPcGFjaXR5SW5kZXgoKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5pc0V4aXN0TW9kZWxPcGFjaXR5KCkpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3QgY3VydmU6IEN1YmlzbU1vdGlvbkN1cnZlID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoaSk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGN1cnZlLnR5cGUgIT0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWxcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VydmUuaWQuZ2V0U3RyaW5nKCkucy5sb2NhbGVDb21wYXJlKElkTmFtZU9wYWNpdHkpID09IDApIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICog6YCP5piO5bqm44GuSWTjgpLov5TjgZlcbiAgICpcbiAgICogQHBhcmFtIGluZGV4IOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJucyBzdWNjZXNzOumAj+aYjuW6puOBruOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsT3BhY2l0eUlkKGluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgaWYgKGluZGV4ICE9IC0xKSB7XG4gICAgICBjb25zdCBjdXJ2ZTogQ3ViaXNtTW90aW9uQ3VydmUgPSB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChpbmRleCk7XG5cbiAgICAgIGlmIChjdXJ2ZS50eXBlID09IEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsKSB7XG4gICAgICAgIGlmIChjdXJ2ZS5pZC5nZXRTdHJpbmcoKS5zLmxvY2FsZUNvbXBhcmUoSWROYW1lT3BhY2l0eSkgPT0gMCkge1xuICAgICAgICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoY3VydmUuaWQuZ2V0U3RyaW5nKCkucyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjmmYLplpPjga7pgI/mmI7luqbjga7lgKTjgpLov5TjgZlcbiAgICpcbiAgICogQHJldHVybnMgc3VjY2Vzczrjg6Ljg7zjgrfjg6fjg7Pjga7lvZPoqbLmmYLplpPjgavjgYrjgZHjgotPcGFjaXR544Gu5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0TW9kZWxPcGFjaXR5VmFsdWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWxPcGFjaXR5O1xuICB9XG5cbiAgcHVibGljIF9zb3VyY2VGcmFtZVJhdGU6IG51bWJlcjsgLy8g44Ot44O844OJ44GX44Gf44OV44Kh44Kk44Or44GuRlBT44CC6KiY6L+w44GM54Sh44GR44KM44Gw44OH44OV44Kp44Or44OI5YCkMTVmcHPjgajjgarjgotcbiAgcHVibGljIF9sb29wRHVyYXRpb25TZWNvbmRzOiBudW1iZXI7IC8vIG10buODleOCoeOCpOODq+OBp+Wumue+qeOBleOCjOOCi+S4gOmAo+OBruODouODvOOCt+ODp+ODs+OBrumVt+OBlVxuICBwdWJsaWMgX2lzTG9vcDogYm9vbGVhbjsgLy8g44Or44O844OX44GZ44KL44GLP1xuICBwdWJsaWMgX2lzTG9vcEZhZGVJbjogYm9vbGVhbjsgLy8g44Or44O844OX5pmC44Gr44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544GL44Gp44GG44GL44Gu44OV44Op44Kw44CC5Yid5pyf5YCk44Gn44Gv5pyJ5Yq544CCXG4gIHB1YmxpYyBfbGFzdFdlaWdodDogbnVtYmVyOyAvLyDmnIDlvozjgavoqK3lrprjgZXjgozjgZ/ph43jgb9cblxuICBwdWJsaWMgX21vdGlvbkRhdGE6IEN1YmlzbU1vdGlvbkRhdGE7IC8vIOWun+mam+OBruODouODvOOCt+ODp+ODs+ODh+ODvOOCv+acrOS9k1xuXG4gIHB1YmxpYyBfZXllQmxpbmtQYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47IC8vIOiHquWLleOBvuOBsOOBn+OBjeOCkumBqeeUqOOBmeOCi+ODkeODqeODoeODvOOCv0lE44OP44Oz44OJ44Or44Gu44Oq44K544OI44CCICDjg6Ljg4fjg6vvvIjjg6Ljg4fjg6vjgrvjg4Pjg4bjgqPjg7PjgrDvvInjgajjg5Hjg6njg6Hjg7zjgr/jgpLlr77lv5zku5jjgZHjgovjgIJcbiAgcHVibGljIF9saXBTeW5jUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDjg6rjg4Pjg5fjgrfjg7Pjgq/jgpLpgannlKjjgZnjgovjg5Hjg6njg6Hjg7zjgr9JROODj+ODs+ODieODq+OBruODquOCueODiOOAgiAg44Oi44OH44Or77yI44Oi44OH44Or44K744OD44OG44Kj44Oz44Kw77yJ44Go44OR44Op44Oh44O844K/44KS5a++5b+c5LuY44GR44KL44CCXG5cbiAgcHVibGljIF9tb2RlbEN1cnZlSWRFeWVCbGluazogQ3ViaXNtSWRIYW5kbGU7IC8vIOODouODh+ODq+OBjOaMgeOBpOiHquWLleOBvuOBsOOBn+OBjeeUqOODkeODqeODoeODvOOCv0lE44Gu44OP44Oz44OJ44Or44CCICDjg6Ljg4fjg6vjgajjg6Ljg7zjgrfjg6fjg7PjgpLlr77lv5zku5jjgZHjgovjgIJcbiAgcHVibGljIF9tb2RlbEN1cnZlSWRMaXBTeW5jOiBDdWJpc21JZEhhbmRsZTsgLy8g44Oi44OH44Or44GM5oyB44Gk44Oq44OD44OX44K344Oz44Kv55So44OR44Op44Oh44O844K/SUTjga7jg4/jg7Pjg4njg6vjgIIgIOODouODh+ODq+OBqOODouODvOOCt+ODp+ODs+OCkuWvvuW/nOS7mOOBkeOCi+OAglxuICBwdWJsaWMgX21vZGVsQ3VydmVJZE9wYWNpdHk6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg6Ljg4fjg6vjgYzmjIHjgaTkuI3pgI/mmI7luqbnlKjjg5Hjg6njg6Hjg7zjgr9JROOBruODj+ODs+ODieODq+OAgiAg44Oi44OH44Or44Go44Oi44O844K344On44Oz44KS5a++5b+c5LuY44GR44KL44CCXG5cbiAgcHVibGljIF9tb2RlbE9wYWNpdHk6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz44GL44KJ5Y+W5b6X44GX44Gf5LiN6YCP5piO5bqmXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vdGlvbic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uID0gJC5DdWJpc21Nb3Rpb247XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvbiA9ICQuQ3ViaXNtTW90aW9uO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtSWRIYW5kbGUgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5cbi8qKlxuICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBrueorumhnlxuICpcbiAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBrueorumhnuOAglxuICovXG5leHBvcnQgZW51bSBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldCB7XG4gIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsLCAvLyDjg6Ljg4fjg6vjgavlr77jgZfjgaZcbiAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFyYW1ldGVyLCAvLyDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZfjgaZcbiAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFydE9wYWNpdHksIC8vIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBq+WvvuOBl+OBplxufVxuXG4vKipcbiAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7nqK7poZ5cbiAqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7nqK7poZ7jgIJcbiAqL1xuZXhwb3J0IGVudW0gQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUge1xuICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9MaW5lYXIgPSAwLCAvLyDjg6rjg4vjgqJcbiAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyID0gMSwgLy8g44OZ44K444Kn5puy57eaXG4gIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX1N0ZXBwZWQgPSAyLCAvLyDjgrnjg4bjg4Pjg5dcbiAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfSW52ZXJzZVN0ZXBwZWQgPSAzLCAvLyDjgqTjg7Pjg5Djg7zjgrnjgrnjg4bjg4Pjg5dcbn1cblxuLyoqXG4gKiBAYnJpZWYg44Oi44O844K344On44Oz44Kr44O844OW44Gu5Yi25b6h54K5XG4gKlxuICog44Oi44O844K344On44Oz44Kr44O844OW44Gu5Yi25b6h54K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25Qb2ludCB7XG4gIHRpbWUgPSAwLjA7IC8vIOaZgumWk1vnp5JdXG4gIHZhbHVlID0gMC4wOyAvLyDlgKRcbn1cblxuLyoqXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7oqZXkvqHplqLmlbBcbiAqXG4gKiBAcGFyYW0gICBwb2ludHMgICAgICDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7liLblvqHngrnjg6rjgrnjg4hcbiAqIEBwYXJhbSAgIHRpbWUgICAgICAgIOipleS+oeOBmeOCi+aZgumWk1vnp5JdXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgY3NtTW90aW9uU2VnbWVudEV2YWx1YXRpb25GdW5jdGlvbiB7XG4gIChwb2ludHM6IEN1YmlzbU1vdGlvblBvaW50W10sIHRpbWU6IG51bWJlcik6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBAYnJpZWYg44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OIXG4gKlxuICog44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25TZWdtZW50IHtcbiAgLyoqXG4gICAqIEBicmllZiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICpcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/44CCXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ldmFsdWF0ZSA9IG51bGw7XG4gICAgdGhpcy5iYXNlUG9pbnRJbmRleCA9IDA7XG4gICAgdGhpcy5zZWdtZW50VHlwZSA9IDA7XG4gIH1cblxuICBldmFsdWF0ZTogY3NtTW90aW9uU2VnbWVudEV2YWx1YXRpb25GdW5jdGlvbjsgLy8g5L2/55So44GZ44KL6KmV5L6h6Zai5pWwXG4gIGJhc2VQb2ludEluZGV4OiBudW1iZXI7IC8vIOacgOWIneOBruOCu+OCsOODoeODs+ODiOOBuOOBruOCpOODs+ODh+ODg+OCr+OCuVxuICBzZWdtZW50VHlwZTogbnVtYmVyOyAvLyDjgrvjgrDjg6Hjg7Pjg4jjga7nqK7poZ5cbn1cblxuLyoqXG4gKiBAYnJpZWYg44Oi44O844K344On44Oz44Kr44O844OWXG4gKlxuICog44Oi44O844K344On44Oz44Kr44O844OW44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25DdXJ2ZSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnR5cGUgPSBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbDtcbiAgICB0aGlzLnNlZ21lbnRDb3VudCA9IDA7XG4gICAgdGhpcy5iYXNlU2VnbWVudEluZGV4ID0gMDtcbiAgICB0aGlzLmZhZGVJblRpbWUgPSAwLjA7XG4gICAgdGhpcy5mYWRlT3V0VGltZSA9IDAuMDtcbiAgfVxuXG4gIHR5cGU6IEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0OyAvLyDjgqvjg7zjg5bjga7nqK7poZ5cbiAgaWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDjgqvjg7zjg5bjga5JRFxuICBzZWdtZW50Q291bnQ6IG51bWJlcjsgLy8g44K744Kw44Oh44Oz44OI44Gu5YCL5pWwXG4gIGJhc2VTZWdtZW50SW5kZXg6IG51bWJlcjsgLy8g5pyA5Yid44Gu44K744Kw44Oh44Oz44OI44Gu44Kk44Oz44OH44OD44Kv44K5XG4gIGZhZGVJblRpbWU6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbiAgZmFkZU91dFRpbWU6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cbn1cblxuLyoqXG4gKiDjgqTjg5njg7Pjg4jjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkV2ZW50IHtcbiAgZmlyZVRpbWUgPSAwLjA7XG4gIHZhbHVlOiBjc21TdHJpbmc7XG59XG5cbi8qKlxuICogQGJyaWVmIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv1xuICpcbiAqIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uRGF0YSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmR1cmF0aW9uID0gMC4wO1xuICAgIHRoaXMubG9vcCA9IGZhbHNlO1xuICAgIHRoaXMuY3VydmVDb3VudCA9IDA7XG4gICAgdGhpcy5ldmVudENvdW50ID0gMDtcbiAgICB0aGlzLmZwcyA9IDAuMDtcblxuICAgIHRoaXMuY3VydmVzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT4oKTtcbiAgICB0aGlzLnNlZ21lbnRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25TZWdtZW50PigpO1xuICAgIHRoaXMucG9pbnRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25Qb2ludD4oKTtcbiAgICB0aGlzLmV2ZW50cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uRXZlbnQ+KCk7XG4gIH1cblxuICBkdXJhdGlvbjogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZVb56eSXVxuICBsb29wOiBib29sZWFuOyAvLyDjg6vjg7zjg5fjgZnjgovjgYvjganjgYbjgYtcbiAgY3VydmVDb3VudDogbnVtYmVyOyAvLyDjgqvjg7zjg5bjga7lgIvmlbBcbiAgZXZlbnRDb3VudDogbnVtYmVyOyAvLyBVc2VyRGF0YeOBruWAi+aVsFxuICBmcHM6IG51bWJlcjsgLy8g44OV44Os44O844Og44Os44O844OIXG4gIGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPjsgLy8g44Kr44O844OW44Gu44Oq44K544OIXG4gIHNlZ21lbnRzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uU2VnbWVudD47IC8vIOOCu+OCsOODoeODs+ODiOOBruODquOCueODiFxuICBwb2ludHM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25Qb2ludD47IC8vIOODneOCpOODs+ODiOOBruODquOCueODiFxuICBldmVudHM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25FdmVudD47IC8vIOOCpOODmeODs+ODiOOBruODquOCueODiFxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb3Rpb25pbnRlcm5hbCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uQ3VydmUgPSAkLkN1YmlzbU1vdGlvbkN1cnZlO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25DdXJ2ZSA9ICQuQ3ViaXNtTW90aW9uQ3VydmU7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldCA9ICQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0ID0gJC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbkRhdGEgPSAkLkN1YmlzbU1vdGlvbkRhdGE7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvbkRhdGEgPSAkLkN1YmlzbU1vdGlvbkRhdGE7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21Nb3Rpb25FdmVudCA9ICQuQ3ViaXNtTW90aW9uRXZlbnQ7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvbkV2ZW50ID0gJC5DdWJpc21Nb3Rpb25FdmVudDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvblBvaW50ID0gJC5DdWJpc21Nb3Rpb25Qb2ludDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uUG9pbnQgPSAkLkN1YmlzbU1vdGlvblBvaW50O1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uU2VnbWVudCA9ICQuQ3ViaXNtTW90aW9uU2VnbWVudDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uU2VnbWVudCA9ICQuQ3ViaXNtTW90aW9uU2VnbWVudDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlID0gJC5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUgPSAkLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlO1xuICBleHBvcnQgdHlwZSBjc21Nb3Rpb25TZWdtZW50RXZhbHVhdGlvbkZ1bmN0aW9uID1cbiAgICAkLmNzbU1vdGlvblNlZ21lbnRFdmFsdWF0aW9uRnVuY3Rpb247XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XG5pbXBvcnQgeyBDdWJpc21Kc29uLCBKc29uTWFwIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtanNvbic7XG5cbi8vIEpTT04ga2V5c1xuY29uc3QgTWV0YSA9ICdNZXRhJztcbmNvbnN0IER1cmF0aW9uID0gJ0R1cmF0aW9uJztcbmNvbnN0IExvb3AgPSAnTG9vcCc7XG5jb25zdCBBcmVCZXppZXJzUmVzdHJpY3RlZCA9ICdBcmVCZXppZXJzUmVzdHJpY3RlZCc7XG5jb25zdCBDdXJ2ZUNvdW50ID0gJ0N1cnZlQ291bnQnO1xuY29uc3QgRnBzID0gJ0Zwcyc7XG5jb25zdCBUb3RhbFNlZ21lbnRDb3VudCA9ICdUb3RhbFNlZ21lbnRDb3VudCc7XG5jb25zdCBUb3RhbFBvaW50Q291bnQgPSAnVG90YWxQb2ludENvdW50JztcbmNvbnN0IEN1cnZlcyA9ICdDdXJ2ZXMnO1xuY29uc3QgVGFyZ2V0ID0gJ1RhcmdldCc7XG5jb25zdCBJZCA9ICdJZCc7XG5jb25zdCBGYWRlSW5UaW1lID0gJ0ZhZGVJblRpbWUnO1xuY29uc3QgRmFkZU91dFRpbWUgPSAnRmFkZU91dFRpbWUnO1xuY29uc3QgU2VnbWVudHMgPSAnU2VnbWVudHMnO1xuY29uc3QgVXNlckRhdGEgPSAnVXNlckRhdGEnO1xuY29uc3QgVXNlckRhdGFDb3VudCA9ICdVc2VyRGF0YUNvdW50JztcbmNvbnN0IFRvdGFsVXNlckRhdGFTaXplID0gJ1RvdGFsVXNlckRhdGFTaXplJztcbmNvbnN0IFRpbWUgPSAnVGltZSc7XG5jb25zdCBWYWx1ZSA9ICdWYWx1ZSc7XG5cbi8qKlxuICogbW90aW9uMy5qc29u44Gu44Kz44Oz44OG44OK44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25Kc29uIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gYnVmZmVyIG1vdGlvbjMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxuICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpIHtcbiAgICB0aGlzLl9qc29uID0gQ3ViaXNtSnNvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIEN1YmlzbUpzb24uZGVsZXRlKHRoaXMuX2pzb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBrumVt+OBleOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBrumVt+OBlVvnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uRHVyYXRpb24oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKER1cmF0aW9uKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5fmg4XloLHjga7lj5blvpdcbiAgICogQHJldHVybiB0cnVlIOODq+ODvOODl+OBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOODq+ODvOODl+OBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzTW90aW9uTG9vcCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKExvb3ApXG4gICAgICAudG9Cb29sZWFuKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0RXZhbHVhdGlvbk9wdGlvbkZsYWcoZmxhZ1R5cGU6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGlmIChcbiAgICAgIEV2YWx1YXRpb25PcHRpb25GbGFnLkV2YWx1YXRpb25PcHRpb25GbGFnX0FyZUJlemllcnNSaXN0cmljdGVkID09IGZsYWdUeXBlXG4gICAgKSB7XG4gICAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEFyZUJlemllcnNSZXN0cmljdGVkKVxuICAgICAgICAudG9Cb29sZWFuKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkN1cnZlQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlQ291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg5Xjg6zjg7zjg6Djg6zjg7zjg4jjga7lj5blvpdcbiAgICogQHJldHVybiDjg5Xjg6zjg7zjg6Djg6zjg7zjg4hbRlBTXVxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkZwcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRnBzKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgrvjgrDjg6Hjg7Pjg4jjga7nt4/lkIjoqIjjga7lj5blvpdcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7jgrvjgrDjg6Hjg7Pjg4jjga7lj5blvpdcbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25Ub3RhbFNlZ21lbnRDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVG90YWxTZWdtZW50Q291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7liLblvqHlupfjga7nt4/lkIjoqIjjga7lj5blvpdcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7liLblvqHngrnjga7nt4/lkIjoqIhcbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25Ub3RhbFBvaW50Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsUG9pbnRDb3VudClcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCpOODs+aZgumWk+OBruWtmOWcqFxuICAgKiBAcmV0dXJuIHRydWUg5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNFeGlzdE1vdGlvbkZhZGVJblRpbWUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSlcbiAgICAgIC5pc051bGwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg5Xjgqfjg7zjg4njgqLjgqbjg4jmmYLplpPjga7lrZjlnKhcbiAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRXhpc3RNb3Rpb25GYWRlT3V0VGltZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSlcbiAgICAgIC5pc051bGwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg5Xjgqfjg7zjg4njgqTjg7PmmYLplpPjga7lj5blvpdcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7PmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkZhZGVJblRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruODleOCp+ODvOODieOCouOCpuODiOaZgumWk+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uRmFkZU91dFRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVPdXRUaW1lKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7nqK7poZ7jga7lj5blvpdcbiAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44Kr44O844OW44Gu56iu6aGeXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVUYXJnZXQoY3VydmVJbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVGFyZ2V0KVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBrklE44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOOCq+ODvOODluOBrklEXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVJZChjdXJ2ZUluZGV4OiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWQpXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44OV44Kn44O844OJ44Kk44Oz5pmC6ZaT44Gu5a2Y5ZyoXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIHRydWUg5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNFeGlzdE1vdGlvbkN1cnZlRmFkZUluVGltZShjdXJ2ZUluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZhZGVJblRpbWUpXG4gICAgICAuaXNOdWxsKCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu5a2Y5ZyoXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIHRydWUg5a2Y5Zyo44GZ44KLXG4gICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNFeGlzdE1vdGlvbkN1cnZlRmFkZU91dFRpbWUoY3VydmVJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSlcbiAgICAgIC5pc051bGwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jgqvjg7zjg5bjga7jg5Xjgqfjg7zjg4njgqTjg7PmmYLplpPjga7lj5blvpdcbiAgICogQHBhcmFtIGN1cnZlSW5kZXgg44Kr44O844OW44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZUZhZGVJblRpbWUoY3VydmVJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQ3VydmVzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChjdXJ2ZUluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRmFkZUluVGltZSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODleOCp+ODvOODieOCouOCpuODiOaZgumWk1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0TW90aW9uQ3VydmVGYWRlT3V0VGltZShjdXJ2ZUluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhDdXJ2ZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGN1cnZlSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhGYWRlT3V0VGltZSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu5YCL5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEBwYXJhbSBjdXJ2ZUluZGV4IOOCq+ODvOODluOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldE1vdGlvbkN1cnZlU2VnbWVudENvdW50KGN1cnZlSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNlZ21lbnRzKVxuICAgICAgLmdldFZlY3RvcigpXG4gICAgICAuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBruWApOOBruWPluW+l1xuICAgKiBAcGFyYW0gY3VydmVJbmRleCDjgqvjg7zjg5bjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHNlZ21lbnRJbmRleCDjgrvjgrDjg6Hjg7Pjg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDjgrvjgrDjg6Hjg7Pjg4jjga7lgKRcbiAgICovXG4gIHB1YmxpYyBnZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXG4gICAgY3VydmVJbmRleDogbnVtYmVyLFxuICAgIHNlZ21lbnRJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEN1cnZlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoY3VydmVJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNlZ21lbnRzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChzZWdtZW50SW5kZXgpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOOBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOOCpOODmeODs+ODiOOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldEV2ZW50Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhQ291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAg44Kk44OZ44Oz44OI44Gu57eP5paH5a2X5pWw44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu57eP5paH5a2X5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0VG90YWxFdmVudFZhbHVlU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVG90YWxVc2VyRGF0YVNpemUpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjga7mmYLplpPjga7lj5blvpdcbiAgICogQHBhcmFtIHVzZXJEYXRhSW5kZXgg44Kk44OZ44Oz44OI44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRFdmVudFRpbWUodXNlckRhdGFJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHVzZXJEYXRhSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUaW1lKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjga7lj5blvpdcbiAgICogQHBhcmFtIHVzZXJEYXRhSW5kZXgg44Kk44OZ44Oz44OI44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g44Kk44OZ44Oz44OI44Gu5paH5a2X5YiXXG4gICAqL1xuICBwdWJsaWMgZ2V0RXZlbnRWYWx1ZSh1c2VyRGF0YUluZGV4OiBudW1iZXIpOiBjc21TdHJpbmcge1xuICAgIHJldHVybiBuZXcgY3NtU3RyaW5nKFxuICAgICAgdGhpcy5fanNvblxuICAgICAgICAuZ2V0Um9vdCgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHVzZXJEYXRhSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZhbHVlKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICApO1xuICB9XG5cbiAgX2pzb246IEN1YmlzbUpzb247IC8vIG1vdGlvbjMuanNvbuOBruODh+ODvOOCv1xufVxuXG4vKipcbiAqIEBicmllZiDjg5njgrjjgqfjgqvjg7zjg5bjga7op6Pph4jmlrnms5Xjga7jg5Xjg6njgrDjgr/jgqTjg5dcbiAqL1xuZXhwb3J0IGVudW0gRXZhbHVhdGlvbk9wdGlvbkZsYWcge1xuICBFdmFsdWF0aW9uT3B0aW9uRmxhZ19BcmVCZXppZXJzUmlzdHJpY3RlZCA9IDAsIC8vLzwg44OZ44K444Kn44OP44Oz44OJ44Or44Gu6KaP5Yi254q25oWLXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vdGlvbmpzb24nO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvbkpzb24gPSAkLkN1YmlzbU1vdGlvbkpzb247XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvbkpzb24gPSAkLkN1YmlzbU1vdGlvbkpzb247XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7IEFDdWJpc21Nb3Rpb24gfSBmcm9tICcuL2FjdWJpc21tb3Rpb24nO1xuaW1wb3J0IHtcbiAgQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSxcbiAgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyLFxufSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcic7XG5cbi8qKlxuICog44Oi44O844K344On44Oz44Gu566h55CGXG4gKlxuICog44Oi44O844K344On44Oz44Gu566h55CG44KS6KGM44GG44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25NYW5hZ2VyIGV4dGVuZHMgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fY3VycmVudFByaW9yaXR5ID0gMDtcbiAgICB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOBruWPluW+l1xuICAgKiBAcmV0dXJuICDjg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqZcbiAgICovXG4gIHB1YmxpYyBnZXRDdXJyZW50UHJpb3JpdHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY3VycmVudFByaW9yaXR5O1xuICB9XG5cbiAgLyoqXG4gICAqIOS6iOe0hOS4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOCkuWPluW+l+OBmeOCi+OAglxuICAgKiBAcmV0dXJuICDjg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqZcbiAgICovXG4gIHB1YmxpYyBnZXRSZXNlcnZlUHJpb3JpdHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzZXJ2ZVByaW9yaXR5O1xuICB9XG5cbiAgLyoqXG4gICAqIOS6iOe0hOS4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOCkuioreWumuOBmeOCi+OAglxuICAgKiBAcGFyYW0gICB2YWwgICAgIOWEquWFiOW6plxuICAgKi9cbiAgcHVibGljIHNldFJlc2VydmVQcmlvcml0eSh2YWw6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhKrlhYjluqbjgpLoqK3lrprjgZfjgabjg6Ljg7zjgrfjg6fjg7PjgpLplovlp4vjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIG1vdGlvbiAgICAgICAgICDjg6Ljg7zjgrfjg6fjg7NcbiAgICogQHBhcmFtIGF1dG9EZWxldGUgICAgICDlho3nlJ/jgYzni6nnjJ/jgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLliYrpmaTjgZnjgovjgarjgol0cnVlXG4gICAqIEBwYXJhbSBwcmlvcml0eSAgICAgICAg5YSq5YWI5bqmXG4gICAqIEByZXR1cm4gICAgICAgICAgICAgICAg6ZaL5aeL44GX44Gf44Oi44O844K344On44Oz44Gu6K2Y5Yil55Wq5Y+344KS6L+U44GZ44CC5YCL5Yil44Gu44Oi44O844K344On44Oz44GM57WC5LqG44GX44Gf44GL5ZCm44GL44KS5Yik5a6a44GZ44KLSXNGaW5pc2hlZCgp44Gu5byV5pWw44Gn5L2/55So44GZ44KL44CC6ZaL5aeL44Gn44GN44Gq44GE5pmC44Gv44CMLTHjgI1cbiAgICovXG4gIHB1YmxpYyBzdGFydE1vdGlvblByaW9yaXR5KFxuICAgIG1vdGlvbjogQUN1YmlzbU1vdGlvbixcbiAgICBhdXRvRGVsZXRlOiBib29sZWFuLFxuICAgIHByaW9yaXR5OiBudW1iZXJcbiAgKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSB7XG4gICAgaWYgKHByaW9yaXR5ID09IHRoaXMuX3Jlc2VydmVQcmlvcml0eSkge1xuICAgICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gMDsgLy8g5LqI57SE44KS6Kej6ZmkXG4gICAgfVxuXG4gICAgdGhpcy5fY3VycmVudFByaW9yaXR5ID0gcHJpb3JpdHk7IC8vIOWGjeeUn+S4reODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOCkuioreWumlxuXG4gICAgcmV0dXJuIHN1cGVyLnN0YXJ0TW90aW9uKG1vdGlvbiwgYXV0b0RlbGV0ZSwgdGhpcy5fdXNlclRpbWVTZWNvbmRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLmm7TmlrDjgZfjgabjgIHjg6Ljg4fjg6vjgavjg5Hjg6njg6Hjg7zjgr/lgKTjgpLlj43mmKDjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIG1vZGVsICAg5a++6LGh44Gu44Oi44OH44OrXG4gICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzICAgIOODh+ODq+OCv+aZgumWk1vnp5JdXG4gICAqIEByZXR1cm4gIHRydWUgICAg5pu05paw44GV44KM44Gm44GE44KLXG4gICAqIEByZXR1cm4gIGZhbHNlICAg5pu05paw44GV44KM44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlTW90aW9uKG1vZGVsOiBDdWJpc21Nb2RlbCwgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICs9IGRlbHRhVGltZVNlY29uZHM7XG5cbiAgICBjb25zdCB1cGRhdGVkOiBib29sZWFuID0gc3VwZXIuZG9VcGRhdGVNb3Rpb24obW9kZWwsIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyk7XG5cbiAgICBpZiAodGhpcy5pc0ZpbmlzaGVkKCkpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IDA7IC8vIOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOCkuino+mZpFxuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCkuS6iOe0hOOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gICBwcmlvcml0eSAgICDlhKrlhYjluqZcbiAgICogQHJldHVybiAgdHJ1ZSAgICDkuojntITjgafjgY3jgZ9cbiAgICogQHJldHVybiAgZmFsc2UgICDkuojntITjgafjgY3jgarjgYvjgaPjgZ9cbiAgICovXG4gIHB1YmxpYyByZXNlcnZlTW90aW9uKHByaW9yaXR5OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAoXG4gICAgICBwcmlvcml0eSA8PSB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgfHxcbiAgICAgIHByaW9yaXR5IDw9IHRoaXMuX2N1cnJlbnRQcmlvcml0eVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IHByaW9yaXR5O1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBfY3VycmVudFByaW9yaXR5OiBudW1iZXI7IC8vIOePvuWcqOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6plxuICBfcmVzZXJ2ZVByaW9yaXR5OiBudW1iZXI7IC8vIOWGjeeUn+S6iOWumuOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOAguWGjeeUn+S4reOBrzDjgavjgarjgovjgILjg6Ljg7zjgrfjg6fjg7Pjg5XjgqHjgqTjg6vjgpLliKXjgrnjg6zjg4Pjg4njgafoqq3jgb/ovrzjgoDjgajjgY3jga7mqZ/og73jgIJcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtbW90aW9ubWFuYWdlcic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtTW90aW9uTWFuYWdlciA9ICQuQ3ViaXNtTW90aW9uTWFuYWdlcjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uTWFuYWdlciA9ICQuQ3ViaXNtTW90aW9uTWFuYWdlcjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEFDdWJpc21Nb3Rpb24gfSBmcm9tICcuL2FjdWJpc21tb3Rpb24nO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSB9IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyJztcblxuLyoqXG4gKiBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgaflho3nlJ/jgZfjgabjgYTjgovlkITjg6Ljg7zjgrfjg6fjg7Pjga7nrqHnkIbjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvblF1ZXVlRW50cnkge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fYXV0b0RlbGV0ZSA9IGZhbHNlO1xuICAgIHRoaXMuX21vdGlvbiA9IG51bGw7XG4gICAgdGhpcy5fYXZhaWxhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLl9maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9zdGFydFRpbWVTZWNvbmRzID0gLTEuMDtcbiAgICB0aGlzLl9mYWRlSW5TdGFydFRpbWVTZWNvbmRzID0gMC4wO1xuICAgIHRoaXMuX2VuZFRpbWVTZWNvbmRzID0gLTEuMDtcbiAgICB0aGlzLl9zdGF0ZVRpbWVTZWNvbmRzID0gMC4wO1xuICAgIHRoaXMuX3N0YXRlV2VpZ2h0ID0gMC4wO1xuICAgIHRoaXMuX2xhc3RFdmVudENoZWNrU2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID0gdGhpcztcbiAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IDAuMDtcbiAgICB0aGlzLl9pc1RyaWdnZXJlZEZhZGVPdXQgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9hdXRvRGVsZXRlICYmIHRoaXMuX21vdGlvbikge1xuICAgICAgQUN1YmlzbU1vdGlvbi5kZWxldGUodGhpcy5fbW90aW9uKTsgLy9cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Go6ZaL5aeL5Yik5a6a44Gu6Kit5a6aXG4gICAqIEBwYXJhbSBmYWRlT3V0U2Vjb25kcyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIHNldEZhZGVPdXQoZmFkZU91dFNlY29uZHM6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzID0gZmFkZU91dFNlY29uZHM7XG4gICAgdGhpcy5faXNUcmlnZ2VyZWRGYWRlT3V0ID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjga7plovlp4tcbiAgICogQHBhcmFtIGZhZGVPdXRTZWNvbmRzIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXG4gICAqIEBwYXJhbSB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgICovXG4gIHB1YmxpYyBzdGFydEZhZGVPdXQoZmFkZU91dFNlY29uZHM6IG51bWJlciwgdXNlclRpbWVTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBuZXdFbmRUaW1lU2Vjb25kczogbnVtYmVyID0gdXNlclRpbWVTZWNvbmRzICsgZmFkZU91dFNlY29uZHM7XG4gICAgdGhpcy5faXNUcmlnZ2VyZWRGYWRlT3V0ID0gdHJ1ZTtcblxuICAgIGlmIChcbiAgICAgIHRoaXMuX2VuZFRpbWVTZWNvbmRzIDwgMC4wIHx8XG4gICAgICBuZXdFbmRUaW1lU2Vjb25kcyA8IHRoaXMuX2VuZFRpbWVTZWNvbmRzXG4gICAgKSB7XG4gICAgICB0aGlzLl9lbmRUaW1lU2Vjb25kcyA9IG5ld0VuZFRpbWVTZWNvbmRzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7ntYLkuobjga7norroqo1cbiAgICpcbiAgICogQHJldHVybiB0cnVlIOODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn1xuICAgKiBAcmV0dXJuIGZhbHNlIOe1guS6huOBl+OBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRmluaXNoZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbmlzaGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+OBrueiuuiqjVxuICAgKiBAcmV0dXJuIHRydWUg44Oi44O844K344On44Oz44GM6ZaL5aeL44GX44GfXG4gICAqIEByZXR1cm4gZmFsc2Ug6ZaL5aeL44GX44Gm44GE44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNTdGFydGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zdGFydGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+aZguWIu+OBruWPluW+l1xuICAgKiBAcmV0dXJuIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+aZguWIu1vnp5JdXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RhcnRUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0VGltZVNlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Kk44Oz44Gu6ZaL5aeL5pmC5Yi744Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Kk44Oz44Gu6ZaL5aeL5pmC5Yi7W+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRGYWRlSW5TdGFydFRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZmFkZUluU3RhcnRUaW1lU2Vjb25kcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7ntYLkuobmmYLliLvjga7lj5blvpdcbiAgICogQHJldHVybiDjg5Xjgqfjg7zjg4njgqTjg7Pjga7ntYLkuobmmYLliLvjga7lj5blvpdcbiAgICovXG4gIHB1YmxpYyBnZXRFbmRUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2VuZFRpbWVTZWNvbmRzO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+aZguWIu+OBruioreWumlxuICAgKiBAcGFyYW0gc3RhcnRUaW1lIOODouODvOOCt+ODp+ODs+OBrumWi+Wni+aZguWIu1xuICAgKi9cbiAgcHVibGljIHNldFN0YXJ0VGltZShzdGFydFRpbWU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3N0YXJ0VGltZVNlY29uZHMgPSBzdGFydFRpbWU7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Kk44Oz44Gu6ZaL5aeL5pmC5Yi744Gu6Kit5a6aXG4gICAqIEBwYXJhbSBzdGFydFRpbWUg44OV44Kn44O844OJ44Kk44Oz44Gu6ZaL5aeL5pmC5Yi7W+enkl1cbiAgICovXG4gIHB1YmxpYyBzZXRGYWRlSW5TdGFydFRpbWUoc3RhcnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9mYWRlSW5TdGFydFRpbWVTZWNvbmRzID0gc3RhcnRUaW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleOCp+ODvOODieOCpOODs+OBrue1guS6huaZguWIu+OBruioreWumlxuICAgKiBAcGFyYW0gZW5kVGltZSDjg5Xjgqfjg7zjg4njgqTjg7Pjga7ntYLkuobmmYLliLtb56eSXVxuICAgKi9cbiAgcHVibGljIHNldEVuZFRpbWUoZW5kVGltZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fZW5kVGltZVNlY29uZHMgPSBlbmRUaW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OBrue1guS6huOBruioreWumlxuICAgKiBAcGFyYW0gZiB0cnVl44Gq44KJ44Oi44O844K344On44Oz44Gu57WC5LqGXG4gICAqL1xuICBwdWJsaWMgc2V0SXNGaW5pc2hlZChmOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5fZmluaXNoZWQgPSBmO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+mWi+Wni+OBruioreWumlxuICAgKiBAcGFyYW0gZiB0cnVl44Gq44KJ44Oi44O844K344On44Oz44Gu6ZaL5aeLXG4gICAqL1xuICBwdWJsaWMgc2V0SXNTdGFydGVkKGY6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLl9zdGFydGVkID0gZjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7mnInlirnmgKfjga7norroqo1cbiAgICogQHJldHVybiB0cnVlIOODouODvOOCt+ODp+ODs+OBr+acieWKuVxuICAgKiBAcmV0dXJuIGZhbHNlIOODouODvOOCt+ODp+ODs+OBr+eEoeWKuVxuICAgKi9cbiAgcHVibGljIGlzQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9hdmFpbGFibGU7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu5pyJ5Yq55oCn44Gu6Kit5a6aXG4gICAqIEBwYXJhbSB2IHRydWXjgarjgonjg6Ljg7zjgrfjg6fjg7Pjga/mnInlirlcbiAgICovXG4gIHB1YmxpYyBzZXRJc0F2YWlsYWJsZSh2OiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5fYXZhaWxhYmxlID0gdjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7nirbmhYvjga7oqK3lrppcbiAgICogQHBhcmFtIHRpbWVTZWNvbmRzIOePvuWcqOaZguWIu1vnp5JdXG4gICAqIEBwYXJhbSB3ZWlnaHQg44Oi44O844K344On44Oz5bC+6YeN44G/XG4gICAqL1xuICBwdWJsaWMgc2V0U3RhdGUodGltZVNlY29uZHM6IG51bWJlciwgd2VpZ2h0OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9zdGF0ZVRpbWVTZWNvbmRzID0gdGltZVNlY29uZHM7XG4gICAgdGhpcy5fc3RhdGVXZWlnaHQgPSB3ZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog44Oi44O844K344On44Oz44Gu54++5Zyo5pmC5Yi744Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44Oi44O844K344On44Oz44Gu54++5Zyo5pmC5Yi7W+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRTdGF0ZVRpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGVUaW1lU2Vjb25kcztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7ph43jgb/jga7lj5blvpdcbiAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjga7ph43jgb9cbiAgICovXG4gIHB1YmxpYyBnZXRTdGF0ZVdlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZVdlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmnIDlvozjgavjgqTjg5njg7Pjg4jjga7nmbrngavjgpLjg4Hjgqfjg4Pjgq/jgZfjgZ/mmYLplpPjgpLlj5blvpdcbiAgICpcbiAgICogQHJldHVybiDmnIDlvozjgavjgqTjg5njg7Pjg4jjga7nmbrngavjgpLjg4Hjgqfjg4Pjgq/jgZfjgZ/mmYLplpNb56eSXVxuICAgKi9cbiAgcHVibGljIGdldExhc3RDaGVja0V2ZW50U2Vjb25kcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0RXZlbnRDaGVja1NlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog5pyA5b6M44Gr44Kk44OZ44Oz44OI44KS44OB44Kn44OD44Kv44GX44Gf5pmC6ZaT44KS6Kit5a6aXG4gICAqIEBwYXJhbSBjaGVja1NlY29uZHMg5pyA5b6M44Gr44Kk44OZ44Oz44OI44KS44OB44Kn44OD44Kv44GX44Gf5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBzZXRMYXN0Q2hlY2tFdmVudFNlY29uZHMoY2hlY2tTZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9sYXN0RXZlbnRDaGVja1NlY29uZHMgPSBjaGVja1NlY29uZHM7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Ki44Km44OI6ZaL5aeL5Yik5a6a44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI6ZaL5aeL44GZ44KL44GL44Gp44GG44GLXG4gICAqL1xuICBwdWJsaWMgaXNUcmlnZ2VyZWRGYWRlT3V0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc1RyaWdnZXJlZEZhZGVPdXQ7XG4gIH1cblxuICAvKipcbiAgICog44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaT44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBnZXRGYWRlT3V0U2Vjb25kcygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9mYWRlT3V0U2Vjb25kcztcbiAgfVxuXG4gIF9hdXRvRGVsZXRlOiBib29sZWFuOyAvLyDoh6rli5XliYrpmaRcbiAgX21vdGlvbjogQUN1YmlzbU1vdGlvbjsgLy8g44Oi44O844K344On44OzXG5cbiAgX2F2YWlsYWJsZTogYm9vbGVhbjsgLy8g5pyJ5Yq55YyW44OV44Op44KwXG4gIF9maW5pc2hlZDogYm9vbGVhbjsgLy8g57WC5LqG44OV44Op44KwXG4gIF9zdGFydGVkOiBib29sZWFuOyAvLyDplovlp4vjg5Xjg6njgrBcbiAgX3N0YXJ0VGltZVNlY29uZHM6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz5YaN55Sf6ZaL5aeL5pmC5Yi7W+enkl1cbiAgX2ZhZGVJblN0YXJ0VGltZVNlY29uZHM6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Kk44Oz6ZaL5aeL5pmC5Yi777yI44Or44O844OX44Gu5pmC44Gv5Yid5Zue44Gu44G/77yJW+enkl1cbiAgX2VuZFRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOe1guS6huS6iOWumuaZguWIu1vnp5JdXG4gIF9zdGF0ZVRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOaZguWIu+OBrueKtuaFi1vnp5JdXG4gIF9zdGF0ZVdlaWdodDogbnVtYmVyOyAvLyDph43jgb/jga7nirbmhYtcbiAgX2xhc3RFdmVudENoZWNrU2Vjb25kczogbnVtYmVyOyAvLyDmnIDntYLjga5Nb3Rpb27lgbTjga7jg4Hjgqfjg4Pjgq/jgZfjgZ/mmYLplpNcbiAgcHJpdmF0ZSBfZmFkZU91dFNlY29uZHM6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Ki44Km44OI5pmC6ZaTW+enkl1cbiAgcHJpdmF0ZSBfaXNUcmlnZ2VyZWRGYWRlT3V0OiBib29sZWFuOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jplovlp4vjg5Xjg6njgrBcblxuICBfbW90aW9uUXVldWVFbnRyeUhhbmRsZTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZTsgLy8g44Kk44Oz44K544K/44Oz44K544GU44Go44Gr5LiA5oSP44Gu5YCk44KS5oyB44Gk6K2Y5Yil55Wq5Y+3XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnknO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSAkLkN1YmlzbU1vdGlvblF1ZXVlRW50cnk7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSAkLkN1YmlzbU1vdGlvblF1ZXVlRW50cnk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBBQ3ViaXNtTW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcbmltcG9ydCB7IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnknO1xuaW1wb3J0IHsgY3NtVmVjdG9yLCBpdGVyYXRvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgY3NtU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xuXG4vKipcbiAqIOODouODvOOCt+ODp+ODs+WGjeeUn+OBrueuoeeQhlxuICpcbiAqIOODouODvOOCt+ODp+ODs+WGjeeUn+OBrueuoeeQhueUqOOCr+ODqeOCueOAgkN1YmlzbU1vdGlvbuODouODvOOCt+ODp+ODs+OBquOBqUFDdWJpc21Nb3Rpb27jga7jgrXjg5bjgq/jg6njgrnjgpLlho3nlJ/jgZnjgovjgZ/jgoHjgavkvb/nlKjjgZnjgovjgIJcbiAqXG4gKiBAbm90ZSDlho3nlJ/kuK3jgavliKXjga7jg6Ljg7zjgrfjg6fjg7PjgYwgU3RhcnRNb3Rpb24oKeOBleOCjOOBn+WgtOWQiOOBr+OAgeaWsOOBl+OBhOODouODvOOCt+ODp+ODs+OBq+a7keOCieOBi+OBq+WkieWMluOBl+aXp+ODouODvOOCt+ODp+ODs+OBr+S4reaWreOBmeOCi+OAglxuICogICAgICAg6KGo5oOF55So44Oi44O844K344On44Oz44CB5L2T55So44Oi44O844K344On44Oz44Gq44Gp44KS5YiG44GR44Gm44Oi44O844K344On44Oz5YyW44GX44Gf5aC05ZCI44Gq44Gp44CBXG4gKiAgICAgICDopIfmlbDjga7jg6Ljg7zjgrfjg6fjg7PjgpLlkIzmmYLjgavlho3nlJ/jgZXjgZvjgovloLTlkIjjga/jgIHopIfmlbDjga5DdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLjgqTjg7Pjgrnjgr/jg7PjgrnjgpLkvb/nlKjjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XG4gICAgdGhpcy5fZXZlbnRDYWxsQmFjayA9IG51bGw7XG4gICAgdGhpcy5fZXZlbnRDdXN0b21EYXRhID0gbnVsbDtcbiAgICB0aGlzLl9tb3Rpb25zID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25zLmdldFNpemUoKTsgKytpKSB7XG4gICAgICBpZiAodGhpcy5fbW90aW9ucy5hdChpKSkge1xuICAgICAgICB0aGlzLl9tb3Rpb25zLmF0KGkpLnJlbGVhc2UoKTtcbiAgICAgICAgdGhpcy5fbW90aW9ucy5zZXQoaSwgbnVsbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fbW90aW9ucyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5oyH5a6a44GX44Gf44Oi44O844K344On44Oz44Gu6ZaL5aeLXG4gICAqXG4gICAqIOaMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OCkumWi+Wni+OBmeOCi+OAguWQjOOBmOOCv+OCpOODl+OBruODouODvOOCt+ODp+ODs+OBjOaXouOBq+OBguOCi+WgtOWQiOOBr+OAgeaXouWtmOOBruODouODvOOCt+ODp+ODs+OBq+e1guS6huODleODqeOCsOOCkueri+OBpuOAgeODleOCp+ODvOODieOCouOCpuODiOOCkumWi+Wni+OBleOBm+OCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gICBtb3Rpb24gICAgICAgICAg6ZaL5aeL44GZ44KL44Oi44O844K344On44OzXG4gICAqIEBwYXJhbSAgIGF1dG9EZWxldGUgICAgICDlho3nlJ/jgYzntYLkuobjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLliYrpmaTjgZnjgovjgarjgokgdHJ1ZVxuICAgKiBAcGFyYW0gICB1c2VyVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaT44Gu56mN566X5YCkW+enkl1cbiAgICogQHJldHVybiAgICAgICAgICAgICAgICAgICAgICDplovlp4vjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7fjgpLov5TjgZnjgILlgIvliKXjga7jg6Ljg7zjgrfjg6fjg7PjgYzntYLkuobjgZfjgZ/jgYvlkKbjgYvjgpLliKTlrprjgZnjgotJc0ZpbmlzaGVkKCnjga7lvJXmlbDjgafkvb/nlKjjgZnjgovjgILplovlp4vjgafjgY3jgarjgYTmmYLjga/jgIwtMeOAjVxuICAgKi9cbiAgcHVibGljIHN0YXJ0TW90aW9uKFxuICAgIG1vdGlvbjogQUN1YmlzbU1vdGlvbixcbiAgICBhdXRvRGVsZXRlOiBib29sZWFuLFxuICAgIHVzZXJUaW1lU2Vjb25kczogbnVtYmVyXG4gICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUge1xuICAgIGlmIChtb3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWU7XG4gICAgfVxuXG4gICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xuXG4gICAgLy8g5pei44Gr44Oi44O844K344On44Oz44GM44GC44KM44Gw57WC5LqG44OV44Op44Kw44KS56uL44Gm44KLXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25zLmdldFNpemUoKTsgKytpKSB7XG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gdGhpcy5fbW90aW9ucy5hdChpKTtcbiAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5ID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0RmFkZU91dChtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb24uZ2V0RmFkZU91dFRpbWUoKSk7IC8vIOODleOCp+ODvOODieOCouOCpuODiOioreWumlxuICAgIH1cblxuICAgIG1vdGlvblF1ZXVlRW50cnkgPSBuZXcgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSgpOyAvLyDntYLkuobmmYLjgavnoLTmo4TjgZnjgotcbiAgICBtb3Rpb25RdWV1ZUVudHJ5Ll9hdXRvRGVsZXRlID0gYXV0b0RlbGV0ZTtcbiAgICBtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb24gPSBtb3Rpb247XG5cbiAgICB0aGlzLl9tb3Rpb25zLnB1c2hCYWNrKG1vdGlvblF1ZXVlRW50cnkpO1xuXG4gICAgcmV0dXJuIG1vdGlvblF1ZXVlRW50cnkuX21vdGlvblF1ZXVlRW50cnlIYW5kbGU7XG4gIH1cblxuICAvKipcbiAgICog5YWo44Gm44Gu44Oi44O844K344On44Oz44Gu57WC5LqG44Gu56K66KqNXG4gICAqIEByZXR1cm4gdHJ1ZSDlhajjgabntYLkuobjgZfjgabjgYTjgotcbiAgICogQHJldHVybiBmYWxzZSDntYLkuobjgZfjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc0ZpbmlzaGVkKCk6IGJvb2xlYW4ge1xuICAgIC8vIC0tLS0tLS0g5Yem55CG44KS6KGM44GGIC0tLS0tLS1cbiAgICAvLyDml6Ljgavjg6Ljg7zjgrfjg6fjg7PjgYzjgYLjgozjgbDntYLkuobjg5Xjg6njgrDjgpLnq4vjgabjgotcblxuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9tb3Rpb25zLmVuZCgpKTtcblxuICAgICkge1xuICAgICAgbGV0IG1vdGlvblF1ZXVlRW50cnk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnkgPSBpdGUucHRyKCk7XG5cbiAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5ID09IG51bGwpIHtcbiAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1vdGlvbjogQUN1YmlzbU1vdGlvbiA9IG1vdGlvblF1ZXVlRW50cnkuX21vdGlvbjtcblxuICAgICAgaWYgKG1vdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkucmVsZWFzZSgpO1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gbnVsbDtcbiAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIC0tLS0tIOe1guS6hua4iOOBv+OBruWHpueQhuOBjOOBguOCjOOBsOWJiumZpOOBmeOCiyAtLS0tLS1cbiAgICAgIGlmICghbW90aW9uUXVldWVFbnRyeS5pc0ZpbmlzaGVkKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlLnByZUluY3JlbWVudCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOaMh+WumuOBl+OBn+ODouODvOOCt+ODp+ODs+OBrue1guS6huOBrueiuuiqjVxuICAgKiBAcGFyYW0gbW90aW9uUXVldWVFbnRyeU51bWJlciDjg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7dcbiAgICogQHJldHVybiB0cnVlIOWFqOOBpue1guS6huOBl+OBpuOBhOOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOe1guS6huOBl+OBpuOBhOOBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRmluaXNoZWRCeUhhbmRsZShcbiAgICBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyOiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlXG4gICk6IGJvb2xlYW4ge1xuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PiA9IHRoaXMuX21vdGlvbnMuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9tb3Rpb25zLmVuZCgpKTtcbiAgICAgIGl0ZS5pbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgY29uc3QgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGl0ZS5wdHIoKTtcblxuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5Ll9tb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID09IG1vdGlvblF1ZXVlRW50cnlOdW1iZXIgJiZcbiAgICAgICAgIW1vdGlvblF1ZXVlRW50cnkuaXNGaW5pc2hlZCgpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhajjgabjga7jg6Ljg7zjgrfjg6fjg7PjgpLlgZzmraLjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzdG9wQWxsTW90aW9ucygpOiB2b2lkIHtcbiAgICAvLyAtLS0tLS0tIOWHpueQhuOCkuihjOOBhiAtLS0tLS0tXG4gICAgLy8g5pei44Gr44Oi44O844K344On44Oz44GM44GC44KM44Gw57WC5LqG44OV44Op44Kw44KS56uL44Gm44KLXG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZTogaXRlcmF0b3I8Q3ViaXNtTW90aW9uUXVldWVFbnRyeT4gPSB0aGlzLl9tb3Rpb25zLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fbW90aW9ucy5lbmQoKSk7XG5cbiAgICApIHtcbiAgICAgIGxldCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gaXRlLnB0cigpO1xuXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XG4gICAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTtcblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gLS0tLS0g57WC5LqG5riI44G/44Gu5Yem55CG44GM44GC44KM44Gw5YmK6Zmk44GZ44KLIC0tLS0tLVxuICAgICAgbW90aW9uUXVldWVFbnRyeS5yZWxlYXNlKCk7XG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gbnVsbDtcbiAgICAgIGl0ZSA9IHRoaXMuX21vdGlvbnMuZXJhc2UoaXRlKTsgLy8g5YmK6ZmkXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAgICAgKiDmjIflrprjgZfjgZ9DdWJpc21Nb3Rpb25RdWV1ZUVudHJ544Gu5Y+W5b6XXG5cbiAgICAgICAgKiBAcGFyYW0gICBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyICDjg6Ljg7zjgrfjg6fjg7Pjga7orZjliKXnlarlj7dcbiAgICAgICAgKiBAcmV0dXJuICDmjIflrprjgZfjgZ9DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5XG4gICAgICAgICogQHJldHVybiAgbnVsbCAgIOimi+OBpOOBi+OCieOBquOBi+OBo+OBn1xuICAgICAgICAqL1xuICBwdWJsaWMgZ2V0Q3ViaXNtTW90aW9uUXVldWVFbnRyeShcbiAgICBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyOiBhbnlcbiAgKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSB7XG4gICAgLy8tLS0tLS0tIOWHpueQhuOCkuihjOOBhiAtLS0tLS0tXG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+ID0gdGhpcy5fbW90aW9ucy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpO1xuICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICBjb25zdCBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5ID0gaXRlLnB0cigpO1xuXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobW90aW9uUXVldWVFbnRyeS5fbW90aW9uUXVldWVFbnRyeUhhbmRsZSA9PSBtb3Rpb25RdWV1ZUVudHJ5TnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBtb3Rpb25RdWV1ZUVudHJ5O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOOCkuWPl+OBkeWPluOCi0NhbGxiYWNr44Gu55m76YyyXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFjayDjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICogQHBhcmFtIGN1c3RvbURhdGEg44Kz44O844Or44OQ44OD44Kv44Gr6L+U44GV44KM44KL44OH44O844K/XG4gICAqL1xuICBwdWJsaWMgc2V0RXZlbnRDYWxsYmFjayhcbiAgICBjYWxsYmFjazogQ3ViaXNtTW90aW9uRXZlbnRGdW5jdGlvbixcbiAgICBjdXN0b21EYXRhOiBhbnkgPSBudWxsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuX2V2ZW50Q2FsbEJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLl9ldmVudEN1c3RvbURhdGEgPSBjdXN0b21EYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+OCkuabtOaWsOOBl+OBpuOAgeODouODh+ODq+OBq+ODkeODqeODoeODvOOCv+WApOOCkuWPjeaYoOOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gICBtb2RlbCAgIOWvvuixoeOBruODouODh+ODq1xuICAgKiBAcGFyYW0gICB1c2VyVGltZVNlY29uZHMgICDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuICAgKiBAcmV0dXJuICB0cnVlICAgIOODouODh+ODq+OBuOODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBguOCilxuICAgKiBAcmV0dXJuICBmYWxzZSAgIOODouODh+ODq+OBuOODkeODqeODoeODvOOCv+WApOOBruWPjeaYoOOBquOBlyjjg6Ljg7zjgrfjg6fjg7Pjga7lpInljJbjgarjgZcpXG4gICAqL1xuICBwdWJsaWMgZG9VcGRhdGVNb3Rpb24obW9kZWw6IEN1YmlzbU1vZGVsLCB1c2VyVGltZVNlY29uZHM6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGxldCB1cGRhdGVkID0gZmFsc2U7XG5cbiAgICAvLyAtLS0tLS0tIOWHpueQhuOCkuihjOOBhiAtLS0tLS0tLVxuICAgIC8vIOaXouOBq+ODouODvOOCt+ODp+ODs+OBjOOBguOCjOOBsOe1guS6huODleODqeOCsOOCkueri+OBpuOCi1xuXG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPEN1YmlzbU1vdGlvblF1ZXVlRW50cnk+ID0gdGhpcy5fbW90aW9ucy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX21vdGlvbnMuZW5kKCkpO1xuXG4gICAgKSB7XG4gICAgICBsZXQgbW90aW9uUXVldWVFbnRyeTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGl0ZS5wdHIoKTtcblxuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkgPT0gbnVsbCkge1xuICAgICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7IC8vIOWJiumZpFxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbW90aW9uOiBBQ3ViaXNtTW90aW9uID0gbW90aW9uUXVldWVFbnRyeS5fbW90aW9uO1xuXG4gICAgICBpZiAobW90aW9uID09IG51bGwpIHtcbiAgICAgICAgbW90aW9uUXVldWVFbnRyeS5yZWxlYXNlKCk7XG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkgPSBudWxsO1xuICAgICAgICBpdGUgPSB0aGlzLl9tb3Rpb25zLmVyYXNlKGl0ZSk7IC8vIOWJiumZpFxuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyAtLS0tLS0g5YCk44KS5Y+N5pig44GZ44KLIC0tLS0tLVxuICAgICAgbW90aW9uLnVwZGF0ZVBhcmFtZXRlcnMobW9kZWwsIG1vdGlvblF1ZXVlRW50cnksIHVzZXJUaW1lU2Vjb25kcyk7XG4gICAgICB1cGRhdGVkID0gdHJ1ZTtcblxuICAgICAgLy8gLS0tLS0tIOODpuODvOOCtuODiOODquOCrOODvOOCpOODmeODs+ODiOOCkuaknOafu+OBmeOCiyAtLS0tXG4gICAgICBjb25zdCBmaXJlZExpc3Q6IGNzbVZlY3Rvcjxjc21TdHJpbmc+ID0gbW90aW9uLmdldEZpcmVkRXZlbnQoXG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkuZ2V0TGFzdENoZWNrRXZlbnRTZWNvbmRzKCkgLVxuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuZ2V0U3RhcnRUaW1lKCksXG4gICAgICAgIHVzZXJUaW1lU2Vjb25kcyAtIG1vdGlvblF1ZXVlRW50cnkuZ2V0U3RhcnRUaW1lKClcbiAgICAgICk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlyZWRMaXN0LmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50Q2FsbEJhY2sodGhpcywgZmlyZWRMaXN0LmF0KGkpLCB0aGlzLl9ldmVudEN1c3RvbURhdGEpO1xuICAgICAgfVxuXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldExhc3RDaGVja0V2ZW50U2Vjb25kcyh1c2VyVGltZVNlY29uZHMpO1xuXG4gICAgICAvLyAtLS0tLS0g57WC5LqG5riI44G/44Gu5Yem55CG44GM44GC44KM44Gw5YmK6Zmk44GZ44KLIC0tLS0tLVxuICAgICAgaWYgKG1vdGlvblF1ZXVlRW50cnkuaXNGaW5pc2hlZCgpKSB7XG4gICAgICAgIG1vdGlvblF1ZXVlRW50cnkucmVsZWFzZSgpO1xuICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5ID0gbnVsbDtcbiAgICAgICAgaXRlID0gdGhpcy5fbW90aW9ucy5lcmFzZShpdGUpOyAvLyDliYrpmaRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChtb3Rpb25RdWV1ZUVudHJ5LmlzVHJpZ2dlcmVkRmFkZU91dCgpKSB7XG4gICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zdGFydEZhZGVPdXQoXG4gICAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LmdldEZhZGVPdXRTZWNvbmRzKCksXG4gICAgICAgICAgICB1c2VyVGltZVNlY29uZHNcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlZDtcbiAgfVxuICBfdXNlclRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXG5cbiAgX21vdGlvbnM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5PjsgLy8g44Oi44O844K344On44OzXG4gIF9ldmVudENhbGxCYWNrOiBDdWJpc21Nb3Rpb25FdmVudEZ1bmN0aW9uOyAvLyDjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgX2V2ZW50Q3VzdG9tRGF0YTogYW55OyAvLyDjgrPjg7zjg6vjg5Djg4Pjgq/jgavmiLvjgZXjgozjgovjg4fjg7zjgr9cbn1cblxuLyoqXG4gKiDjgqTjg5njg7Pjg4jjga7jgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDjgpLlrprnvqlcbiAqXG4gKiDjgqTjg5njg7Pjg4jjga7jgrPjg7zjg6vjg5Djg4Pjgq/jgavnmbvpjLLjgafjgY3jgovplqLmlbDjga7lnovmg4XloLFcbiAqIEBwYXJhbSBjYWxsZXIgICAgICAgIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOCkuWGjeeUn+OBleOBm+OBn0N1YmlzbU1vdGlvblF1ZXVlTWFuYWdlclxuICogQHBhcmFtIGV2ZW50VmFsdWUgICAg55m654Gr44GX44Gf44Kk44OZ44Oz44OI44Gu5paH5a2X5YiX44OH44O844K/XG4gKiBAcGFyYW0gY3VzdG9tRGF0YSAgIOOCs+ODvOODq+ODkOODg+OCr+OBq+i/lOOBleOCjOOCi+eZu+mMsuaZguOBq+aMh+WumuOBleOCjOOBn+ODh+ODvOOCv1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEN1YmlzbU1vdGlvbkV2ZW50RnVuY3Rpb24ge1xuICAoXG4gICAgY2FsbGVyOiBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIsXG4gICAgZXZlbnRWYWx1ZTogY3NtU3RyaW5nLFxuICAgIGN1c3RvbURhdGE6IGFueVxuICApOiB2b2lkO1xufVxuXG4vKipcbiAqIOODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt1xuICpcbiAqIOODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OBruWumue+qVxuICovXG5leHBvcnQgZGVjbGFyZSB0eXBlIEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUgPSBhbnk7XG5leHBvcnQgY29uc3QgSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSA9XG4gIC0xO1xuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciA9ICQuQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyO1xuICBleHBvcnQgdHlwZSBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIgPSAkLkN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcjtcbiAgZXhwb3J0IGNvbnN0IEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWUgPVxuICAgICQuSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSA9ICQuQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtTW90aW9uRXZlbnRGdW5jdGlvbiA9ICQuQ3ViaXNtTW90aW9uRXZlbnRGdW5jdGlvbjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbU1hdGggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdGgnO1xuaW1wb3J0IHsgQ3ViaXNtVmVjdG9yMiB9IGZyb20gJy4uL21hdGgvY3ViaXNtdmVjdG9yMic7XG5pbXBvcnQgeyBjc21WZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcbmltcG9ydCB7XG4gIEN1YmlzbVBoeXNpY3NJbnB1dCxcbiAgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gIEN1YmlzbVBoeXNpY3NPdXRwdXQsXG4gIEN1YmlzbVBoeXNpY3NQYXJ0aWNsZSxcbiAgQ3ViaXNtUGh5c2ljc1JpZyxcbiAgQ3ViaXNtUGh5c2ljc1NvdXJjZSxcbiAgQ3ViaXNtUGh5c2ljc1N1YlJpZyxcbiAgQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGUsXG59IGZyb20gJy4vY3ViaXNtcGh5c2ljc2ludGVybmFsJztcbmltcG9ydCB7IEN1YmlzbVBoeXNpY3NKc29uIH0gZnJvbSAnLi9jdWJpc21waHlzaWNzanNvbic7XG5cbi8vIHBoeXNpY3MgdHlwZXMgdGFncy5cbmNvbnN0IFBoeXNpY3NUeXBlVGFnWCA9ICdYJztcbmNvbnN0IFBoeXNpY3NUeXBlVGFnWSA9ICdZJztcbmNvbnN0IFBoeXNpY3NUeXBlVGFnQW5nbGUgPSAnQW5nbGUnO1xuXG4vLyBDb25zdGFudCBvZiBhaXIgcmVzaXN0YW5jZS5cbmNvbnN0IEFpclJlc2lzdGFuY2UgPSA1LjA7XG5cbi8vIENvbnN0YW50IG9mIG1heGltdW0gd2VpZ2h0IG9mIGlucHV0IGFuZCBvdXRwdXQgcmF0aW8uXG5jb25zdCBNYXhpbXVtV2VpZ2h0ID0gMTAwLjA7XG5cbi8vIENvbnN0YW50IG9mIHRocmVzaG9sZCBvZiBtb3ZlbWVudC5cbmNvbnN0IE1vdmVtZW50VGhyZXNob2xkID0gMC4wMDE7XG5cbi8vIENvbnN0YW50IG9mIG1heGltdW0gYWxsb3dlZCBkZWx0YSB0aW1lXG5jb25zdCBNYXhEZWx0YVRpbWUgPSA1LjA7XG5cbi8qKlxuICog54mp55CG5ryU566X44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzIHtcbiAgLyoqXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxuICAgKiBAcGFyYW0gYnVmZmVyICAgIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IEN1YmlzbVBoeXNpY3Mge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtUGh5c2ljcyA9IG5ldyBDdWJpc21QaHlzaWNzKCk7XG5cbiAgICByZXQucGFyc2UoYnVmZmVyLCBzaXplKTtcbiAgICByZXQuX3BoeXNpY3NSaWcuZ3Jhdml0eS55ID0gMDtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544KS56C05qOE44GZ44KLXG4gICAqIEBwYXJhbSBwaHlzaWNzIOegtOajhOOBmeOCi+OCpOODs+OCueOCv+ODs+OCuVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBkZWxldGUocGh5c2ljczogQ3ViaXNtUGh5c2ljcyk6IHZvaWQge1xuICAgIGlmIChwaHlzaWNzICE9IG51bGwpIHtcbiAgICAgIHBoeXNpY3MucmVsZWFzZSgpO1xuICAgICAgcGh5c2ljcyA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHBoeXNpY3MzLmpzb27jgpLjg5Hjg7zjgrnjgZnjgovjgIJcbiAgICogQHBhcmFtIHBoeXNpY3NKc29uIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgcGFyc2UocGh5c2ljc0pzb246IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9waHlzaWNzUmlnID0gbmV3IEN1YmlzbVBoeXNpY3NSaWcoKTtcblxuICAgIGxldCBqc29uOiBDdWJpc21QaHlzaWNzSnNvbiA9IG5ldyBDdWJpc21QaHlzaWNzSnNvbihwaHlzaWNzSnNvbiwgc2l6ZSk7XG5cbiAgICB0aGlzLl9waHlzaWNzUmlnLmdyYXZpdHkgPSBqc29uLmdldEdyYXZpdHkoKTtcbiAgICB0aGlzLl9waHlzaWNzUmlnLndpbmQgPSBqc29uLmdldFdpbmQoKTtcbiAgICB0aGlzLl9waHlzaWNzUmlnLnN1YlJpZ0NvdW50ID0ganNvbi5nZXRTdWJSaWdDb3VudCgpO1xuXG4gICAgdGhpcy5fcGh5c2ljc1JpZy5mcHMgPSBqc29uLmdldEZwcygpO1xuXG4gICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy51cGRhdGVTaXplKFxuICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zdWJSaWdDb3VudCxcbiAgICAgIEN1YmlzbVBoeXNpY3NTdWJSaWcsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy51cGRhdGVTaXplKFxuICAgICAganNvbi5nZXRUb3RhbElucHV0Q291bnQoKSxcbiAgICAgIEN1YmlzbVBoeXNpY3NJbnB1dCxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy51cGRhdGVTaXplKFxuICAgICAganNvbi5nZXRUb3RhbE91dHB1dENvdW50KCksXG4gICAgICBDdWJpc21QaHlzaWNzT3V0cHV0LFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMudXBkYXRlU2l6ZShcbiAgICAgIGpzb24uZ2V0VmVydGV4Q291bnQoKSxcbiAgICAgIEN1YmlzbVBoeXNpY3NQYXJ0aWNsZSxcbiAgICAgIHRydWVcbiAgICApO1xuXG4gICAgdGhpcy5fY3VycmVudFJpZ091dHB1dHMuY2xlYXIoKTtcbiAgICB0aGlzLl9wcmV2aW91c1JpZ091dHB1dHMuY2xlYXIoKTtcblxuICAgIGxldCBpbnB1dEluZGV4ID0gMCxcbiAgICAgIG91dHB1dEluZGV4ID0gMCxcbiAgICAgIHBhcnRpY2xlSW5kZXggPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm5vcm1hbGl6YXRpb25Qb3NpdGlvbi5taW5pbXVtID1cbiAgICAgICAganNvbi5nZXROb3JtYWxpemF0aW9uUG9zaXRpb25NaW5pbXVtVmFsdWUoaSk7XG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm5vcm1hbGl6YXRpb25Qb3NpdGlvbi5tYXhpbXVtID1cbiAgICAgICAganNvbi5nZXROb3JtYWxpemF0aW9uUG9zaXRpb25NYXhpbXVtVmFsdWUoaSk7XG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm5vcm1hbGl6YXRpb25Qb3NpdGlvbi5kZWZhbHV0ID1cbiAgICAgICAganNvbi5nZXROb3JtYWxpemF0aW9uUG9zaXRpb25EZWZhdWx0VmFsdWUoaSk7XG5cbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkubm9ybWFsaXphdGlvbkFuZ2xlLm1pbmltdW0gPVxuICAgICAgICBqc29uLmdldE5vcm1hbGl6YXRpb25BbmdsZU1pbmltdW1WYWx1ZShpKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkubm9ybWFsaXphdGlvbkFuZ2xlLm1heGltdW0gPVxuICAgICAgICBqc29uLmdldE5vcm1hbGl6YXRpb25BbmdsZU1heGltdW1WYWx1ZShpKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkubm9ybWFsaXphdGlvbkFuZ2xlLmRlZmFsdXQgPVxuICAgICAgICBqc29uLmdldE5vcm1hbGl6YXRpb25BbmdsZURlZmF1bHRWYWx1ZShpKTtcblxuICAgICAgLy8gSW5wdXRcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkuaW5wdXRDb3VudCA9IGpzb24uZ2V0SW5wdXRDb3VudChpKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkuYmFzZUlucHV0SW5kZXggPSBpbnB1dEluZGV4O1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkuaW5wdXRDb3VudDsgKytqKSB7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS5zb3VyY2VQYXJhbWV0ZXJJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikud2VpZ2h0ID0ganNvbi5nZXRJbnB1dFdlaWdodChcbiAgICAgICAgICBpLFxuICAgICAgICAgIGpcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnJlZmxlY3QgPVxuICAgICAgICAgIGpzb24uZ2V0SW5wdXRSZWZsZWN0KGksIGopO1xuXG4gICAgICAgIGlmIChqc29uLmdldElucHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ1gpIHtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikudHlwZSA9XG4gICAgICAgICAgICBDdWJpc21QaHlzaWNzU291cmNlLkN1YmlzbVBoeXNpY3NTb3VyY2VfWDtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChcbiAgICAgICAgICAgIGlucHV0SW5kZXggKyBqXG4gICAgICAgICAgKS5nZXROb3JtYWxpemVkUGFyYW1ldGVyVmFsdWUgPVxuICAgICAgICAgICAgZ2V0SW5wdXRUcmFuc2xhdGlvblhGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGpzb24uZ2V0SW5wdXRUeXBlKGksIGopID09IFBoeXNpY3NUeXBlVGFnWSkge1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9ZO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KFxuICAgICAgICAgICAgaW5wdXRJbmRleCArIGpcbiAgICAgICAgICApLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSA9XG4gICAgICAgICAgICBnZXRJbnB1dFRyYW5zbGF0aW9uWUZyb21Ob3JtYWxpemVkUGFyYW10ZXJWYWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChqc29uLmdldElucHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ0FuZ2xlKSB7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuYXQoaW5wdXRJbmRleCArIGopLnR5cGUgPVxuICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX0FuZ2xlO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KFxuICAgICAgICAgICAgaW5wdXRJbmRleCArIGpcbiAgICAgICAgICApLmdldE5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZSA9XG4gICAgICAgICAgICBnZXRJbnB1dEFuZ2xlRnJvbU5vcm1hbGl6ZWRQYXJhbWV0ZXJWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuaW5wdXRzLmF0KGlucHV0SW5kZXggKyBqKS5zb3VyY2UudGFyZ2V0VHlwZSA9XG4gICAgICAgICAgQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGUuQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGVfUGFyYW1ldGVyO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLmlucHV0cy5hdChpbnB1dEluZGV4ICsgaikuc291cmNlLmlkID1cbiAgICAgICAgICBqc29uLmdldElucHV0U291cmNlSWQoaSwgaik7XG4gICAgICB9XG4gICAgICBpbnB1dEluZGV4ICs9IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkuaW5wdXRDb3VudDtcblxuICAgICAgLy8gT3V0cHV0XG4gICAgICB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KGkpLm91dHB1dENvdW50ID0ganNvbi5nZXRPdXRwdXRDb3VudChpKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkuYmFzZU91dHB1dEluZGV4ID0gb3V0cHV0SW5kZXg7XG5cbiAgICAgIGNvbnN0IGN1cnJlbnRSaWdPdXRwdXQgPSBuZXcgUGh5c2ljc091dHB1dCgpO1xuICAgICAgY3VycmVudFJpZ091dHB1dC5vdXRwdXRzLnJlc2l6ZShcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5vdXRwdXRDb3VudFxuICAgICAgKTtcblxuICAgICAgY29uc3QgcHJldmlvdXNSaWdPdXRwdXQgPSBuZXcgUGh5c2ljc091dHB1dCgpO1xuICAgICAgcHJldmlvdXNSaWdPdXRwdXQub3V0cHV0cy5yZXNpemUoXG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkub3V0cHV0Q291bnRcbiAgICAgICk7XG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5vdXRwdXRDb3VudDsgKytqKSB7XG4gICAgICAgIC8vIGluaXRpYWxpemVcbiAgICAgICAgY3VycmVudFJpZ091dHB1dC5vdXRwdXRzLnNldChqLCAwLjApO1xuICAgICAgICBwcmV2aW91c1JpZ091dHB1dC5vdXRwdXRzLnNldChqLCAwLjApO1xuXG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXggPVxuICAgICAgICAgIC0xO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS52ZXJ0ZXhJbmRleCA9XG4gICAgICAgICAganNvbi5nZXRPdXRwdXRWZXJ0ZXhJbmRleChpLCBqKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuYW5nbGVTY2FsZSA9XG4gICAgICAgICAganNvbi5nZXRPdXRwdXRBbmdsZVNjYWxlKGksIGopO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS53ZWlnaHQgPVxuICAgICAgICAgIGpzb24uZ2V0T3V0cHV0V2VpZ2h0KGksIGopO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5kZXN0aW5hdGlvbi50YXJnZXRUeXBlID1cbiAgICAgICAgICBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZS5DdWJpc21QaHlzaWNzVGFyZ2V0VHlwZV9QYXJhbWV0ZXI7XG5cbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZGVzdGluYXRpb24uaWQgPVxuICAgICAgICAgIGpzb24uZ2V0T3V0cHV0RGVzdGluYXRpb25JZChpLCBqKTtcblxuICAgICAgICBpZiAoanNvbi5nZXRPdXRwdXRUeXBlKGksIGopID09IFBoeXNpY3NUeXBlVGFnWCkge1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLnR5cGUgPVxuICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX1g7XG4gICAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmF0KG91dHB1dEluZGV4ICsgaikuZ2V0VmFsdWUgPVxuICAgICAgICAgICAgZ2V0T3V0cHV0VHJhbnNsYXRpb25YO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmdldFNjYWxlID1cbiAgICAgICAgICAgIGdldE91dHB1dFNjYWxlVHJhbnNsYXRpb25YO1xuICAgICAgICB9IGVsc2UgaWYgKGpzb24uZ2V0T3V0cHV0VHlwZShpLCBqKSA9PSBQaHlzaWNzVHlwZVRhZ1kpIHtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS50eXBlID1cbiAgICAgICAgICAgIEN1YmlzbVBoeXNpY3NTb3VyY2UuQ3ViaXNtUGh5c2ljc1NvdXJjZV9ZO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmdldFZhbHVlID1cbiAgICAgICAgICAgIGdldE91dHB1dFRyYW5zbGF0aW9uWTtcbiAgICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5nZXRTY2FsZSA9XG4gICAgICAgICAgICBnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWTtcbiAgICAgICAgfSBlbHNlIGlmIChqc29uLmdldE91dHB1dFR5cGUoaSwgaikgPT0gUGh5c2ljc1R5cGVUYWdBbmdsZSkge1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLnR5cGUgPVxuICAgICAgICAgICAgQ3ViaXNtUGh5c2ljc1NvdXJjZS5DdWJpc21QaHlzaWNzU291cmNlX0FuZ2xlO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmdldFZhbHVlID1cbiAgICAgICAgICAgIGdldE91dHB1dEFuZ2xlO1xuICAgICAgICAgIHRoaXMuX3BoeXNpY3NSaWcub3V0cHV0cy5hdChvdXRwdXRJbmRleCArIGopLmdldFNjYWxlID1cbiAgICAgICAgICAgIGdldE91dHB1dFNjYWxlQW5nbGU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuYXQob3V0cHV0SW5kZXggKyBqKS5yZWZsZWN0ID1cbiAgICAgICAgICBqc29uLmdldE91dHB1dFJlZmxlY3QoaSwgaik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2N1cnJlbnRSaWdPdXRwdXRzLnB1c2hCYWNrKGN1cnJlbnRSaWdPdXRwdXQpO1xuICAgICAgdGhpcy5fcHJldmlvdXNSaWdPdXRwdXRzLnB1c2hCYWNrKHByZXZpb3VzUmlnT3V0cHV0KTtcblxuICAgICAgb3V0cHV0SW5kZXggKz0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5vdXRwdXRDb3VudDtcblxuICAgICAgLy8gUGFydGljbGVcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkucGFydGljbGVDb3VudCA9IGpzb24uZ2V0UGFydGljbGVDb3VudChpKTtcbiAgICAgIHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkuYmFzZVBhcnRpY2xlSW5kZXggPSBwYXJ0aWNsZUluZGV4O1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX3BoeXNpY3NSaWcuc2V0dGluZ3MuYXQoaSkucGFydGljbGVDb3VudDsgKytqKSB7XG4gICAgICAgIHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmF0KHBhcnRpY2xlSW5kZXggKyBqKS5tb2JpbGl0eSA9XG4gICAgICAgICAganNvbi5nZXRQYXJ0aWNsZU1vYmlsaXR5KGksIGopO1xuICAgICAgICB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5hdChwYXJ0aWNsZUluZGV4ICsgaikuZGVsYXkgPVxuICAgICAgICAgIGpzb24uZ2V0UGFydGljbGVEZWxheShpLCBqKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQocGFydGljbGVJbmRleCArIGopLmFjY2VsZXJhdGlvbiA9XG4gICAgICAgICAganNvbi5nZXRQYXJ0aWNsZUFjY2VsZXJhdGlvbihpLCBqKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQocGFydGljbGVJbmRleCArIGopLnJhZGl1cyA9XG4gICAgICAgICAganNvbi5nZXRQYXJ0aWNsZVJhZGl1cyhpLCBqKTtcbiAgICAgICAgdGhpcy5fcGh5c2ljc1JpZy5wYXJ0aWNsZXMuYXQocGFydGljbGVJbmRleCArIGopLnBvc2l0aW9uID1cbiAgICAgICAgICBqc29uLmdldFBhcnRpY2xlUG9zaXRpb24oaSwgaik7XG4gICAgICB9XG5cbiAgICAgIHBhcnRpY2xlSW5kZXggKz0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChpKS5wYXJ0aWNsZUNvdW50O1xuICAgIH1cblxuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuXG4gICAganNvbi5yZWxlYXNlKCk7XG4gICAganNvbiA9IHZvaWQgMDtcbiAgICBqc29uID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnj77lnKjjga7jg5Hjg6njg6Hjg7zjgr/lgKTjgafniannkIbmvJTnrpfjgYzlronlrprljJbjgZnjgovnirbmhYvjgpLmvJTnrpfjgZnjgovjgIJcbiAgICogQHBhcmFtIG1vZGVsIOeJqeeQhua8lOeul+OBrue1kOaenOOCkumBqeeUqOOBmeOCi+ODouODh+ODq1xuICAgKi9cbiAgcHVibGljIHN0YWJpbGl6YXRpb24obW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XG4gICAgbGV0IHRvdGFsQW5nbGU6IHsgYW5nbGU6IG51bWJlciB9O1xuICAgIGxldCB3ZWlnaHQ6IG51bWJlcjtcbiAgICBsZXQgcmFkQW5nbGU6IG51bWJlcjtcbiAgICBsZXQgb3V0cHV0VmFsdWU6IG51bWJlcjtcbiAgICBjb25zdCB0b3RhbFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoKTtcbiAgICBsZXQgY3VycmVudFNldHRpbmc6IEN1YmlzbVBoeXNpY3NTdWJSaWc7XG4gICAgbGV0IGN1cnJlbnRJbnB1dHM6IEN1YmlzbVBoeXNpY3NJbnB1dFtdO1xuICAgIGxldCBjdXJyZW50T3V0cHV0czogQ3ViaXNtUGh5c2ljc091dHB1dFtdO1xuICAgIGxldCBjdXJyZW50UGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXTtcblxuICAgIGxldCBwYXJhbWV0ZXJWYWx1ZXM6IEZsb2F0MzJBcnJheTtcbiAgICBsZXQgcGFyYW1ldGVyTWF4aW11bVZhbHVlczogRmxvYXQzMkFycmF5O1xuICAgIGxldCBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVzOiBGbG9hdDMyQXJyYXk7XG4gICAgbGV0IHBhcmFtZXRlckRlZmF1bHRWYWx1ZXM6IEZsb2F0MzJBcnJheTtcblxuICAgIHBhcmFtZXRlclZhbHVlcyA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy52YWx1ZXM7XG4gICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlcyA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5tYXhpbXVtVmFsdWVzO1xuICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZXMgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMubWluaW11bVZhbHVlcztcbiAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWVzID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLmRlZmF1bHRWYWx1ZXM7XG5cbiAgICBpZiAoKHRoaXMuX3BhcmFtZXRlckNhY2hlcz8ubGVuZ3RoID8/IDApIDwgbW9kZWwuZ2V0UGFyYW1ldGVyQ291bnQoKSkge1xuICAgICAgdGhpcy5fcGFyYW1ldGVyQ2FjaGVzID0gbmV3IEZsb2F0MzJBcnJheShtb2RlbC5nZXRQYXJhbWV0ZXJDb3VudCgpKTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMuX3BhcmFtZXRlcklucHV0Q2FjaGVzPy5sZW5ndGggPz8gMCkgPCBtb2RlbC5nZXRQYXJhbWV0ZXJDb3VudCgpKSB7XG4gICAgICB0aGlzLl9wYXJhbWV0ZXJJbnB1dENhY2hlcyA9IG5ldyBGbG9hdDMyQXJyYXkobW9kZWwuZ2V0UGFyYW1ldGVyQ291bnQoKSk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBtb2RlbC5nZXRQYXJhbWV0ZXJDb3VudCgpOyArK2opIHtcbiAgICAgIHRoaXMuX3BhcmFtZXRlckNhY2hlc1tqXSA9IHBhcmFtZXRlclZhbHVlc1tqXTtcbiAgICAgIHRoaXMuX3BhcmFtZXRlcklucHV0Q2FjaGVzW2pdID0gcGFyYW1ldGVyVmFsdWVzW2pdO1xuICAgIH1cblxuICAgIGZvciAoXG4gICAgICBsZXQgc2V0dGluZ0luZGV4ID0gMDtcbiAgICAgIHNldHRpbmdJbmRleCA8IHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQ7XG4gICAgICArK3NldHRpbmdJbmRleFxuICAgICkge1xuICAgICAgdG90YWxBbmdsZSA9IHsgYW5nbGU6IDAuMCB9O1xuICAgICAgdG90YWxUcmFuc2xhdGlvbi54ID0gMC4wO1xuICAgICAgdG90YWxUcmFuc2xhdGlvbi55ID0gMC4wO1xuICAgICAgY3VycmVudFNldHRpbmcgPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KHNldHRpbmdJbmRleCk7XG4gICAgICBjdXJyZW50SW5wdXRzID0gdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuZ2V0KFxuICAgICAgICBjdXJyZW50U2V0dGluZy5iYXNlSW5wdXRJbmRleFxuICAgICAgKTtcbiAgICAgIGN1cnJlbnRPdXRwdXRzID0gdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmdldChcbiAgICAgICAgY3VycmVudFNldHRpbmcuYmFzZU91dHB1dEluZGV4XG4gICAgICApO1xuICAgICAgY3VycmVudFBhcnRpY2xlcyA9IHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmdldChcbiAgICAgICAgY3VycmVudFNldHRpbmcuYmFzZVBhcnRpY2xlSW5kZXhcbiAgICAgICk7XG5cbiAgICAgIC8vIExvYWQgaW5wdXQgcGFyYW1ldGVyc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2V0dGluZy5pbnB1dENvdW50OyArK2kpIHtcbiAgICAgICAgd2VpZ2h0ID0gY3VycmVudElucHV0c1tpXS53ZWlnaHQgLyBNYXhpbXVtV2VpZ2h0O1xuXG4gICAgICAgIGlmIChjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4ID09IC0xKSB7XG4gICAgICAgICAgY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KFxuICAgICAgICAgICAgY3VycmVudElucHV0c1tpXS5zb3VyY2UuaWRcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudElucHV0c1tpXS5nZXROb3JtYWxpemVkUGFyYW1ldGVyVmFsdWUoXG4gICAgICAgICAgdG90YWxUcmFuc2xhdGlvbixcbiAgICAgICAgICB0b3RhbEFuZ2xlLFxuICAgICAgICAgIHBhcmFtZXRlclZhbHVlc1tjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVzW2N1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZXNbY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlc1tjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICBjdXJyZW50U2V0dGluZy5ub3JtYWxpemF0aW9uUG9zaXRpb24sXG4gICAgICAgICAgY3VycmVudFNldHRpbmcubm9ybWFsaXphdGlvbkFuZ2xlLFxuICAgICAgICAgIGN1cnJlbnRJbnB1dHNbaV0ucmVmbGVjdCxcbiAgICAgICAgICB3ZWlnaHRcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLl9wYXJhbWV0ZXJDYWNoZXNbY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0gPVxuICAgICAgICAgIHBhcmFtZXRlclZhbHVlc1tjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XTtcbiAgICAgIH1cblxuICAgICAgcmFkQW5nbGUgPSBDdWJpc21NYXRoLmRlZ3JlZXNUb1JhZGlhbigtdG90YWxBbmdsZS5hbmdsZSk7XG5cbiAgICAgIHRvdGFsVHJhbnNsYXRpb24ueCA9XG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueCAqIEN1YmlzbU1hdGguY29zKHJhZEFuZ2xlKSAtXG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueSAqIEN1YmlzbU1hdGguc2luKHJhZEFuZ2xlKTtcbiAgICAgIHRvdGFsVHJhbnNsYXRpb24ueSA9XG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueCAqIEN1YmlzbU1hdGguc2luKHJhZEFuZ2xlKSArXG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueSAqIEN1YmlzbU1hdGguY29zKHJhZEFuZ2xlKTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIHBhcnRpY2xlcyBwb3NpdGlvbi5cbiAgICAgIHVwZGF0ZVBhcnRpY2xlc0ZvclN0YWJpbGl6YXRpb24oXG4gICAgICAgIGN1cnJlbnRQYXJ0aWNsZXMsXG4gICAgICAgIGN1cnJlbnRTZXR0aW5nLnBhcnRpY2xlQ291bnQsXG4gICAgICAgIHRvdGFsVHJhbnNsYXRpb24sXG4gICAgICAgIHRvdGFsQW5nbGUuYW5nbGUsXG4gICAgICAgIHRoaXMuX29wdGlvbnMud2luZCxcbiAgICAgICAgTW92ZW1lbnRUaHJlc2hvbGQgKiBjdXJyZW50U2V0dGluZy5ub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bVxuICAgICAgKTtcblxuICAgICAgLy8gVXBkYXRlIG91dHB1dCBwYXJhbWV0ZXJzLlxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2V0dGluZy5vdXRwdXRDb3VudDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHBhcnRpY2xlSW5kZXggPSBjdXJyZW50T3V0cHV0c1tpXS52ZXJ0ZXhJbmRleDtcblxuICAgICAgICBpZiAoY3VycmVudE91dHB1dHNbaV0uZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xuICAgICAgICAgIGN1cnJlbnRPdXRwdXRzW2ldLmRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXggPSBtb2RlbC5nZXRQYXJhbWV0ZXJJbmRleChcbiAgICAgICAgICAgIGN1cnJlbnRPdXRwdXRzW2ldLmRlc3RpbmF0aW9uLmlkXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwYXJ0aWNsZUluZGV4IDwgMSB8fFxuICAgICAgICAgIHBhcnRpY2xlSW5kZXggPj0gY3VycmVudFNldHRpbmcucGFydGljbGVDb3VudFxuICAgICAgICApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0cmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKCk7XG4gICAgICAgIHRyYW5zbGF0aW9uID0gY3VycmVudFBhcnRpY2xlc1twYXJ0aWNsZUluZGV4XS5wb3NpdGlvbi5zdWJzdHJhY3QoXG4gICAgICAgICAgY3VycmVudFBhcnRpY2xlc1twYXJ0aWNsZUluZGV4IC0gMV0ucG9zaXRpb25cbiAgICAgICAgKTtcblxuICAgICAgICBvdXRwdXRWYWx1ZSA9IGN1cnJlbnRPdXRwdXRzW2ldLmdldFZhbHVlKFxuICAgICAgICAgIHRyYW5zbGF0aW9uLFxuICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXMsXG4gICAgICAgICAgcGFydGljbGVJbmRleCxcbiAgICAgICAgICBjdXJyZW50T3V0cHV0c1tpXS5yZWZsZWN0LFxuICAgICAgICAgIHRoaXMuX29wdGlvbnMuZ3Jhdml0eVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuX2N1cnJlbnRSaWdPdXRwdXRzLmF0KHNldHRpbmdJbmRleCkub3V0cHV0cy5zZXQoaSwgb3V0cHV0VmFsdWUpO1xuICAgICAgICB0aGlzLl9wcmV2aW91c1JpZ091dHB1dHMuYXQoc2V0dGluZ0luZGV4KS5vdXRwdXRzLnNldChpLCBvdXRwdXRWYWx1ZSk7XG5cbiAgICAgICAgY29uc3QgZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDogbnVtYmVyID1cbiAgICAgICAgICBjdXJyZW50T3V0cHV0c1tpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4O1xuXG4gICAgICAgIGNvbnN0IG91dFBhcmFtZXRlckNhY2hlczogRmxvYXQzMkFycmF5ID1cbiAgICAgICAgICAhRmxvYXQzMkFycmF5LnByb3RvdHlwZS5zbGljZSAmJiAnc3ViYXJyYXknIGluIEZsb2F0MzJBcnJheS5wcm90b3R5cGVcbiAgICAgICAgICAgID8gSlNPTi5wYXJzZShcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICAgIHBhcmFtZXRlclZhbHVlcy5zdWJhcnJheShkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKSAvLyDlgKTmuKHjgZfjgZnjgovjgZ/jgoHjgIFKU09OLnBhcnNlLCBKU09OLnN0cmluZ2lmeVxuICAgICAgICAgICAgOiBwYXJhbWV0ZXJWYWx1ZXMuc2xpY2UoZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCk7XG5cbiAgICAgICAgdXBkYXRlT3V0cHV0UGFyYW1ldGVyVmFsdWUoXG4gICAgICAgICAgb3V0UGFyYW1ldGVyQ2FjaGVzLFxuICAgICAgICAgIHBhcmFtZXRlck1pbmltdW1WYWx1ZXNbZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlc1tkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICBvdXRwdXRWYWx1ZSxcbiAgICAgICAgICBjdXJyZW50T3V0cHV0c1tpXVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIOWApOOCkuWPjeaYoFxuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBvZmZzZXQ6IG51bWJlciA9IGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXgsIG91dFBhcmFtSW5kZXggPSAwO1xuICAgICAgICAgIG9mZnNldCA8IHRoaXMuX3BhcmFtZXRlckNhY2hlcy5sZW5ndGg7XG4gICAgICAgICAgb2Zmc2V0KyssIG91dFBhcmFtSW5kZXgrK1xuICAgICAgICApIHtcbiAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZXNbb2Zmc2V0XSA9IHRoaXMuX3BhcmFtZXRlckNhY2hlc1tvZmZzZXRdID1cbiAgICAgICAgICAgIG91dFBhcmFtZXRlckNhY2hlc1tvdXRQYXJhbUluZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfjga7oqZXkvqFcbiAgICpcbiAgICogUGVuZHVsdW0gaW50ZXJwb2xhdGlvbiB3ZWlnaHRzXG4gICAqXG4gICAqIOaMr+OCiuWtkOOBruioiOeul+e1kOaenOOBr+S/neWtmOOBleOCjOOAgeODkeODqeODoeODvOOCv+OBuOOBruWHuuWKm+OBr+S/neWtmOOBleOCjOOBn+WJjeWbnuOBrue1kOaenOOBp+ijnOmWk+OBleOCjOOBvuOBmeOAglxuICAgKiBUaGUgcmVzdWx0IG9mIHRoZSBwZW5kdWx1bSBjYWxjdWxhdGlvbiBpcyBzYXZlZCBhbmRcbiAgICogdGhlIG91dHB1dCB0byB0aGUgcGFyYW1ldGVycyBpcyBpbnRlcnBvbGF0ZWQgd2l0aCB0aGUgc2F2ZWQgcHJldmlvdXMgcmVzdWx0IG9mIHRoZSBwZW5kdWx1bSBjYWxjdWxhdGlvbi5cbiAgICpcbiAgICog5Zuz44Gn56S644GZ44GoWzFd44GoWzJd44Gn6KOc6ZaT44GV44KM44G+44GZ44CCXG4gICAqIFRoZSBmaWd1cmUgc2hvd3MgdGhlIGludGVycG9sYXRpb24gYmV0d2VlbiBbMV0gYW5kIFsyXS5cbiAgICpcbiAgICog6KOc6ZaT44Gu6YeN44G/44Gv5pyA5paw44Gu5oyv44KK5a2Q6KiI566X44K/44Kk44Of44Oz44Kw44Go5qyh5Zue44Gu44K/44Kk44Of44Oz44Kw44Gu6ZaT44Gn6KaL44Gf54++5Zyo5pmC6ZaT44Gn5rG65a6a44GZ44KL44CCXG4gICAqIFRoZSB3ZWlnaHQgb2YgdGhlIGludGVycG9sYXRpb24gYXJlIGRldGVybWluZWQgYnkgdGhlIGN1cnJlbnQgdGltZSBzZWVuIGJldHdlZW5cbiAgICogdGhlIGxhdGVzdCBwZW5kdWx1bSBjYWxjdWxhdGlvbiB0aW1pbmcgYW5kIHRoZSBuZXh0IHRpbWluZy5cbiAgICpcbiAgICog5Zuz44Gn56S644GZ44GoWzJd44GoWzRd44Gu6ZaT44Gn44G/44GfKDMp44Gu5L2N572u44Gu6YeN44G/44Gr44Gq44KL44CCXG4gICAqIEZpZ3VyZSBzaG93cyB0aGUgd2VpZ2h0IG9mIHBvc2l0aW9uICgzKSBhcyBzZWVuIGJldHdlZW4gWzJdIGFuZCBbNF0uXG4gICAqXG4gICAqIOino+mHiOOBqOOBl+OBpuaMr+OCiuWtkOioiOeul+OBruOCv+OCpOODn+ODs+OCsOOBqOmHjeOBv+ioiOeul+OBruOCv+OCpOODn+ODs+OCsOOBjOOCuuODrOOCi+OAglxuICAgKiBBcyBhbiBpbnRlcnByZXRhdGlvbiwgdGhlIHBlbmR1bHVtIGNhbGN1bGF0aW9uIGFuZCB3ZWlnaHRzIGFyZSBtaXNhbGlnbmVkLlxuICAgKlxuICAgKiBwaHlzaWNzMy5qc29u44GrRlBT5oOF5aCx44GM5a2Y5Zyo44GX44Gq44GE5aC05ZCI44Gv5bi444Gr5YmN44Gu5oyv44KK5a2Q54q25oWL44Gn6Kit5a6a44GV44KM44KL44CCXG4gICAqIElmIHRoZXJlIGlzIG5vIEZQUyBpbmZvcm1hdGlvbiBpbiBwaHlzaWNzMy5qc29uLCBpdCBpcyBhbHdheXMgc2V0IGluIHRoZSBwcmV2aW91cyBwZW5kdWx1bSBzdGF0ZS5cbiAgICpcbiAgICog44GT44Gu5LuV5qeY44Gv6KOc6ZaT56+E5Zuy44KS6YC46ISx44GX44Gf44GT44Go44GM5Y6f5Zug44Gu6ZyH44GI44Gf44KI44GG44Gq6KaL44Gf55uu44KS5Zue6YG/44KS55uu55qE44Gr44GX44Gm44GE44KL44CCXG4gICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgc3BlY2lmaWNhdGlvbiBpcyB0byBhdm9pZCB0aGUgcXVpdmVyaW5nIGFwcGVhcmFuY2UgY2F1c2VkIGJ5IGRldmlhdGlvbnMgZnJvbSB0aGUgaW50ZXJwb2xhdGlvbiByYW5nZS5cbiAgICpcbiAgICogLS0tLS0tLS0tLS0tIHRpbWUgLS0tLS0tLS0tLS0tLS0+XG4gICAqXG4gICAqICAgICAgICAgICAgICAgICB8KysrKyt8LS0tLS0tfCA8LSB3ZWlnaHRcbiAgICogPT1bMV09PT09Iz09PT09WzJdLS0tKDMpLS0tLSg0KVxuICAgKiAgICAgICAgICBeIG91dHB1dCBjb250ZW50c1xuICAgKlxuICAgKiAxOl9wcmV2aW91c1JpZ091dHB1dHNcbiAgICogMjpfY3VycmVudFJpZ091dHB1dHNcbiAgICogMzpfY3VycmVudFJlbWFpblRpbWUgKG5vdyByZW5kZXJpbmcpXG4gICAqIDQ6bmV4dCBwYXJ0aWNsZXMgdGltaW5nXG4gICAqIEBwYXJhbSBtb2RlbCDniannkIbmvJTnrpfjga7ntZDmnpzjgpLpgannlKjjgZnjgovjg6Ljg4fjg6tcbiAgICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMg44OH44Or44K/5pmC6ZaTW+enkl1cbiAgICovXG4gIHB1YmxpYyBldmFsdWF0ZShtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IHZvaWQge1xuICAgIGxldCB0b3RhbEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfTtcbiAgICBsZXQgd2VpZ2h0OiBudW1iZXI7XG4gICAgbGV0IHJhZEFuZ2xlOiBudW1iZXI7XG4gICAgbGV0IG91dHB1dFZhbHVlOiBudW1iZXI7XG4gICAgY29uc3QgdG90YWxUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKCk7XG4gICAgbGV0IGN1cnJlbnRTZXR0aW5nOiBDdWJpc21QaHlzaWNzU3ViUmlnO1xuICAgIGxldCBjdXJyZW50SW5wdXRzOiBDdWJpc21QaHlzaWNzSW5wdXRbXTtcbiAgICBsZXQgY3VycmVudE91dHB1dHM6IEN1YmlzbVBoeXNpY3NPdXRwdXRbXTtcbiAgICBsZXQgY3VycmVudFBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW107XG5cbiAgICBpZiAoMC4wID49IGRlbHRhVGltZVNlY29uZHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcGFyYW1ldGVyVmFsdWVzOiBGbG9hdDMyQXJyYXk7XG4gICAgbGV0IHBhcmFtZXRlck1heGltdW1WYWx1ZXM6IEZsb2F0MzJBcnJheTtcbiAgICBsZXQgcGFyYW1ldGVyTWluaW11bVZhbHVlczogRmxvYXQzMkFycmF5O1xuICAgIGxldCBwYXJhbWV0ZXJEZWZhdWx0VmFsdWVzOiBGbG9hdDMyQXJyYXk7XG5cbiAgICBsZXQgcGh5c2ljc0RlbHRhVGltZTogbnVtYmVyO1xuICAgIHRoaXMuX2N1cnJlbnRSZW1haW5UaW1lICs9IGRlbHRhVGltZVNlY29uZHM7XG4gICAgaWYgKHRoaXMuX2N1cnJlbnRSZW1haW5UaW1lID4gTWF4RGVsdGFUaW1lKSB7XG4gICAgICB0aGlzLl9jdXJyZW50UmVtYWluVGltZSA9IDAuMDtcbiAgICB9XG5cbiAgICBwYXJhbWV0ZXJWYWx1ZXMgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMudmFsdWVzO1xuICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZXMgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlcztcbiAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVzID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLm1pbmltdW1WYWx1ZXM7XG4gICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlcyA9IG1vZGVsLmdldE1vZGVsKCkucGFyYW1ldGVycy5kZWZhdWx0VmFsdWVzO1xuXG4gICAgaWYgKCh0aGlzLl9wYXJhbWV0ZXJDYWNoZXM/Lmxlbmd0aCA/PyAwKSA8IG1vZGVsLmdldFBhcmFtZXRlckNvdW50KCkpIHtcbiAgICAgIHRoaXMuX3BhcmFtZXRlckNhY2hlcyA9IG5ldyBGbG9hdDMyQXJyYXkobW9kZWwuZ2V0UGFyYW1ldGVyQ291bnQoKSk7XG4gICAgfVxuXG4gICAgaWYgKCh0aGlzLl9wYXJhbWV0ZXJJbnB1dENhY2hlcz8ubGVuZ3RoID8/IDApIDwgbW9kZWwuZ2V0UGFyYW1ldGVyQ291bnQoKSkge1xuICAgICAgdGhpcy5fcGFyYW1ldGVySW5wdXRDYWNoZXMgPSBuZXcgRmxvYXQzMkFycmF5KG1vZGVsLmdldFBhcmFtZXRlckNvdW50KCkpO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBtb2RlbC5nZXRQYXJhbWV0ZXJDb3VudCgpOyArK2opIHtcbiAgICAgICAgdGhpcy5fcGFyYW1ldGVySW5wdXRDYWNoZXNbal0gPSBwYXJhbWV0ZXJWYWx1ZXNbal07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BoeXNpY3NSaWcuZnBzID4gMC4wKSB7XG4gICAgICBwaHlzaWNzRGVsdGFUaW1lID0gMS4wIC8gdGhpcy5fcGh5c2ljc1JpZy5mcHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBoeXNpY3NEZWx0YVRpbWUgPSBkZWx0YVRpbWVTZWNvbmRzO1xuICAgIH1cblxuICAgIHdoaWxlICh0aGlzLl9jdXJyZW50UmVtYWluVGltZSA+PSBwaHlzaWNzRGVsdGFUaW1lKSB7XG4gICAgICAvLyBjb3B5UmlnT3V0cHV0cyBfY3VycmVudFJpZ091dHB1dHMgdG8gX3ByZXZpb3VzUmlnT3V0cHV0c1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IHNldHRpbmdJbmRleCA9IDA7XG4gICAgICAgIHNldHRpbmdJbmRleCA8IHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQ7XG4gICAgICAgICsrc2V0dGluZ0luZGV4XG4gICAgICApIHtcbiAgICAgICAgY3VycmVudFNldHRpbmcgPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KHNldHRpbmdJbmRleCk7XG4gICAgICAgIGN1cnJlbnRPdXRwdXRzID0gdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmdldChcbiAgICAgICAgICBjdXJyZW50U2V0dGluZy5iYXNlT3V0cHV0SW5kZXhcbiAgICAgICAgKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U2V0dGluZy5vdXRwdXRDb3VudDsgKytpKSB7XG4gICAgICAgICAgdGhpcy5fcHJldmlvdXNSaWdPdXRwdXRzXG4gICAgICAgICAgICAuYXQoc2V0dGluZ0luZGV4KVxuICAgICAgICAgICAgLm91dHB1dHMuc2V0KFxuICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50UmlnT3V0cHV0cy5hdChzZXR0aW5nSW5kZXgpLm91dHB1dHMuYXQoaSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8g5YWl5Yqb44Kt44Oj44OD44K344Ol44Go44OR44Op44Oh44O844K/44Gn57ea5b2i6KOc6ZaT44GX44GmVXBkYXRlUGFydGljbGVz44GZ44KL44K/44Kk44Of44Oz44Kw44Gn44Gu5YWl5Yqb44KS6KiI566X44GZ44KL44CCXG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIGlucHV0IGF0IHRoZSB0aW1pbmcgdG8gVXBkYXRlUGFydGljbGVzIGJ5IGxpbmVhciBpbnRlcnBvbGF0aW9uIHdpdGggdGhlIF9wYXJhbWV0ZXJJbnB1dENhY2hlIGFuZCBwYXJhbWV0ZXJWYWx1ZS5cbiAgICAgIC8vIF9wYXJhbWV0ZXJDYWNoZeOBr+OCsOODq+ODvOODl+mWk+OBp+OBruWApOOBruS8neaQrOOBruW9ueWJsuOBjOOBguOCi+OBruOBp19wYXJhbWV0ZXJJbnB1dENhY2hl44Go44Gu5YiG6Zui44GM5b+F6KaB44CCXG4gICAgICAvLyBfcGFyYW1ldGVyQ2FjaGUgbmVlZHMgdG8gYmUgc2VwYXJhdGVkIGZyb20gX3BhcmFtZXRlcklucHV0Q2FjaGUgYmVjYXVzZSBvZiBpdHMgcm9sZSBpbiBwcm9wYWdhdGluZyB2YWx1ZXMgYmV0d2VlbiBncm91cHMuXG4gICAgICBjb25zdCBpbnB1dFdlaWdodCA9IHBoeXNpY3NEZWx0YVRpbWUgLyB0aGlzLl9jdXJyZW50UmVtYWluVGltZTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbW9kZWwuZ2V0UGFyYW1ldGVyQ291bnQoKTsgKytqKSB7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlckNhY2hlc1tqXSA9XG4gICAgICAgICAgdGhpcy5fcGFyYW1ldGVySW5wdXRDYWNoZXNbal0gKiAoMS4wIC0gaW5wdXRXZWlnaHQpICtcbiAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZXNbal0gKiBpbnB1dFdlaWdodDtcbiAgICAgICAgdGhpcy5fcGFyYW1ldGVySW5wdXRDYWNoZXNbal0gPSB0aGlzLl9wYXJhbWV0ZXJDYWNoZXNbal07XG4gICAgICB9XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBzZXR0aW5nSW5kZXggPSAwO1xuICAgICAgICBzZXR0aW5nSW5kZXggPCB0aGlzLl9waHlzaWNzUmlnLnN1YlJpZ0NvdW50O1xuICAgICAgICArK3NldHRpbmdJbmRleFxuICAgICAgKSB7XG4gICAgICAgIHRvdGFsQW5nbGUgPSB7IGFuZ2xlOiAwLjAgfTtcbiAgICAgICAgdG90YWxUcmFuc2xhdGlvbi54ID0gMC4wO1xuICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnkgPSAwLjA7XG4gICAgICAgIGN1cnJlbnRTZXR0aW5nID0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChzZXR0aW5nSW5kZXgpO1xuICAgICAgICBjdXJyZW50SW5wdXRzID0gdGhpcy5fcGh5c2ljc1JpZy5pbnB1dHMuZ2V0KFxuICAgICAgICAgIGN1cnJlbnRTZXR0aW5nLmJhc2VJbnB1dEluZGV4XG4gICAgICAgICk7XG4gICAgICAgIGN1cnJlbnRPdXRwdXRzID0gdGhpcy5fcGh5c2ljc1JpZy5vdXRwdXRzLmdldChcbiAgICAgICAgICBjdXJyZW50U2V0dGluZy5iYXNlT3V0cHV0SW5kZXhcbiAgICAgICAgKTtcbiAgICAgICAgY3VycmVudFBhcnRpY2xlcyA9IHRoaXMuX3BoeXNpY3NSaWcucGFydGljbGVzLmdldChcbiAgICAgICAgICBjdXJyZW50U2V0dGluZy5iYXNlUGFydGljbGVJbmRleFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIExvYWQgaW5wdXQgcGFyYW1ldGVyc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRTZXR0aW5nLmlucHV0Q291bnQ7ICsraSkge1xuICAgICAgICAgIHdlaWdodCA9IGN1cnJlbnRJbnB1dHNbaV0ud2VpZ2h0IC8gTWF4aW11bVdlaWdodDtcblxuICAgICAgICAgIGlmIChjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4ID09IC0xKSB7XG4gICAgICAgICAgICBjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4ID0gbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoXG4gICAgICAgICAgICAgIGN1cnJlbnRJbnB1dHNbaV0uc291cmNlLmlkXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnRJbnB1dHNbaV0uZ2V0Tm9ybWFsaXplZFBhcmFtZXRlclZhbHVlKFxuICAgICAgICAgICAgdG90YWxUcmFuc2xhdGlvbixcbiAgICAgICAgICAgIHRvdGFsQW5nbGUsXG4gICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJDYWNoZXNbY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVzW2N1cnJlbnRJbnB1dHNbaV0uc291cmNlUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlc1tjdXJyZW50SW5wdXRzW2ldLnNvdXJjZVBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZXNbY3VycmVudElucHV0c1tpXS5zb3VyY2VQYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50U2V0dGluZy5ub3JtYWxpemF0aW9uUG9zaXRpb24sXG4gICAgICAgICAgICBjdXJyZW50U2V0dGluZy5ub3JtYWxpemF0aW9uQW5nbGUsXG4gICAgICAgICAgICBjdXJyZW50SW5wdXRzW2ldLnJlZmxlY3QsXG4gICAgICAgICAgICB3ZWlnaHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmFkQW5nbGUgPSBDdWJpc21NYXRoLmRlZ3JlZXNUb1JhZGlhbigtdG90YWxBbmdsZS5hbmdsZSk7XG5cbiAgICAgICAgdG90YWxUcmFuc2xhdGlvbi54ID1cbiAgICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnggKiBDdWJpc21NYXRoLmNvcyhyYWRBbmdsZSkgLVxuICAgICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueSAqIEN1YmlzbU1hdGguc2luKHJhZEFuZ2xlKTtcbiAgICAgICAgdG90YWxUcmFuc2xhdGlvbi55ID1cbiAgICAgICAgICB0b3RhbFRyYW5zbGF0aW9uLnggKiBDdWJpc21NYXRoLnNpbihyYWRBbmdsZSkgK1xuICAgICAgICAgIHRvdGFsVHJhbnNsYXRpb24ueSAqIEN1YmlzbU1hdGguY29zKHJhZEFuZ2xlKTtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgcGFydGljbGVzIHBvc2l0aW9uLlxuICAgICAgICB1cGRhdGVQYXJ0aWNsZXMoXG4gICAgICAgICAgY3VycmVudFBhcnRpY2xlcyxcbiAgICAgICAgICBjdXJyZW50U2V0dGluZy5wYXJ0aWNsZUNvdW50LFxuICAgICAgICAgIHRvdGFsVHJhbnNsYXRpb24sXG4gICAgICAgICAgdG90YWxBbmdsZS5hbmdsZSxcbiAgICAgICAgICB0aGlzLl9vcHRpb25zLndpbmQsXG4gICAgICAgICAgTW92ZW1lbnRUaHJlc2hvbGQgKiBjdXJyZW50U2V0dGluZy5ub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSxcbiAgICAgICAgICBwaHlzaWNzRGVsdGFUaW1lLFxuICAgICAgICAgIEFpclJlc2lzdGFuY2VcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBVcGRhdGUgb3V0cHV0IHBhcmFtZXRlcnMuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFNldHRpbmcub3V0cHV0Q291bnQ7ICsraSkge1xuICAgICAgICAgIGNvbnN0IHBhcnRpY2xlSW5kZXggPSBjdXJyZW50T3V0cHV0c1tpXS52ZXJ0ZXhJbmRleDtcblxuICAgICAgICAgIGlmIChjdXJyZW50T3V0cHV0c1tpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID09IC0xKSB7XG4gICAgICAgICAgICBjdXJyZW50T3V0cHV0c1tpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4ID1cbiAgICAgICAgICAgICAgbW9kZWwuZ2V0UGFyYW1ldGVySW5kZXgoY3VycmVudE91dHB1dHNbaV0uZGVzdGluYXRpb24uaWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHBhcnRpY2xlSW5kZXggPCAxIHx8XG4gICAgICAgICAgICBwYXJ0aWNsZUluZGV4ID49IGN1cnJlbnRTZXR0aW5nLnBhcnRpY2xlQ291bnRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoKTtcbiAgICAgICAgICB0cmFuc2xhdGlvbi54ID1cbiAgICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXNbcGFydGljbGVJbmRleF0ucG9zaXRpb24ueCAtXG4gICAgICAgICAgICBjdXJyZW50UGFydGljbGVzW3BhcnRpY2xlSW5kZXggLSAxXS5wb3NpdGlvbi54O1xuICAgICAgICAgIHRyYW5zbGF0aW9uLnkgPVxuICAgICAgICAgICAgY3VycmVudFBhcnRpY2xlc1twYXJ0aWNsZUluZGV4XS5wb3NpdGlvbi55IC1cbiAgICAgICAgICAgIGN1cnJlbnRQYXJ0aWNsZXNbcGFydGljbGVJbmRleCAtIDFdLnBvc2l0aW9uLnk7XG5cbiAgICAgICAgICBvdXRwdXRWYWx1ZSA9IGN1cnJlbnRPdXRwdXRzW2ldLmdldFZhbHVlKFxuICAgICAgICAgICAgdHJhbnNsYXRpb24sXG4gICAgICAgICAgICBjdXJyZW50UGFydGljbGVzLFxuICAgICAgICAgICAgcGFydGljbGVJbmRleCxcbiAgICAgICAgICAgIGN1cnJlbnRPdXRwdXRzW2ldLnJlZmxlY3QsXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmdyYXZpdHlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgdGhpcy5fY3VycmVudFJpZ091dHB1dHMuYXQoc2V0dGluZ0luZGV4KS5vdXRwdXRzLnNldChpLCBvdXRwdXRWYWx1ZSk7XG5cbiAgICAgICAgICBjb25zdCBkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4OiBudW1iZXIgPVxuICAgICAgICAgICAgY3VycmVudE91dHB1dHNbaV0uZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDtcbiAgICAgICAgICBjb25zdCBvdXRQYXJhbWV0ZXJDYWNoZXM6IEZsb2F0MzJBcnJheSA9XG4gICAgICAgICAgICAhRmxvYXQzMkFycmF5LnByb3RvdHlwZS5zbGljZSAmJlxuICAgICAgICAgICAgJ3N1YmFycmF5JyBpbiBGbG9hdDMyQXJyYXkucHJvdG90eXBlXG4gICAgICAgICAgICAgID8gSlNPTi5wYXJzZShcbiAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJDYWNoZXMuc3ViYXJyYXkoZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApIC8vIOWApOa4oeOBl+OBmeOCi+OBn+OCgeOAgUpTT04ucGFyc2UsIEpTT04uc3RyaW5naWZ5XG4gICAgICAgICAgICAgIDogdGhpcy5fcGFyYW1ldGVyQ2FjaGVzLnNsaWNlKGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXgpO1xuXG4gICAgICAgICAgdXBkYXRlT3V0cHV0UGFyYW1ldGVyVmFsdWUoXG4gICAgICAgICAgICBvdXRQYXJhbWV0ZXJDYWNoZXMsXG4gICAgICAgICAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVzW2Rlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlc1tkZXN0aW5hdGlvblBhcmFtZXRlckluZGV4XSxcbiAgICAgICAgICAgIG91dHB1dFZhbHVlLFxuICAgICAgICAgICAgY3VycmVudE91dHB1dHNbaV1cbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8g5YCk44KS5Y+N5pigXG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGxldCBvZmZzZXQ6IG51bWJlciA9IGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXgsIG91dFBhcmFtSW5kZXggPSAwO1xuICAgICAgICAgICAgb2Zmc2V0IDwgdGhpcy5fcGFyYW1ldGVyQ2FjaGVzLmxlbmd0aDtcbiAgICAgICAgICAgIG9mZnNldCsrLCBvdXRQYXJhbUluZGV4KytcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmFtZXRlckNhY2hlc1tvZmZzZXRdID0gb3V0UGFyYW1ldGVyQ2FjaGVzW291dFBhcmFtSW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fY3VycmVudFJlbWFpblRpbWUgLT0gcGh5c2ljc0RlbHRhVGltZTtcbiAgICB9XG5cbiAgICBjb25zdCBhbHBoYTogbnVtYmVyID0gdGhpcy5fY3VycmVudFJlbWFpblRpbWUgLyBwaHlzaWNzRGVsdGFUaW1lO1xuICAgIHRoaXMuaW50ZXJwb2xhdGUobW9kZWwsIGFscGhhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfntZDmnpzjga7pgannlKhcbiAgICog5oyv44KK5a2Q5ryU566X44Gu5pyA5paw44Gu57WQ5p6c44Go5LiA44Gk5YmN44Gu57WQ5p6c44GL44KJ5oyH5a6a44GX44Gf6YeN44G/44Gn6YGp55So44GZ44KL44CCXG4gICAqIEBwYXJhbSBtb2RlbCDniannkIbmvJTnrpfjga7ntZDmnpzjgpLpgannlKjjgZnjgovjg6Ljg4fjg6tcbiAgICogQHBhcmFtIHdlaWdodCDmnIDmlrDntZDmnpzjga7ph43jgb9cbiAgICovXG4gIHB1YmxpYyBpbnRlcnBvbGF0ZShtb2RlbDogQ3ViaXNtTW9kZWwsIHdlaWdodDogbnVtYmVyKTogdm9pZCB7XG4gICAgbGV0IGN1cnJlbnRPdXRwdXRzOiBDdWJpc21QaHlzaWNzT3V0cHV0W107XG4gICAgbGV0IGN1cnJlbnRTZXR0aW5nOiBDdWJpc21QaHlzaWNzU3ViUmlnO1xuICAgIGxldCBwYXJhbWV0ZXJWYWx1ZXM6IEZsb2F0MzJBcnJheTtcbiAgICBsZXQgcGFyYW1ldGVyTWF4aW11bVZhbHVlczogRmxvYXQzMkFycmF5O1xuICAgIGxldCBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVzOiBGbG9hdDMyQXJyYXk7XG5cbiAgICBwYXJhbWV0ZXJWYWx1ZXMgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMudmFsdWVzO1xuICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZXMgPSBtb2RlbC5nZXRNb2RlbCgpLnBhcmFtZXRlcnMubWF4aW11bVZhbHVlcztcbiAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVzID0gbW9kZWwuZ2V0TW9kZWwoKS5wYXJhbWV0ZXJzLm1pbmltdW1WYWx1ZXM7XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IHNldHRpbmdJbmRleCA9IDA7XG4gICAgICBzZXR0aW5nSW5kZXggPCB0aGlzLl9waHlzaWNzUmlnLnN1YlJpZ0NvdW50O1xuICAgICAgKytzZXR0aW5nSW5kZXhcbiAgICApIHtcbiAgICAgIGN1cnJlbnRTZXR0aW5nID0gdGhpcy5fcGh5c2ljc1JpZy5zZXR0aW5ncy5hdChzZXR0aW5nSW5kZXgpO1xuICAgICAgY3VycmVudE91dHB1dHMgPSB0aGlzLl9waHlzaWNzUmlnLm91dHB1dHMuZ2V0KFxuICAgICAgICBjdXJyZW50U2V0dGluZy5iYXNlT3V0cHV0SW5kZXhcbiAgICAgICk7XG5cbiAgICAgIC8vIExvYWQgaW5wdXQgcGFyYW1ldGVycy5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFNldHRpbmcub3V0cHV0Q291bnQ7ICsraSkge1xuICAgICAgICBpZiAoY3VycmVudE91dHB1dHNbaV0uZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDogbnVtYmVyID1cbiAgICAgICAgICBjdXJyZW50T3V0cHV0c1tpXS5kZXN0aW5hdGlvblBhcmFtZXRlckluZGV4O1xuICAgICAgICBjb25zdCBvdXRQYXJhbWV0ZXJWYWx1ZXM6IEZsb2F0MzJBcnJheSA9XG4gICAgICAgICAgIUZsb2F0MzJBcnJheS5wcm90b3R5cGUuc2xpY2UgJiYgJ3N1YmFycmF5JyBpbiBGbG9hdDMyQXJyYXkucHJvdG90eXBlXG4gICAgICAgICAgICA/IEpTT04ucGFyc2UoXG4gICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJWYWx1ZXMuc3ViYXJyYXkoZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkgLy8g5YCk5rih44GX44GZ44KL44Gf44KB44CBSlNPTi5wYXJzZSwgSlNPTi5zdHJpbmdpZnlcbiAgICAgICAgICAgIDogcGFyYW1ldGVyVmFsdWVzLnNsaWNlKGRlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXgpO1xuXG4gICAgICAgIHVwZGF0ZU91dHB1dFBhcmFtZXRlclZhbHVlKFxuICAgICAgICAgIG91dFBhcmFtZXRlclZhbHVlcyxcbiAgICAgICAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWVzW2Rlc3RpbmF0aW9uUGFyYW1ldGVySW5kZXhdLFxuICAgICAgICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZXNbZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleF0sXG4gICAgICAgICAgdGhpcy5fcHJldmlvdXNSaWdPdXRwdXRzLmF0KHNldHRpbmdJbmRleCkub3V0cHV0cy5hdChpKSAqXG4gICAgICAgICAgICAoMSAtIHdlaWdodCkgK1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJpZ091dHB1dHMuYXQoc2V0dGluZ0luZGV4KS5vdXRwdXRzLmF0KGkpICogd2VpZ2h0LFxuICAgICAgICAgIGN1cnJlbnRPdXRwdXRzW2ldXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g5YCk44KS5Y+N5pigXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IG9mZnNldDogbnVtYmVyID0gZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleCwgb3V0UGFyYW1JbmRleCA9IDA7XG4gICAgICAgICAgb2Zmc2V0IDwgcGFyYW1ldGVyVmFsdWVzLmxlbmd0aDtcbiAgICAgICAgICBvZmZzZXQrKywgb3V0UGFyYW1JbmRleCsrXG4gICAgICAgICkge1xuICAgICAgICAgIHBhcmFtZXRlclZhbHVlc1tvZmZzZXRdID0gb3V0UGFyYW1ldGVyVmFsdWVzW291dFBhcmFtSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCquODl+OCt+ODp+ODs+OBruioreWumlxuICAgKiBAcGFyYW0gb3B0aW9ucyDjgqrjg5fjgrfjg6fjg7NcbiAgICovXG4gIHB1YmxpYyBzZXRPcHRpb25zKG9wdGlvbnM6IE9wdGlvbnMpOiB2b2lkIHtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqrjg5fjgrfjg6fjg7Pjga7lj5blvpdcbiAgICogQHJldHVybiDjgqrjg5fjgrfjg6fjg7NcbiAgICovXG4gIHB1YmxpYyBnZXRPcHRpb24oKTogT3B0aW9ucyB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fcGh5c2ljc1JpZyA9IG51bGw7XG5cbiAgICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gICAgdGhpcy5fb3B0aW9ucyA9IG5ldyBPcHRpb25zKCk7XG4gICAgdGhpcy5fb3B0aW9ucy5ncmF2aXR5LnkgPSAtMS4wO1xuICAgIHRoaXMuX29wdGlvbnMuZ3Jhdml0eS54ID0gMC4wO1xuICAgIHRoaXMuX29wdGlvbnMud2luZC54ID0gMC4wO1xuICAgIHRoaXMuX29wdGlvbnMud2luZC55ID0gMC4wO1xuICAgIHRoaXMuX2N1cnJlbnRSaWdPdXRwdXRzID0gbmV3IGNzbVZlY3RvcjxQaHlzaWNzT3V0cHV0PigpO1xuICAgIHRoaXMuX3ByZXZpb3VzUmlnT3V0cHV0cyA9IG5ldyBjc21WZWN0b3I8UGh5c2ljc091dHB1dD4oKTtcbiAgICB0aGlzLl9jdXJyZW50UmVtYWluVGltZSA9IDAuMDtcbiAgICB0aGlzLl9wYXJhbWV0ZXJDYWNoZXMgPSBudWxsO1xuICAgIHRoaXMuX3BhcmFtZXRlcklucHV0Q2FjaGVzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX3BoeXNpY3NSaWcgPSB2b2lkIDA7XG4gICAgdGhpcy5fcGh5c2ljc1JpZyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5Yid5pyf5YyW44GZ44KLXG4gICAqL1xuICBwdWJsaWMgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcbiAgICBsZXQgc3RyYW5kOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXTtcbiAgICBsZXQgY3VycmVudFNldHRpbmc6IEN1YmlzbVBoeXNpY3NTdWJSaWc7XG4gICAgbGV0IHJhZGl1czogQ3ViaXNtVmVjdG9yMjtcblxuICAgIGZvciAoXG4gICAgICBsZXQgc2V0dGluZ0luZGV4ID0gMDtcbiAgICAgIHNldHRpbmdJbmRleCA8IHRoaXMuX3BoeXNpY3NSaWcuc3ViUmlnQ291bnQ7XG4gICAgICArK3NldHRpbmdJbmRleFxuICAgICkge1xuICAgICAgY3VycmVudFNldHRpbmcgPSB0aGlzLl9waHlzaWNzUmlnLnNldHRpbmdzLmF0KHNldHRpbmdJbmRleCk7XG4gICAgICBzdHJhbmQgPSB0aGlzLl9waHlzaWNzUmlnLnBhcnRpY2xlcy5nZXQoY3VycmVudFNldHRpbmcuYmFzZVBhcnRpY2xlSW5kZXgpO1xuXG4gICAgICAvLyBJbml0aWFsaXplIHRoZSB0b3Agb2YgcGFydGljbGUuXG4gICAgICBzdHJhbmRbMF0uaW5pdGlhbFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgICAgc3RyYW5kWzBdLmxhc3RQb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgICAgICBzdHJhbmRbMF0uaW5pdGlhbFBvc2l0aW9uLngsXG4gICAgICAgIHN0cmFuZFswXS5pbml0aWFsUG9zaXRpb24ueVxuICAgICAgKTtcbiAgICAgIHN0cmFuZFswXS5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgLTEuMCk7XG4gICAgICBzdHJhbmRbMF0ubGFzdEdyYXZpdHkueSAqPSAtMS4wO1xuICAgICAgc3RyYW5kWzBdLnZlbG9jaXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgICAgc3RyYW5kWzBdLmZvcmNlID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuXG4gICAgICAvLyBJbml0aWFsaXplIHBhcnRpY2xlcy5cbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY3VycmVudFNldHRpbmcucGFydGljbGVDb3VudDsgKytpKSB7XG4gICAgICAgIHJhZGl1cyA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICAgICAgcmFkaXVzLnkgPSBzdHJhbmRbaV0ucmFkaXVzO1xuICAgICAgICBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgICAgICAgc3RyYW5kW2kgLSAxXS5pbml0aWFsUG9zaXRpb24ueCArIHJhZGl1cy54LFxuICAgICAgICAgIHN0cmFuZFtpIC0gMV0uaW5pdGlhbFBvc2l0aW9uLnkgKyByYWRpdXMueVxuICAgICAgICApO1xuICAgICAgICBzdHJhbmRbaV0ucG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgICAgICBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uLngsXG4gICAgICAgICAgc3RyYW5kW2ldLmluaXRpYWxQb3NpdGlvbi55XG4gICAgICAgICk7XG4gICAgICAgIHN0cmFuZFtpXS5sYXN0UG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgICAgICBzdHJhbmRbaV0uaW5pdGlhbFBvc2l0aW9uLngsXG4gICAgICAgICAgc3RyYW5kW2ldLmluaXRpYWxQb3NpdGlvbi55XG4gICAgICAgICk7XG4gICAgICAgIHN0cmFuZFtpXS5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgLTEuMCk7XG4gICAgICAgIHN0cmFuZFtpXS5sYXN0R3Jhdml0eS55ICo9IC0xLjA7XG4gICAgICAgIHN0cmFuZFtpXS52ZWxvY2l0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICAgICAgc3RyYW5kW2ldLmZvcmNlID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9waHlzaWNzUmlnOiBDdWJpc21QaHlzaWNzUmlnOyAvLyDniannkIbmvJTnrpfjga7jg4fjg7zjgr9cbiAgX29wdGlvbnM6IE9wdGlvbnM7IC8vIOOCquODl+OCt+ODp+ODs1xuXG4gIF9jdXJyZW50UmlnT3V0cHV0czogY3NtVmVjdG9yPFBoeXNpY3NPdXRwdXQ+OyAvLy88IOacgOaWsOOBruaMr+OCiuWtkOioiOeul+OBrue1kOaenFxuICBfcHJldmlvdXNSaWdPdXRwdXRzOiBjc21WZWN0b3I8UGh5c2ljc091dHB1dD47IC8vLzwg5LiA44Gk5YmN44Gu5oyv44KK5a2Q6KiI566X44Gu57WQ5p6cXG5cbiAgX2N1cnJlbnRSZW1haW5UaW1lOiBudW1iZXI7IC8vLzwg54mp55CG5ryU566X44GM5Yem55CG44GX44Gm44GE44Gq44GE5pmC6ZaTXG5cbiAgX3BhcmFtZXRlckNhY2hlczogRmxvYXQzMkFycmF5OyAvLy88IEV2YWx1YXRl44Gn5Yip55So44GZ44KL44OR44Op44Oh44O844K/44Gu44Kt44Oj44OD44K344OlXG4gIF9wYXJhbWV0ZXJJbnB1dENhY2hlczogRmxvYXQzMkFycmF5OyAvLy88IFVwZGF0ZVBhcnRpY2xlc+OBjOWLleOBj+OBqOOBjeOBruWFpeWKm+OCkuOCreODo+ODg+OCt+ODpVxufVxuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBruOCquODl+OCt+ODp+ODs1xuICovXG5leHBvcnQgY2xhc3MgT3B0aW9ucyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZ3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHRoaXMud2luZCA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICB9XG5cbiAgZ3Jhdml0eTogQ3ViaXNtVmVjdG9yMjsgLy8g6YeN5Yqb5pa55ZCRXG4gIHdpbmQ6IEN1YmlzbVZlY3RvcjI7IC8vIOmiqOOBruaWueWQkVxufVxuXG4vKipcbiAqIOODkeODqeODoeODvOOCv+OBq+mBqeeUqOOBmeOCi+WJjeOBrueJqeeQhua8lOeul+OBruWHuuWKm+e1kOaenFxuICovXG5leHBvcnQgY2xhc3MgUGh5c2ljc091dHB1dCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMub3V0cHV0cyA9IG5ldyBjc21WZWN0b3I8bnVtYmVyPigwKTtcbiAgfVxuXG4gIG91dHB1dHM6IGNzbVZlY3RvcjxudW1iZXI+OyAvLyDniannkIbmvJTnrpflh7rlipvntZDmnpxcbn1cblxuLyoqXG4gKiBHZXRzIHNpZ24uXG4gKlxuICogQHBhcmFtIHZhbHVlIEV2YWx1YXRpb24gdGFyZ2V0IHZhbHVlLlxuICpcbiAqIEByZXR1cm4gU2lnbiBvZiB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc2lnbih2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgbGV0IHJldCA9IDA7XG5cbiAgaWYgKHZhbHVlID4gMC4wKSB7XG4gICAgcmV0ID0gMTtcbiAgfSBlbHNlIGlmICh2YWx1ZSA8IDAuMCkge1xuICAgIHJldCA9IC0xO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZ2V0SW5wdXRUcmFuc2xhdGlvblhGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlKFxuICB0YXJnZXRUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgdGFyZ2V0QW5nbGU6IHsgYW5nbGU6IG51bWJlciB9LFxuICB2YWx1ZTogbnVtYmVyLFxuICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWF4aW11bVZhbHVlOiBudW1iZXIsXG4gIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxuICBub3JtYWxpemF0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICBub3JtYWxpemF0aW9uQW5nbGU6IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICBpc0ludmVydGVkOiBib29sZWFuLFxuICB3ZWlnaHQ6IG51bWJlclxuKTogdm9pZCB7XG4gIHRhcmdldFRyYW5zbGF0aW9uLnggKz1cbiAgICBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcbiAgICAgIHZhbHVlLFxuICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlLFxuICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlLFxuICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlLFxuICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLm1pbmltdW0sXG4gICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSxcbiAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5kZWZhbHV0LFxuICAgICAgaXNJbnZlcnRlZFxuICAgICkgKiB3ZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIGdldElucHV0VHJhbnNsYXRpb25ZRnJvbU5vcm1hbGl6ZWRQYXJhbXRlclZhbHVlKFxuICB0YXJnZXRUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgdGFyZ2V0QW5nbGU6IHsgYW5nbGU6IG51bWJlciB9LFxuICB2YWx1ZTogbnVtYmVyLFxuICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWF4aW11bVZhbHVlOiBudW1iZXIsXG4gIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxuICBub3JtYWxpemF0aW9uUG9zaXRpb246IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICBub3JtYWxpemF0aW9uQW5nbGU6IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uLFxuICBpc0ludmVydGVkOiBib29sZWFuLFxuICB3ZWlnaHQ6IG51bWJlclxuKTogdm9pZCB7XG4gIHRhcmdldFRyYW5zbGF0aW9uLnkgKz1cbiAgICBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcbiAgICAgIHZhbHVlLFxuICAgICAgcGFyYW1ldGVyTWluaW11bVZhbHVlLFxuICAgICAgcGFyYW1ldGVyTWF4aW11bVZhbHVlLFxuICAgICAgcGFyYW1ldGVyRGVmYXVsdFZhbHVlLFxuICAgICAgbm9ybWFsaXphdGlvblBvc2l0aW9uLm1pbmltdW0sXG4gICAgICBub3JtYWxpemF0aW9uUG9zaXRpb24ubWF4aW11bSxcbiAgICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbi5kZWZhbHV0LFxuICAgICAgaXNJbnZlcnRlZFxuICAgICkgKiB3ZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIGdldElucHV0QW5nbGVGcm9tTm9ybWFsaXplZFBhcmFtZXRlclZhbHVlKFxuICB0YXJnZXRUcmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgdGFyZ2V0QW5nbGU6IHsgYW5nbGU6IG51bWJlciB9LFxuICB2YWx1ZTogbnVtYmVyLFxuICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWF4aW11bVZhbHVlOiBudW1iZXIsXG4gIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxuICBub3JtYWxpemFpdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgd2VpZ2h0OiBudW1iZXJcbik6IHZvaWQge1xuICB0YXJnZXRBbmdsZS5hbmdsZSArPVxuICAgIG5vcm1hbGl6ZVBhcmFtZXRlclZhbHVlKFxuICAgICAgdmFsdWUsXG4gICAgICBwYXJhbWV0ZXJNaW5pbXVtVmFsdWUsXG4gICAgICBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUsXG4gICAgICBwYXJhbWV0ZXJEZWZhdWx0VmFsdWUsXG4gICAgICBub3JtYWxpemF0aW9uQW5nbGUubWluaW11bSxcbiAgICAgIG5vcm1hbGl6YXRpb25BbmdsZS5tYXhpbXVtLFxuICAgICAgbm9ybWFsaXphdGlvbkFuZ2xlLmRlZmFsdXQsXG4gICAgICBpc0ludmVydGVkXG4gICAgKSAqIHdlaWdodDtcbn1cblxuZnVuY3Rpb24gZ2V0T3V0cHV0VHJhbnNsYXRpb25YKFxuICB0cmFuc2xhdGlvbjogQ3ViaXNtVmVjdG9yMixcbiAgcGFydGljbGVzOiBDdWJpc21QaHlzaWNzUGFydGljbGVbXSxcbiAgcGFydGljbGVJbmRleDogbnVtYmVyLFxuICBpc0ludmVydGVkOiBib29sZWFuLFxuICBwYXJlbnRHcmF2aXR5OiBDdWJpc21WZWN0b3IyXG4pOiBudW1iZXIge1xuICBsZXQgb3V0cHV0VmFsdWU6IG51bWJlciA9IHRyYW5zbGF0aW9uLng7XG5cbiAgaWYgKGlzSW52ZXJ0ZWQpIHtcbiAgICBvdXRwdXRWYWx1ZSAqPSAtMS4wO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dFZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRPdXRwdXRUcmFuc2xhdGlvblkoXG4gIHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICBwYXJ0aWNsZXM6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxuICBwYXJ0aWNsZUluZGV4OiBudW1iZXIsXG4gIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gIHBhcmVudEdyYXZpdHk6IEN1YmlzbVZlY3RvcjJcbik6IG51bWJlciB7XG4gIGxldCBvdXRwdXRWYWx1ZTogbnVtYmVyID0gdHJhbnNsYXRpb24ueTtcblxuICBpZiAoaXNJbnZlcnRlZCkge1xuICAgIG91dHB1dFZhbHVlICo9IC0xLjA7XG4gIH1cbiAgcmV0dXJuIG91dHB1dFZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRPdXRwdXRBbmdsZShcbiAgdHJhbnNsYXRpb246IEN1YmlzbVZlY3RvcjIsXG4gIHBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW10sXG4gIHBhcnRpY2xlSW5kZXg6IG51bWJlcixcbiAgaXNJbnZlcnRlZDogYm9vbGVhbixcbiAgcGFyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMlxuKTogbnVtYmVyIHtcbiAgbGV0IG91dHB1dFZhbHVlOiBudW1iZXI7XG5cbiAgaWYgKHBhcnRpY2xlSW5kZXggPj0gMikge1xuICAgIHBhcmVudEdyYXZpdHkgPSBwYXJ0aWNsZXNbcGFydGljbGVJbmRleCAtIDFdLnBvc2l0aW9uLnN1YnN0cmFjdChcbiAgICAgIHBhcnRpY2xlc1twYXJ0aWNsZUluZGV4IC0gMl0ucG9zaXRpb25cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudEdyYXZpdHkgPSBwYXJlbnRHcmF2aXR5Lm11bHRpcGx5QnlTY2FsZXIoLTEuMCk7XG4gIH1cblxuICBvdXRwdXRWYWx1ZSA9IEN1YmlzbU1hdGguZGlyZWN0aW9uVG9SYWRpYW4ocGFyZW50R3Jhdml0eSwgdHJhbnNsYXRpb24pO1xuXG4gIGlmIChpc0ludmVydGVkKSB7XG4gICAgb3V0cHV0VmFsdWUgKj0gLTEuMDtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0UmFuZ2VWYWx1ZShtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIge1xuICBjb25zdCBtYXhWYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5tYXgobWluLCBtYXgpO1xuICBjb25zdCBtaW5WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5taW4obWluLCBtYXgpO1xuXG4gIHJldHVybiBDdWJpc21NYXRoLmFicyhtYXhWYWx1ZSAtIG1pblZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IG1pblZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1pbihtaW4sIG1heCk7XG4gIHJldHVybiBtaW5WYWx1ZSArIGdldFJhbmdlVmFsdWUobWluLCBtYXgpIC8gMi4wO1xufVxuXG5mdW5jdGlvbiBnZXRPdXRwdXRTY2FsZVRyYW5zbGF0aW9uWChcbiAgdHJhbnNsYXRpb25TY2FsZTogQ3ViaXNtVmVjdG9yMixcbiAgYW5nbGVTY2FsZTogbnVtYmVyXG4pOiBudW1iZXIge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0cmFuc2xhdGlvblNjYWxlLngpKTtcbn1cblxuZnVuY3Rpb24gZ2V0T3V0cHV0U2NhbGVUcmFuc2xhdGlvblkoXG4gIHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjIsXG4gIGFuZ2xlU2NhbGU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodHJhbnNsYXRpb25TY2FsZS55KSk7XG59XG5cbmZ1bmN0aW9uIGdldE91dHB1dFNjYWxlQW5nbGUoXG4gIHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjIsXG4gIGFuZ2xlU2NhbGU6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYW5nbGVTY2FsZSkpO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgcGFydGljbGVzLlxuICpcbiAqIEBwYXJhbSBzdHJhbmQgICAgICAgICAgICAgICAgVGFyZ2V0IGFycmF5IG9mIHBhcnRpY2xlLlxuICogQHBhcmFtIHN0cmFuZENvdW50ICAgICAgICAgICBDb3VudCBvZiBwYXJ0aWNsZS5cbiAqIEBwYXJhbSB0b3RhbFRyYW5zbGF0aW9uICAgICAgVG90YWwgdHJhbnNsYXRpb24gdmFsdWUuXG4gKiBAcGFyYW0gdG90YWxBbmdsZSAgICAgICAgICAgIFRvdGFsIGFuZ2xlLlxuICogQHBhcmFtIHdpbmREaXJlY3Rpb24gICAgICAgICBEaXJlY3Rpb24gb2YgV2luZC5cbiAqIEBwYXJhbSB0aHJlc2hvbGRWYWx1ZSAgICAgICAgVGhyZXNob2xkIG9mIG1vdmVtZW50LlxuICogQHBhcmFtIGRlbHRhVGltZVNlY29uZHMgICAgICBEZWx0YSB0aW1lLlxuICogQHBhcmFtIGFpclJlc2lzdGFuY2UgICAgICAgICBBaXIgcmVzaXN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlUGFydGljbGVzKFxuICBzdHJhbmQ6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxuICBzdHJhbmRDb3VudDogbnVtYmVyLFxuICB0b3RhbFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICB0b3RhbEFuZ2xlOiBudW1iZXIsXG4gIHdpbmREaXJlY3Rpb246IEN1YmlzbVZlY3RvcjIsXG4gIHRocmVzaG9sZFZhbHVlOiBudW1iZXIsXG4gIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcixcbiAgYWlyUmVzaXN0YW5jZTogbnVtYmVyXG4pIHtcbiAgbGV0IHRvdGFsUmFkaWFuOiBudW1iZXI7XG4gIGxldCBkZWxheTogbnVtYmVyO1xuICBsZXQgcmFkaWFuOiBudW1iZXI7XG4gIGxldCBjdXJyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMjtcbiAgbGV0IGRpcmVjdGlvbjogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgbGV0IHZlbG9jaXR5OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICBsZXQgZm9yY2U6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG4gIGxldCBuZXdEaXJlY3Rpb246IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG5cbiAgc3RyYW5kWzBdLnBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgdG90YWxUcmFuc2xhdGlvbi54LFxuICAgIHRvdGFsVHJhbnNsYXRpb24ueVxuICApO1xuXG4gIHRvdGFsUmFkaWFuID0gQ3ViaXNtTWF0aC5kZWdyZWVzVG9SYWRpYW4odG90YWxBbmdsZSk7XG4gIGN1cnJlbnRHcmF2aXR5ID0gQ3ViaXNtTWF0aC5yYWRpYW5Ub0RpcmVjdGlvbih0b3RhbFJhZGlhbik7XG4gIGN1cnJlbnRHcmF2aXR5Lm5vcm1hbGl6ZSgpO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgc3RyYW5kQ291bnQ7ICsraSkge1xuICAgIHN0cmFuZFtpXS5mb3JjZSA9IGN1cnJlbnRHcmF2aXR5XG4gICAgICAubXVsdGlwbHlCeVNjYWxlcihzdHJhbmRbaV0uYWNjZWxlcmF0aW9uKVxuICAgICAgLmFkZCh3aW5kRGlyZWN0aW9uKTtcblxuICAgIHN0cmFuZFtpXS5sYXN0UG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbi54LFxuICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uLnlcbiAgICApO1xuXG4gICAgZGVsYXkgPSBzdHJhbmRbaV0uZGVsYXkgKiBkZWx0YVRpbWVTZWNvbmRzICogMzAuMDtcblxuICAgIGRpcmVjdGlvbiA9IHN0cmFuZFtpXS5wb3NpdGlvbi5zdWJzdHJhY3Qoc3RyYW5kW2kgLSAxXS5wb3NpdGlvbik7XG5cbiAgICByYWRpYW4gPVxuICAgICAgQ3ViaXNtTWF0aC5kaXJlY3Rpb25Ub1JhZGlhbihzdHJhbmRbaV0ubGFzdEdyYXZpdHksIGN1cnJlbnRHcmF2aXR5KSAvXG4gICAgICBhaXJSZXNpc3RhbmNlO1xuXG4gICAgZGlyZWN0aW9uLnggPVxuICAgICAgQ3ViaXNtTWF0aC5jb3MocmFkaWFuKSAqIGRpcmVjdGlvbi54IC1cbiAgICAgIGRpcmVjdGlvbi55ICogQ3ViaXNtTWF0aC5zaW4ocmFkaWFuKTtcbiAgICBkaXJlY3Rpb24ueSA9XG4gICAgICBDdWJpc21NYXRoLnNpbihyYWRpYW4pICogZGlyZWN0aW9uLnggK1xuICAgICAgZGlyZWN0aW9uLnkgKiBDdWJpc21NYXRoLmNvcyhyYWRpYW4pO1xuXG4gICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gc3RyYW5kW2kgLSAxXS5wb3NpdGlvbi5hZGQoZGlyZWN0aW9uKTtcblxuICAgIHZlbG9jaXR5ID0gc3RyYW5kW2ldLnZlbG9jaXR5Lm11bHRpcGx5QnlTY2FsZXIoZGVsYXkpO1xuICAgIGZvcmNlID0gc3RyYW5kW2ldLmZvcmNlLm11bHRpcGx5QnlTY2FsZXIoZGVsYXkpLm11bHRpcGx5QnlTY2FsZXIoZGVsYXkpO1xuXG4gICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gc3RyYW5kW2ldLnBvc2l0aW9uLmFkZCh2ZWxvY2l0eSkuYWRkKGZvcmNlKTtcblxuICAgIG5ld0RpcmVjdGlvbiA9IHN0cmFuZFtpXS5wb3NpdGlvbi5zdWJzdHJhY3Qoc3RyYW5kW2kgLSAxXS5wb3NpdGlvbik7XG4gICAgbmV3RGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xuXG4gICAgc3RyYW5kW2ldLnBvc2l0aW9uID0gc3RyYW5kW2kgLSAxXS5wb3NpdGlvbi5hZGQoXG4gICAgICBuZXdEaXJlY3Rpb24ubXVsdGlwbHlCeVNjYWxlcihzdHJhbmRbaV0ucmFkaXVzKVxuICAgICk7XG5cbiAgICBpZiAoQ3ViaXNtTWF0aC5hYnMoc3RyYW5kW2ldLnBvc2l0aW9uLngpIDwgdGhyZXNob2xkVmFsdWUpIHtcbiAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbi54ID0gMC4wO1xuICAgIH1cblxuICAgIGlmIChkZWxheSAhPSAwLjApIHtcbiAgICAgIHN0cmFuZFtpXS52ZWxvY2l0eSA9IHN0cmFuZFtpXS5wb3NpdGlvbi5zdWJzdHJhY3Qoc3RyYW5kW2ldLmxhc3RQb3NpdGlvbik7XG4gICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBzdHJhbmRbaV0udmVsb2NpdHkuZGl2aXNpb25CeVNjYWxhcihkZWxheSk7XG4gICAgICBzdHJhbmRbaV0udmVsb2NpdHkgPSBzdHJhbmRbaV0udmVsb2NpdHkubXVsdGlwbHlCeVNjYWxlcihcbiAgICAgICAgc3RyYW5kW2ldLm1vYmlsaXR5XG4gICAgICApO1xuICAgIH1cblxuICAgIHN0cmFuZFtpXS5mb3JjZSA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcbiAgICBzdHJhbmRbaV0ubGFzdEdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgIGN1cnJlbnRHcmF2aXR5LngsXG4gICAgICBjdXJyZW50R3Jhdml0eS55XG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIFVwZGF0ZXMgcGFydGljbGVzIGZvciBzdGFiaWxpemF0aW9uLlxuICpcbiAqIEBwYXJhbSBzdHJhbmQgICAgICAgICAgICAgICAgVGFyZ2V0IGFycmF5IG9mIHBhcnRpY2xlLlxuICogQHBhcmFtIHN0cmFuZENvdW50ICAgICAgICAgICBDb3VudCBvZiBwYXJ0aWNsZS5cbiAqIEBwYXJhbSB0b3RhbFRyYW5zbGF0aW9uICAgICAgVG90YWwgdHJhbnNsYXRpb24gdmFsdWUuXG4gKiBAcGFyYW0gdG90YWxBbmdsZSAgICAgICAgICAgIFRvdGFsIGFuZ2xlLlxuICogQHBhcmFtIHdpbmREaXJlY3Rpb24gICAgICAgICBEaXJlY3Rpb24gb2YgV2luZC5cbiAqIEBwYXJhbSB0aHJlc2hvbGRWYWx1ZSAgICAgICAgVGhyZXNob2xkIG9mIG1vdmVtZW50LlxuICovXG5mdW5jdGlvbiB1cGRhdGVQYXJ0aWNsZXNGb3JTdGFiaWxpemF0aW9uKFxuICBzdHJhbmQ6IEN1YmlzbVBoeXNpY3NQYXJ0aWNsZVtdLFxuICBzdHJhbmRDb3VudDogbnVtYmVyLFxuICB0b3RhbFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICB0b3RhbEFuZ2xlOiBudW1iZXIsXG4gIHdpbmREaXJlY3Rpb246IEN1YmlzbVZlY3RvcjIsXG4gIHRocmVzaG9sZFZhbHVlOiBudW1iZXJcbikge1xuICBsZXQgdG90YWxSYWRpYW46IG51bWJlcjtcbiAgbGV0IGN1cnJlbnRHcmF2aXR5OiBDdWJpc21WZWN0b3IyO1xuICBsZXQgZm9yY2U6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XG5cbiAgc3RyYW5kWzBdLnBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoXG4gICAgdG90YWxUcmFuc2xhdGlvbi54LFxuICAgIHRvdGFsVHJhbnNsYXRpb24ueVxuICApO1xuXG4gIHRvdGFsUmFkaWFuID0gQ3ViaXNtTWF0aC5kZWdyZWVzVG9SYWRpYW4odG90YWxBbmdsZSk7XG4gIGN1cnJlbnRHcmF2aXR5ID0gQ3ViaXNtTWF0aC5yYWRpYW5Ub0RpcmVjdGlvbih0b3RhbFJhZGlhbik7XG4gIGN1cnJlbnRHcmF2aXR5Lm5vcm1hbGl6ZSgpO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgc3RyYW5kQ291bnQ7ICsraSkge1xuICAgIHN0cmFuZFtpXS5mb3JjZSA9IGN1cnJlbnRHcmF2aXR5XG4gICAgICAubXVsdGlwbHlCeVNjYWxlcihzdHJhbmRbaV0uYWNjZWxlcmF0aW9uKVxuICAgICAgLmFkZCh3aW5kRGlyZWN0aW9uKTtcblxuICAgIHN0cmFuZFtpXS5sYXN0UG9zaXRpb24gPSBuZXcgQ3ViaXNtVmVjdG9yMihcbiAgICAgIHN0cmFuZFtpXS5wb3NpdGlvbi54LFxuICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uLnlcbiAgICApO1xuXG4gICAgc3RyYW5kW2ldLnZlbG9jaXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgIGZvcmNlID0gc3RyYW5kW2ldLmZvcmNlO1xuICAgIGZvcmNlLm5vcm1hbGl6ZSgpO1xuXG4gICAgZm9yY2UgPSBmb3JjZS5tdWx0aXBseUJ5U2NhbGVyKHN0cmFuZFtpXS5yYWRpdXMpO1xuICAgIHN0cmFuZFtpXS5wb3NpdGlvbiA9IHN0cmFuZFtpIC0gMV0ucG9zaXRpb24uYWRkKGZvcmNlKTtcblxuICAgIGlmIChDdWJpc21NYXRoLmFicyhzdHJhbmRbaV0ucG9zaXRpb24ueCkgPCB0aHJlc2hvbGRWYWx1ZSkge1xuICAgICAgc3RyYW5kW2ldLnBvc2l0aW9uLnggPSAwLjA7XG4gICAgfVxuXG4gICAgc3RyYW5kW2ldLmZvcmNlID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xuICAgIHN0cmFuZFtpXS5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKFxuICAgICAgY3VycmVudEdyYXZpdHkueCxcbiAgICAgIGN1cnJlbnRHcmF2aXR5LnlcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogVXBkYXRlcyBvdXRwdXQgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlICAgICAgICAgICAgVGFyZ2V0IHBhcmFtZXRlciB2YWx1ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJWYWx1ZU1pbmltdW0gICAgIE1pbmltdW0gb2YgcGFyYW1ldGVyIHZhbHVlLlxuICogQHBhcmFtIHBhcmFtZXRlclZhbHVlTWF4aW11bSAgICAgTWF4aW11bSBvZiBwYXJhbWV0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gdHJhbnNsYXRpb24gICAgICAgICAgICAgICBUcmFuc2xhdGlvbiB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlT3V0cHV0UGFyYW1ldGVyVmFsdWUoXG4gIHBhcmFtZXRlclZhbHVlOiBGbG9hdDMyQXJyYXksXG4gIHBhcmFtZXRlclZhbHVlTWluaW11bTogbnVtYmVyLFxuICBwYXJhbWV0ZXJWYWx1ZU1heGltdW06IG51bWJlcixcbiAgdHJhbnNsYXRpb246IG51bWJlcixcbiAgb3V0cHV0OiBDdWJpc21QaHlzaWNzT3V0cHV0XG4pOiB2b2lkIHtcbiAgbGV0IG91dHB1dFNjYWxlOiBudW1iZXI7XG4gIGxldCB2YWx1ZTogbnVtYmVyO1xuICBsZXQgd2VpZ2h0OiBudW1iZXI7XG5cbiAgb3V0cHV0U2NhbGUgPSBvdXRwdXQuZ2V0U2NhbGUob3V0cHV0LnRyYW5zbGF0aW9uU2NhbGUsIG91dHB1dC5hbmdsZVNjYWxlKTtcblxuICB2YWx1ZSA9IHRyYW5zbGF0aW9uICogb3V0cHV0U2NhbGU7XG5cbiAgaWYgKHZhbHVlIDwgcGFyYW1ldGVyVmFsdWVNaW5pbXVtKSB7XG4gICAgaWYgKHZhbHVlIDwgb3V0cHV0LnZhbHVlQmVsb3dNaW5pbXVtKSB7XG4gICAgICBvdXRwdXQudmFsdWVCZWxvd01pbmltdW0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IHBhcmFtZXRlclZhbHVlTWluaW11bTtcbiAgfSBlbHNlIGlmICh2YWx1ZSA+IHBhcmFtZXRlclZhbHVlTWF4aW11bSkge1xuICAgIGlmICh2YWx1ZSA+IG91dHB1dC52YWx1ZUV4Y2VlZGVkTWF4aW11bSkge1xuICAgICAgb3V0cHV0LnZhbHVlRXhjZWVkZWRNYXhpbXVtID0gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFsdWUgPSBwYXJhbWV0ZXJWYWx1ZU1heGltdW07XG4gIH1cblxuICB3ZWlnaHQgPSBvdXRwdXQud2VpZ2h0IC8gTWF4aW11bVdlaWdodDtcblxuICBpZiAod2VpZ2h0ID49IDEuMCkge1xuICAgIHBhcmFtZXRlclZhbHVlWzBdID0gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBwYXJhbWV0ZXJWYWx1ZVswXSAqICgxLjAgLSB3ZWlnaHQpICsgdmFsdWUgKiB3ZWlnaHQ7XG4gICAgcGFyYW1ldGVyVmFsdWVbMF0gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQYXJhbWV0ZXJWYWx1ZShcbiAgdmFsdWU6IG51bWJlcixcbiAgcGFyYW1ldGVyTWluaW11bTogbnVtYmVyLFxuICBwYXJhbWV0ZXJNYXhpbXVtOiBudW1iZXIsXG4gIHBhcmFtZXRlckRlZmF1bHQ6IG51bWJlcixcbiAgbm9ybWFsaXplZE1pbmltdW06IG51bWJlcixcbiAgbm9ybWFsaXplZE1heGltdW06IG51bWJlcixcbiAgbm9ybWFsaXplZERlZmF1bHQ6IG51bWJlcixcbiAgaXNJbnZlcnRlZDogYm9vbGVhblxuKSB7XG4gIGxldCByZXN1bHQgPSAwLjA7XG5cbiAgY29uc3QgbWF4VmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWF4KHBhcmFtZXRlck1heGltdW0sIHBhcmFtZXRlck1pbmltdW0pO1xuXG4gIGlmIChtYXhWYWx1ZSA8IHZhbHVlKSB7XG4gICAgdmFsdWUgPSBtYXhWYWx1ZTtcbiAgfVxuXG4gIGNvbnN0IG1pblZhbHVlOiBudW1iZXIgPSBDdWJpc21NYXRoLm1pbihwYXJhbWV0ZXJNYXhpbXVtLCBwYXJhbWV0ZXJNaW5pbXVtKTtcblxuICBpZiAobWluVmFsdWUgPiB2YWx1ZSkge1xuICAgIHZhbHVlID0gbWluVmFsdWU7XG4gIH1cblxuICBjb25zdCBtaW5Ob3JtVmFsdWU6IG51bWJlciA9IEN1YmlzbU1hdGgubWluKFxuICAgIG5vcm1hbGl6ZWRNaW5pbXVtLFxuICAgIG5vcm1hbGl6ZWRNYXhpbXVtXG4gICk7XG4gIGNvbnN0IG1heE5vcm1WYWx1ZTogbnVtYmVyID0gQ3ViaXNtTWF0aC5tYXgoXG4gICAgbm9ybWFsaXplZE1pbmltdW0sXG4gICAgbm9ybWFsaXplZE1heGltdW1cbiAgKTtcbiAgY29uc3QgbWlkZGxlTm9ybVZhbHVlOiBudW1iZXIgPSBub3JtYWxpemVkRGVmYXVsdDtcblxuICBjb25zdCBtaWRkbGVWYWx1ZTogbnVtYmVyID0gZ2V0RGVmYXVsdFZhbHVlKG1pblZhbHVlLCBtYXhWYWx1ZSk7XG4gIGNvbnN0IHBhcmFtVmFsdWU6IG51bWJlciA9IHZhbHVlIC0gbWlkZGxlVmFsdWU7XG5cbiAgc3dpdGNoIChzaWduKHBhcmFtVmFsdWUpKSB7XG4gICAgY2FzZSAxOiB7XG4gICAgICBjb25zdCBuTGVuZ3RoOiBudW1iZXIgPSBtYXhOb3JtVmFsdWUgLSBtaWRkbGVOb3JtVmFsdWU7XG4gICAgICBjb25zdCBwTGVuZ3RoOiBudW1iZXIgPSBtYXhWYWx1ZSAtIG1pZGRsZVZhbHVlO1xuXG4gICAgICBpZiAocExlbmd0aCAhPSAwLjApIHtcbiAgICAgICAgcmVzdWx0ID0gcGFyYW1WYWx1ZSAqIChuTGVuZ3RoIC8gcExlbmd0aCk7XG4gICAgICAgIHJlc3VsdCArPSBtaWRkbGVOb3JtVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIC0xOiB7XG4gICAgICBjb25zdCBuTGVuZ3RoOiBudW1iZXIgPSBtaW5Ob3JtVmFsdWUgLSBtaWRkbGVOb3JtVmFsdWU7XG4gICAgICBjb25zdCBwTGVuZ3RoOiBudW1iZXIgPSBtaW5WYWx1ZSAtIG1pZGRsZVZhbHVlO1xuXG4gICAgICBpZiAocExlbmd0aCAhPSAwLjApIHtcbiAgICAgICAgcmVzdWx0ID0gcGFyYW1WYWx1ZSAqIChuTGVuZ3RoIC8gcExlbmd0aCk7XG4gICAgICAgIHJlc3VsdCArPSBtaWRkbGVOb3JtVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIDA6IHtcbiAgICAgIHJlc3VsdCA9IG1pZGRsZU5vcm1WYWx1ZTtcblxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpc0ludmVydGVkID8gcmVzdWx0IDogcmVzdWx0ICogLTEuMDtcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtcGh5c2ljcyc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljcyA9ICQuQ3ViaXNtUGh5c2ljcztcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljcyA9ICQuQ3ViaXNtUGh5c2ljcztcbiAgZXhwb3J0IGNvbnN0IE9wdGlvbnMgPSAkLk9wdGlvbnM7XG4gIGV4cG9ydCB0eXBlIE9wdGlvbnMgPSAkLk9wdGlvbnM7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21JZEhhbmRsZSB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcbmltcG9ydCB7IEN1YmlzbVZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL2N1YmlzbXZlY3RvcjInO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBrumBqeeUqOWFiOOBrueorumhnlxuICovXG5leHBvcnQgZW51bSBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZSB7XG4gIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlX1BhcmFtZXRlciwgLy8g44OR44Op44Oh44O844K/44Gr5a++44GX44Gm6YGp55SoXG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu5YWl5Yqb44Gu56iu6aGeXG4gKi9cbmV4cG9ydCBlbnVtIEN1YmlzbVBoeXNpY3NTb3VyY2Uge1xuICBDdWJpc21QaHlzaWNzU291cmNlX1gsIC8vIFjou7jjga7kvY3nva7jgYvjgolcbiAgQ3ViaXNtUGh5c2ljc1NvdXJjZV9ZLCAvLyBZ6Lu444Gu5L2N572u44GL44KJXG4gIEN1YmlzbVBoeXNpY3NTb3VyY2VfQW5nbGUsIC8vIOinkuW6puOBi+OCiVxufVxuXG4vKipcbiAqIEBicmllZiDniannkIbmvJTnrpfjgafkvb/nlKjjgZnjgovlpJbpg6jjga7liptcbiAqXG4gKiDniannkIbmvJTnrpfjgafkvb/nlKjjgZnjgovlpJbpg6jjga7lipvjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIFBoeXNpY3NKc29uRWZmZWN0aXZlRm9yY2VzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ncmF2aXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy53aW5kID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gIH1cbiAgZ3Jhdml0eTogQ3ViaXNtVmVjdG9yMjsgLy8g6YeN5YqbXG4gIHdpbmQ6IEN1YmlzbVZlY3RvcjI7IC8vIOmiqFxufVxuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBruODkeODqeODoeODvOOCv+aDheWgsVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc1BhcmFtZXRlciB7XG4gIGlkOiBDdWJpc21JZEhhbmRsZTsgLy8g44OR44Op44Oh44O844K/XG4gIHRhcmdldFR5cGU6IEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlOyAvLyDpgannlKjlhYjjga7nqK7poZ5cbn1cblxuLyoqXG4gKiDniannkIbmvJTnrpfjga7mraPopo/ljJbmg4XloLFcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uIHtcbiAgbWluaW11bTogbnVtYmVyOyAvLyDmnIDlpKflgKRcbiAgbWF4aW11bTogbnVtYmVyOyAvLyDmnIDlsI/lgKRcbiAgZGVmYWx1dDogbnVtYmVyOyAvLyDjg4fjg5Xjgqnjg6vjg4jlgKRcbn1cblxuLyoqXG4gKiDniannkIbmvJTnrpfjga7mvJTnrpflp5Tkvb/nlKjjgZnjgovniannkIbngrnjga7mg4XloLFcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NQYXJ0aWNsZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHRoaXMubGFzdFBvc2l0aW9uID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gICAgdGhpcy5sYXN0R3Jhdml0eSA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHRoaXMuZm9yY2UgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB0aGlzLnZlbG9jaXR5ID0gbmV3IEN1YmlzbVZlY3RvcjIoMCwgMCk7XG4gIH1cblxuICBpbml0aWFsUG9zaXRpb246IEN1YmlzbVZlY3RvcjI7IC8vIOWIneacn+S9jee9rlxuICBtb2JpbGl0eTogbnVtYmVyOyAvLyDli5XjgY3jgoTjgZnjgZVcbiAgZGVsYXk6IG51bWJlcjsgLy8g6YGF44KMXG4gIGFjY2VsZXJhdGlvbjogbnVtYmVyOyAvLyDliqDpgJ/luqZcbiAgcmFkaXVzOiBudW1iZXI7IC8vIOi3nembolxuICBwb3NpdGlvbjogQ3ViaXNtVmVjdG9yMjsgLy8g54++5Zyo44Gu5L2N572uXG4gIGxhc3RQb3NpdGlvbjogQ3ViaXNtVmVjdG9yMjsgLy8g5pyA5b6M44Gu5L2N572uXG4gIGxhc3RHcmF2aXR5OiBDdWJpc21WZWN0b3IyOyAvLyDmnIDlvozjga7ph43liptcbiAgZm9yY2U6IEN1YmlzbVZlY3RvcjI7IC8vIOePvuWcqOOBi+OBi+OBo+OBpuOBhOOCi+WKm1xuICB2ZWxvY2l0eTogQ3ViaXNtVmVjdG9yMjsgLy8g54++5Zyo44Gu6YCf5bqmXG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu54mp55CG54K544Gu566h55CGXG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21QaHlzaWNzU3ViUmlnIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ub3JtYWxpemF0aW9uUG9zaXRpb24gPSBuZXcgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24oKTtcbiAgICB0aGlzLm5vcm1hbGl6YXRpb25BbmdsZSA9IG5ldyBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbigpO1xuICB9XG4gIGlucHV0Q291bnQ6IG51bWJlcjsgLy8g5YWl5Yqb44Gu5YCL5pWwXG4gIG91dHB1dENvdW50OiBudW1iZXI7IC8vIOWHuuWKm+OBruWAi+aVsFxuICBwYXJ0aWNsZUNvdW50OiBudW1iZXI7IC8vIOeJqeeQhueCueOBruWAi+aVsFxuICBiYXNlSW5wdXRJbmRleDogbnVtYmVyOyAvLyDlhaXlipvjga7mnIDliJ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgYmFzZU91dHB1dEluZGV4OiBudW1iZXI7IC8vIOWHuuWKm+OBruacgOWIneOBruOCpOODs+ODh+ODg+OCr+OCuVxuICBiYXNlUGFydGljbGVJbmRleDogbnVtYmVyOyAvLyDniannkIbngrnjga7mnIDliJ3jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgbm9ybWFsaXphdGlvblBvc2l0aW9uOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbjsgLy8g5q2j6KaP5YyW44GV44KM44Gf5L2N572uXG4gIG5vcm1hbGl6YXRpb25BbmdsZTogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb247IC8vIOato+imj+WMluOBleOCjOOBn+inkuW6plxufVxuXG4vKipcbiAqIOato+imj+WMluOBleOCjOOBn+ODkeODqeODoeODvOOCv+OBruWPluW+l+mWouaVsOOBruWuo+iogFxuICogQHBhcmFtIHRhcmdldFRyYW5zbGF0aW9uICAgICAvLyDmvJTnrpfntZDmnpzjga7np7vli5XlgKRcbiAqIEBwYXJhbSB0YXJnZXRBbmdsZSAgICAgICAgICAgLy8g5ryU566X57WQ5p6c44Gu6KeS5bqmXG4gKiBAcGFyYW0gdmFsdWUgICAgICAgICAgICAgICAgIC8vIOODkeODqeODoeODvOOCv+OBruWApFxuICogQHBhcmFtIHBhcmFtZXRlck1pbmltdW5WYWx1ZSAvLyDjg5Hjg6njg6Hjg7zjgr/jga7mnIDlsI/lgKRcbiAqIEBwYXJhbSBwYXJhbWV0ZXJNYXhpbXVtVmFsdWUgLy8g44OR44Op44Oh44O844K/44Gu5pyA5aSn5YCkXG4gKiBAcGFyYW0gcGFyYW1ldGVyRGVmYXVsdFZhbHVlIC8vIOODkeODqeODoeODvOOCv+OBruODh+ODleOCqeODq+ODiOWApFxuICogQHBhcmFtIG5vcm1hbGl6YXRpb25Qb3NpdGlvbiAvLyDmraPopo/ljJbjgZXjgozjgZ/kvY3nva5cbiAqIEBwYXJhbSBub3JtYWxpemF0aW9uQW5nbGUgICAgLy8g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqmXG4gKiBAcGFyYW0gaXNJbnZlcnRlZCAgICAgICAgICAgIC8vIOWApOOBjOWPjei7ouOBleOCjOOBpuOBhOOCi+OBi++8n1xuICogQHBhcmFtIHdlaWdodCAgICAgICAgICAgICAgICAvLyDph43jgb9cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBub3JtYWxpemVkUGh5c2ljc1BhcmFtZXRlclZhbHVlR2V0dGVyIHtcbiAgKFxuICAgIHRhcmdldFRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICAgIHRhcmdldEFuZ2xlOiB7IGFuZ2xlOiBudW1iZXIgfSxcbiAgICB2YWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlck1pbmltdW5WYWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlck1heGltdW1WYWx1ZTogbnVtYmVyLFxuICAgIHBhcmFtZXRlckRlZmF1bHRWYWx1ZTogbnVtYmVyLFxuICAgIG5vcm1hbGl6YXRpb25Qb3NpdGlvbjogQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24sXG4gICAgbm9ybWFsaXphdGlvbkFuZ2xlOiBDdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbixcbiAgICBpc0ludmVydGVkOiBib29sZWFuLFxuICAgIHdlaWdodDogbnVtYmVyXG4gICk6IHZvaWQ7XG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu5YCk44Gu5Y+W5b6X6Zai5pWw44Gu5a6j6KiAXG4gKiBAcGFyYW0gdHJhbnNsYXRpb24g56e75YuV5YCkXG4gKiBAcGFyYW0gcGFydGljbGVzIOeJqeeQhueCueOBruODquOCueODiFxuICogQHBhcmFtIGlzSW52ZXJ0ZWQg5YCk44GM5Y+N5pig44GV44KM44Gm44GE44KL44GLXG4gKiBAcGFyYW0gcGFyZW50R3Jhdml0eSDph43liptcbiAqIEByZXR1cm4g5YCkXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgcGh5c2ljc1ZhbHVlR2V0dGVyIHtcbiAgKFxuICAgIHRyYW5zbGF0aW9uOiBDdWJpc21WZWN0b3IyLFxuICAgIHBhcnRpY2xlczogQ3ViaXNtUGh5c2ljc1BhcnRpY2xlW10sXG4gICAgcGFydGljbGVJbmRleDogbnVtYmVyLFxuICAgIGlzSW52ZXJ0ZWQ6IGJvb2xlYW4sXG4gICAgcGFyZW50R3Jhdml0eTogQ3ViaXNtVmVjdG9yMlxuICApOiBudW1iZXI7XG59XG5cbi8qKlxuICog54mp55CG5ryU566X44Gu44K544Kx44O844Or44Gu5Y+W5b6X6Zai5pWw44Gu5a6j6KiAXG4gKiBAcGFyYW0gdHJhbnNsYXRpb25TY2FsZSDnp7vli5XlgKTjga7jgrnjgrHjg7zjg6tcbiAqIEBwYXJhbSBhbmdsZVNjYWxlICAgIOinkuW6puOBruOCueOCseODvOODq1xuICogQHJldHVybiDjgrnjgrHjg7zjg6vlgKRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBwaHlzaWNzU2NhbGVHZXR0ZXIge1xuICAodHJhbnNsYXRpb25TY2FsZTogQ3ViaXNtVmVjdG9yMiwgYW5nbGVTY2FsZTogbnVtYmVyKTogbnVtYmVyO1xufVxuXG4vKipcbiAqIOeJqeeQhua8lOeul+OBruWFpeWKm+aDheWgsVxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc0lucHV0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zb3VyY2UgPSBuZXcgQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcigpO1xuICB9XG4gIHNvdXJjZTogQ3ViaXNtUGh5c2ljc1BhcmFtZXRlcjsgLy8g5YWl5Yqb5YWD44Gu44OR44Op44Oh44O844K/XG4gIHNvdXJjZVBhcmFtZXRlckluZGV4OiBudW1iZXI7IC8vIOWFpeWKm+WFg+OBruODkeODqeODoeODvOOCv+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICB3ZWlnaHQ6IG51bWJlcjsgLy8g6YeN44G/XG4gIHR5cGU6IG51bWJlcjsgLy8g5YWl5Yqb44Gu56iu6aGeXG4gIHJlZmxlY3Q6IGJvb2xlYW47IC8vIOWApOOBjOWPjei7ouOBleOCjOOBpuOBhOOCi+OBi+OBqeOBhuOBi1xuICBnZXROb3JtYWxpemVkUGFyYW1ldGVyVmFsdWU6IG5vcm1hbGl6ZWRQaHlzaWNzUGFyYW1ldGVyVmFsdWVHZXR0ZXI7IC8vIOato+imj+WMluOBleOCjOOBn+ODkeODqeODoeODvOOCv+WApOOBruWPluW+l+mWouaVsFxufVxuXG4vKipcbiAqIEBicmllZiDniannkIbmvJTnrpfjga7lh7rlipvmg4XloLFcbiAqXG4gKiDniannkIbmvJTnrpfjga7lh7rlipvmg4XloLHjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NPdXRwdXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRlc3RpbmF0aW9uID0gbmV3IEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIoKTtcbiAgICB0aGlzLnRyYW5zbGF0aW9uU2NhbGUgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgfVxuXG4gIGRlc3RpbmF0aW9uOiBDdWJpc21QaHlzaWNzUGFyYW1ldGVyOyAvLyDlh7rlipvlhYjjga7jg5Hjg6njg6Hjg7zjgr9cbiAgZGVzdGluYXRpb25QYXJhbWV0ZXJJbmRleDogbnVtYmVyOyAvLyDlh7rlipvlhYjjga7jg5Hjg6njg6Hjg7zjgr/jga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgdmVydGV4SW5kZXg6IG51bWJlcjsgLy8g5oyv44KK5a2Q44Gu44Kk44Oz44OH44OD44Kv44K5XG4gIHRyYW5zbGF0aW9uU2NhbGU6IEN1YmlzbVZlY3RvcjI7IC8vIOenu+WLleWApOOBruOCueOCseODvOODq1xuICBhbmdsZVNjYWxlOiBudW1iZXI7IC8vIOinkuW6puOBruOCueOCseODvOODq1xuICB3ZWlnaHQ6IG51bWJlcjsgLy8g6YeN44G/XG4gIHR5cGU6IEN1YmlzbVBoeXNpY3NTb3VyY2U7IC8vIOWHuuWKm+OBrueorumhnlxuICByZWZsZWN0OiBib29sZWFuOyAvLyDlgKTjgYzlj43ou6LjgZXjgozjgabjgYTjgovjgYvjganjgYbjgYtcbiAgdmFsdWVCZWxvd01pbmltdW06IG51bWJlcjsgLy8g5pyA5bCP5YCk44KS5LiL5Zue44Gj44Gf5pmC44Gu5YCkXG4gIHZhbHVlRXhjZWVkZWRNYXhpbXVtOiBudW1iZXI7IC8vIOacgOWkp+WApOOCkuOBk+OBiOOBn+aZguOBruWApFxuICBnZXRWYWx1ZTogcGh5c2ljc1ZhbHVlR2V0dGVyOyAvLyDniannkIbmvJTnrpfjga7lgKTjga7lj5blvpfplqLmlbBcbiAgZ2V0U2NhbGU6IHBoeXNpY3NTY2FsZUdldHRlcjsgLy8g54mp55CG5ryU566X44Gu44K544Kx44O844Or5YCk44Gu5Y+W5b6X6Zai5pWwXG59XG5cbi8qKlxuICogQGJyaWVmIOeJqeeQhua8lOeul+OBruODh+ODvOOCv1xuICpcbiAqIOeJqeeQhua8lOeul+OBruODh+ODvOOCv+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUGh5c2ljc1JpZyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NTdWJSaWc+KCk7XG4gICAgdGhpcy5pbnB1dHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NJbnB1dD4oKTtcbiAgICB0aGlzLm91dHB1dHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NPdXRwdXQ+KCk7XG4gICAgdGhpcy5wYXJ0aWNsZXMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NQYXJ0aWNsZT4oKTtcbiAgICB0aGlzLmdyYXZpdHkgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB0aGlzLndpbmQgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICB0aGlzLmZwcyA9IDAuMDtcbiAgfVxuXG4gIHN1YlJpZ0NvdW50OiBudW1iZXI7IC8vIOeJqeeQhua8lOeul+OBrueJqeeQhueCueOBruWAi+aVsFxuICBzZXR0aW5nczogY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NTdWJSaWc+OyAvLyDniannkIbmvJTnrpfjga7niannkIbngrnjga7nrqHnkIbjga7jg6rjgrnjg4hcbiAgaW5wdXRzOiBjc21WZWN0b3I8Q3ViaXNtUGh5c2ljc0lucHV0PjsgLy8g54mp55CG5ryU566X44Gu5YWl5Yqb44Gu44Oq44K544OIXG4gIG91dHB1dHM6IGNzbVZlY3RvcjxDdWJpc21QaHlzaWNzT3V0cHV0PjsgLy8g54mp55CG5ryU566X44Gu5Ye65Yqb44Gu44Oq44K544OIXG4gIHBhcnRpY2xlczogY3NtVmVjdG9yPEN1YmlzbVBoeXNpY3NQYXJ0aWNsZT47IC8vIOeJqeeQhua8lOeul+OBrueJqeeQhueCueOBruODquOCueODiFxuICBncmF2aXR5OiBDdWJpc21WZWN0b3IyOyAvLyDph43liptcbiAgd2luZDogQ3ViaXNtVmVjdG9yMjsgLy8g6aKoXG4gIGZwczogbnVtYmVyOyAvL+eJqeeQhua8lOeul+WLleS9nEZQU1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21waHlzaWNzaW50ZXJuYWwnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NJbnB1dCA9ICQuQ3ViaXNtUGh5c2ljc0lucHV0O1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzSW5wdXQgPSAkLkN1YmlzbVBoeXNpY3NJbnB1dDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uID0gJC5DdWJpc21QaHlzaWNzTm9ybWFsaXphdGlvbjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc05vcm1hbGl6YXRpb24gPSAkLkN1YmlzbVBoeXNpY3NOb3JtYWxpemF0aW9uO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc091dHB1dCA9ICQuQ3ViaXNtUGh5c2ljc091dHB1dDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc091dHB1dCA9ICQuQ3ViaXNtUGh5c2ljc091dHB1dDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIgPSAkLkN1YmlzbVBoeXNpY3NQYXJhbWV0ZXI7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NQYXJhbWV0ZXIgPSAkLkN1YmlzbVBoeXNpY3NQYXJhbWV0ZXI7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzUGFydGljbGUgPSAkLkN1YmlzbVBoeXNpY3NQYXJ0aWNsZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc1BhcnRpY2xlID0gJC5DdWJpc21QaHlzaWNzUGFydGljbGU7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzUmlnID0gJC5DdWJpc21QaHlzaWNzUmlnO1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzUmlnID0gJC5DdWJpc21QaHlzaWNzUmlnO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc1NvdXJjZSA9ICQuQ3ViaXNtUGh5c2ljc1NvdXJjZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUGh5c2ljc1NvdXJjZSA9ICQuQ3ViaXNtUGh5c2ljc1NvdXJjZTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVBoeXNpY3NTdWJSaWcgPSAkLkN1YmlzbVBoeXNpY3NTdWJSaWc7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NTdWJSaWcgPSAkLkN1YmlzbVBoeXNpY3NTdWJSaWc7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21QaHlzaWNzVGFyZ2V0VHlwZSA9ICQuQ3ViaXNtUGh5c2ljc1RhcmdldFR5cGU7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVBoeXNpY3NUYXJnZXRUeXBlID0gJC5DdWJpc21QaHlzaWNzVGFyZ2V0VHlwZTtcbiAgZXhwb3J0IGNvbnN0IFBoeXNpY3NKc29uRWZmZWN0aXZlRm9yY2VzID0gJC5QaHlzaWNzSnNvbkVmZmVjdGl2ZUZvcmNlcztcbiAgZXhwb3J0IHR5cGUgUGh5c2ljc0pzb25FZmZlY3RpdmVGb3JjZXMgPSAkLlBoeXNpY3NKc29uRWZmZWN0aXZlRm9yY2VzO1xuICBleHBvcnQgdHlwZSBub3JtYWxpemVkUGh5c2ljc1BhcmFtZXRlclZhbHVlR2V0dGVyID1cbiAgICAkLm5vcm1hbGl6ZWRQaHlzaWNzUGFyYW1ldGVyVmFsdWVHZXR0ZXI7XG4gIGV4cG9ydCB0eXBlIHBoeXNpY3NTY2FsZUdldHRlciA9ICQucGh5c2ljc1NjYWxlR2V0dGVyO1xuICBleHBvcnQgdHlwZSBwaHlzaWNzVmFsdWVHZXR0ZXIgPSAkLnBoeXNpY3NWYWx1ZUdldHRlcjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xuaW1wb3J0IHsgQ3ViaXNtRnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcbmltcG9ydCB7IEN1YmlzbVZlY3RvcjIgfSBmcm9tICcuLi9tYXRoL2N1YmlzbXZlY3RvcjInO1xuaW1wb3J0IHsgQ3ViaXNtSnNvbiB9IGZyb20gJy4uL3V0aWxzL2N1YmlzbWpzb24nO1xuXG4vLyBKU09OIGtleXNcbmNvbnN0IFBvc2l0aW9uID0gJ1Bvc2l0aW9uJztcbmNvbnN0IFggPSAnWCc7XG5jb25zdCBZID0gJ1knO1xuY29uc3QgQW5nbGUgPSAnQW5nbGUnO1xuY29uc3QgVHlwZSA9ICdUeXBlJztcbmNvbnN0IElkID0gJ0lkJztcblxuLy8gTWV0YVxuY29uc3QgTWV0YSA9ICdNZXRhJztcbmNvbnN0IEVmZmVjdGl2ZUZvcmNlcyA9ICdFZmZlY3RpdmVGb3JjZXMnO1xuY29uc3QgVG90YWxJbnB1dENvdW50ID0gJ1RvdGFsSW5wdXRDb3VudCc7XG5jb25zdCBUb3RhbE91dHB1dENvdW50ID0gJ1RvdGFsT3V0cHV0Q291bnQnO1xuY29uc3QgUGh5c2ljc1NldHRpbmdDb3VudCA9ICdQaHlzaWNzU2V0dGluZ0NvdW50JztcbmNvbnN0IEdyYXZpdHkgPSAnR3Jhdml0eSc7XG5jb25zdCBXaW5kID0gJ1dpbmQnO1xuY29uc3QgVmVydGV4Q291bnQgPSAnVmVydGV4Q291bnQnO1xuY29uc3QgRnBzID0gJ0Zwcyc7XG5cbi8vIFBoeXNpY3NTZXR0aW5nc1xuY29uc3QgUGh5c2ljc1NldHRpbmdzID0gJ1BoeXNpY3NTZXR0aW5ncyc7XG5jb25zdCBOb3JtYWxpemF0aW9uID0gJ05vcm1hbGl6YXRpb24nO1xuY29uc3QgTWluaW11bSA9ICdNaW5pbXVtJztcbmNvbnN0IE1heGltdW0gPSAnTWF4aW11bSc7XG5jb25zdCBEZWZhdWx0ID0gJ0RlZmF1bHQnO1xuY29uc3QgUmVmbGVjdCA9ICdSZWZsZWN0JztcbmNvbnN0IFdlaWdodCA9ICdXZWlnaHQnO1xuXG4vLyBJbnB1dFxuY29uc3QgSW5wdXQgPSAnSW5wdXQnO1xuY29uc3QgU291cmNlID0gJ1NvdXJjZSc7XG5cbi8vIE91dHB1dFxuY29uc3QgT3V0cHV0ID0gJ091dHB1dCc7XG5jb25zdCBTY2FsZSA9ICdTY2FsZSc7XG5jb25zdCBWZXJ0ZXhJbmRleCA9ICdWZXJ0ZXhJbmRleCc7XG5jb25zdCBEZXN0aW5hdGlvbiA9ICdEZXN0aW5hdGlvbic7XG5cbi8vIFBhcnRpY2xlXG5jb25zdCBWZXJ0aWNlcyA9ICdWZXJ0aWNlcyc7XG5jb25zdCBNb2JpbGl0eSA9ICdNb2JpbGl0eSc7XG5jb25zdCBEZWxheSA9ICdEZWxheSc7XG5jb25zdCBSYWRpdXMgPSAnUmFkaXVzJztcbmNvbnN0IEFjY2VsZXJhdGlvbiA9ICdBY2NlbGVyYXRpb24nO1xuXG4vKipcbiAqIHBoeXNpY3MzLmpzb27jga7jgrPjg7Pjg4bjg4rjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVBoeXNpY3NKc29uIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gYnVmZmVyIHBoeXNpY3MzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fanNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBDdWJpc21Kc29uLmRlbGV0ZSh0aGlzLl9qc29uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDph43lipvjga7lj5blvpdcbiAgICogQHJldHVybiDph43liptcbiAgICovXG4gIHB1YmxpYyBnZXRHcmF2aXR5KCk6IEN1YmlzbVZlY3RvcjIge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHJldC54ID0gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEVmZmVjdGl2ZUZvcmNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEdyYXZpdHkpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhYKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgICByZXQueSA9IHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFZmZlY3RpdmVGb3JjZXMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhHcmF2aXR5KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDpoqjjga7lj5blvpdcbiAgICogQHJldHVybiDpoqhcbiAgICovXG4gIHB1YmxpYyBnZXRXaW5kKCk6IEN1YmlzbVZlY3RvcjIge1xuICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAsIDApO1xuICAgIHJldC54ID0gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEVmZmVjdGl2ZUZvcmNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFdpbmQpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhYKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgICByZXQueSA9IHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhFZmZlY3RpdmVGb3JjZXMpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhXaW5kKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbmvJTnrpfoqK3lrppGUFPjga7lj5blvpdcbiAgICogQHJldHVybiDniannkIbmvJTnrpfoqK3lrppGUFNcbiAgICovXG4gIHB1YmxpYyBnZXRGcHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKEZwcylcbiAgICAgIC50b0Zsb2F0KDAuMCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG5bqX44Gu566h55CG44Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEByZXR1cm4g54mp55CG5bqX44Gu566h55CG44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0U3ViUmlnQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5nQ291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhaXlipvjga7nt4/lkIjoqIjjga7lj5blvpdcbiAgICogQHJldHVybiDlhaXlipvjga7nt4/lkIjoqIhcbiAgICovXG4gIHB1YmxpYyBnZXRUb3RhbElucHV0Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsSW5wdXRDb3VudClcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+OBrue3j+WQiOioiOOBruWPluW+l1xuICAgKiBAcmV0dXJuIOWHuuWKm+OBrue3j+WQiOioiFxuICAgKi9cbiAgcHVibGljIGdldFRvdGFsT3V0cHV0Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRvdGFsT3V0cHV0Q291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbngrnjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHJldHVybiDniannkIbngrnjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRWZXJ0ZXhDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGV4Q291bnQpXG4gICAgICAudG9JbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7mnIDlsI/lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu5pyA5bCP5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWluaW11bVZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNaW5pbXVtKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu5pyA5aSn5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uTWF4aW11bVZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNYXhpbXVtKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/kvY3nva7jga7jg4fjg5Xjgqnjg6vjg4jlgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf5L2N572u44Gu44OH44OV44Kp44Or44OI5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvblBvc2l0aW9uRGVmYXVsdFZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUG9zaXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEZWZhdWx0KVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7mnIDlsI/lgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5q2j6KaP5YyW44GV44KM44Gf6KeS5bqm44Gu5pyA5bCP5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0Tm9ybWFsaXphdGlvbkFuZ2xlTWluaW11bVZhbHVlKFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhOb3JtYWxpemF0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQW5nbGUpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNaW5pbXVtKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7mnIDlpKflgKTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXhcbiAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7mnIDlpKflgKRcbiAgICovXG4gIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uQW5nbGVNYXhpbXVtVmFsdWUoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5vcm1hbGl6YXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhBbmdsZSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1heGltdW0pXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOato+imj+WMluOBleOCjOOBn+inkuW6puOBruODh+ODleOCqeODq+ODiOWApOOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDmraPopo/ljJbjgZXjgozjgZ/op5Lluqbjga7jg4fjg5Xjgqnjg6vjg4jlgKRcbiAgICovXG4gIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uQW5nbGVEZWZhdWx0VmFsdWUoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE5vcm1hbGl6YXRpb24pXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhBbmdsZSlcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKERlZmF1bHQpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFpeWKm+OBruWAi+aVsOOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlhaXlipvjga7lgIvmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRJbnB1dENvdW50KHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElucHV0KVxuICAgICAgLmdldFZlY3RvcigpXG4gICAgICAuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFpeWKm+OBrumHjeOBv+OBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIGlucHV0SW5kZXgg5YWl5Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5YWl5Yqb44Gu6YeN44G/XG4gICAqL1xuICBwdWJsaWMgZ2V0SW5wdXRXZWlnaHQoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIGlucHV0SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJbnB1dClcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5wdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFdlaWdodClcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog5YWl5Yqb44Gu5Y+N6Lui44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gaW5wdXRJbmRleCDlhaXlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlhaXlipvjga7lj43ou6JcbiAgICovXG4gIHB1YmxpYyBnZXRJbnB1dFJlZmxlY3QoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIGlucHV0SW5kZXg6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSW5wdXQpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhSZWZsZWN0KVxuICAgICAgLnRvQm9vbGVhbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFpeWKm+OBrueorumhnuOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIGlucHV0SW5kZXgg5YWl5Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5YWl5Yqb44Gu56iu6aGeXG4gICAqL1xuICBwdWJsaWMgZ2V0SW5wdXRUeXBlKHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlciwgaW5wdXRJbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSW5wdXQpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KGlucHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUeXBlKVxuICAgICAgLmdldFJhd1N0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWFpeWKm+WFg+OBrklE44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gaW5wdXRJbmRleCDlhaXlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlhaXlipvlhYPjga5JRFxuICAgKi9cbiAgcHVibGljIGdldElucHV0U291cmNlSWQoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIGlucHV0SW5kZXg6IG51bWJlclxuICApOiBDdWJpc21JZEhhbmRsZSB7XG4gICAgcmV0dXJuIEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIHRoaXMuX2pzb25cbiAgICAgICAgLmdldFJvb3QoKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSW5wdXQpXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaW5wdXRJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoU291cmNlKVxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZClcbiAgICAgICAgLmdldFJhd1N0cmluZygpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlh7rlipvjga7lgIvmlbDjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5Ye65Yqb44Gu5YCL5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0T3V0cHV0Q291bnQocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZlY3RvcigpXG4gICAgICAuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+OBrueJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCueOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOWHuuWKm+OBrueJqeeQhueCueOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKi9cbiAgcHVibGljIGdldE91dHB1dFZlcnRleEluZGV4KFxuICAgIHBoeXNpY3NTZXR0aW5nSW5kZXg6IG51bWJlcixcbiAgICBvdXRwdXRJbmRleDogbnVtYmVyXG4gICk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgob3V0cHV0SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0ZXhJbmRleClcbiAgICAgIC50b0ludCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+OBruinkuW6puOBruOCueOCseODvOODq+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOWHuuWKm+OBruinkuW6puOBruOCueOCseODvOODq1xuICAgKi9cbiAgcHVibGljIGdldE91dHB1dEFuZ2xlU2NhbGUoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFNjYWxlKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlh7rlipvjga7ph43jgb/jga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlh7rlipvjga7ph43jgb9cbiAgICovXG4gIHB1YmxpYyBnZXRPdXRwdXRXZWlnaHQoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFdlaWdodClcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog5Ye65Yqb5YWI44GuSUTjga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSBvdXRwdXRJbmRleCDlh7rlipvjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDlh7rlipvlhYjjga5JRFxuICAgKi9cbiAgcHVibGljIGdldE91dHB1dERlc3RpbmF0aW9uSWQoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgKTogQ3ViaXNtSWRIYW5kbGUge1xuICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICB0aGlzLl9qc29uXG4gICAgICAgIC5nZXRSb290KClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE91dHB1dClcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoRGVzdGluYXRpb24pXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKElkKVxuICAgICAgICAuZ2V0UmF3U3RyaW5nKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOWHuuWKm+OBrueorumhnuOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIG91dHB1dEluZGV4IOWHuuWKm+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOWHuuWKm+OBrueorumhnlxuICAgKi9cbiAgcHVibGljIGdldE91dHB1dFR5cGUoXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIG91dHB1dEluZGV4OiBudW1iZXJcbiAgKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFR5cGUpXG4gICAgICAuZ2V0UmF3U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICog5Ye65Yqb44Gu5Y+N6Lui44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gb3V0cHV0SW5kZXgg5Ye65Yqb44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g5Ye65Yqb44Gu5Y+N6LuiXG4gICAqL1xuICBwdWJsaWMgZ2V0T3V0cHV0UmVmbGVjdChcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgb3V0cHV0SW5kZXg6IG51bWJlclxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoT3V0cHV0KVxuICAgICAgLmdldFZhbHVlQnlJbmRleChvdXRwdXRJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFJlZmxlY3QpXG4gICAgICAudG9Cb29sZWFuKCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu5YCL5pWw44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+eUt+ioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcmV0dXJuIOeJqeeQhueCueOBruWAi+aVsFxuICAgKi9cbiAgcHVibGljIGdldFBhcnRpY2xlQ291bnQocGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAuZ2V0VmVjdG9yKClcbiAgICAgIC5nZXRTaXplKCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu5YuV44GN44KE44GZ44GV44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g54mp55CG54K544Gu5YuV44GN44KE44GZ44GVXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydGljbGVNb2JpbGl0eShcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgdmVydGV4SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNb2JpbGl0eSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu6YGF44KM44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumuOBruOCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g54mp55CG54K544Gu6YGF44KMXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydGljbGVEZWxheShcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgdmVydGV4SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhEZWxheSlcbiAgICAgIC50b0Zsb2F0KCk7XG4gIH1cblxuICAvKipcbiAgICog54mp55CG54K544Gu5Yqg6YCf5bqm44Gu5Y+W5b6XXG4gICAqIEBwYXJhbSBwaHlzaWNzU2V0dGluZ0luZGV4IOeJqeeQhua8lOeul+OBruioreWumlxuICAgKiBAcGFyYW0gdmVydGV4SW5kZXgg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g54mp55CG54K544Gu5Yqg6YCf5bqmXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydGljbGVBY2NlbGVyYXRpb24oXG4gICAgcGh5c2ljc1NldHRpbmdJbmRleDogbnVtYmVyLFxuICAgIHZlcnRleEluZGV4OiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fanNvblxuICAgICAgLmdldFJvb3QoKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoUGh5c2ljc1NldHRpbmdzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleChwaHlzaWNzU2V0dGluZ0luZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmVydGljZXMpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHZlcnRleEluZGV4KVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoQWNjZWxlcmF0aW9uKVxuICAgICAgLnRvRmxvYXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDniannkIbngrnjga7ot53pm6Ljga7lj5blvpdcbiAgICogQHBhcmFtIHBoeXNpY3NTZXR0aW5nSW5kZXgg54mp55CG5ryU566X44Gu6Kit5a6a44Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEBwYXJhbSB2ZXJ0ZXhJbmRleCDniannkIbngrnjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHJldHVybiDniannkIbngrnjga7ot53pm6JcbiAgICovXG4gIHB1YmxpYyBnZXRQYXJ0aWNsZVJhZGl1cyhcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgdmVydGV4SW5kZXg6IG51bWJlclxuICApOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhSYWRpdXMpXG4gICAgICAudG9GbG9hdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeJqeeQhueCueOBruS9jee9ruOBruWPluW+l1xuICAgKiBAcGFyYW0gcGh5c2ljc1NldHRpbmdJbmRleCDniannkIbmvJTnrpfjga7oqK3lrprjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICogQHBhcmFtIHZlcnRleEluZGUg54mp55CG54K544Gu44Kk44Oz44OH44OD44Kv44K5XG4gICAqIEByZXR1cm4g54mp55CG54K544Gu5L2N572uXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFydGljbGVQb3NpdGlvbihcbiAgICBwaHlzaWNzU2V0dGluZ0luZGV4OiBudW1iZXIsXG4gICAgdmVydGV4SW5kZXg6IG51bWJlclxuICApOiBDdWJpc21WZWN0b3IyIHtcbiAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLCAwKTtcbiAgICByZXQueCA9IHRoaXMuX2pzb25cbiAgICAgIC5nZXRSb290KClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBoeXNpY3NTZXR0aW5ncylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgocGh5c2ljc1NldHRpbmdJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZlcnRpY2VzKVxuICAgICAgLmdldFZhbHVlQnlJbmRleCh2ZXJ0ZXhJbmRleClcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFBvc2l0aW9uKVxuICAgICAgLmdldFZhbHVlQnlTdHJpbmcoWClcbiAgICAgIC50b0Zsb2F0KCk7XG4gICAgcmV0LnkgPSB0aGlzLl9qc29uXG4gICAgICAuZ2V0Um9vdCgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQaHlzaWNzU2V0dGluZ3MpXG4gICAgICAuZ2V0VmFsdWVCeUluZGV4KHBoeXNpY3NTZXR0aW5nSW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhWZXJ0aWNlcylcbiAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgodmVydGV4SW5kZXgpXG4gICAgICAuZ2V0VmFsdWVCeVN0cmluZyhQb3NpdGlvbilcbiAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFkpXG4gICAgICAudG9GbG9hdCgpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICBfanNvbjogQ3ViaXNtSnNvbjsgLy8gcGh5c2ljczMuanNvbuODh+ODvOOCv1xufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jdWJpc21waHlzaWNzanNvbic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtUGh5c2ljc0pzb24gPSAkLkN1YmlzbVBoeXNpY3NKc29uO1xuICBleHBvcnQgdHlwZSBDdWJpc21QaHlzaWNzSnNvbiA9ICQuQ3ViaXNtUGh5c2ljc0pzb247XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0cml4NDQnO1xuaW1wb3J0IHsgQ3ViaXNtTW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XG5cbi8qKlxuICog44Oi44OH44Or5o+P55S744KS5Yem55CG44GZ44KL44Os44Oz44OA44OpXG4gKlxuICog44K144OW44Kv44Op44K544Gr55Kw5aKD5L6d5a2Y44Gu5o+P55S75ZG95Luk44KS6KiY6L+w44GZ44KL44CCXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDdWJpc21SZW5kZXJlciB7XG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLnlJ/miJDjgZfjgablj5blvpfjgZnjgotcbiAgICpcbiAgICogQHJldHVybiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKCk6IEN1YmlzbVJlbmRlcmVyIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLop6PmlL7jgZnjgotcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKHJlbmRlcmVyOiBDdWJpc21SZW5kZXJlcik6IHZvaWQge1xuICAgIHJlbmRlcmVyID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgpLlrp/ooYzjgZnjgotcbiAgICog5byV5pWw44Gr5rih44GX44Gf44Oi44OH44Or44GL44KJ44Os44Oz44OA44Op44Gu5Yid5pyf5YyW5Yem55CG44Gr5b+F6KaB44Gq5oOF5aCx44KS5Y+W44KK5Ye644GZ44GT44Go44GM44Gn44GN44KLXG4gICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xuICAgIHRoaXMuX21vZGVsID0gbW9kZWw7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44KS5o+P55S744GZ44KLXG4gICAqL1xuICBwdWJsaWMgZHJhd01vZGVsKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmdldE1vZGVsKCkgPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgdGhpcy5zYXZlUHJvZmlsZSgpO1xuXG4gICAgdGhpcy5kb0RyYXdNb2RlbCgpO1xuXG4gICAgdGhpcy5yZXN0b3JlUHJvZmlsZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJfjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICog6YWN5YiX44Gv6KSH6KO944GV44KM44KL44Gu44Gn44CB5YWD44Gu6YWN5YiX44Gv5aSW44Gn56C05qOE44GX44Gm6Imv44GEXG4gICAqIEBwYXJhbSBtYXRyaXg0NCBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiXXG4gICAqL1xuICBwdWJsaWMgc2V0TXZwTWF0cml4KG1hdHJpeDQ0OiBDdWJpc21NYXRyaXg0NCk6IHZvaWQge1xuICAgIHRoaXMuX212cE1hdHJpeDR4NC5zZXRNYXRyaXgobWF0cml4NDQuZ2V0QXJyYXkoKSk7XG4gIH1cblxuICAvKipcbiAgICogTW9kZWwtVmlldy1Qcm9qZWN0aW9uIOihjOWIl+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJdcbiAgICovXG4gIHB1YmxpYyBnZXRNdnBNYXRyaXgoKTogQ3ViaXNtTWF0cml4NDQge1xuICAgIHJldHVybiB0aGlzLl9tdnBNYXRyaXg0eDQ7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu6Imy44KS44K744OD44OI44GZ44KLXG4gICAqIOWQhOiJsjAuMH4xLjDjga7plpPjgafmjIflrprjgZnjgovvvIgxLjDjgYzmqJnmupbjga7nirbmhYvvvIlcbiAgICogQHBhcmFtIHJlZCDotaTjg4Hjg6Pjg7Pjg43jg6vjga7lgKRcbiAgICogQHBhcmFtIGdyZWVuIOe3keODgeODo+ODs+ODjeODq+OBruWApFxuICAgKiBAcGFyYW0gYmx1ZSDpnZLjg4Hjg6Pjg7Pjg43jg6vjga7lgKRcbiAgICogQHBhcmFtIGFscGhhIM6x44OB44Oj44Oz44ON44Or44Gu5YCkXG4gICAqL1xuICBwdWJsaWMgc2V0TW9kZWxDb2xvcihcbiAgICByZWQ6IG51bWJlcixcbiAgICBncmVlbjogbnVtYmVyLFxuICAgIGJsdWU6IG51bWJlcixcbiAgICBhbHBoYTogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIGlmIChyZWQgPCAwLjApIHtcbiAgICAgIHJlZCA9IDAuMDtcbiAgICB9IGVsc2UgaWYgKHJlZCA+IDEuMCkge1xuICAgICAgcmVkID0gMS4wO1xuICAgIH1cblxuICAgIGlmIChncmVlbiA8IDAuMCkge1xuICAgICAgZ3JlZW4gPSAwLjA7XG4gICAgfSBlbHNlIGlmIChncmVlbiA+IDEuMCkge1xuICAgICAgZ3JlZW4gPSAxLjA7XG4gICAgfVxuXG4gICAgaWYgKGJsdWUgPCAwLjApIHtcbiAgICAgIGJsdWUgPSAwLjA7XG4gICAgfSBlbHNlIGlmIChibHVlID4gMS4wKSB7XG4gICAgICBibHVlID0gMS4wO1xuICAgIH1cblxuICAgIGlmIChhbHBoYSA8IDAuMCkge1xuICAgICAgYWxwaGEgPSAwLjA7XG4gICAgfSBlbHNlIGlmIChhbHBoYSA+IDEuMCkge1xuICAgICAgYWxwaGEgPSAxLjA7XG4gICAgfVxuXG4gICAgdGhpcy5fbW9kZWxDb2xvci5SID0gcmVkO1xuICAgIHRoaXMuX21vZGVsQ29sb3IuRyA9IGdyZWVuO1xuICAgIHRoaXMuX21vZGVsQ29sb3IuQiA9IGJsdWU7XG4gICAgdGhpcy5fbW9kZWxDb2xvci5BID0gYWxwaGE7XG4gIH1cblxuICAvKipcbiAgICog44Oi44OH44Or44Gu6Imy44KS5Y+W5b6X44GZ44KLXG4gICAqIOWQhOiJsjAuMH4xLjDjga7plpPjgafmjIflrprjgZnjgosoMS4w44GM5qiZ5rqW44Gu54q25oWLKVxuICAgKlxuICAgKiBAcmV0dXJuIFJHQkHjga7jgqvjg6njg7zmg4XloLFcbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbENvbG9yKCk6IEN1YmlzbVRleHR1cmVDb2xvciB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5fbW9kZWxDb2xvcikpO1xuICB9XG5cbiAgLyoqXG4gICAqIOS5l+eul+a4iOOBv86x44Gu5pyJ5Yq544O754Sh5Yq544KS44K744OD44OI44GZ44KLXG4gICAqIOacieWKueOBq+OBmeOCi+OBquOCiXRydWXjgIHnhKHlirnjgavjgZnjgovjgarjgolmYWxzZeOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldElzUHJlbXVsdGlwbGllZEFscGhhKGVuYWJsZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhID0gZW5hYmxlO1xuICB9XG5cbiAgLyoqXG4gICAqIOS5l+eul+a4iOOBv86x44Gu5pyJ5Yq544O754Sh5Yq544KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4gdHJ1ZSDkuZfnrpfmuIjjgb/jga7OseacieWKuVxuICAgKiBAcmV0dXJuIGZhbHNlIOS5l+eul+a4iOOBv+OBrs6x54Sh5Yq5XG4gICAqL1xuICBwdWJsaWMgaXNQcmVtdWx0aXBsaWVkQWxwaGEoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCq+ODquODs+OCsO+8iOeJh+mdouaPj+eUu++8ieOBruacieWKueODu+eEoeWKueOCkuOCu+ODg+ODiOOBmeOCi+OAglxuICAgKiDmnInlirnjgavjgZnjgovjgarjgol0cnVl44CB54Sh5Yq544Gr44GZ44KL44Gq44KJZmFsc2XjgpLjgrvjg4Pjg4jjgZnjgotcbiAgICovXG4gIHB1YmxpYyBzZXRJc0N1bGxpbmcoY3VsbGluZzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuX2lzQ3VsbGluZyA9IGN1bGxpbmc7XG4gIH1cblxuICAvKipcbiAgICog44Kr44Oq44Oz44Kw77yI54mH6Z2i5o+P55S777yJ44Gu5pyJ5Yq544O754Sh5Yq544KS5Y+W5b6X44GZ44KL44CCXG4gICAqIEByZXR1cm4gdHJ1ZSDjgqvjg6rjg7PjgrDmnInlirlcbiAgICogQHJldHVybiBmYWxzZSDjgqvjg6rjg7PjgrDnhKHlirlcbiAgICovXG4gIHB1YmxpYyBpc0N1bGxpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzQ3VsbGluZztcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7nlbDmlrnmgKfjg5XjgqPjg6vjgr/jg6rjg7PjgrDjga7jg5Hjg6njg6Hjg7zjgr/jgpLjgrvjg4Pjg4jjgZnjgotcbiAgICog44OR44Op44Oh44O844K/5YCk44Gu5b2x6Z+/5bqm44Gv44Os44Oz44OA44Op44Gu5a6f6KOF44Gr5L6d5a2Y44GZ44KLXG4gICAqIEBwYXJhbSBuIOODkeODqeODoeODvOOCv+OBruWApFxuICAgKi9cbiAgcHVibGljIHNldEFuaXNvdHJvcHkobjogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fYW5pc290cm9weSA9IG47XG4gIH1cblxuICAvKipcbiAgICog44OG44Kv44K544OB44Oj44Gu55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/44KS44K744OD44OI44GZ44KLXG4gICAqIEByZXR1cm4g55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/XG4gICAqL1xuICBwdWJsaWMgZ2V0QW5pc290cm9weSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9hbmlzb3Ryb3B5O1xuICB9XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODquODs+OCsOOBmeOCi+ODouODh+ODq+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODrOODs+ODgOODquODs+OCsOOBmeOCi+ODouODh+ODq1xuICAgKi9cbiAgcHVibGljIGdldE1vZGVsKCk6IEN1YmlzbU1vZGVsIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZWw7XG4gIH1cblxuICAvKipcbiAgICog44Oe44K544Kv5o+P55S744Gu5pa55byP44KS5aSJ5pu044GZ44KL44CCXG4gICAqIGZhbHNl44Gu5aC05ZCI44CB44Oe44K544Kv44KSMeaemuOBruODhuOCr+OCueODgeODo+OBq+WIhuWJsuOBl+OBpuODrOODs+ODgOODquODs+OCsOOBmeOCi++8iOODh+ODleOCqeODq+ODiO+8iVxuICAgKiDpq5jpgJ/jgaDjgYzjgIHjg57jgrnjgq/lgIvmlbDjga7kuIrpmZDjgYwzNuOBq+mZkOWumuOBleOCjOOAgeizquOCguiNkuOBj+OBquOCi1xuICAgKiB0cnVl44Gu5aC05ZCI44CB44OR44O844OE5o+P55S744Gu5YmN44Gr44Gd44Gu6YO95bqm5b+F6KaB44Gq44Oe44K544Kv44KS5o+P44GN55u044GZXG4gICAqIOODrOODs+ODgOODquODs+OCsOWTgeizquOBr+mrmOOBhOOBjOaPj+eUu+WHpueQhuiyoOiNt+OBr+Wil+OBmVxuICAgKiBAcGFyYW0gaGlnaCDpq5jnsr7ntLDjg57jgrnjgq/jgavliIfjgormm7/jgYjjgovjgYvvvJ9cbiAgICovXG4gIHB1YmxpYyB1c2VIaWdoUHJlY2lzaW9uTWFzayhoaWdoOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5fdXNlSGlnaFByZWNpc2lvbk1hc2sgPSBoaWdoO1xuICB9XG5cbiAgLyoqXG4gICAqIOODnuOCueOCr+OBruaPj+eUu+aWueW8j+OCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIHRydWUg6auY57K+57Sw5pa55byPXG4gICAqIEByZXR1cm4gZmFsc2Ug44OH44OV44Kp44Or44OIXG4gICAqL1xuICBwdWJsaWMgaXNVc2luZ0hpZ2hQcmVjaXNpb25NYXNrKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl91c2VIaWdoUHJlY2lzaW9uTWFzaztcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9pc0N1bGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9pc1ByZW11bHRpcGxpZWRBbHBoYSA9IGZhbHNlO1xuICAgIHRoaXMuX2FuaXNvdHJvcHkgPSAwLjA7XG4gICAgdGhpcy5fbW9kZWwgPSBudWxsO1xuICAgIHRoaXMuX21vZGVsQ29sb3IgPSBuZXcgQ3ViaXNtVGV4dHVyZUNvbG9yKCk7XG4gICAgdGhpcy5fdXNlSGlnaFByZWNpc2lvbk1hc2sgPSBmYWxzZTtcblxuICAgIC8vIOWNmOS9jeihjOWIl+OBq+WIneacn+WMllxuICAgIHRoaXMuX212cE1hdHJpeDR4NCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgIHRoaXMuX212cE1hdHJpeDR4NC5sb2FkSWRlbnRpdHkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vmj4/nlLvjga7lrp/oo4VcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBkb0RyYXdNb2RlbCgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jvvIjjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvInjgpLmj4/nlLvjgZnjgotcbiAgICog44Od44Oq44K044Oz44Oh44OD44K344Ol44Go44OG44Kv44K544OB44Oj55Wq5Y+344KS44K744OD44OI44Gn5rih44GZ44CCXG4gICAqIEBwYXJhbSB0ZXh0dXJlTm8g5o+P55S744GZ44KL44OG44Kv44K544OB44Oj55Wq5Y+3XG4gICAqIEBwYXJhbSBpbmRleENvdW50IOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueWApFxuICAgKiBAcGFyYW0gdmVydGV4Q291bnQg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K55pWwXG4gICAqIEBwYXJhbSBpbmRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpemggueCueOBruOCpOODs+ODh+ODg+OCr+OCuemFjeWIl1xuICAgKiBAcGFyYW0gdmVydGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K56YWN5YiXXG4gICAqIEBwYXJhbSB1dkFycmF5IHV26YWN5YiXXG4gICAqIEBwYXJhbSBvcGFjaXR5IOS4jemAj+aYjuW6plxuICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O844OW44Os44Oz44OH44Kj44Oz44Kw44Gu44K/44Kk44OXXG4gICAqIEBwYXJhbSBpbnZlcnRlZE1hc2sg44Oe44K544Kv5L2/55So5pmC44Gu44Oe44K544Kv44Gu5Y+N6Lui5L2/55SoXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZHJhd01lc2goXG4gICAgdGV4dHVyZU5vOiBudW1iZXIsXG4gICAgaW5kZXhDb3VudDogbnVtYmVyLFxuICAgIHZlcnRleENvdW50OiBudW1iZXIsXG4gICAgaW5kZXhBcnJheTogVWludDE2QXJyYXksXG4gICAgdmVydGV4QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICB1dkFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgbXVsdGlwbHlDb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yLFxuICAgIHNjcmVlbkNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3IsXG4gICAgb3BhY2l0eTogbnVtYmVyLFxuICAgIGNvbG9yQmxlbmRNb2RlOiBDdWJpc21CbGVuZE1vZGUsXG4gICAgaW52ZXJ0ZWRNYXNrOiBib29sZWFuXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+aPj+eUu+ebtOWJjeOBruODrOODs+ODgOODqeOBruOCueODhuODvOODiOOCkuS/neaMgeOBmeOCi1xuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IHNhdmVQcm9maWxlKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+aPj+eUu+ebtOWJjeOBruODrOODs+ODgOODqeOBruOCueODhuODvOODiOOCkuW+qeW4sOOBmeOCi1xuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IHJlc3RvcmVQcm9maWxlKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIOODrOODs+ODgOODqeOBjOS/neaMgeOBmeOCi+mdmeeahOOBquODquOCveODvOOCueOCkumWi+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzdGF0aWNSZWxlYXNlOiBhbnk7XG5cbiAgcHJvdGVjdGVkIF9tdnBNYXRyaXg0eDQ6IEN1YmlzbU1hdHJpeDQ0OyAvLyBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiXXG4gIHByb3RlY3RlZCBfbW9kZWxDb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yOyAvLyDjg6Ljg4fjg6voh6rkvZPjga7jgqvjg6njg7zvvIhSR0JB77yJXG4gIHByb3RlY3RlZCBfaXNDdWxsaW5nOiBib29sZWFuOyAvLyDjgqvjg6rjg7PjgrDjgYzmnInlirnjgarjgol0cnVlXG4gIHByb3RlY3RlZCBfaXNQcmVtdWx0aXBsaWVkQWxwaGE6IGJvb2xlYW47IC8vIOS5l+eul+a4iOOBv86x44Gq44KJdHJ1ZVxuICBwcm90ZWN0ZWQgX2FuaXNvdHJvcHk6IGFueTsgLy8g44OG44Kv44K544OB44Oj44Gu55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/XG4gIHByb3RlY3RlZCBfbW9kZWw6IEN1YmlzbU1vZGVsOyAvLyDjg6zjg7Pjg4Djg6rjg7PjgrDlr77osaHjga7jg6Ljg4fjg6tcbiAgcHJvdGVjdGVkIF91c2VIaWdoUHJlY2lzaW9uTWFzazogYm9vbGVhbjsgLy8gZmFsc2Xjga7loLTlkIjjgIHjg57jgrnjgq/jgpLnuo/jgoHjgabmj4/nlLvjgZnjgosgdHJ1ZeOBruWgtOWQiOOAgeODnuOCueOCr+OBr+ODkeODvOODhOaPj+eUu+OBlOOBqOOBq+abuOOBjeebtOOBmVxufVxuXG5leHBvcnQgZW51bSBDdWJpc21CbGVuZE1vZGUge1xuICBDdWJpc21CbGVuZE1vZGVfTm9ybWFsID0gMCwgLy8g6YCa5bi4XG4gIEN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZSA9IDEsIC8vIOWKoOeul1xuICBDdWJpc21CbGVuZE1vZGVfTXVsdGlwbGljYXRpdmUgPSAyLCAvLyDkuZfnrpdcbn1cblxuLyoqXG4gKiDjg4bjgq/jgrnjg4Hjg6Pjga7oibLjgpJSR0JB44Gn5omx44GG44Gf44KB44Gu44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21UZXh0dXJlQ29sb3Ige1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBjb25zdHJ1Y3RvcihyID0gMS4wLCBnID0gMS4wLCBiID0gMS4wLCBhID0gMS4wKSB7XG4gICAgdGhpcy5SID0gcjtcbiAgICB0aGlzLkcgPSBnO1xuICAgIHRoaXMuQiA9IGI7XG4gICAgdGhpcy5BID0gYTtcbiAgfVxuXG4gIFI6IG51bWJlcjsgLy8g6LWk44OB44Oj44Oz44ON44OrXG4gIEc6IG51bWJlcjsgLy8g57eR44OB44Oj44Oz44ON44OrXG4gIEI6IG51bWJlcjsgLy8g6Z2S44OB44Oj44Oz44ON44OrXG4gIEE6IG51bWJlcjsgLy8gzrHjg4Hjg6Pjg7Pjg43jg6tcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3ViaXNtcmVuZGVyZXInO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbUJsZW5kTW9kZSA9ICQuQ3ViaXNtQmxlbmRNb2RlO1xuICBleHBvcnQgdHlwZSBDdWJpc21CbGVuZE1vZGUgPSAkLkN1YmlzbUJsZW5kTW9kZTtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVJlbmRlcmVyID0gJC5DdWJpc21SZW5kZXJlcjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUmVuZGVyZXIgPSAkLkN1YmlzbVJlbmRlcmVyO1xuICBleHBvcnQgY29uc3QgQ3ViaXNtVGV4dHVyZUNvbG9yID0gJC5DdWJpc21UZXh0dXJlQ29sb3I7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVRleHR1cmVDb2xvciA9ICQuQ3ViaXNtVGV4dHVyZUNvbG9yO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ29uc3RhbnQgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuaW1wb3J0IHsgQ3ViaXNtTWF0cml4NDQgfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1hdHJpeDQ0JztcbmltcG9ydCB7IEN1YmlzbU1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xuaW1wb3J0IHsgY3NtTWFwIH0gZnJvbSAnLi4vdHlwZS9jc21tYXAnO1xuaW1wb3J0IHsgY3NtUmVjdCB9IGZyb20gJy4uL3R5cGUvY3NtcmVjdGYnO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ3ViaXNtTG9nRXJyb3IsIEN1YmlzbUxvZ1dhcm5pbmcgfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5pbXBvcnQge1xuICBDdWJpc21CbGVuZE1vZGUsXG4gIEN1YmlzbVJlbmRlcmVyLFxuICBDdWJpc21UZXh0dXJlQ29sb3IsXG59IGZyb20gJy4vY3ViaXNtcmVuZGVyZXInO1xuXG5jb25zdCBDb2xvckNoYW5uZWxDb3VudCA9IDQ7IC8vIOWun+mok+aZguOBqzHjg4Hjg6Pjg7Pjg43jg6vjga7loLTlkIjjga8x44CBUkdC44Gg44GR44Gu5aC05ZCI44GvM+OAgeOCouODq+ODleOCoeOCguWQq+OCgeOCi+WgtOWQiOOBrzRcbmNvbnN0IENsaXBwaW5nTWFza01heENvdW50T25EZWZhdWx0ID0gMzY7IC8vIOmAmuW4uOOBruODleODrOODvOODoOODkOODg+ODleOCoeS4gOaemuOBguOBn+OCiuOBruODnuOCueOCr+acgOWkp+aVsFxuY29uc3QgQ2xpcHBpbmdNYXNrTWF4Q291bnRPbk11bHRpUmVuZGVyVGV4dHVyZSA9IDMyOyAvLyDjg5Xjg6zjg7zjg6Djg5Djg4Pjg5XjgqHjgYwy5p6a5Lul5LiK44GC44KL5aC05ZCI44Gu44OV44Os44O844Og44OQ44OD44OV44Kh5LiA5p6a44GC44Gf44KK44Gu44Oe44K544Kv5pyA5aSn5pWwXG5cbmNvbnN0IFNoYWRlckNvdW50ID0gMTA7IC8vIOOCt+OCp+ODvOODgOODvOOBruaVsCA9IOODnuOCueOCr+eUn+aIkOeUqCArICjpgJrluLjnlKggKyDliqDnrpcgKyDkuZfnrpcpICogKOODnuOCueOCr+eEoeOBruS5l+eul+a4iOOCouODq+ODleOCoeWvvuW/nOeJiCArIOODnuOCueOCr+acieOBruS5l+eul+a4iOOCouODq+ODleOCoeWvvuW/nOeJiCArIOODnuOCueOCr+acieWPjei7ouOBruS5l+eul+a4iOOCouODq+ODleOCoeWvvuW/nOeJiClcbmxldCBzX2luc3RhbmNlOiBDdWJpc21TaGFkZXJfV2ViR0w7XG5sZXQgc192aWV3cG9ydDogbnVtYmVyW107XG5sZXQgc19mYm86IFdlYkdMRnJhbWVidWZmZXI7XG5cbi8qKlxuICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5Yem55CG44KS5a6f6KGM44GZ44KL44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wge1xuICAvKipcbiAgICog44Kr44Op44O844OB44Oj44Oz44ON44Or77yIUkdCQe+8ieOBruODleODqeOCsOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcGFyYW0gY2hhbm5lbE5vIOOCq+ODqeODvOODgeODo+ODs+ODjeODq++8iFJHQkHvvInjga7nlarlj7fvvIgwOlIsIDE6RywgMjpCLCAzOkHvvIlcbiAgICovXG4gIHB1YmxpYyBnZXRDaGFubmVsRmxhZ0FzQ29sb3IoY2hhbm5lbE5vOiBudW1iZXIpOiBDdWJpc21UZXh0dXJlQ29sb3Ige1xuICAgIHJldHVybiB0aGlzLl9jaGFubmVsQ29sb3JzLmF0KGNoYW5uZWxObyk7XG4gIH1cblxuICAvKipcbiAgICog44OG44Oz44Od44Op44Oq44Gu44Os44Oz44OA44O844OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K544KS5Y+W5b6X44GZ44KLXG4gICAqIEZyYW1lQnVmZmVyT2JqZWN044GM5a2Y5Zyo44GX44Gq44GE5aC05ZCI44CB5paw44GX44GP55Sf5oiQ44GZ44KLXG4gICAqXG4gICAqIEByZXR1cm4g44Os44Oz44OA44O844OG44Kv44K544OB44Oj44Gu6YWN5YiXXG4gICAqL1xuICBwdWJsaWMgZ2V0TWFza1JlbmRlclRleHR1cmUoKTogY3NtVmVjdG9yPFdlYkdMRnJhbWVidWZmZXI+IHtcbiAgICAvLyDjg4bjg7Pjg53jg6njg6rjga5SZW5kZXJUZXh0dXJl44KS5Y+W5b6X44GZ44KLXG4gICAgaWYgKHRoaXMuX21hc2tUZXh0dXJlICYmIHRoaXMuX21hc2tUZXh0dXJlLnRleHR1cmVzICE9IG51bGwpIHtcbiAgICAgIC8vIOWJjeWbnuS9v+OBo+OBn+OCguOBruOCkui/lOOBmVxuICAgICAgdGhpcy5fbWFza1RleHR1cmUuZnJhbWVObyA9IHRoaXMuX2N1cnJlbnRGcmFtZU5vO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGcmFtZUJ1ZmZlck9iamVjdOOBjOWtmOWcqOOBl+OBquOBhOWgtOWQiOOAgeaWsOOBl+OBj+eUn+aIkOOBmeOCi1xuICAgICAgaWYgKHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlcyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlcy5jbGVhcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5fbWFza1JlbmRlclRleHR1cmVzID0gbmV3IGNzbVZlY3RvcjxXZWJHTEZyYW1lYnVmZmVyPigpO1xuXG4gICAgICAvLyBDb2xvckJ1ZmZlck9iamVjdOOBjOWtmOWcqOOBl+OBquOBhOWgtOWQiOOAgeaWsOOBl+OBj+eUn+aIkOOBmeOCi1xuICAgICAgaWYgKHRoaXMuX21hc2tDb2xvckJ1ZmZlcnMgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9tYXNrQ29sb3JCdWZmZXJzLmNsZWFyKCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9tYXNrQ29sb3JCdWZmZXJzID0gbmV3IGNzbVZlY3RvcjxXZWJHTFRleHR1cmU+KCk7XG5cbiAgICAgIC8vIOOCr+ODquODg+ODlOODs+OCsOODkOODg+ODleOCoeOCteOCpOOCuuOCkuWPluW+l1xuICAgICAgY29uc3Qgc2l6ZTogbnVtYmVyID0gdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZTtcblxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX3JlbmRlclRleHR1cmVDb3VudDsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLl9tYXNrQ29sb3JCdWZmZXJzLnB1c2hCYWNrKHRoaXMuZ2wuY3JlYXRlVGV4dHVyZSgpKTsgLy8g55u05o6l5Luj5YWlXG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUoXG4gICAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICAgIHRoaXMuX21hc2tDb2xvckJ1ZmZlcnMuYXQoaW5kZXgpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgMCxcbiAgICAgICAgICB0aGlzLmdsLlJHQkEsXG4gICAgICAgICAgc2l6ZSxcbiAgICAgICAgICBzaXplLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgdGhpcy5nbC5SR0JBLFxuICAgICAgICAgIHRoaXMuZ2wuVU5TSUdORURfQllURSxcbiAgICAgICAgICBudWxsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgdGhpcy5nbC5URVhUVVJFX1dSQVBfUyxcbiAgICAgICAgICB0aGlzLmdsLkNMQU1QX1RPX0VER0VcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxuICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfV1JBUF9ULFxuICAgICAgICAgIHRoaXMuZ2wuQ0xBTVBfVE9fRURHRVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9NSU5fRklMVEVSLFxuICAgICAgICAgIHRoaXMuZ2wuTElORUFSXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgdGhpcy5nbC5URVhUVVJFX01BR19GSUxURVIsXG4gICAgICAgICAgdGhpcy5nbC5MSU5FQVJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXG4gICAgICAgIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlcy5wdXNoQmFjayh0aGlzLmdsLmNyZWF0ZUZyYW1lYnVmZmVyKCkpO1xuICAgICAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcihcbiAgICAgICAgICB0aGlzLmdsLkZSQU1FQlVGRkVSLFxuICAgICAgICAgIHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlcy5hdChpbmRleClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChcbiAgICAgICAgICB0aGlzLmdsLkZSQU1FQlVGRkVSLFxuICAgICAgICAgIHRoaXMuZ2wuQ09MT1JfQVRUQUNITUVOVDAsXG4gICAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICAgIHRoaXMuX21hc2tDb2xvckJ1ZmZlcnMuYXQoaW5kZXgpLFxuICAgICAgICAgIDBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIHNfZmJvKTtcblxuICAgICAgdGhpcy5fbWFza1RleHR1cmUgPSBuZXcgQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlKFxuICAgICAgICB0aGlzLl9jdXJyZW50RnJhbWVObyxcbiAgICAgICAgdGhpcy5fbWFza1JlbmRlclRleHR1cmVzXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9tYXNrVGV4dHVyZS50ZXh0dXJlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBXZWJHTOODrOODs+ODgOODquODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuioreWumuOBmeOCi1xuICAgKiBAcGFyYW0gZ2wgV2ViR0zjg6zjg7Pjg4Djg6rjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcbiAgICovXG4gIHB1YmxpYyBzZXRHTChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgdGhpcy5nbCA9IGdsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODnuOCueOCr+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOe+pOWFqOS9k+OCkuWbsuOCgOefqeW9ou+8iOODouODh+ODq+W6p+aomeezu++8ieOCkuioiOeul+OBmeOCi1xuICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqIEBwYXJhbSBjbGlwcGluZ0NvbnRleHQg44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu44Kz44Oz44OG44Kt44K544OIXG4gICAqL1xuICBwdWJsaWMgY2FsY0NsaXBwZWREcmF3VG90YWxCb3VuZHMoXG4gICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxuICAgIGNsaXBwaW5nQ29udGV4dDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0XG4gICk6IHZvaWQge1xuICAgIC8vIOiiq+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr++8iOODnuOCueOCr+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiO+8ieOBruWFqOS9k+OBruefqeW9olxuICAgIGxldCBjbGlwcGVkRHJhd1RvdGFsTWluWDogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICBsZXQgY2xpcHBlZERyYXdUb3RhbE1pblk6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgbGV0IGNsaXBwZWREcmF3VG90YWxNYXhYOiBudW1iZXIgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuICAgIGxldCBjbGlwcGVkRHJhd1RvdGFsTWF4WTogbnVtYmVyID0gTnVtYmVyLk1JTl9WQUxVRTtcblxuICAgIC8vIOOBk+OBruODnuOCueOCr+OBjOWun+mam+OBq+W/heimgeOBi+WIpOWumuOBmeOCi1xuICAgIC8vIOOBk+OBruOCr+ODquODg+ODlOODs+OCsOOCkuWIqeeUqOOBmeOCi+OAjOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOAjeOBjOOBsuOBqOOBpOOBp+OCguS9v+eUqOWPr+iDveOBp+OBguOCjOOBsOODnuOCueOCr+OCkueUn+aIkOOBmeOCi+W/heimgeOBjOOBguOCi1xuICAgIGNvbnN0IGNsaXBwZWREcmF3Q291bnQ6IG51bWJlciA9XG4gICAgICBjbGlwcGluZ0NvbnRleHQuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdC5sZW5ndGg7XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGNsaXBwZWREcmF3YWJsZUluZGV4ID0gMDtcbiAgICAgIGNsaXBwZWREcmF3YWJsZUluZGV4IDwgY2xpcHBlZERyYXdDb3VudDtcbiAgICAgIGNsaXBwZWREcmF3YWJsZUluZGV4KytcbiAgICApIHtcbiAgICAgIC8vIOODnuOCueOCr+OCkuS9v+eUqOOBmeOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruaPj+eUu+OBleOCjOOCi+efqeW9ouOCkuaxguOCgeOCi1xuICAgICAgY29uc3QgZHJhd2FibGVJbmRleDogbnVtYmVyID1cbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9jbGlwcGVkRHJhd2FibGVJbmRleExpc3RbY2xpcHBlZERyYXdhYmxlSW5kZXhdO1xuXG4gICAgICBjb25zdCBkcmF3YWJsZVZlcnRleENvdW50OiBudW1iZXIgPVxuICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleENvdW50KGRyYXdhYmxlSW5kZXgpO1xuICAgICAgY29uc3QgZHJhd2FibGVWZXJ0ZXhlczogRmxvYXQzMkFycmF5ID1cbiAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0aWNlcyhkcmF3YWJsZUluZGV4KTtcblxuICAgICAgbGV0IG1pblg6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgICBsZXQgbWluWTogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgIGxldCBtYXhYOiBudW1iZXIgPSAtTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgIGxldCBtYXhZOiBudW1iZXIgPSAtTnVtYmVyLk1BWF9WQUxVRTtcblxuICAgICAgY29uc3QgbG9vcDogbnVtYmVyID0gZHJhd2FibGVWZXJ0ZXhDb3VudCAqIENvbnN0YW50LnZlcnRleFN0ZXA7XG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgcGk6IG51bWJlciA9IENvbnN0YW50LnZlcnRleE9mZnNldDtcbiAgICAgICAgcGkgPCBsb29wO1xuICAgICAgICBwaSArPSBDb25zdGFudC52ZXJ0ZXhTdGVwXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgeDogbnVtYmVyID0gZHJhd2FibGVWZXJ0ZXhlc1twaV07XG4gICAgICAgIGNvbnN0IHk6IG51bWJlciA9IGRyYXdhYmxlVmVydGV4ZXNbcGkgKyAxXTtcblxuICAgICAgICBpZiAoeCA8IG1pblgpIHtcbiAgICAgICAgICBtaW5YID0geDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeCA+IG1heFgpIHtcbiAgICAgICAgICBtYXhYID0geDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgICBtaW5ZID0geTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgICBtYXhZID0geTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyDmnInlirnjgarngrnjgYzkuIDjgaTjgoLlj5bjgozjgarjgYvjgaPjgZ/jga7jgafjgrnjgq3jg4Pjg5dcbiAgICAgIGlmIChtaW5YID09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIOWFqOS9k+OBruefqeW9ouOBq+WPjeaYoFxuICAgICAgaWYgKG1pblggPCBjbGlwcGVkRHJhd1RvdGFsTWluWCkge1xuICAgICAgICBjbGlwcGVkRHJhd1RvdGFsTWluWCA9IG1pblg7XG4gICAgICB9XG4gICAgICBpZiAobWluWSA8IGNsaXBwZWREcmF3VG90YWxNaW5ZKSB7XG4gICAgICAgIGNsaXBwZWREcmF3VG90YWxNaW5ZID0gbWluWTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhYID4gY2xpcHBlZERyYXdUb3RhbE1heFgpIHtcbiAgICAgICAgY2xpcHBlZERyYXdUb3RhbE1heFggPSBtYXhYO1xuICAgICAgfVxuICAgICAgaWYgKG1heFkgPiBjbGlwcGVkRHJhd1RvdGFsTWF4WSkge1xuICAgICAgICBjbGlwcGVkRHJhd1RvdGFsTWF4WSA9IG1heFk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjbGlwcGVkRHJhd1RvdGFsTWluWCA9PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnggPSAwLjA7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LnkgPSAwLjA7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LndpZHRoID0gMC4wO1xuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC5oZWlnaHQgPSAwLjA7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5faXNVc2luZyA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9pc1VzaW5nID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgdzogbnVtYmVyID0gY2xpcHBlZERyYXdUb3RhbE1heFggLSBjbGlwcGVkRHJhd1RvdGFsTWluWDtcbiAgICAgICAgY29uc3QgaDogbnVtYmVyID0gY2xpcHBlZERyYXdUb3RhbE1heFkgLSBjbGlwcGVkRHJhd1RvdGFsTWluWTtcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3QueCA9IGNsaXBwZWREcmF3VG90YWxNaW5YO1xuICAgICAgICBjbGlwcGluZ0NvbnRleHQuX2FsbENsaXBwZWREcmF3UmVjdC55ID0gY2xpcHBlZERyYXdUb3RhbE1pblk7XG4gICAgICAgIGNsaXBwaW5nQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0LndpZHRoID0gdztcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0Ll9hbGxDbGlwcGVkRHJhd1JlY3QuaGVpZ2h0ID0gaDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fY3VycmVudE1hc2tSZW5kZXJUZXh0dXJlID0gbnVsbDtcbiAgICB0aGlzLl9tYXNrQ29sb3JCdWZmZXJzID0gbnVsbDtcbiAgICB0aGlzLl9jdXJyZW50RnJhbWVObyA9IDA7XG4gICAgdGhpcy5fcmVuZGVyVGV4dHVyZUNvdW50ID0gMDtcbiAgICB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplID0gMjU2O1xuICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrID0gbmV3IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+KCk7XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUNsaXBwaW5nQ29udGV4dD4oKTtcbiAgICB0aGlzLl9jaGFubmVsQ29sb3JzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21UZXh0dXJlQ29sb3I+KCk7XG4gICAgdGhpcy5fdG1wQm91bmRzT25Nb2RlbCA9IG5ldyBjc21SZWN0KCk7XG4gICAgdGhpcy5fdG1wTWF0cml4ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgdGhpcy5fdG1wTWF0cml4Rm9yTWFzayA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuICAgIHRoaXMuX3RtcE1hdHJpeEZvckRyYXcgPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcbiAgICB0aGlzLl9tYXNrVGV4dHVyZSA9IG51bGw7XG5cbiAgICBsZXQgdG1wOiBDdWJpc21UZXh0dXJlQ29sb3IgPSBuZXcgQ3ViaXNtVGV4dHVyZUNvbG9yKCk7XG4gICAgdG1wLlIgPSAxLjA7XG4gICAgdG1wLkcgPSAwLjA7XG4gICAgdG1wLkIgPSAwLjA7XG4gICAgdG1wLkEgPSAwLjA7XG4gICAgdGhpcy5fY2hhbm5lbENvbG9ycy5wdXNoQmFjayh0bXApO1xuXG4gICAgdG1wID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xuICAgIHRtcC5SID0gMC4wO1xuICAgIHRtcC5HID0gMS4wO1xuICAgIHRtcC5CID0gMC4wO1xuICAgIHRtcC5BID0gMC4wO1xuICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMucHVzaEJhY2sodG1wKTtcblxuICAgIHRtcCA9IG5ldyBDdWJpc21UZXh0dXJlQ29sb3IoKTtcbiAgICB0bXAuUiA9IDAuMDtcbiAgICB0bXAuRyA9IDAuMDtcbiAgICB0bXAuQiA9IDEuMDtcbiAgICB0bXAuQSA9IDAuMDtcbiAgICB0aGlzLl9jaGFubmVsQ29sb3JzLnB1c2hCYWNrKHRtcCk7XG5cbiAgICB0bXAgPSBuZXcgQ3ViaXNtVGV4dHVyZUNvbG9yKCk7XG4gICAgdG1wLlIgPSAwLjA7XG4gICAgdG1wLkcgPSAwLjA7XG4gICAgdG1wLkIgPSAwLjA7XG4gICAgdG1wLkEgPSAxLjA7XG4gICAgdGhpcy5fY2hhbm5lbENvbG9ycy5wdXNoQmFjayh0bXApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5nZXRTaXplKCk7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KGkpKSB7XG4gICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KGkpLnJlbGVhc2UoKTtcbiAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suc2V0KGksIHZvaWQgMCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5zZXQoaSwgbnVsbCk7XG4gICAgfVxuICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrID0gbnVsbDtcblxuICAgIC8vIF9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhd+OBr19jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFza+OBq+OBguOCi+OCpOODs+OCueOCv+ODs+OCueOCkuaMh+OBl+OBpuOBhOOCi+OAguS4iuiomOOBruWHpueQhuOBq+OCiOOCiuimgee0oOOBlOOBqOOBrkRFTEVUReOBr+S4jeimgeOAglxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3LnNldChpLCBudWxsKTtcbiAgICB9XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcgPSBudWxsO1xuXG4gICAgaWYgKHRoaXMuX21hc2tUZXh0dXJlKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21hc2tUZXh0dXJlLnRleHR1cmVzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICAgIHRoaXMuZ2wuZGVsZXRlRnJhbWVidWZmZXIodGhpcy5fbWFza1RleHR1cmUudGV4dHVyZXMuYXQoaSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5fbWFza1RleHR1cmUudGV4dHVyZXMuY2xlYXIoKTtcbiAgICAgIHRoaXMuX21hc2tUZXh0dXJlLnRleHR1cmVzID0gbnVsbDtcbiAgICAgIHRoaXMuX21hc2tUZXh0dXJlID0gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NoYW5uZWxDb2xvcnMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMuc2V0KGksIG51bGwpO1xuICAgIH1cblxuICAgIHRoaXMuX2NoYW5uZWxDb2xvcnMgPSBudWxsO1xuXG4gICAgLy8g44OG44Kv44K544OB44Oj6Kej5pS+XG4gICAgaWYgKHRoaXMuX21hc2tDb2xvckJ1ZmZlcnMgIT0gbnVsbCkge1xuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX21hc2tDb2xvckJ1ZmZlcnMuZ2V0U2l6ZSgpOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMuZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLl9tYXNrQ29sb3JCdWZmZXJzLmF0KGluZGV4KSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9tYXNrQ29sb3JCdWZmZXJzLmNsZWFyKCk7XG4gICAgfVxuICAgIHRoaXMuX21hc2tDb2xvckJ1ZmZlcnMgPSBudWxsO1xuXG4gICAgaWYgKHRoaXMuX21hc2tSZW5kZXJUZXh0dXJlcyAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9tYXNrUmVuZGVyVGV4dHVyZXMuY2xlYXIoKTtcbiAgICB9XG4gICAgdGhpcy5fbWFza1JlbmRlclRleHR1cmVzID0gbnVsbDtcblxuICAgIGlmICh0aGlzLl9jbGVhcmVkRnJhbWVCdWZmZXJmbGFncyAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9jbGVhcmVkRnJhbWVCdWZmZXJmbGFncy5jbGVhcigpO1xuICAgIH1cbiAgICB0aGlzLl9jbGVhcmVkRnJhbWVCdWZmZXJmbGFncyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog44Oe44ON44O844K444Oj44Gu5Yid5pyf5YyW5Yem55CGXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OCkuS9v+OBhuaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBrueZu+mMsuOCkuihjOOBhlxuICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqIEBwYXJhbSBkcmF3YWJsZUNvdW50IOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruaVsFxuICAgKiBAcGFyYW0gZHJhd2FibGVNYXNrcyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjga7jg6rjgrnjg4hcbiAgICogQHBhcmFtIGRyYXdhYmxlTWFza0NvdW50cyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjgpLjg57jgrnjgq/jgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7mlbBcbiAgICogQHBhcmFtIHJlbmRlclRleHR1cmVDb3VudCDjg5Djg4Pjg5XjgqHjga7nlJ/miJDmlbBcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKFxuICAgIG1vZGVsOiBDdWJpc21Nb2RlbCxcbiAgICBkcmF3YWJsZUNvdW50OiBudW1iZXIsXG4gICAgZHJhd2FibGVNYXNrczogSW50MzJBcnJheVtdLFxuICAgIGRyYXdhYmxlTWFza0NvdW50czogSW50MzJBcnJheSxcbiAgICByZW5kZXJUZXh0dXJlQ291bnQ6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICAvLyDjg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6Pjga7lkIjoqIjmnprmlbDjga7oqK3lrppcbiAgICAvLyAx5Lul5LiK44Gu5pW05pWw44Gn44Gq44GE5aC05ZCI44Gv44Gd44KM44Ge44KM6K2m5ZGK44KS5Ye644GZXG4gICAgaWYgKHJlbmRlclRleHR1cmVDb3VudCAlIDEgIT0gMCkge1xuICAgICAgQ3ViaXNtTG9nV2FybmluZyhcbiAgICAgICAgJ1RoZSBudW1iZXIgb2YgcmVuZGVyIHRleHR1cmVzIG11c3QgYmUgc3BlY2lmaWVkIGFzIGFuIGludGVnZXIuIFRoZSBkZWNpbWFsIHBvaW50IGlzIHJvdW5kZWQgZG93biBhbmQgY29ycmVjdGVkIHRvIGFuIGludGVnZXIuJ1xuICAgICAgKTtcbiAgICAgIC8vIOWwj+aVsOeCueS7peS4i+OCkumZpOWOu1xuICAgICAgcmVuZGVyVGV4dHVyZUNvdW50ID0gfn5yZW5kZXJUZXh0dXJlQ291bnQ7XG4gICAgfVxuICAgIGlmIChyZW5kZXJUZXh0dXJlQ291bnQgPCAxKSB7XG4gICAgICBDdWJpc21Mb2dXYXJuaW5nKFxuICAgICAgICAnVGhlIG51bWJlciBvZiByZW5kZXIgdGV4dHVyZXMgbXVzdCBiZSBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAxLiBTZXQgdGhlIG51bWJlciBvZiByZW5kZXIgdGV4dHVyZXMgdG8gMS4nXG4gICAgICApO1xuICAgIH1cbiAgICAvLyDosqDjga7lgKTjgYzkvb/jgo/jgozjgabjgYTjgovloLTlkIjjga/lvLfliLbnmoTjgasx5p6a44Go6Kit5a6a44GZ44KLXG4gICAgdGhpcy5fcmVuZGVyVGV4dHVyZUNvdW50ID0gcmVuZGVyVGV4dHVyZUNvdW50IDwgMSA/IDEgOiByZW5kZXJUZXh0dXJlQ291bnQ7XG5cbiAgICB0aGlzLl9jbGVhcmVkRnJhbWVCdWZmZXJmbGFncyA9IG5ldyBjc21WZWN0b3I8Ym9vbGVhbj4oXG4gICAgICB0aGlzLl9yZW5kZXJUZXh0dXJlQ291bnRcbiAgICApO1xuXG4gICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44KS5L2/44GG5o+P55S744Kq44OW44K444Kn44Kv44OI44KS44GZ44G544Gm55m76Yyy44GZ44KLXG4gICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gv44CB6YCa5bi45pWw5YCL56iL5bqm44Gr6ZmQ5a6a44GX44Gm5L2/44GG44KC44Gu44Go44GZ44KLXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkcmF3YWJsZUNvdW50OyBpKyspIHtcbiAgICAgIGlmIChkcmF3YWJsZU1hc2tDb3VudHNbaV0gPD0gMCkge1xuICAgICAgICAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgYzkvb/nlKjjgZXjgozjgabjgYTjgarjgYTjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvIjlpJrjgY/jga7loLTlkIjkvb/nlKjjgZfjgarjgYTvvIlcbiAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXcucHVzaEJhY2sobnVsbCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyDml6LjgavjgYLjgotDbGlwQ29udGV4dOOBqOWQjOOBmOOBi+ODgeOCp+ODg+OCr+OBmeOCi1xuICAgICAgbGV0IGNsaXBwaW5nQ29udGV4dDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID0gdGhpcy5maW5kU2FtZUNsaXAoXG4gICAgICAgIGRyYXdhYmxlTWFza3NbaV0sXG4gICAgICAgIGRyYXdhYmxlTWFza0NvdW50c1tpXVxuICAgICAgKTtcbiAgICAgIGlmIChjbGlwcGluZ0NvbnRleHQgPT0gbnVsbCkge1xuICAgICAgICAvLyDlkIzkuIDjga7jg57jgrnjgq/jgYzlrZjlnKjjgZfjgabjgYTjgarjgYTloLTlkIjjga/nlJ/miJDjgZnjgotcbiAgICAgICAgY2xpcHBpbmdDb250ZXh0ID0gbmV3IEN1YmlzbUNsaXBwaW5nQ29udGV4dChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIGRyYXdhYmxlTWFza3NbaV0sXG4gICAgICAgICAgZHJhd2FibGVNYXNrQ291bnRzW2ldXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLnB1c2hCYWNrKGNsaXBwaW5nQ29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGNsaXBwaW5nQ29udGV4dC5hZGRDbGlwcGVkRHJhd2FibGUoaSk7XG5cbiAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3LnB1c2hCYWNrKGNsaXBwaW5nQ29udGV4dCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuS9nOaIkOOBmeOCi+OAguODouODh+ODq+aPj+eUu+aZguOBq+Wun+ihjOOBmeOCi+OAglxuICAgKiBAcGFyYW0gbW9kZWwg44Oi44OH44Or44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqIEBwYXJhbSByZW5kZXJlciDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzZXR1cENsaXBwaW5nQ29udGV4dChcbiAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXG4gICAgcmVuZGVyZXI6IEN1YmlzbVJlbmRlcmVyX1dlYkdMXG4gICk6IHZvaWQge1xuICAgIHRoaXMuX2N1cnJlbnRGcmFtZU5vKys7XG5cbiAgICAvLyDlhajjgabjga7jgq/jg6rjg4Pjg5Tjg7PjgrDjgpLnlKjmhI/jgZnjgotcbiAgICAvLyDlkIzjgZjjgq/jg6rjg4Pjg5fvvIjopIfmlbDjga7loLTlkIjjga/jgb7jgajjgoHjgabkuIDjgaTjga7jgq/jg6rjg4Pjg5fvvInjgpLkvb/jgYbloLTlkIjjga8x5bqm44Gg44GR6Kit5a6a44GZ44KLXG4gICAgbGV0IHVzaW5nQ2xpcENvdW50ID0gMDtcbiAgICBmb3IgKFxuICAgICAgbGV0IGNsaXBJbmRleCA9IDA7XG4gICAgICBjbGlwSW5kZXggPCB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5nZXRTaXplKCk7XG4gICAgICBjbGlwSW5kZXgrK1xuICAgICkge1xuICAgICAgLy8gMeOBpOOBruOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBq+mWouOBl+OBplxuICAgICAgY29uc3QgY2M6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9XG4gICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KGNsaXBJbmRleCk7XG5cbiAgICAgIC8vIOOBk+OBruOCr+ODquODg+ODl+OCkuWIqeeUqOOBmeOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOe+pOWFqOS9k+OCkuWbsuOCgOefqeW9ouOCkuioiOeul1xuICAgICAgdGhpcy5jYWxjQ2xpcHBlZERyYXdUb3RhbEJvdW5kcyhtb2RlbCwgY2MpO1xuXG4gICAgICBpZiAoY2MuX2lzVXNpbmcpIHtcbiAgICAgICAgdXNpbmdDbGlwQ291bnQrKzsgLy8g5L2/55So5Lit44Go44GX44Gm44Kr44Km44Oz44OIXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8g44Oe44K544Kv5L2c5oiQ5Yem55CGXG4gICAgaWYgKHVzaW5nQ2xpcENvdW50ID4gMCkge1xuICAgICAgLy8g5ZCE44Oe44K544Kv44Gu44Os44Kk44Ki44Km44OI44KS5rG65a6a44GX44Gm44GE44GPXG4gICAgICB0aGlzLnNldHVwTGF5b3V0Qm91bmRzKFxuICAgICAgICByZW5kZXJlci5pc1VzaW5nSGlnaFByZWNpc2lvbk1hc2soKSA/IDAgOiB1c2luZ0NsaXBDb3VudFxuICAgICAgKTtcblxuICAgICAgaWYgKCFyZW5kZXJlci5pc1VzaW5nSGlnaFByZWNpc2lvbk1hc2soKSkge1xuICAgICAgICAvLyDnlJ/miJDjgZfjgZ9GcmFtZUJ1ZmZlcuOBqOWQjOOBmOOCteOCpOOCuuOBp+ODk+ODpeODvOODneODvOODiOOCkuioreWumlxuICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KFxuICAgICAgICAgIDAsXG4gICAgICAgICAgMCxcbiAgICAgICAgICB0aGlzLl9jbGlwcGluZ01hc2tCdWZmZXJTaXplLFxuICAgICAgICAgIHRoaXMuX2NsaXBwaW5nTWFza0J1ZmZlclNpemVcbiAgICAgICAgKTtcblxuICAgICAgICAvLyDlvozjga7oqIjnrpfjga7jgZ/jgoHjgavjgqTjg7Pjg4fjg4Pjgq/jgrnjga7mnIDliJ3jgpLjgrvjg4Pjg4hcbiAgICAgICAgdGhpcy5fY3VycmVudE1hc2tSZW5kZXJUZXh0dXJlID0gdGhpcy5nZXRNYXNrUmVuZGVyVGV4dHVyZSgpLmF0KDApO1xuXG4gICAgICAgIHJlbmRlcmVyLnByZURyYXcoKTsgLy8g44OQ44OD44OV44Kh44KS44Kv44Oq44Ki44GZ44KLXG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLSDjg57jgrnjgq/mj4/nlLvlh6bnkIYgLS0tLS0tLS0tLVxuICAgICAgICAvLyDjg57jgrnjgq/nlKhSZW5kZXJUZXh0dXJl44KSYWN0aXZl44Gr44K744OD44OIXG4gICAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKFxuICAgICAgICAgIHRoaXMuZ2wuRlJBTUVCVUZGRVIsXG4gICAgICAgICAgdGhpcy5fY3VycmVudE1hc2tSZW5kZXJUZXh0dXJlXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIOOCteOCpOOCuuOBjOODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruaemuaVsOOBqOWQiOOCj+OBquOBhOWgtOWQiOOBr+WQiOOCj+OBm+OCi1xuICAgICAgaWYgKHRoaXMuX2NsZWFyZWRGcmFtZUJ1ZmZlcmZsYWdzLmdldFNpemUoKSAhPSB0aGlzLl9yZW5kZXJUZXh0dXJlQ291bnQpIHtcbiAgICAgICAgdGhpcy5fY2xlYXJlZEZyYW1lQnVmZmVyZmxhZ3MuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fY2xlYXJlZEZyYW1lQnVmZmVyZmxhZ3MgPSBuZXcgY3NtVmVjdG9yPGJvb2xlYW4+KFxuICAgICAgICAgIHRoaXMuX3JlbmRlclRleHR1cmVDb3VudFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyDjg57jgrnjgq/jga7jgq/jg6rjgqLjg5Xjg6njgrDjgpLmr47jg5Xjg6zjg7zjg6Dplovlp4vmmYLjgavliJ3mnJ/ljJZcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGluZGV4IDwgdGhpcy5fY2xlYXJlZEZyYW1lQnVmZmVyZmxhZ3MuZ2V0U2l6ZSgpO1xuICAgICAgICBpbmRleCsrXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fY2xlYXJlZEZyYW1lQnVmZmVyZmxhZ3Muc2V0KGluZGV4LCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIOWun+mam+OBq+ODnuOCueOCr+OCkueUn+aIkOOBmeOCi1xuICAgICAgLy8g5YWo44Gm44Gu44Oe44K544Kv44KS44Gp44Gu44KI44GG44Gr44Os44Kk44Ki44Km44OI44GX44Gm5o+P44GP44GL44KS5rG65a6a44GX44CBQ2xpcENvbnRleHQsIENsaXBwZWREcmF3Q29udGV4dOOBq+iomOaGtuOBmeOCi1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGNsaXBJbmRleCA9IDA7XG4gICAgICAgIGNsaXBJbmRleCA8IHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmdldFNpemUoKTtcbiAgICAgICAgY2xpcEluZGV4KytcbiAgICAgICkge1xuICAgICAgICAvLyAtLS0g5a6f6Zqb44GrMeOBpOOBruODnuOCueOCr+OCkuaPj+OBjyAtLS1cbiAgICAgICAgY29uc3QgY2xpcENvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9XG4gICAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoY2xpcEluZGV4KTtcbiAgICAgICAgY29uc3QgYWxsQ2xpcGVkRHJhd1JlY3Q6IGNzbVJlY3QgPSBjbGlwQ29udGV4dC5fYWxsQ2xpcHBlZERyYXdSZWN0OyAvLyDjgZPjga7jg57jgrnjgq/jgpLkvb/jgYbjgIHjgZnjgbnjgabjga7mj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7oq5bnkIbluqfmqJnkuIrjga7lm7Ljgb/nn6nlvaJcbiAgICAgICAgY29uc3QgbGF5b3V0Qm91bmRzT25UZXgwMTogY3NtUmVjdCA9IGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHM7IC8vIOOBk+OBruS4reOBq+ODnuOCueOCr+OCkuWPjuOCgeOCi1xuICAgICAgICBjb25zdCBNQVJHSU4gPSAwLjA1OyAvLyDjg6Ljg4fjg6vluqfmqJnkuIrjga7nn6nlvaLjgpLjgIHpganlrpzjg57jg7zjgrjjg7PjgpLku5jjgZHjgabkvb/jgYZcbiAgICAgICAgbGV0IHNjYWxlWCA9IDA7XG4gICAgICAgIGxldCBzY2FsZVkgPSAwO1xuXG4gICAgICAgIC8vIGNsaXBDb250ZXh044Gr6Kit5a6a44GX44Gf44Os44Oz44OA44O844OG44Kv44K544OB44Oj44KS44Kk44Oz44OH44OD44Kv44K544Gn5Y+W5b6XXG4gICAgICAgIGNvbnN0IGNsaXBDb250ZXh0UmVuZGVyVGV4dHVyZSA9IHRoaXMuZ2V0TWFza1JlbmRlclRleHR1cmUoKS5hdChcbiAgICAgICAgICBjbGlwQ29udGV4dC5fYnVmZmVySW5kZXhcbiAgICAgICAgKTtcblxuICAgICAgICAvLyDnj77lnKjjga7jg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6PjgYxjbGlwQ29udGV4dOOBruOCguOBruOBqOeVsOOBquOCi+WgtOWQiFxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5fY3VycmVudE1hc2tSZW5kZXJUZXh0dXJlICE9IGNsaXBDb250ZXh0UmVuZGVyVGV4dHVyZSAmJlxuICAgICAgICAgICFyZW5kZXJlci5pc1VzaW5nSGlnaFByZWNpc2lvbk1hc2soKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl9jdXJyZW50TWFza1JlbmRlclRleHR1cmUgPSBjbGlwQ29udGV4dFJlbmRlclRleHR1cmU7XG4gICAgICAgICAgcmVuZGVyZXIucHJlRHJhdygpOyAvLyDjg5Djg4Pjg5XjgqHjgpLjgq/jg6rjgqLjgZnjgotcbiAgICAgICAgICAvLyDjg57jgrnjgq/nlKhSZW5kZXJUZXh0dXJl44KSYWN0aXZl44Gr44K744OD44OIXG4gICAgICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIoXG4gICAgICAgICAgICB0aGlzLmdsLkZSQU1FQlVGRkVSLFxuICAgICAgICAgICAgdGhpcy5fY3VycmVudE1hc2tSZW5kZXJUZXh0dXJlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW5kZXJlci5pc1VzaW5nSGlnaFByZWNpc2lvbk1hc2soKSkge1xuICAgICAgICAgIGNvbnN0IHBwdTogbnVtYmVyID0gbW9kZWwuZ2V0UGl4ZWxzUGVyVW5pdCgpO1xuICAgICAgICAgIGNvbnN0IG1hc2tQaXhlbFNpemU6IG51bWJlciA9XG4gICAgICAgICAgICBjbGlwQ29udGV4dC5nZXRDbGlwcGluZ01hbmFnZXIoKS5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZTtcbiAgICAgICAgICBjb25zdCBwaHlzaWNhbE1hc2tXaWR0aDogbnVtYmVyID1cbiAgICAgICAgICAgIGxheW91dEJvdW5kc09uVGV4MDEud2lkdGggKiBtYXNrUGl4ZWxTaXplO1xuICAgICAgICAgIGNvbnN0IHBoeXNpY2FsTWFza0hlaWdodDogbnVtYmVyID1cbiAgICAgICAgICAgIGxheW91dEJvdW5kc09uVGV4MDEuaGVpZ2h0ICogbWFza1BpeGVsU2l6ZTtcblxuICAgICAgICAgIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwuc2V0UmVjdChhbGxDbGlwZWREcmF3UmVjdCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fdG1wQm91bmRzT25Nb2RlbC53aWR0aCAqIHBwdSA+IHBoeXNpY2FsTWFza1dpZHRoKSB7XG4gICAgICAgICAgICB0aGlzLl90bXBCb3VuZHNPbk1vZGVsLmV4cGFuZChcbiAgICAgICAgICAgICAgYWxsQ2xpcGVkRHJhd1JlY3Qud2lkdGggKiBNQVJHSU4sXG4gICAgICAgICAgICAgIDAuMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHNjYWxlWCA9IGxheW91dEJvdW5kc09uVGV4MDEud2lkdGggLyB0aGlzLl90bXBCb3VuZHNPbk1vZGVsLndpZHRoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY2FsZVggPSBwcHUgLyBwaHlzaWNhbE1hc2tXaWR0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5fdG1wQm91bmRzT25Nb2RlbC5oZWlnaHQgKiBwcHUgPiBwaHlzaWNhbE1hc2tIZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwuZXhwYW5kKFxuICAgICAgICAgICAgICAwLjAsXG4gICAgICAgICAgICAgIGFsbENsaXBlZERyYXdSZWN0LmhlaWdodCAqIE1BUkdJTlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHNjYWxlWSA9IGxheW91dEJvdW5kc09uVGV4MDEuaGVpZ2h0IC8gdGhpcy5fdG1wQm91bmRzT25Nb2RlbC5oZWlnaHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNjYWxlWSA9IHBwdSAvIHBoeXNpY2FsTWFza0hlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fdG1wQm91bmRzT25Nb2RlbC5zZXRSZWN0KGFsbENsaXBlZERyYXdSZWN0KTtcbiAgICAgICAgICB0aGlzLl90bXBCb3VuZHNPbk1vZGVsLmV4cGFuZChcbiAgICAgICAgICAgIGFsbENsaXBlZERyYXdSZWN0LndpZHRoICogTUFSR0lOLFxuICAgICAgICAgICAgYWxsQ2xpcGVkRHJhd1JlY3QuaGVpZ2h0ICogTUFSR0lOXG4gICAgICAgICAgKTtcbiAgICAgICAgICAvLyMjIyMjIyMjIyMg5pys5p2l44Gv5Ymy44KK5b2T44Gm44KJ44KM44Gf6aCY5Z+f44Gu5YWo5L2T44KS5L2/44KP44Ga5b+F6KaB5pyA5L2O6ZmQ44Gu44K144Kk44K644GM44KI44GEXG5cbiAgICAgICAgICAvLyDjgrfjgqfjg7zjg4DnlKjjga7oqIjnrpflvI/jgpLmsYLjgoHjgovjgILlm57ou6LjgpLogIPmha7jgZfjgarjgYTloLTlkIjjga/ku6XkuIvjga7jgajjgYrjgopcbiAgICAgICAgICAvLyBtb3ZlUGVyaW9kJyA9IG1vdmVQZXJpb2QgKiBzY2FsZVggKyBvZmZYXHRcdCAgW1sgbW92ZVBlcmlvZCcgPSAobW92ZVBlcmlvZCAtIHRtcEJvdW5kc09uTW9kZWwubW92ZVBlcmlvZCkqc2NhbGUgKyBsYXlvdXRCb3VuZHNPblRleDAxLm1vdmVQZXJpb2QgXV1cbiAgICAgICAgICBzY2FsZVggPSBsYXlvdXRCb3VuZHNPblRleDAxLndpZHRoIC8gdGhpcy5fdG1wQm91bmRzT25Nb2RlbC53aWR0aDtcbiAgICAgICAgICBzY2FsZVkgPSBsYXlvdXRCb3VuZHNPblRleDAxLmhlaWdodCAvIHRoaXMuX3RtcEJvdW5kc09uTW9kZWwuaGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g44Oe44K544Kv55Sf5oiQ5pmC44Gr5L2/44GG6KGM5YiX44KS5rGC44KB44KLXG4gICAgICAgIHtcbiAgICAgICAgICAvLyDjgrfjgqfjg7zjg4DjgavmuKHjgZnooYzliJfjgpLmsYLjgoHjgosgPDw8PDw8PDw8PDw8PDw8PDw8PDw8PDw8IOimgeacgOmBqeWMlu+8iOmAhumghuOBq+ioiOeul+OBmeOCjOOBsOOCt+ODs+ODl+ODq+OBq+OBp+OBjeOCi++8iVxuICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC5sb2FkSWRlbnRpdHkoKTtcbiAgICAgICAgICB7XG4gICAgICAgICAgICAvLyBsYXlvdXQwLi4xIOOCkiAtMS4uMeOBq+WkieaPm1xuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnRyYW5zbGF0ZVJlbGF0aXZlKC0xLjAsIC0xLjApO1xuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnNjYWxlUmVsYXRpdmUoMi4wLCAyLjApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB7XG4gICAgICAgICAgICAvLyB2aWV3IHRvIGxheW91dDAuLjFcbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZShcbiAgICAgICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS54LFxuICAgICAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLnlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXguc2NhbGVSZWxhdGl2ZShzY2FsZVgsIHNjYWxlWSk7IC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVxuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnRyYW5zbGF0ZVJlbGF0aXZlKFxuICAgICAgICAgICAgICAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC54LFxuICAgICAgICAgICAgICAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC55XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gbmV3ID0gW3RyYW5zbGF0ZV1bc2NhbGVdW3RyYW5zbGF0ZV1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gdG1wTWF0cml4Rm9yTWFza+OBjOioiOeul+e1kOaenFxuICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeEZvck1hc2suc2V0TWF0cml4KHRoaXMuX3RtcE1hdHJpeC5nZXRBcnJheSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vLS0tLS0tLS0tIGRyYXfmmYLjga4gbWFzayDlj4LnhafnlKjooYzliJfjgpLoqIjnrpdcbiAgICAgICAge1xuICAgICAgICAgIC8vIOOCt+OCp+ODvOODgOOBq+a4oeOBmeihjOWIl+OCkuaxguOCgeOCiyA8PDw8PDw8PDw8PDw8PDw8PDw8PDw8PDwg6KaB5pyA6YGp5YyW77yI6YCG6aCG44Gr6KiI566X44GZ44KM44Gw44K344Oz44OX44Or44Gr44Gn44GN44KL77yJXG4gICAgICAgICAgdGhpcy5fdG1wTWF0cml4LmxvYWRJZGVudGl0eSgpO1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3RtcE1hdHJpeC50cmFuc2xhdGVSZWxhdGl2ZShcbiAgICAgICAgICAgICAgbGF5b3V0Qm91bmRzT25UZXgwMS54LFxuICAgICAgICAgICAgICBsYXlvdXRCb3VuZHNPblRleDAxLnlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl90bXBNYXRyaXguc2NhbGVSZWxhdGl2ZShzY2FsZVgsIHNjYWxlWSk7IC8vIG5ldyA9IFt0cmFuc2xhdGVdW3NjYWxlXVxuICAgICAgICAgICAgdGhpcy5fdG1wTWF0cml4LnRyYW5zbGF0ZVJlbGF0aXZlKFxuICAgICAgICAgICAgICAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC54LFxuICAgICAgICAgICAgICAtdGhpcy5fdG1wQm91bmRzT25Nb2RlbC55XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gbmV3ID0gW3RyYW5zbGF0ZV1bc2NhbGVdW3RyYW5zbGF0ZV1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fdG1wTWF0cml4Rm9yRHJhdy5zZXRNYXRyaXgodGhpcy5fdG1wTWF0cml4LmdldEFycmF5KCkpO1xuICAgICAgICB9XG4gICAgICAgIGNsaXBDb250ZXh0Ll9tYXRyaXhGb3JNYXNrLnNldE1hdHJpeCh0aGlzLl90bXBNYXRyaXhGb3JNYXNrLmdldEFycmF5KCkpO1xuICAgICAgICBjbGlwQ29udGV4dC5fbWF0cml4Rm9yRHJhdy5zZXRNYXRyaXgodGhpcy5fdG1wTWF0cml4Rm9yRHJhdy5nZXRBcnJheSgpKTtcblxuICAgICAgICBpZiAoIXJlbmRlcmVyLmlzVXNpbmdIaWdoUHJlY2lzaW9uTWFzaygpKSB7XG4gICAgICAgICAgY29uc3QgY2xpcERyYXdDb3VudDogbnVtYmVyID0gY2xpcENvbnRleHQuX2NsaXBwaW5nSWRDb3VudDtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsaXBEcmF3Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2xpcERyYXdJbmRleDogbnVtYmVyID0gY2xpcENvbnRleHQuX2NsaXBwaW5nSWRMaXN0W2ldO1xuXG4gICAgICAgICAgICAvLyDpoILngrnmg4XloLHjgYzmm7TmlrDjgZXjgozjgabjgYrjgonjgZrjgIHkv6HpoLzmgKfjgYzjgarjgYTloLTlkIjjga/mj4/nlLvjgpLjg5HjgrnjgZnjgotcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgIW1vZGVsLmdldERyYXdhYmxlRHluYW1pY0ZsYWdWZXJ0ZXhQb3NpdGlvbnNEaWRDaGFuZ2UoXG4gICAgICAgICAgICAgICAgY2xpcERyYXdJbmRleFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlbmRlcmVyLnNldElzQ3VsbGluZyhcbiAgICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVDdWxsaW5nKGNsaXBEcmF3SW5kZXgpICE9IGZhbHNlXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyDjg57jgrnjgq/jgYzjgq/jg6rjgqLjgZXjgozjgabjgYTjgarjgYTjgarjgonlh6bnkIbjgZnjgotcbiAgICAgICAgICAgIGlmICghdGhpcy5fY2xlYXJlZEZyYW1lQnVmZmVyZmxhZ3MuYXQoY2xpcENvbnRleHQuX2J1ZmZlckluZGV4KSkge1xuICAgICAgICAgICAgICAvLyDjg57jgrnjgq/jgpLjgq/jg6rjgqLjgZnjgotcbiAgICAgICAgICAgICAgLy8gKOS7ruS7leanmCkgMeOBjOeEoeWKue+8iOaPj+OBi+OCjOOBquOBhO+8iemgmOWfn+OAgTDjgYzmnInlirnvvIjmj4/jgYvjgozjgovvvInpoJjln5/jgILvvIjjgrfjgqfjg7zjg4Djg7xDZCpDc+OBpzDjgavov5HjgYTlgKTjgpLjgYvjgZHjgabjg57jgrnjgq/jgpLkvZzjgovjgIIx44KS44GL44GR44KL44Go5L2V44KC6LW344GT44KJ44Gq44GE77yJXG4gICAgICAgICAgICAgIHRoaXMuZ2wuY2xlYXJDb2xvcigxLjAsIDEuMCwgMS4wLCAxLjApO1xuICAgICAgICAgICAgICB0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG4gICAgICAgICAgICAgIHRoaXMuX2NsZWFyZWRGcmFtZUJ1ZmZlcmZsYWdzLnNldChjbGlwQ29udGV4dC5fYnVmZmVySW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDku4rlm57lsILnlKjjga7lpInmj5vjgpLpgannlKjjgZfjgabmj4/jgY9cbiAgICAgICAgICAgIC8vIOODgeODo+ODs+ODjeODq+OCguWIh+OCiuabv+OBiOOCi+W/heimgeOBjOOBguOCiyhBLFIsRyxCKVxuICAgICAgICAgICAgcmVuZGVyZXIuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayhjbGlwQ29udGV4dCk7XG4gICAgICAgICAgICByZW5kZXJlci5kcmF3TWVzaChcbiAgICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVUZXh0dXJlSW5kZXgoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlVmVydGV4SW5kZXhDb3VudChjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhJbmRpY2VzKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRpY2VzKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgICBtb2RlbC5nZXREcmF3YWJsZVZlcnRleFV2cyhjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgICAgbW9kZWwuZ2V0TXVsdGlwbHlDb2xvcihjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgICAgbW9kZWwuZ2V0U2NyZWVuQ29sb3IoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICAgIG1vZGVsLmdldERyYXdhYmxlT3BhY2l0eShjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgICAgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9Ob3JtYWwsIC8vIOOCr+ODquODg+ODlOODs+OCsOOBr+mAmuW4uOaPj+eUu+OCkuW8t+WItlxuICAgICAgICAgICAgICBmYWxzZSAvLyDjg57jgrnjgq/nlJ/miJDmmYLjga/jgq/jg6rjg4Pjg5Tjg7PjgrDjga7lj43ou6Lkvb/nlKjjga/lhajjgY/plqLkv4LjgYzjgarjgYRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVuZGVyZXIuaXNVc2luZ0hpZ2hQcmVjaXNpb25NYXNrKCkpIHtcbiAgICAgICAgLy8gLS0tIOW+jOWHpueQhiAtLS1cbiAgICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgc19mYm8pOyAvLyDmj4/nlLvlr77osaHjgpLmiLvjgZlcbiAgICAgICAgcmVuZGVyZXIuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayhudWxsKTtcblxuICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KFxuICAgICAgICAgIHNfdmlld3BvcnRbMF0sXG4gICAgICAgICAgc192aWV3cG9ydFsxXSxcbiAgICAgICAgICBzX3ZpZXdwb3J0WzJdLFxuICAgICAgICAgIHNfdmlld3BvcnRbM11cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog5pei44Gr44Oe44K544Kv44KS5L2c44Gj44Gm44GE44KL44GL44KS56K66KqNXG4gICAqIOS9nOOBo+OBpuOBhOOCi+anmOOBp+OBguOCjOOBsOipsuW9k+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruOCpOODs+OCueOCv+ODs+OCueOCkui/lOOBmVxuICAgKiDkvZzjgaPjgabjgYTjgarjgZHjgozjgbBOVUxM44KS6L+U44GZXG4gICAqIEBwYXJhbSBkcmF3YWJsZU1hc2tzIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkuODnuOCueOCr+OBmeOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruODquOCueODiFxuICAgKiBAcGFyYW0gZHJhd2FibGVNYXNrQ291bnRzIOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkuODnuOCueOCr+OBmeOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruaVsFxuICAgKiBAcmV0dXJuIOipsuW9k+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBjOWtmOWcqOOBmeOCjOOBsOOCpOODs+OCueOCv+ODs+OCueOCkui/lOOBl+OAgeOBquOBkeOCjOOBsE5VTEzjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBmaW5kU2FtZUNsaXAoXG4gICAgZHJhd2FibGVNYXNrczogSW50MzJBcnJheSxcbiAgICBkcmF3YWJsZU1hc2tDb3VudHM6IG51bWJlclxuICApOiBDdWJpc21DbGlwcGluZ0NvbnRleHQge1xuICAgIC8vIOS9nOaIkOa4iOOBv0NsaXBwaW5nQ29udGV4dOOBqOS4gOiHtOOBmeOCi+OBi+eiuuiqjVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIGNvbnN0IGNsaXBwaW5nQ29udGV4dDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID1cbiAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoaSk7XG4gICAgICBjb25zdCBjb3VudDogbnVtYmVyID0gY2xpcHBpbmdDb250ZXh0Ll9jbGlwcGluZ0lkQ291bnQ7XG5cbiAgICAgIC8vIOWAi+aVsOOBjOmBleOBhuWgtOWQiOOBr+WIpeeJqVxuICAgICAgaWYgKGNvdW50ICE9IGRyYXdhYmxlTWFza0NvdW50cykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbGV0IHNhbWVDb3VudCA9IDA7XG5cbiAgICAgIC8vIOWQjOOBmElE44KS5oyB44Gk44GL56K66KqN44CC6YWN5YiX44Gu5pWw44GM5ZCM44GY44Gq44Gu44Gn44CB5LiA6Ie044GX44Gf5YCL5pWw44GM5ZCM44GY44Gq44KJ5ZCM44GY54mp44KS5oyB44Gk44Go44GZ44KLXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgICAgY29uc3QgY2xpcElkOiBudW1iZXIgPSBjbGlwcGluZ0NvbnRleHQuX2NsaXBwaW5nSWRMaXN0W2pdO1xuXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgY291bnQ7IGsrKykge1xuICAgICAgICAgIGlmIChkcmF3YWJsZU1hc2tzW2tdID09IGNsaXBJZCkge1xuICAgICAgICAgICAgc2FtZUNvdW50Kys7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNhbWVDb3VudCA9PSBjb3VudCkge1xuICAgICAgICByZXR1cm4gY2xpcHBpbmdDb250ZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsOyAvLyDopovjgaTjgYvjgonjgarjgYvjgaPjgZ9cbiAgfVxuXG4gIC8qKlxuICAgKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4jjgpLphY3nva7jgZnjgovjg6zjgqTjgqLjgqbjg4hcbiAgICog5oyH5a6a44GV44KM44Gf5pWw44Gu44Os44Oz44OA44O844OG44Kv44K544OB44Oj44KS5qW15Yqb44GE44Gj44Gx44GE44Gr5L2/44Gj44Gm44Oe44K544Kv44KS44Os44Kk44Ki44Km44OI44GZ44KLXG4gICAqIOODnuOCueOCr+OCsOODq+ODvOODl+OBruaVsOOBjDTku6XkuIvjgarjgolSR0JB5ZCE44OB44Oj44Oz44ON44Or44Gr5LiA44Gk44Ga44Gk44Oe44K544Kv44KS6YWN572u44GX44CBNeS7peS4ijbku6XkuIvjgarjgolSR0JB44KSMiwyLDEsMeOBqOmFjee9ruOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gdXNpbmdDbGlwQ291bnQg6YWN572u44GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44Gu5pWwXG4gICAqL1xuICBwdWJsaWMgc2V0dXBMYXlvdXRCb3VuZHModXNpbmdDbGlwQ291bnQ6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHVzZUNsaXBwaW5nTWFza01heENvdW50ID1cbiAgICAgIHRoaXMuX3JlbmRlclRleHR1cmVDb3VudCA8PSAxXG4gICAgICAgID8gQ2xpcHBpbmdNYXNrTWF4Q291bnRPbkRlZmF1bHRcbiAgICAgICAgOiBDbGlwcGluZ01hc2tNYXhDb3VudE9uTXVsdGlSZW5kZXJUZXh0dXJlICogdGhpcy5fcmVuZGVyVGV4dHVyZUNvdW50O1xuXG4gICAgaWYgKHVzaW5nQ2xpcENvdW50IDw9IDAgfHwgdXNpbmdDbGlwQ291bnQgPiB1c2VDbGlwcGluZ01hc2tNYXhDb3VudCkge1xuICAgICAgaWYgKHVzaW5nQ2xpcENvdW50ID4gdXNlQ2xpcHBpbmdNYXNrTWF4Q291bnQpIHtcbiAgICAgICAgLy8g44Oe44K544Kv44Gu5Yi26ZmQ5pWw44Gu6K2m5ZGK44KS5Ye644GZXG4gICAgICAgIEN1YmlzbUxvZ0Vycm9yKFxuICAgICAgICAgICdub3Qgc3VwcG9ydGVkIG1hc2sgY291bnQgOiB7MH1cXG5bRGV0YWlsc10gcmVuZGVyIHRleHR1cmUgY291bnQgOiB7MX0sIG1hc2sgY291bnQgOiB7Mn0nLFxuICAgICAgICAgIHVzaW5nQ2xpcENvdW50IC0gdXNlQ2xpcHBpbmdNYXNrTWF4Q291bnQsXG4gICAgICAgICAgdGhpcy5fcmVuZGVyVGV4dHVyZUNvdW50LFxuICAgICAgICAgIHVzaW5nQ2xpcENvdW50XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLyDjgZPjga7loLTlkIjjga/kuIDjgaTjga7jg57jgrnjgq/jgr/jg7zjgrLjg4Pjg4jjgpLmr47lm57jgq/jg6rjgqLjgZfjgabkvb/nlKjjgZnjgotcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGluZGV4IDwgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpO1xuICAgICAgICBpbmRleCsrXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgY2xpcENvbnRleHQ6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9XG4gICAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoaW5kZXgpO1xuICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Q2hhbm5lbE5vID0gMDsgLy8g44Gp44GG44Gb5q+O5Zue5raI44GZ44Gu44Gn5Zu65a6aXG4gICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHMueCA9IDAuMDtcbiAgICAgICAgY2xpcENvbnRleHQuX2xheW91dEJvdW5kcy55ID0gMC4wO1xuICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLndpZHRoID0gMS4wO1xuICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDEuMDtcbiAgICAgICAgY2xpcENvbnRleHQuX2J1ZmZlckluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyDjg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6PjgYwx5p6a44Gq44KJOeWIhuWJsuOBmeOCi++8iOacgOWkpzM25p6a77yJXG4gICAgY29uc3QgbGF5b3V0Q291bnRNYXhWYWx1ZSA9IHRoaXMuX3JlbmRlclRleHR1cmVDb3VudCA8PSAxID8gOSA6IDg7XG5cbiAgICAvLyDmjIflrprjgZXjgozjgZ/mlbDjga7jg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6PjgpLmpbXlipvjgYTjgaPjgbHjgYTjgavkvb/jgaPjgabjg57jgrnjgq/jgpLjg6zjgqTjgqLjgqbjg4jjgZnjgovvvIjjg4fjg5Xjgqnjg6vjg4jjgarjgokx77yJXG4gICAgLy8g44Oe44K544Kv44Kw44Or44O844OX44Gu5pWw44GMNOS7peS4i+OBquOCiVJHQkHlkITjg4Hjg6Pjg7Pjg43jg6vjgasx44Gk44Ga44Gk44Oe44K544Kv44KS6YWN572u44GX44CBNeS7peS4ijbku6XkuIvjgarjgolSR0JB44KSMiwyLDEsMeOBqOmFjee9ruOBmeOCi1xuICAgIGxldCBjb3VudFBlclNoZWV0RGl2OiBudW1iZXIgPSB1c2luZ0NsaXBDb3VudCAvIHRoaXMuX3JlbmRlclRleHR1cmVDb3VudDsgLy8g44Os44Oz44OA44O844OG44Kv44K544OB44OjMeaemuOBguOBn+OCiuS9leaemuWJsuOCiuW9k+OBpuOCi+OBi1xuICAgIGxldCBjb3VudFBlclNoZWV0TW9kOiBudW1iZXIgPSB1c2luZ0NsaXBDb3VudCAlIHRoaXMuX3JlbmRlclRleHR1cmVDb3VudDsgLy8g44GT44Gu55Wq5Y+344Gu44Os44Oz44OA44O844OG44Kv44K544OB44Oj44G+44Gn44Gr5LiA44Gk44Ga44Gk6YWN5YiG44GZ44KLXG5cbiAgICAvLyDlsI/mlbDngrnjga/liIfjgormjajjgabjgotcbiAgICBjb3VudFBlclNoZWV0RGl2ID0gfn5jb3VudFBlclNoZWV0RGl2O1xuICAgIGNvdW50UGVyU2hlZXRNb2QgPSB+fmNvdW50UGVyU2hlZXRNb2Q7XG5cbiAgICAvLyBSR0JB44KS6aCG55Wq44Gr5L2/44Gj44Gm44GE44GPXG4gICAgbGV0IGRpdjogbnVtYmVyID0gY291bnRQZXJTaGVldERpdiAvIENvbG9yQ2hhbm5lbENvdW50OyAvLyAx44OB44Oj44Oz44ON44Or44Gr6YWN572u44GZ44KL5Z+65pys44Gu44Oe44K544KvXG4gICAgbGV0IG1vZDogbnVtYmVyID0gY291bnRQZXJTaGVldERpdiAlIENvbG9yQ2hhbm5lbENvdW50OyAvLyDkvZnjgorjgIHjgZPjga7nlarlj7fjga7jg4Hjg6Pjg7Pjg43jg6vjgb7jgafjgavkuIDjgaTjgZrjgaTphY3liIbjgZnjgotcblxuICAgIC8vIOWwj+aVsOeCueOBr+WIh+OCiuaNqOOBpuOCi1xuICAgIGRpdiA9IH5+ZGl2O1xuICAgIG1vZCA9IH5+bW9kO1xuXG4gICAgLy8gUkdCQeOBneOCjOOBnuOCjOOBruODgeODo+ODs+ODjeODq+OCkueUqOaEj+OBl+OBpuOBhOOBj++8iDA6UiwgMTpHLCAyOkIsIDM6Qe+8iVxuICAgIGxldCBjdXJDbGlwSW5kZXggPSAwOyAvLyDpoIbnlarjgavoqK3lrprjgZfjgabjgYTjgY9cblxuICAgIGZvciAoXG4gICAgICBsZXQgcmVuZGVyVGV4dHVyZU5vID0gMDtcbiAgICAgIHJlbmRlclRleHR1cmVObyA8IHRoaXMuX3JlbmRlclRleHR1cmVDb3VudDtcbiAgICAgIHJlbmRlclRleHR1cmVObysrXG4gICAgKSB7XG4gICAgICBmb3IgKGxldCBjaGFubmVsTm8gPSAwOyBjaGFubmVsTm8gPCBDb2xvckNoYW5uZWxDb3VudDsgY2hhbm5lbE5vKyspIHtcbiAgICAgICAgLy8g44GT44Gu44OB44Oj44Oz44ON44Or44Gr44Os44Kk44Ki44Km44OI44GZ44KL5pWwXG4gICAgICAgIGxldCBsYXlvdXRDb3VudDogbnVtYmVyID0gZGl2ICsgKGNoYW5uZWxObyA8IG1vZCA/IDEgOiAwKTtcblxuICAgICAgICAvLyDjgZPjga7jg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6Pjgavjgb7jgaDlibLjgorlvZPjgabjgonjgozjgabjgYTjgarjgZHjgozjgbDov73liqDjgZnjgotcbiAgICAgICAgY29uc3QgY2hlY2tDaGFubmVsTm8gPSBtb2QgKyAxID49IENvbG9yQ2hhbm5lbENvdW50ID8gMCA6IG1vZCArIDE7XG4gICAgICAgIGlmIChsYXlvdXRDb3VudCA8IGxheW91dENvdW50TWF4VmFsdWUgJiYgY2hhbm5lbE5vID09IGNoZWNrQ2hhbm5lbE5vKSB7XG4gICAgICAgICAgbGF5b3V0Q291bnQgKz0gcmVuZGVyVGV4dHVyZU5vIDwgY291bnRQZXJTaGVldE1vZCA/IDEgOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5YiG5Ymy5pa55rOV44KS5rG65a6a44GZ44KLXG4gICAgICAgIGlmIChsYXlvdXRDb3VudCA9PSAwKSB7XG4gICAgICAgICAgLy8g5L2V44KC44GX44Gq44GEXG4gICAgICAgIH0gZWxzZSBpZiAobGF5b3V0Q291bnQgPT0gMSkge1xuICAgICAgICAgIC8vIOWFqOOBpuOCkuOBneOBruOBvuOBvuS9v+OBhlxuICAgICAgICAgIGNvbnN0IGNsaXBDb250ZXh0OiBDdWJpc21DbGlwcGluZ0NvbnRleHQgPVxuICAgICAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoY3VyQ2xpcEluZGV4KyspO1xuICAgICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XG4gICAgICAgICAgY2xpcENvbnRleHQuX2xheW91dEJvdW5kcy54ID0gMC4wO1xuICAgICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHMueSA9IDAuMDtcbiAgICAgICAgICBjbGlwQ29udGV4dC5fbGF5b3V0Qm91bmRzLndpZHRoID0gMS4wO1xuICAgICAgICAgIGNsaXBDb250ZXh0Ll9sYXlvdXRCb3VuZHMuaGVpZ2h0ID0gMS4wO1xuICAgICAgICAgIGNsaXBDb250ZXh0Ll9idWZmZXJJbmRleCA9IHJlbmRlclRleHR1cmVObztcbiAgICAgICAgfSBlbHNlIGlmIChsYXlvdXRDb3VudCA9PSAyKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXlvdXRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgeHBvczogbnVtYmVyID0gaSAlIDI7XG5cbiAgICAgICAgICAgIC8vIOWwj+aVsOeCueOBr+WIh+OCiuaNqOOBpuOCi1xuICAgICAgICAgICAgeHBvcyA9IH5+eHBvcztcblxuICAgICAgICAgICAgY29uc3QgY2M6IEN1YmlzbUNsaXBwaW5nQ29udGV4dCA9XG4gICAgICAgICAgICAgIHRoaXMuX2NsaXBwaW5nQ29udGV4dExpc3RGb3JNYXNrLmF0KGN1ckNsaXBJbmRleCsrKTtcbiAgICAgICAgICAgIGNjLl9sYXlvdXRDaGFubmVsTm8gPSBjaGFubmVsTm87XG5cbiAgICAgICAgICAgIC8vIFVW44KSMuOBpOOBq+WIhuino+OBl+OBpuS9v+OBhlxuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy54ID0geHBvcyAqIDAuNTtcbiAgICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueSA9IDAuMDtcbiAgICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMud2lkdGggPSAwLjU7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDEuMDtcbiAgICAgICAgICAgIGNjLl9idWZmZXJJbmRleCA9IHJlbmRlclRleHR1cmVObztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGF5b3V0Q291bnQgPD0gNCkge1xuICAgICAgICAgIC8vIDTliIblibLjgZfjgabkvb/jgYZcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGxldCB4cG9zOiBudW1iZXIgPSBpICUgMjtcbiAgICAgICAgICAgIGxldCB5cG9zOiBudW1iZXIgPSBpIC8gMjtcblxuICAgICAgICAgICAgLy8g5bCP5pWw54K544Gv5YiH44KK5o2o44Gm44KLXG4gICAgICAgICAgICB4cG9zID0gfn54cG9zO1xuICAgICAgICAgICAgeXBvcyA9IH5+eXBvcztcblxuICAgICAgICAgICAgY29uc3QgY2MgPSB0aGlzLl9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzay5hdChjdXJDbGlwSW5kZXgrKyk7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Q2hhbm5lbE5vID0gY2hhbm5lbE5vO1xuXG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLnggPSB4cG9zICogMC41O1xuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy55ID0geXBvcyAqIDAuNTtcbiAgICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMud2lkdGggPSAwLjU7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLmhlaWdodCA9IDAuNTtcbiAgICAgICAgICAgIGNjLl9idWZmZXJJbmRleCA9IHJlbmRlclRleHR1cmVObztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGF5b3V0Q291bnQgPD0gbGF5b3V0Q291bnRNYXhWYWx1ZSkge1xuICAgICAgICAgIC8vIDnliIblibLjgZfjgabkvb/jgYZcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheW91dENvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGxldCB4cG9zID0gaSAlIDM7XG4gICAgICAgICAgICBsZXQgeXBvcyA9IGkgLyAzO1xuXG4gICAgICAgICAgICAvLyDlsI/mlbDngrnjga/liIfjgormjajjgabjgotcbiAgICAgICAgICAgIHhwb3MgPSB+fnhwb3M7XG4gICAgICAgICAgICB5cG9zID0gfn55cG9zO1xuXG4gICAgICAgICAgICBjb25zdCBjYzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID1cbiAgICAgICAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoY3VyQ2xpcEluZGV4KyspO1xuICAgICAgICAgICAgY2MuX2xheW91dENoYW5uZWxObyA9IGNoYW5uZWxObztcblxuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy54ID0geHBvcyAvIDMuMDtcbiAgICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMueSA9IHlwb3MgLyAzLjA7XG4gICAgICAgICAgICBjYy5fbGF5b3V0Qm91bmRzLndpZHRoID0gMS4wIC8gMy4wO1xuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy5oZWlnaHQgPSAxLjAgLyAzLjA7XG4gICAgICAgICAgICBjYy5fYnVmZmVySW5kZXggPSByZW5kZXJUZXh0dXJlTm87XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIOODnuOCueOCr+OBruWItumZkOaemuaVsOOCkui2heOBiOOBn+WgtOWQiOOBruWHpueQhlxuICAgICAgICAgIEN1YmlzbUxvZ0Vycm9yKFxuICAgICAgICAgICAgJ25vdCBzdXBwb3J0ZWQgbWFzayBjb3VudCA6IHswfVxcbltEZXRhaWxzXSByZW5kZXIgdGV4dHVyZSBjb3VudCA6IHsxfSwgbWFzayBjb3VudCA6IHsyfScsXG4gICAgICAgICAgICB1c2luZ0NsaXBDb3VudCAtIHVzZUNsaXBwaW5nTWFza01heENvdW50LFxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyVGV4dHVyZUNvdW50LFxuICAgICAgICAgICAgdXNpbmdDbGlwQ291bnRcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8gU2V0dXBTaGFkZXJQcm9ncmFt44Gn44Kq44O844OQ44O844Ki44Kv44K744K544GM55m655Sf44GZ44KL44Gu44Gn5Luu44Gn5pWw5YCk44KS5YWl44KM44KLXG4gICAgICAgICAgLy8g44KC44Gh44KN44KT5o+P55S757WQ5p6c44Gv5q2j44GX44GE44KC44Gu44Gn44Gv44Gq44GP44Gq44KLXG4gICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxheW91dENvdW50OyBpbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBjYzogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID1cbiAgICAgICAgICAgICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suYXQoY3VyQ2xpcEluZGV4KyspO1xuXG4gICAgICAgICAgICBjYy5fbGF5b3V0Q2hhbm5lbE5vID0gMDtcblxuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy54ID0gMC4wO1xuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy55ID0gMC4wO1xuICAgICAgICAgICAgY2MuX2xheW91dEJvdW5kcy53aWR0aCA9IDEuMDtcbiAgICAgICAgICAgIGNjLl9sYXlvdXRCb3VuZHMuaGVpZ2h0ID0gMS4wO1xuICAgICAgICAgICAgY2MuX2J1ZmZlckluZGV4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kr44Op44O844OQ44OD44OV44Kh44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Kr44Op44O844OQ44OD44OV44KhXG4gICAqL1xuICBwdWJsaWMgZ2V0Q29sb3JCdWZmZXIoKTogY3NtVmVjdG9yPFdlYkdMVGV4dHVyZT4ge1xuICAgIHJldHVybiB0aGlzLl9tYXNrQ29sb3JCdWZmZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+mdouaPj+eUu+OBq+S9v+eUqOOBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruODquOCueODiOOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOeUu+mdouaPj+eUu+OBq+S9v+eUqOOBmeOCi+OCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBruODquOCueODiFxuICAgKi9cbiAgcHVibGljIGdldENsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3KCk6IGNzbVZlY3RvcjxDdWJpc21DbGlwcGluZ0NvbnRleHQ+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvckRyYXc7XG4gIH1cblxuICAvKipcbiAgICog44Oe44K544Kv44Gu5ZCI6KiI5pWw44KS44Kr44Km44Oz44OIXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2xpcHBpbmdNYXNrQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdDb250ZXh0TGlzdEZvck1hc2suZ2V0U2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuioreWumuOBmeOCi1xuICAgKiBAcGFyYW0gc2l6ZSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBzZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplKHNpemU6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2NsaXBwaW5nTWFza0J1ZmZlclNpemUgPSBzaXplO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCuuOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIGdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgZPjga7jg5Djg4Pjg5XjgqHjga7jg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6Pjga7mnprmlbDjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjgZPjga7jg5Djg4Pjg5XjgqHjga7jg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6Pjga7mnprmlbBcbiAgICovXG4gIHB1YmxpYyBnZXRSZW5kZXJUZXh0dXJlQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fcmVuZGVyVGV4dHVyZUNvdW50O1xuICB9XG5cbiAgcHVibGljIF9jdXJyZW50TWFza1JlbmRlclRleHR1cmU6IFdlYkdMRnJhbWVidWZmZXI7IC8vIOODnuOCueOCr+eUqOODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruOCouODieODrOOCuVxuICBwdWJsaWMgX21hc2tSZW5kZXJUZXh0dXJlczogY3NtVmVjdG9yPFdlYkdMRnJhbWVidWZmZXI+OyAvLyDjg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6Pjga7jg6rjgrnjg4hcbiAgcHVibGljIF9tYXNrQ29sb3JCdWZmZXJzOiBjc21WZWN0b3I8V2ViR0xUZXh0dXJlPjsgLy8g44Oe44K544Kv55So44Kr44Op44O844OQ44OD44OV44Kh44O844Gu44Ki44OJ44Os44K544Gu44Oq44K544OIXG4gIHB1YmxpYyBfY3VycmVudEZyYW1lTm86IG51bWJlcjsgLy8g44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5LiO44GI44KL44OV44Os44O844Og55Wq5Y+3XG5cbiAgcHVibGljIF9jaGFubmVsQ29sb3JzOiBjc21WZWN0b3I8Q3ViaXNtVGV4dHVyZUNvbG9yPjtcbiAgcHVibGljIF9tYXNrVGV4dHVyZTogQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlOyAvLyDjg57jgrnjgq/nlKjjga7jg4bjgq/jgrnjg4Hjg6Pjg6rjgr3jg7zjgrnjga7jg6rjgrnjg4hcbiAgcHVibGljIF9jbGlwcGluZ0NvbnRleHRMaXN0Rm9yTWFzazogY3NtVmVjdG9yPEN1YmlzbUNsaXBwaW5nQ29udGV4dD47IC8vIOODnuOCueOCr+eUqOOCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOBruODquOCueODiFxuICBwdWJsaWMgX2NsaXBwaW5nQ29udGV4dExpc3RGb3JEcmF3OiBjc21WZWN0b3I8Q3ViaXNtQ2xpcHBpbmdDb250ZXh0PjsgLy8g5o+P55S755So44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44Gu44Oq44K544OIXG4gIHB1YmxpYyBfY2xpcHBpbmdNYXNrQnVmZmVyU2l6ZTogbnVtYmVyOyAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jg5Djg4Pjg5XjgqHjgrXjgqTjgrrvvIjliJ3mnJ/lgKQ6MjU277yJXG4gIHB1YmxpYyBfcmVuZGVyVGV4dHVyZUNvdW50OiBudW1iZXI7IC8vIOeUn+aIkOOBmeOCi+ODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruaemuaVsFxuXG4gIHByaXZhdGUgX3RtcE1hdHJpeDogQ3ViaXNtTWF0cml4NDQ7IC8vIOODnuOCueOCr+ioiOeul+eUqOOBruihjOWIl1xuICBwcml2YXRlIF90bXBNYXRyaXhGb3JNYXNrOiBDdWJpc21NYXRyaXg0NDsgLy8g44Oe44K544Kv6KiI566X55So44Gu6KGM5YiXXG4gIHByaXZhdGUgX3RtcE1hdHJpeEZvckRyYXc6IEN1YmlzbU1hdHJpeDQ0OyAvLyDjg57jgrnjgq/oqIjnrpfnlKjjga7ooYzliJdcbiAgcHJpdmF0ZSBfdG1wQm91bmRzT25Nb2RlbDogY3NtUmVjdDsgLy8g44Oe44K544Kv6YWN572u6KiI566X55So44Gu55+p5b2iXG4gIHByaXZhdGUgX2NsZWFyZWRGcmFtZUJ1ZmZlcmZsYWdzOiBjc21WZWN0b3I8Ym9vbGVhbj47IC8v44Oe44K544Kv44Gu44Kv44Oq44Ki44OV44Op44Kw44Gu6YWN5YiXXG5cbiAgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDsgLy8gV2ViR0zjg6zjg7Pjg4Djg6rjg7PjgrDjgrPjg7Pjg4bjgq3jgrnjg4hcbn1cblxuLyoqXG4gKiDjg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6Pjga7jg6rjgr3jg7zjgrnjgpLlrprnvqnjgZnjgovmp4vpgKDkvZNcbiAqIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+OBp+S9v+eUqOOBmeOCi1xuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlIHtcbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gZnJhbWVObyDjg6zjg7Pjg4Djg6njg7zjga7jg5Xjg6zjg7zjg6Dnlarlj7dcbiAgICogQHBhcmFtIHRleHR1cmUg44OG44Kv44K544OB44Oj44Gu44Ki44OJ44Os44K5XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoZnJhbWVObzogbnVtYmVyLCB0ZXh0dXJlOiBjc21WZWN0b3I8V2ViR0xGcmFtZWJ1ZmZlcj4pIHtcbiAgICB0aGlzLmZyYW1lTm8gPSBmcmFtZU5vO1xuICAgIHRoaXMudGV4dHVyZXMgPSB0ZXh0dXJlO1xuICB9XG5cbiAgcHVibGljIGZyYW1lTm86IG51bWJlcjsgLy8g44Os44Oz44OA44Op44Gu44OV44Os44O844Og55Wq5Y+3XG4gIHB1YmxpYyB0ZXh0dXJlczogY3NtVmVjdG9yPFdlYkdMRnJhbWVidWZmZXI+OyAvLyDjg4bjgq/jgrnjg4Hjg6Pjga7jgqLjg4njg6zjgrlcbn1cblxuLyoqXG4gKiDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jga7jgrPjg7Pjg4bjgq3jgrnjg4hcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbUNsaXBwaW5nQ29udGV4dCB7XG4gIC8qKlxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICBtYW5hZ2VyOiBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wsXG4gICAgY2xpcHBpbmdEcmF3YWJsZUluZGljZXM6IEludDMyQXJyYXksXG4gICAgY2xpcENvdW50OiBudW1iZXJcbiAgKSB7XG4gICAgdGhpcy5fb3duZXIgPSBtYW5hZ2VyO1xuXG4gICAgLy8g44Kv44Oq44OD44OX44GX44Gm44GE44KL77yI77yd44Oe44K544Kv55So44Gu77yJRHJhd2FibGXjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjg6rjgrnjg4hcbiAgICB0aGlzLl9jbGlwcGluZ0lkTGlzdCA9IGNsaXBwaW5nRHJhd2FibGVJbmRpY2VzO1xuXG4gICAgLy8g44Oe44K544Kv44Gu5pWwXG4gICAgdGhpcy5fY2xpcHBpbmdJZENvdW50ID0gY2xpcENvdW50O1xuXG4gICAgdGhpcy5fYWxsQ2xpcHBlZERyYXdSZWN0ID0gbmV3IGNzbVJlY3QoKTtcbiAgICB0aGlzLl9sYXlvdXRCb3VuZHMgPSBuZXcgY3NtUmVjdCgpO1xuXG4gICAgdGhpcy5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0ID0gW107XG5cbiAgICB0aGlzLl9tYXRyaXhGb3JNYXNrID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgdGhpcy5fbWF0cml4Rm9yRHJhdyA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xuXG4gICAgdGhpcy5fYnVmZmVySW5kZXggPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2xheW91dEJvdW5kcyAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9sYXlvdXRCb3VuZHMgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9hbGxDbGlwcGVkRHJhd1JlY3QgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fYWxsQ2xpcHBlZERyYXdSZWN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2NsaXBwZWREcmF3YWJsZUluZGV4TGlzdCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOBk+OBruODnuOCueOCr+OBq+OCr+ODquODg+ODl+OBleOCjOOCi+aPj+eUu+OCquODluOCuOOCp+OCr+ODiOOCkui/veWKoOOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gZHJhd2FibGVJbmRleCDjgq/jg6rjg4Pjg5Tjg7PjgrDlr77osaHjgavov73liqDjgZnjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcbiAgICovXG4gIHB1YmxpYyBhZGRDbGlwcGVkRHJhd2FibGUoZHJhd2FibGVJbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy5fY2xpcHBlZERyYXdhYmxlSW5kZXhMaXN0LnB1c2goZHJhd2FibGVJbmRleCk7XG4gIH1cblxuICAvKipcbiAgICog44GT44Gu44Oe44K544Kv44KS566h55CG44GZ44KL44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K544KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44ON44O844K444Oj44Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgZ2V0Q2xpcHBpbmdNYW5hZ2VyKCk6IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCB7XG4gICAgcmV0dXJuIHRoaXMuX293bmVyO1xuICB9XG5cbiAgcHVibGljIHNldEdsKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcbiAgICB0aGlzLl9vd25lci5zZXRHTChnbCk7XG4gIH1cblxuICBwdWJsaWMgX2lzVXNpbmc6IGJvb2xlYW47IC8vIOePvuWcqOOBruaPj+eUu+eKtuaFi+OBp+ODnuOCueOCr+OBrua6luWCmeOBjOW/heimgeOBquOCiXRydWVcbiAgcHVibGljIHJlYWRvbmx5IF9jbGlwcGluZ0lkTGlzdDogSW50MzJBcnJheTsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44GuSUTjg6rjgrnjg4hcbiAgcHVibGljIF9jbGlwcGluZ0lkQ291bnQ6IG51bWJlcjsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44Gu5pWwXG4gIHB1YmxpYyBfbGF5b3V0Q2hhbm5lbE5vOiBudW1iZXI7IC8vIFJHQkHjga7jgYTjgZrjgozjga7jg4Hjg6Pjg7Pjg43jg6vjgavjgZPjga7jgq/jg6rjg4Pjg5fjgpLphY3nva7jgZnjgovjgYvvvIgwOlIsIDE6RywgMjpCLCAzOkHvvIlcbiAgcHVibGljIF9sYXlvdXRCb3VuZHM6IGNzbVJlY3Q7IC8vIOODnuOCueOCr+eUqOODgeODo+ODs+ODjeODq+OBruOBqeOBrumgmOWfn+OBq+ODnuOCueOCr+OCkuWFpeOCjOOCi+OBi++8iFZpZXfluqfmqJktMX4xLCBVVuOBrzB+MeOBq+ebtOOBme+8iVxuICBwdWJsaWMgX2FsbENsaXBwZWREcmF3UmVjdDogY3NtUmVjdDsgLy8g44GT44Gu44Kv44Oq44OD44OU44Oz44Kw44Gn44CB44Kv44Oq44OD44OU44Oz44Kw44GV44KM44KL44GZ44G544Gm44Gu5o+P55S744Kq44OW44K444Kn44Kv44OI44Gu5Zuy44G/55+p5b2i77yI5q+O5Zue5pu05paw77yJXG4gIHB1YmxpYyBfbWF0cml4Rm9yTWFzazogQ3ViaXNtTWF0cml4NDQ7IC8vIOODnuOCueOCr+OBruS9jee9ruioiOeul+e1kOaenOOCkuS/neaMgeOBmeOCi+ihjOWIl1xuICBwdWJsaWMgX21hdHJpeEZvckRyYXc6IEN1YmlzbU1hdHJpeDQ0OyAvLyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7kvY3nva7oqIjnrpfntZDmnpzjgpLkv53mjIHjgZnjgovooYzliJdcbiAgcHVibGljIF9jbGlwcGVkRHJhd2FibGVJbmRleExpc3Q6IG51bWJlcltdOyAvLyDjgZPjga7jg57jgrnjgq/jgavjgq/jg6rjg4Pjg5fjgZXjgozjgovmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jg6rjgrnjg4hcbiAgcHVibGljIF9idWZmZXJJbmRleDogbnVtYmVyOyAvLyDjgZPjga7jg57jgrnjgq/jgYzlibLjgorlvZPjgabjgonjgozjgovjg6zjg7Pjg4Djg7zjg4bjgq/jgrnjg4Hjg6PvvIjjg5Xjg6zjg7zjg6Djg5Djg4Pjg5XjgqHvvInjgoTjgqvjg6njg7zjg5Djg4Pjg5XjgqHjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcblxuICBwcml2YXRlIF9vd25lcjogQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMOyAvLyDjgZPjga7jg57jgrnjgq/jgpLnrqHnkIbjgZfjgabjgYTjgovjg57jg43jg7zjgrjjg6Pjga7jgqTjg7Pjgrnjgr/jg7Pjgrlcbn1cblxuZXhwb3J0IGNsYXNzIEN1YmlzbVJlbmRlcmVyUHJvZmlsZV9XZWJHTCB7XG4gIHByaXZhdGUgc2V0R2xFbmFibGUoaW5kZXg6IEdMZW51bSwgZW5hYmxlZDogR0xib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKGVuYWJsZWQpIHRoaXMuZ2wuZW5hYmxlKGluZGV4KTtcbiAgICBlbHNlIHRoaXMuZ2wuZGlzYWJsZShpbmRleCk7XG4gIH1cblxuICBwcml2YXRlIHNldEdsRW5hYmxlVmVydGV4QXR0cmliQXJyYXkoXG4gICAgaW5kZXg6IEdMdWludCxcbiAgICBlbmFibGVkOiBHTGJvb2xlYW5cbiAgKTogdm9pZCB7XG4gICAgaWYgKGVuYWJsZWQpIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoaW5kZXgpO1xuICAgIGVsc2UgdGhpcy5nbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoaW5kZXgpO1xuICB9XG5cbiAgcHVibGljIHNhdmUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZ2wgPT0gbnVsbCkge1xuICAgICAgQ3ViaXNtTG9nRXJyb3IoXG4gICAgICAgIFwiJ2dsJyBpcyBudWxsLiBXZWJHTFJlbmRlcmluZ0NvbnRleHQgaXMgcmVxdWlyZWQuXFxuUGxlYXNlIGNhbGwgJ0N1YmltUmVuZGVyZXJfV2ViR0wuc3RhcnRVcCcgZnVuY3Rpb24uXCJcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vLS0gcHVzaCBzdGF0ZSAtLVxuICAgIHRoaXMuX2xhc3RBcnJheUJ1ZmZlckJpbmRpbmcgPSB0aGlzLmdsLmdldFBhcmFtZXRlcihcbiAgICAgIHRoaXMuZ2wuQVJSQVlfQlVGRkVSX0JJTkRJTkdcbiAgICApO1xuICAgIHRoaXMuX2xhc3RBcnJheUJ1ZmZlckJpbmRpbmcgPSB0aGlzLmdsLmdldFBhcmFtZXRlcihcbiAgICAgIHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVJfQklORElOR1xuICAgICk7XG4gICAgdGhpcy5fbGFzdFByb2dyYW0gPSB0aGlzLmdsLmdldFBhcmFtZXRlcih0aGlzLmdsLkNVUlJFTlRfUFJPR1JBTSk7XG5cbiAgICB0aGlzLl9sYXN0QWN0aXZlVGV4dHVyZSA9IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2wuQUNUSVZFX1RFWFRVUkUpO1xuICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUxKTsgLy/jg4bjgq/jgrnjg4Hjg6Pjg6bjg4vjg4Pjg4gx44KS44Ki44Kv44OG44Kj44OW44Gr77yI5Lul5b6M44Gu6Kit5a6a5a++6LGh44Go44GZ44KL77yJXG4gICAgdGhpcy5fbGFzdFRleHR1cmUxQmluZGluZzJEID0gdGhpcy5nbC5nZXRQYXJhbWV0ZXIoXG4gICAgICB0aGlzLmdsLlRFWFRVUkVfQklORElOR18yRFxuICAgICk7XG5cbiAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7IC8v44OG44Kv44K544OB44Oj44Om44OL44OD44OIMOOCkuOCouOCr+ODhuOCo+ODluOBq++8iOS7peW+jOOBruioreWumuWvvuixoeOBqOOBmeOCi++8iVxuICAgIHRoaXMuX2xhc3RUZXh0dXJlMEJpbmRpbmcyRCA9IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKFxuICAgICAgdGhpcy5nbC5URVhUVVJFX0JJTkRJTkdfMkRcbiAgICApO1xuXG4gICAgdGhpcy5fbGFzdFZlcnRleEF0dHJpYkFycmF5RW5hYmxlZFswXSA9IHRoaXMuZ2wuZ2V0VmVydGV4QXR0cmliKFxuICAgICAgMCxcbiAgICAgIHRoaXMuZ2wuVkVSVEVYX0FUVFJJQl9BUlJBWV9FTkFCTEVEXG4gICAgKTtcbiAgICB0aGlzLl9sYXN0VmVydGV4QXR0cmliQXJyYXlFbmFibGVkWzFdID0gdGhpcy5nbC5nZXRWZXJ0ZXhBdHRyaWIoXG4gICAgICAxLFxuICAgICAgdGhpcy5nbC5WRVJURVhfQVRUUklCX0FSUkFZX0VOQUJMRURcbiAgICApO1xuICAgIHRoaXMuX2xhc3RWZXJ0ZXhBdHRyaWJBcnJheUVuYWJsZWRbMl0gPSB0aGlzLmdsLmdldFZlcnRleEF0dHJpYihcbiAgICAgIDIsXG4gICAgICB0aGlzLmdsLlZFUlRFWF9BVFRSSUJfQVJSQVlfRU5BQkxFRFxuICAgICk7XG4gICAgdGhpcy5fbGFzdFZlcnRleEF0dHJpYkFycmF5RW5hYmxlZFszXSA9IHRoaXMuZ2wuZ2V0VmVydGV4QXR0cmliKFxuICAgICAgMyxcbiAgICAgIHRoaXMuZ2wuVkVSVEVYX0FUVFJJQl9BUlJBWV9FTkFCTEVEXG4gICAgKTtcblxuICAgIHRoaXMuX2xhc3RTY2lzc29yVGVzdCA9IHRoaXMuZ2wuaXNFbmFibGVkKHRoaXMuZ2wuU0NJU1NPUl9URVNUKTtcbiAgICB0aGlzLl9sYXN0U3RlbmNpbFRlc3QgPSB0aGlzLmdsLmlzRW5hYmxlZCh0aGlzLmdsLlNURU5DSUxfVEVTVCk7XG4gICAgdGhpcy5fbGFzdERlcHRoVGVzdCA9IHRoaXMuZ2wuaXNFbmFibGVkKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG4gICAgdGhpcy5fbGFzdEN1bGxGYWNlID0gdGhpcy5nbC5pc0VuYWJsZWQodGhpcy5nbC5DVUxMX0ZBQ0UpO1xuICAgIHRoaXMuX2xhc3RCbGVuZCA9IHRoaXMuZ2wuaXNFbmFibGVkKHRoaXMuZ2wuQkxFTkQpO1xuXG4gICAgdGhpcy5fbGFzdEZyb250RmFjZSA9IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2wuRlJPTlRfRkFDRSk7XG5cbiAgICB0aGlzLl9sYXN0Q29sb3JNYXNrID0gdGhpcy5nbC5nZXRQYXJhbWV0ZXIodGhpcy5nbC5DT0xPUl9XUklURU1BU0spO1xuXG4gICAgLy8gYmFja3VwIGJsZW5kaW5nXG4gICAgdGhpcy5fbGFzdEJsZW5kaW5nWzBdID0gdGhpcy5nbC5nZXRQYXJhbWV0ZXIodGhpcy5nbC5CTEVORF9TUkNfUkdCKTtcbiAgICB0aGlzLl9sYXN0QmxlbmRpbmdbMV0gPSB0aGlzLmdsLmdldFBhcmFtZXRlcih0aGlzLmdsLkJMRU5EX0RTVF9SR0IpO1xuICAgIHRoaXMuX2xhc3RCbGVuZGluZ1syXSA9IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2wuQkxFTkRfU1JDX0FMUEhBKTtcbiAgICB0aGlzLl9sYXN0QmxlbmRpbmdbM10gPSB0aGlzLmdsLmdldFBhcmFtZXRlcih0aGlzLmdsLkJMRU5EX0RTVF9BTFBIQSk7XG5cbiAgICAvLyDjg6Ljg4fjg6vmj4/nlLvnm7TliY3jga5GQk/jgajjg5Pjg6Xjg7zjg53jg7zjg4jjgpLkv53lrZhcbiAgICB0aGlzLl9sYXN0RkJPID0gdGhpcy5nbC5nZXRQYXJhbWV0ZXIodGhpcy5nbC5GUkFNRUJVRkZFUl9CSU5ESU5HKTtcbiAgICB0aGlzLl9sYXN0Vmlld3BvcnQgPSB0aGlzLmdsLmdldFBhcmFtZXRlcih0aGlzLmdsLlZJRVdQT1JUKTtcbiAgfVxuXG4gIHB1YmxpYyByZXN0b3JlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmdsID09IG51bGwpIHtcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKFxuICAgICAgICBcIidnbCcgaXMgbnVsbC4gV2ViR0xSZW5kZXJpbmdDb250ZXh0IGlzIHJlcXVpcmVkLlxcblBsZWFzZSBjYWxsICdDdWJpbVJlbmRlcmVyX1dlYkdMLnN0YXJ0VXAnIGZ1bmN0aW9uLlwiXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmdsLnVzZVByb2dyYW0odGhpcy5fbGFzdFByb2dyYW0pO1xuXG4gICAgdGhpcy5zZXRHbEVuYWJsZVZlcnRleEF0dHJpYkFycmF5KDAsIHRoaXMuX2xhc3RWZXJ0ZXhBdHRyaWJBcnJheUVuYWJsZWRbMF0pO1xuICAgIHRoaXMuc2V0R2xFbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSgxLCB0aGlzLl9sYXN0VmVydGV4QXR0cmliQXJyYXlFbmFibGVkWzFdKTtcbiAgICB0aGlzLnNldEdsRW5hYmxlVmVydGV4QXR0cmliQXJyYXkoMiwgdGhpcy5fbGFzdFZlcnRleEF0dHJpYkFycmF5RW5hYmxlZFsyXSk7XG4gICAgdGhpcy5zZXRHbEVuYWJsZVZlcnRleEF0dHJpYkFycmF5KDMsIHRoaXMuX2xhc3RWZXJ0ZXhBdHRyaWJBcnJheUVuYWJsZWRbM10pO1xuXG4gICAgdGhpcy5zZXRHbEVuYWJsZSh0aGlzLmdsLlNDSVNTT1JfVEVTVCwgdGhpcy5fbGFzdFNjaXNzb3JUZXN0KTtcbiAgICB0aGlzLnNldEdsRW5hYmxlKHRoaXMuZ2wuU1RFTkNJTF9URVNULCB0aGlzLl9sYXN0U3RlbmNpbFRlc3QpO1xuICAgIHRoaXMuc2V0R2xFbmFibGUodGhpcy5nbC5ERVBUSF9URVNULCB0aGlzLl9sYXN0RGVwdGhUZXN0KTtcbiAgICB0aGlzLnNldEdsRW5hYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFLCB0aGlzLl9sYXN0Q3VsbEZhY2UpO1xuICAgIHRoaXMuc2V0R2xFbmFibGUodGhpcy5nbC5CTEVORCwgdGhpcy5fbGFzdEJsZW5kKTtcblxuICAgIHRoaXMuZ2wuZnJvbnRGYWNlKHRoaXMuX2xhc3RGcm9udEZhY2UpO1xuXG4gICAgdGhpcy5nbC5jb2xvck1hc2soXG4gICAgICB0aGlzLl9sYXN0Q29sb3JNYXNrWzBdLFxuICAgICAgdGhpcy5fbGFzdENvbG9yTWFza1sxXSxcbiAgICAgIHRoaXMuX2xhc3RDb2xvck1hc2tbMl0sXG4gICAgICB0aGlzLl9sYXN0Q29sb3JNYXNrWzNdXG4gICAgKTtcblxuICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fbGFzdEFycmF5QnVmZmVyQmluZGluZyk7IC8v5YmN44Gr44OQ44OD44OV44Kh44GM44OQ44Kk44Oz44OJ44GV44KM44Gm44GE44Gf44KJ56C05qOE44GZ44KL5b+F6KaB44GM44GC44KLXG4gICAgdGhpcy5nbC5iaW5kQnVmZmVyKFxuICAgICAgdGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUixcbiAgICAgIHRoaXMuX2xhc3RFbGVtZW50QXJyYXlCdWZmZXJCaW5kaW5nXG4gICAgKTtcblxuICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUxKTsgLy/jg4bjgq/jgrnjg4Hjg6Pjg6bjg4vjg4Pjg4gx44KS5b6p5YWDXG4gICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMuX2xhc3RUZXh0dXJlMUJpbmRpbmcyRCk7XG5cbiAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7IC8v44OG44Kv44K544OB44Oj44Om44OL44OD44OIMOOCkuW+qeWFg1xuICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLl9sYXN0VGV4dHVyZTBCaW5kaW5nMkQpO1xuXG4gICAgdGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuX2xhc3RBY3RpdmVUZXh0dXJlKTtcblxuICAgIHRoaXMuZ2wuYmxlbmRGdW5jU2VwYXJhdGUoXG4gICAgICB0aGlzLl9sYXN0QmxlbmRpbmdbMF0sXG4gICAgICB0aGlzLl9sYXN0QmxlbmRpbmdbMV0sXG4gICAgICB0aGlzLl9sYXN0QmxlbmRpbmdbMl0sXG4gICAgICB0aGlzLl9sYXN0QmxlbmRpbmdbM11cbiAgICApO1xuICB9XG5cbiAgcHVibGljIHNldEdsKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpOiB2b2lkIHtcbiAgICB0aGlzLmdsID0gZ2w7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9sYXN0VmVydGV4QXR0cmliQXJyYXlFbmFibGVkID0gbmV3IEFycmF5PEdMYm9vbGVhbj4oNCk7XG4gICAgdGhpcy5fbGFzdENvbG9yTWFzayA9IG5ldyBBcnJheTxHTGJvb2xlYW4+KDQpO1xuICAgIHRoaXMuX2xhc3RCbGVuZGluZyA9IG5ldyBBcnJheTxHTGludD4oNCk7XG4gICAgdGhpcy5fbGFzdFZpZXdwb3J0ID0gbmV3IEFycmF5PEdMaW50Pig0KTtcbiAgfVxuXG4gIHByaXZhdGUgX2xhc3RBcnJheUJ1ZmZlckJpbmRpbmc6IEdMaW50OyAvLy88IOODouODh+ODq+aPj+eUu+ebtOWJjeOBrumggueCueODkOODg+ODleOCoVxuICBwcml2YXRlIF9sYXN0RWxlbWVudEFycmF5QnVmZmVyQmluZGluZzogR0xpbnQ7IC8vLzwg44Oi44OH44Or5o+P55S755u05YmN44GuRWxlbWVudOODkOODg+ODleOCoVxuICBwcml2YXRlIF9sYXN0UHJvZ3JhbTogR0xpbnQ7IC8vLzwg44Oi44OH44Or5o+P55S755u05YmN44Gu44K344Kn44O844OA44OX44Ot44Kw44Op44Og44OQ44OD44OV44KhXG4gIHByaXZhdGUgX2xhc3RBY3RpdmVUZXh0dXJlOiBHTGludDsgLy8vPCDjg6Ljg4fjg6vmj4/nlLvnm7TliY3jga7jgqLjgq/jg4bjgqPjg5bjgarjg4bjgq/jgrnjg4Hjg6NcbiAgcHJpdmF0ZSBfbGFzdFRleHR1cmUwQmluZGluZzJEOiBHTGludDsgLy8vPCDjg6Ljg4fjg6vmj4/nlLvnm7TliY3jga7jg4bjgq/jgrnjg4Hjg6Pjg6bjg4vjg4Pjg4gwXG4gIHByaXZhdGUgX2xhc3RUZXh0dXJlMUJpbmRpbmcyRDogR0xpbnQ7IC8vLzwg44Oi44OH44Or5o+P55S755u05YmN44Gu44OG44Kv44K544OB44Oj44Om44OL44OD44OIMVxuICBwcml2YXRlIF9sYXN0VmVydGV4QXR0cmliQXJyYXlFbmFibGVkOiBHTGJvb2xlYW5bXTsgLy8vPCDjg6Ljg4fjg6vmj4/nlLvnm7TliY3jga7jg4bjgq/jgrnjg4Hjg6Pjg6bjg4vjg4Pjg4gxXG4gIHByaXZhdGUgX2xhc3RTY2lzc29yVGVzdDogR0xib29sZWFuOyAvLy88IOODouODh+ODq+aPj+eUu+ebtOWJjeOBrkdMX1ZFUlRFWF9BVFRSSUJfQVJSQVlfRU5BQkxFROODkeODqeODoeODvOOCv1xuICBwcml2YXRlIF9sYXN0QmxlbmQ6IEdMYm9vbGVhbjsgLy8vPCDjg6Ljg4fjg6vmj4/nlLvnm7TliY3jga5HTF9TQ0lTU09SX1RFU1Tjg5Hjg6njg6Hjg7zjgr9cbiAgcHJpdmF0ZSBfbGFzdFN0ZW5jaWxUZXN0OiBHTGJvb2xlYW47IC8vLzwg44Oi44OH44Or5o+P55S755u05YmN44GuR0xfU1RFTkNJTF9URVNU44OR44Op44Oh44O844K/XG4gIHByaXZhdGUgX2xhc3REZXB0aFRlc3Q6IEdMYm9vbGVhbjsgLy8vPCDjg6Ljg4fjg6vmj4/nlLvnm7TliY3jga5HTF9ERVBUSF9URVNU44OR44Op44Oh44O844K/XG4gIHByaXZhdGUgX2xhc3RDdWxsRmFjZTogR0xib29sZWFuOyAvLy88IOODouODh+ODq+aPj+eUu+ebtOWJjeOBrkdMX0NVTExfRkFDReODkeODqeODoeODvOOCv1xuICBwcml2YXRlIF9sYXN0RnJvbnRGYWNlOiBHTGludDsgLy8vPCDjg6Ljg4fjg6vmj4/nlLvnm7TliY3jga5HTF9DVUxMX0ZBQ0Xjg5Hjg6njg6Hjg7zjgr9cbiAgcHJpdmF0ZSBfbGFzdENvbG9yTWFzazogR0xib29sZWFuW107IC8vLzwg44Oi44OH44Or5o+P55S755u05YmN44GuR0xfQ09MT1JfV1JJVEVNQVNL44OR44Op44Oh44O844K/XG4gIHByaXZhdGUgX2xhc3RCbGVuZGluZzogR0xpbnRbXTsgLy8vPCDjg6Ljg4fjg6vmj4/nlLvnm7TliY3jga7jgqvjg6njg7zjg5bjg6zjg7Pjg4fjgqPjg7PjgrDjg5Hjg6njg6Hjg7zjgr9cbiAgcHJpdmF0ZSBfbGFzdEZCTzogR0xpbnQ7IC8vLzwg44Oi44OH44Or5o+P55S755u05YmN44Gu44OV44Os44O844Og44OQ44OD44OV44KhXG4gIHByaXZhdGUgX2xhc3RWaWV3cG9ydDogR0xpbnRbXTsgLy8vPCDjg6Ljg4fjg6vmj4/nlLvnm7TliY3jga7jg5Pjg6Xjg7zjg53jg7zjg4hcblxuICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xufVxuXG4vKipcbiAqIFdlYkdM55So44Gu44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS55Sf5oiQ44O756C05qOE44GZ44KL44Kv44Op44K5XG4gKiDjgrfjg7PjgrDjg6vjg4jjg7Pjgarjgq/jg6njgrnjgafjgYLjgorjgIFDdWJpc21TaGFkZXJfV2ViR0wuZ2V0SW5zdGFuY2XjgYvjgonjgqLjgq/jgrvjgrnjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbVNoYWRlcl9XZWJHTCB7XG4gIC8qKlxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgpLlj5blvpfjgZnjgovvvIjjgrfjg7PjgrDjg6vjg4jjg7PvvIlcbiAgICogQHJldHVybiDjgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogQ3ViaXNtU2hhZGVyX1dlYkdMIHtcbiAgICBpZiAoc19pbnN0YW5jZSA9PSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlID0gbmV3IEN1YmlzbVNoYWRlcl9XZWJHTCgpO1xuXG4gICAgICByZXR1cm4gc19pbnN0YW5jZTtcbiAgICB9XG4gICAgcmV0dXJuIHNfaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICog44Kk44Oz44K544K/44Oz44K544KS6ZaL5pS+44GZ44KL77yI44K344Oz44Kw44Or44OI44Oz77yJXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRlbGV0ZUluc3RhbmNlKCk6IHZvaWQge1xuICAgIGlmIChzX2luc3RhbmNlKSB7XG4gICAgICBzX2luc3RhbmNlLnJlbGVhc2UoKTtcbiAgICAgIHNfaW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBwcml2YXRl44Gq44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3NoYWRlclNldHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbVNoYWRlclNldD4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMucmVsZWFzZVNoYWRlclByb2dyYW0oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6Djga7kuIDpgKPjga7jgrvjg4Pjg4jjgqLjg4Pjg5fjgpLlrp/ooYzjgZnjgotcbiAgICogQHBhcmFtIHJlbmRlcmVyIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKiBAcGFyYW0gdGV4dHVyZUlkIEdQVeOBruODhuOCr+OCueODgeODo0lEXG4gICAqIEBwYXJhbSB2ZXJ0ZXhDb3VudCDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7poILngrnmlbBcbiAgICogQHBhcmFtIHZlcnRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBrumggueCuemFjeWIl1xuICAgKiBAcGFyYW0gaW5kZXhBcnJheSDjgqTjg7Pjg4fjg4Pjgq/jgrnjg5Djg4Pjg5XjgqHjga7poILngrnphY3liJdcbiAgICogQHBhcmFtIHV2QXJyYXkgdXbphY3liJdcbiAgICogQHBhcmFtIG9wYWNpdHkg5LiN6YCP5piO5bqmXG4gICAqIEBwYXJhbSBjb2xvckJsZW5kTW9kZSDjgqvjg6njg7zjg5bjg6zjg7Pjg4fjgqPjg7PjgrDjga7jgr/jgqTjg5dcbiAgICogQHBhcmFtIGJhc2VDb2xvciDjg5njg7zjgrnjgqvjg6njg7xcbiAgICogQHBhcmFtIGlzUHJlbXVsdGlwbGllZEFscGhhIOS5l+eul+a4iOOBv+OCouODq+ODleOCoeOBi+OBqeOBhuOBi1xuICAgKiBAcGFyYW0gbWF0cml4NHg0IE1vZGVsLVZpZXctUHJvamVjdGlvbuihjOWIl1xuICAgKiBAcGFyYW0gaW52ZXJ0ZWRNYXNrIOODnuOCueOCr+OCkuWPjei7ouOBl+OBpuS9v+eUqOOBmeOCi+ODleODqeOCsFxuICAgKi9cbiAgcHVibGljIHNldHVwU2hhZGVyUHJvZ3JhbShcbiAgICByZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXJfV2ViR0wsXG4gICAgdGV4dHVyZUlkOiBXZWJHTFRleHR1cmUsXG4gICAgdmVydGV4Q291bnQ6IG51bWJlcixcbiAgICB2ZXJ0ZXhBcnJheTogRmxvYXQzMkFycmF5LFxuICAgIGluZGV4QXJyYXk6IFVpbnQxNkFycmF5LFxuICAgIHV2QXJyYXk6IEZsb2F0MzJBcnJheSxcbiAgICBidWZmZXJEYXRhOiB7XG4gICAgICB2ZXJ0ZXg6IFdlYkdMQnVmZmVyO1xuICAgICAgdXY6IFdlYkdMQnVmZmVyO1xuICAgICAgaW5kZXg6IFdlYkdMQnVmZmVyO1xuICAgIH0sXG4gICAgb3BhY2l0eTogbnVtYmVyLFxuICAgIGNvbG9yQmxlbmRNb2RlOiBDdWJpc21CbGVuZE1vZGUsXG4gICAgYmFzZUNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3IsXG4gICAgbXVsdGlwbHlDb2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yLFxuICAgIHNjcmVlbkNvbG9yOiBDdWJpc21UZXh0dXJlQ29sb3IsXG4gICAgaXNQcmVtdWx0aXBsaWVkQWxwaGE6IGJvb2xlYW4sXG4gICAgbWF0cml4NHg0OiBDdWJpc21NYXRyaXg0NCxcbiAgICBpbnZlcnRlZE1hc2s6IGJvb2xlYW5cbiAgKTogdm9pZCB7XG4gICAgaWYgKCFpc1ByZW11bHRpcGxpZWRBbHBoYSkge1xuICAgICAgQ3ViaXNtTG9nRXJyb3IoJ05vUHJlbXVsdGlwbGllZEFscGhhIGlzIG5vdCBhbGxvd2VkJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3NoYWRlclNldHMuZ2V0U2l6ZSgpID09IDApIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVTaGFkZXJzKCk7XG4gICAgfVxuXG4gICAgLy8gQmxlbmRpbmdcbiAgICBsZXQgU1JDX0NPTE9SOiBudW1iZXI7XG4gICAgbGV0IERTVF9DT0xPUjogbnVtYmVyO1xuICAgIGxldCBTUkNfQUxQSEE6IG51bWJlcjtcbiAgICBsZXQgRFNUX0FMUEhBOiBudW1iZXI7XG5cbiAgICBpZiAocmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpICE9IG51bGwpIHtcbiAgICAgIC8vIOODnuOCueOCr+eUn+aIkOaZglxuICAgICAgY29uc3Qgc2hhZGVyU2V0OiBDdWJpc21TaGFkZXJTZXQgPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICBTaGFkZXJOYW1lcy5TaGFkZXJOYW1lc19TZXR1cE1hc2tcbiAgICAgICk7XG4gICAgICB0aGlzLmdsLnVzZVByb2dyYW0oc2hhZGVyU2V0LnNoYWRlclByb2dyYW0pO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PoqK3lrppcbiAgICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUwKTtcbiAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXh0dXJlSWQpO1xuICAgICAgdGhpcy5nbC51bmlmb3JtMWkoc2hhZGVyU2V0LnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uLCAwKTtcblxuICAgICAgLy8g6aCC54K56YWN5YiX44Gu6Kit5a6aKFZCTylcbiAgICAgIGlmIChidWZmZXJEYXRhLnZlcnRleCA9PSBudWxsKSB7XG4gICAgICAgIGJ1ZmZlckRhdGEudmVydGV4ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS52ZXJ0ZXgpO1xuICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKFxuICAgICAgICB0aGlzLmdsLkFSUkFZX0JVRkZFUixcbiAgICAgICAgdmVydGV4QXJyYXksXG4gICAgICAgIHRoaXMuZ2wuRFlOQU1JQ19EUkFXXG4gICAgICApO1xuICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbik7XG4gICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgICAgIHNoYWRlclNldC5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uLFxuICAgICAgICAyLFxuICAgICAgICB0aGlzLmdsLkZMT0FULFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgMCxcbiAgICAgICAgMFxuICAgICAgKTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj6aCC54K544Gu6Kit5a6aXG4gICAgICBpZiAoYnVmZmVyRGF0YS51diA9PSBudWxsKSB7XG4gICAgICAgIGJ1ZmZlckRhdGEudXYgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXJEYXRhLnV2KTtcbiAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YSh0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdXZBcnJheSwgdGhpcy5nbC5EWU5BTUlDX0RSQVcpO1xuICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbik7XG4gICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgICAgIHNoYWRlclNldC5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uLFxuICAgICAgICAyLFxuICAgICAgICB0aGlzLmdsLkZMT0FULFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgMCxcbiAgICAgICAgMFxuICAgICAgKTtcblxuICAgICAgLy8g44OB44Oj44Oz44ON44OrXG4gICAgICBjb25zdCBjaGFubmVsTm86IG51bWJlciA9XG4gICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKS5fbGF5b3V0Q2hhbm5lbE5vO1xuICAgICAgY29uc3QgY29sb3JDaGFubmVsOiBDdWJpc21UZXh0dXJlQ29sb3IgPSByZW5kZXJlclxuICAgICAgICAuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpXG4gICAgICAgIC5nZXRDbGlwcGluZ01hbmFnZXIoKVxuICAgICAgICAuZ2V0Q2hhbm5lbEZsYWdBc0NvbG9yKGNoYW5uZWxObyk7XG4gICAgICB0aGlzLmdsLnVuaWZvcm00ZihcbiAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uLFxuICAgICAgICBjb2xvckNoYW5uZWwuUixcbiAgICAgICAgY29sb3JDaGFubmVsLkcsXG4gICAgICAgIGNvbG9yQ2hhbm5lbC5CLFxuICAgICAgICBjb2xvckNoYW5uZWwuQVxuICAgICAgKTtcblxuICAgICAgdGhpcy5nbC51bmlmb3JtTWF0cml4NGZ2KFxuICAgICAgICBzaGFkZXJTZXQudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbixcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKS5fbWF0cml4Rm9yTWFzay5nZXRBcnJheSgpXG4gICAgICApO1xuXG4gICAgICBjb25zdCByZWN0OiBjc21SZWN0ID1cbiAgICAgICAgcmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpLl9sYXlvdXRCb3VuZHM7XG5cbiAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxuICAgICAgICBzaGFkZXJTZXQudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uLFxuICAgICAgICByZWN0LnggKiAyLjAgLSAxLjAsXG4gICAgICAgIHJlY3QueSAqIDIuMCAtIDEuMCxcbiAgICAgICAgcmVjdC5nZXRSaWdodCgpICogMi4wIC0gMS4wLFxuICAgICAgICByZWN0LmdldEJvdHRvbSgpICogMi4wIC0gMS4wXG4gICAgICApO1xuXG4gICAgICB0aGlzLmdsLnVuaWZvcm00ZihcbiAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24sXG4gICAgICAgIG11bHRpcGx5Q29sb3IuUixcbiAgICAgICAgbXVsdGlwbHlDb2xvci5HLFxuICAgICAgICBtdWx0aXBseUNvbG9yLkIsXG4gICAgICAgIG11bHRpcGx5Q29sb3IuQVxuICAgICAgKTtcblxuICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbixcbiAgICAgICAgc2NyZWVuQ29sb3IuUixcbiAgICAgICAgc2NyZWVuQ29sb3IuRyxcbiAgICAgICAgc2NyZWVuQ29sb3IuQixcbiAgICAgICAgc2NyZWVuQ29sb3IuQVxuICAgICAgKTtcblxuICAgICAgU1JDX0NPTE9SID0gdGhpcy5nbC5aRVJPO1xuICAgICAgRFNUX0NPTE9SID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0NPTE9SO1xuICAgICAgU1JDX0FMUEhBID0gdGhpcy5nbC5aRVJPO1xuICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xuICAgIH0gLy8g44Oe44K544Kv55Sf5oiQ5Lul5aSW44Gu5aC05ZCIXG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBtYXNrZWQ6IGJvb2xlYW4gPVxuICAgICAgICByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KCkgIT0gbnVsbDsgLy8g44GT44Gu5o+P55S744Kq44OW44K444Kn44Kv44OI44Gv44Oe44K544Kv5a++6LGh44GLXG4gICAgICBjb25zdCBvZmZzZXQ6IG51bWJlciA9IG1hc2tlZCA/IChpbnZlcnRlZE1hc2sgPyAyIDogMSkgOiAwO1xuXG4gICAgICBsZXQgc2hhZGVyU2V0OiBDdWJpc21TaGFkZXJTZXQgPSBuZXcgQ3ViaXNtU2hhZGVyU2V0KCk7XG5cbiAgICAgIHN3aXRjaCAoY29sb3JCbGVuZE1vZGUpIHtcbiAgICAgICAgY2FzZSBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX05vcm1hbDpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBzaGFkZXJTZXQgPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAgICAgU2hhZGVyTmFtZXMuU2hhZGVyTmFtZXNfTm9ybWFsUHJlbXVsdGlwbGllZEFscGhhICsgb2Zmc2V0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBTUkNfQ09MT1IgPSB0aGlzLmdsLk9ORTtcbiAgICAgICAgICBEU1RfQ09MT1IgPSB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgICAgICAgU1JDX0FMUEhBID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ3ViaXNtQmxlbmRNb2RlLkN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZTpcbiAgICAgICAgICBzaGFkZXJTZXQgPSB0aGlzLl9zaGFkZXJTZXRzLmF0KFxuICAgICAgICAgICAgU2hhZGVyTmFtZXMuU2hhZGVyTmFtZXNfQWRkUHJlbXVsdGlwbGllZEFscGhhICsgb2Zmc2V0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBTUkNfQ09MT1IgPSB0aGlzLmdsLk9ORTtcbiAgICAgICAgICBEU1RfQ09MT1IgPSB0aGlzLmdsLk9ORTtcbiAgICAgICAgICBTUkNfQUxQSEEgPSB0aGlzLmdsLlpFUk87XG4gICAgICAgICAgRFNUX0FMUEhBID0gdGhpcy5nbC5PTkU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlOlxuICAgICAgICAgIHNoYWRlclNldCA9IHRoaXMuX3NoYWRlclNldHMuYXQoXG4gICAgICAgICAgICBTaGFkZXJOYW1lcy5TaGFkZXJOYW1lc19NdWx0UHJlbXVsdGlwbGllZEFscGhhICsgb2Zmc2V0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBTUkNfQ09MT1IgPSB0aGlzLmdsLkRTVF9DT0xPUjtcbiAgICAgICAgICBEU1RfQ09MT1IgPSB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgICAgICAgU1JDX0FMUEhBID0gdGhpcy5nbC5aRVJPO1xuICAgICAgICAgIERTVF9BTFBIQSA9IHRoaXMuZ2wuT05FO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmdsLnVzZVByb2dyYW0oc2hhZGVyU2V0LnNoYWRlclByb2dyYW0pO1xuXG4gICAgICAvLyDpoILngrnphY3liJfjga7oqK3lrppcbiAgICAgIGlmIChidWZmZXJEYXRhLnZlcnRleCA9PSBudWxsKSB7XG4gICAgICAgIGJ1ZmZlckRhdGEudmVydGV4ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyRGF0YS52ZXJ0ZXgpO1xuICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKFxuICAgICAgICB0aGlzLmdsLkFSUkFZX0JVRkZFUixcbiAgICAgICAgdmVydGV4QXJyYXksXG4gICAgICAgIHRoaXMuZ2wuRFlOQU1JQ19EUkFXXG4gICAgICApO1xuICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbik7XG4gICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgICAgIHNoYWRlclNldC5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uLFxuICAgICAgICAyLFxuICAgICAgICB0aGlzLmdsLkZMT0FULFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgMCxcbiAgICAgICAgMFxuICAgICAgKTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj6aCC54K544Gu6Kit5a6aXG4gICAgICBpZiAoYnVmZmVyRGF0YS51diA9PSBudWxsKSB7XG4gICAgICAgIGJ1ZmZlckRhdGEudXYgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgfVxuICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXJEYXRhLnV2KTtcbiAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YSh0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdXZBcnJheSwgdGhpcy5nbC5EWU5BTUlDX0RSQVcpO1xuICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJTZXQuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbik7XG4gICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgICAgIHNoYWRlclNldC5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uLFxuICAgICAgICAyLFxuICAgICAgICB0aGlzLmdsLkZMT0FULFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgMCxcbiAgICAgICAgMFxuICAgICAgKTtcblxuICAgICAgaWYgKG1hc2tlZCkge1xuICAgICAgICB0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMSk7XG4gICAgICAgIGNvbnN0IHRleDogV2ViR0xUZXh0dXJlID0gcmVuZGVyZXJcbiAgICAgICAgICAuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpXG4gICAgICAgICAgLmdldENsaXBwaW5nTWFuYWdlcigpXG4gICAgICAgICAgLmdldENvbG9yQnVmZmVyKClcbiAgICAgICAgICAuYXQocmVuZGVyZXIuZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpLl9idWZmZXJJbmRleCk7XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXgpO1xuICAgICAgICB0aGlzLmdsLnVuaWZvcm0xaShzaGFkZXJTZXQuc2FtcGxlclRleHR1cmUxTG9jYXRpb24sIDEpO1xuXG4gICAgICAgIC8vIHZpZXfluqfmqJnjgpJDbGlwcGluZ0NvbnRleHTjga7luqfmqJnjgavlpInmj5vjgZnjgovjgZ/jgoHjga7ooYzliJfjgpLoqK3lrppcbiAgICAgICAgdGhpcy5nbC51bmlmb3JtTWF0cml4NGZ2KFxuICAgICAgICAgIHNoYWRlclNldC51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uLFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHJlbmRlcmVyLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoKS5fbWF0cml4Rm9yRHJhdy5nZXRBcnJheSgpXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8g5L2/55So44GZ44KL44Kr44Op44O844OB44Oj44Oz44ON44Or44KS6Kit5a6aXG4gICAgICAgIGNvbnN0IGNoYW5uZWxObzogbnVtYmVyID1cbiAgICAgICAgICByZW5kZXJlci5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KCkuX2xheW91dENoYW5uZWxObztcbiAgICAgICAgY29uc3QgY29sb3JDaGFubmVsOiBDdWJpc21UZXh0dXJlQ29sb3IgPSByZW5kZXJlclxuICAgICAgICAgIC5nZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KClcbiAgICAgICAgICAuZ2V0Q2xpcHBpbmdNYW5hZ2VyKClcbiAgICAgICAgICAuZ2V0Q2hhbm5lbEZsYWdBc0NvbG9yKGNoYW5uZWxObyk7XG4gICAgICAgIHRoaXMuZ2wudW5pZm9ybTRmKFxuICAgICAgICAgIHNoYWRlclNldC51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbixcbiAgICAgICAgICBjb2xvckNoYW5uZWwuUixcbiAgICAgICAgICBjb2xvckNoYW5uZWwuRyxcbiAgICAgICAgICBjb2xvckNoYW5uZWwuQixcbiAgICAgICAgICBjb2xvckNoYW5uZWwuQVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PoqK3lrppcbiAgICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUwKTtcbiAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXh0dXJlSWQpO1xuICAgICAgdGhpcy5nbC51bmlmb3JtMWkoc2hhZGVyU2V0LnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uLCAwKTtcblxuICAgICAgLy8g5bqn5qiZ5aSJ5o+bXG4gICAgICB0aGlzLmdsLnVuaWZvcm1NYXRyaXg0ZnYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtTWF0cml4TG9jYXRpb24sXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBtYXRyaXg0eDQuZ2V0QXJyYXkoKVxuICAgICAgKTtcblxuICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24sXG4gICAgICAgIGJhc2VDb2xvci5SLFxuICAgICAgICBiYXNlQ29sb3IuRyxcbiAgICAgICAgYmFzZUNvbG9yLkIsXG4gICAgICAgIGJhc2VDb2xvci5BXG4gICAgICApO1xuXG4gICAgICB0aGlzLmdsLnVuaWZvcm00ZihcbiAgICAgICAgc2hhZGVyU2V0LnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24sXG4gICAgICAgIG11bHRpcGx5Q29sb3IuUixcbiAgICAgICAgbXVsdGlwbHlDb2xvci5HLFxuICAgICAgICBtdWx0aXBseUNvbG9yLkIsXG4gICAgICAgIG11bHRpcGx5Q29sb3IuQVxuICAgICAgKTtcblxuICAgICAgdGhpcy5nbC51bmlmb3JtNGYoXG4gICAgICAgIHNoYWRlclNldC51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbixcbiAgICAgICAgc2NyZWVuQ29sb3IuUixcbiAgICAgICAgc2NyZWVuQ29sb3IuRyxcbiAgICAgICAgc2NyZWVuQ29sb3IuQixcbiAgICAgICAgc2NyZWVuQ29sb3IuQVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBJQk/jgpLkvZzmiJDjgZfjgIHjg4fjg7zjgr/jgpLou6LpgIFcbiAgICBpZiAoYnVmZmVyRGF0YS5pbmRleCA9PSBudWxsKSB7XG4gICAgICBidWZmZXJEYXRhLmluZGV4ID0gdGhpcy5nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICB9XG4gICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGJ1ZmZlckRhdGEuaW5kZXgpO1xuICAgIHRoaXMuZ2wuYnVmZmVyRGF0YShcbiAgICAgIHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsXG4gICAgICBpbmRleEFycmF5LFxuICAgICAgdGhpcy5nbC5EWU5BTUlDX0RSQVdcbiAgICApO1xuICAgIHRoaXMuZ2wuYmxlbmRGdW5jU2VwYXJhdGUoU1JDX0NPTE9SLCBEU1RfQ09MT1IsIFNSQ19BTFBIQSwgRFNUX0FMUEhBKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLop6PmlL7jgZnjgotcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlU2hhZGVyUHJvZ3JhbSgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NoYWRlclNldHMuZ2V0U2l6ZSgpOyBpKyspIHtcbiAgICAgIHRoaXMuZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLl9zaGFkZXJTZXRzLmF0KGkpLnNoYWRlclByb2dyYW0pO1xuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdChpKS5zaGFkZXJQcm9ncmFtID0gMDtcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuc2V0KGksIHZvaWQgMCk7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLnNldChpLCBudWxsKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS5Yid5pyf5YyW44GZ44KLXG4gICAqIEBwYXJhbSB2ZXJ0U2hhZGVyU3JjIOmggueCueOCt+OCp+ODvOODgOOBruOCveODvOOCuVxuICAgKiBAcGFyYW0gZnJhZ1NoYWRlclNyYyDjg5Xjg6njgrDjg6Hjg7Pjg4jjgrfjgqfjg7zjg4Djga7jgr3jg7zjgrlcbiAgICovXG4gIHB1YmxpYyBnZW5lcmF0ZVNoYWRlcnMoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBTaGFkZXJDb3VudDsgaSsrKSB7XG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLnB1c2hCYWNrKG5ldyBDdWJpc21TaGFkZXJTZXQoKSk7XG4gICAgfVxuXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5sb2FkU2hhZGVyUHJvZ3JhbShcbiAgICAgIHZlcnRleFNoYWRlclNyY1NldHVwTWFzayxcbiAgICAgIGZyYWdtZW50U2hhZGVyU3Jjc2V0dXBNYXNrXG4gICAgKTtcblxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbSA9IHRoaXMubG9hZFNoYWRlclByb2dyYW0oXG4gICAgICB2ZXJ0ZXhTaGFkZXJTcmMsXG4gICAgICBmcmFnbWVudFNoYWRlclNyY1ByZW11bHRpcGxpZWRBbHBoYVxuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5sb2FkU2hhZGVyUHJvZ3JhbShcbiAgICAgIHZlcnRleFNoYWRlclNyY01hc2tlZCxcbiAgICAgIGZyYWdtZW50U2hhZGVyU3JjTWFza1ByZW11bHRpcGxpZWRBbHBoYVxuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtID0gdGhpcy5sb2FkU2hhZGVyUHJvZ3JhbShcbiAgICAgIHZlcnRleFNoYWRlclNyY01hc2tlZCxcbiAgICAgIGZyYWdtZW50U2hhZGVyU3JjTWFza0ludmVydGVkUHJlbXVsdGlwbGllZEFscGhhXG4gICAgKTtcblxuICAgIC8vIOWKoOeul+OCgumAmuW4uOOBqOWQjOOBmOOCt+OCp+ODvOODgOODvOOCkuWIqeeUqOOBmeOCi1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW07XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtO1xuXG4gICAgLy8g5LmX566X44KC6YCa5bi444Go5ZCM44GY44K344Kn44O844OA44O844KS5Yip55So44GZ44KLXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5zaGFkZXJQcm9ncmFtID0gdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSA9IHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0gPSB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW07XG5cbiAgICAvLyBTZXR1cE1hc2tcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS51bmlmb3JtQ2xpcE1hdHJpeExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NsaXBNYXRyaXgnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkudW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2hhbm5lbEZsYWcnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgwKS51bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDApLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X211bHRpcGx5Q29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkudW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3Vfc2NyZWVuQ29sb3InXG4gICAgICApO1xuXG4gICAgLy8g6YCa5bi477yIUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMSkudW5pZm9ybU11bHRpcGx5Q29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgxKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tdWx0aXBseUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnVuaWZvcm1TY3JlZW5Db2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDEpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X3NjcmVlbkNvbG9yJ1xuICAgICAgKTtcblxuICAgIC8vIOmAmuW4uO+8iOOCr+ODquODg+ODlOODs+OCsOOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMSdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDIpLnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbXVsdGlwbHlDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgyKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9zY3JlZW5Db2xvcidcbiAgICAgICk7XG5cbiAgICAvLyDpgJrluLjvvIjjgq/jg6rjg4Pjg5Tjg7PjgrDjg7vlj43ou6IsIFByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMSdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDMpLnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoMykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbXVsdGlwbHlDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCgzKS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9zY3JlZW5Db2xvcidcbiAgICAgICk7XG5cbiAgICAvLyDliqDnrpfvvIhQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X21hdHJpeCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg0KS51bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDQpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X211bHRpcGx5Q29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkudW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3Vfc2NyZWVuQ29sb3InXG4gICAgICApO1xuXG4gICAgLy8g5Yqg566X77yI44Kv44Oq44OD44OU44Oz44Kw44CBUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2FtcGxlclRleHR1cmUxTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUxJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X21hdHJpeCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jbGlwTWF0cml4J1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NoYW5uZWxGbGFnJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNSkudW5pZm9ybU11bHRpcGx5Q29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg1KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tdWx0aXBseUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnVuaWZvcm1TY3JlZW5Db2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDUpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X3NjcmVlbkNvbG9yJ1xuICAgICAgKTtcblxuICAgIC8vIOWKoOeul++8iOOCr+ODquODg+ODlOODs+OCsOODu+WPjei7ouOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMSdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDYpLnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNikuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbXVsdGlwbHlDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg2KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9zY3JlZW5Db2xvcidcbiAgICAgICk7XG5cbiAgICAvLyDkuZfnrpfvvIhQcmVtdWx0aXBsaWVkQWxwaGHvvIlcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLmF0dHJpYnV0ZVBvc2l0aW9uTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV9wb3NpdGlvbidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS5hdHRyaWJ1dGVUZXhDb29yZExvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2FtcGxlclRleHR1cmUwTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUwJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X21hdHJpeCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykudW5pZm9ybUJhc2VDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2Jhc2VDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg3KS51bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDcpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X211bHRpcGx5Q29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykudW5pZm9ybVNjcmVlbkNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoNykuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3Vfc2NyZWVuQ29sb3InXG4gICAgICApO1xuXG4gICAgLy8g5LmX566X77yI44Kv44Oq44OD44OU44Oz44Kw44CBUHJlbXVsdGlwbGllZEFscGhh77yJXG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5hdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuYXR0cmlidXRlVGV4Q29vcmRMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3RleENvb3JkJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNhbXBsZXJUZXh0dXJlMExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2FtcGxlclRleHR1cmUxTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICdzX3RleHR1cmUxJ1xuICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS51bmlmb3JtTWF0cml4TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICd1X21hdHJpeCdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkudW5pZm9ybUNsaXBNYXRyaXhMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jbGlwTWF0cml4J1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnVuaWZvcm1DaGFubmVsRmxhZ0xvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X2NoYW5uZWxGbGFnJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnVuaWZvcm1CYXNlQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9iYXNlQ29sb3InXG4gICAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOCkudW5pZm9ybU11bHRpcGx5Q29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg4KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9tdWx0aXBseUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnVuaWZvcm1TY3JlZW5Db2xvckxvY2F0aW9uID1cbiAgICAgIHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDgpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICd1X3NjcmVlbkNvbG9yJ1xuICAgICAgKTtcblxuICAgIC8vIOS5l+eul++8iOOCr+ODquODg+ODlOODs+OCsOODu+WPjei7ouOAgVByZW11bHRpcGxpZWRBbHBoYe+8iVxuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuYXR0cmlidXRlUG9zaXRpb25Mb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKFxuICAgICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAgICdhX3Bvc2l0aW9uJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLmF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAnYV90ZXhDb29yZCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zYW1wbGVyVGV4dHVyZTBMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKFxuICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgJ3NfdGV4dHVyZTAnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNhbXBsZXJUZXh0dXJlMUxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAnc190ZXh0dXJlMSdcbiAgICApO1xuICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkudW5pZm9ybU1hdHJpeExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnNoYWRlclByb2dyYW0sXG4gICAgICAndV9tYXRyaXgnXG4gICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfY2xpcE1hdHJpeCdcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS51bmlmb3JtQ2hhbm5lbEZsYWdMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9jaGFubmVsRmxhZydcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS51bmlmb3JtQmFzZUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfYmFzZUNvbG9yJ1xuICAgICAgKTtcbiAgICB0aGlzLl9zaGFkZXJTZXRzLmF0KDkpLnVuaWZvcm1NdWx0aXBseUNvbG9yTG9jYXRpb24gPVxuICAgICAgdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgIHRoaXMuX3NoYWRlclNldHMuYXQoOSkuc2hhZGVyUHJvZ3JhbSxcbiAgICAgICAgJ3VfbXVsdGlwbHlDb2xvcidcbiAgICAgICk7XG4gICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS51bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbiA9XG4gICAgICB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgdGhpcy5fc2hhZGVyU2V0cy5hdCg5KS5zaGFkZXJQcm9ncmFtLFxuICAgICAgICAndV9zY3JlZW5Db2xvcidcbiAgICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44K344Kn44O844OA44OX44Ot44Kw44Op44Og44KS44Ot44O844OJ44GX44Gm44Ki44OJ44Os44K544KS6L+U44GZXG4gICAqIEBwYXJhbSB2ZXJ0ZXhTaGFkZXJTb3VyY2UgICAg6aCC54K544K344Kn44O844OA44Gu44K944O844K5XG4gICAqIEBwYXJhbSBmcmFnbWVudFNoYWRlclNvdXJjZSAg44OV44Op44Kw44Oh44Oz44OI44K344Kn44O844OA44Gu44K944O844K5XG4gICAqIEByZXR1cm4g44K344Kn44O844OA44OX44Ot44Kw44Op44Og44Gu44Ki44OJ44Os44K5XG4gICAqL1xuICBwdWJsaWMgbG9hZFNoYWRlclByb2dyYW0oXG4gICAgdmVydGV4U2hhZGVyU291cmNlOiBzdHJpbmcsXG4gICAgZnJhZ21lbnRTaGFkZXJTb3VyY2U6IHN0cmluZ1xuICApOiBXZWJHTFByb2dyYW0ge1xuICAgIC8vIENyZWF0ZSBTaGFkZXIgUHJvZ3JhbVxuICAgIGxldCBzaGFkZXJQcm9ncmFtOiBXZWJHTFByb2dyYW0gPSB0aGlzLmdsLmNyZWF0ZVByb2dyYW0oKTtcblxuICAgIGxldCB2ZXJ0U2hhZGVyID0gdGhpcy5jb21waWxlU2hhZGVyU291cmNlKFxuICAgICAgdGhpcy5nbC5WRVJURVhfU0hBREVSLFxuICAgICAgdmVydGV4U2hhZGVyU291cmNlXG4gICAgKTtcblxuICAgIGlmICghdmVydFNoYWRlcikge1xuICAgICAgQ3ViaXNtTG9nRXJyb3IoJ1ZlcnRleCBzaGFkZXIgY29tcGlsZSBlcnJvciEnKTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGxldCBmcmFnU2hhZGVyID0gdGhpcy5jb21waWxlU2hhZGVyU291cmNlKFxuICAgICAgdGhpcy5nbC5GUkFHTUVOVF9TSEFERVIsXG4gICAgICBmcmFnbWVudFNoYWRlclNvdXJjZVxuICAgICk7XG4gICAgaWYgKCFmcmFnU2hhZGVyKSB7XG4gICAgICBDdWJpc21Mb2dFcnJvcignVmVydGV4IHNoYWRlciBjb21waWxlIGVycm9yIScpO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoIHZlcnRleCBzaGFkZXIgdG8gcHJvZ3JhbVxuICAgIHRoaXMuZ2wuYXR0YWNoU2hhZGVyKHNoYWRlclByb2dyYW0sIHZlcnRTaGFkZXIpO1xuXG4gICAgLy8gQXR0YWNoIGZyYWdtZW50IHNoYWRlciB0byBwcm9ncmFtXG4gICAgdGhpcy5nbC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgZnJhZ1NoYWRlcik7XG5cbiAgICAvLyBsaW5rIHByb2dyYW1cbiAgICB0aGlzLmdsLmxpbmtQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xuICAgIGNvbnN0IGxpbmtTdGF0dXMgPSB0aGlzLmdsLmdldFByb2dyYW1QYXJhbWV0ZXIoXG4gICAgICBzaGFkZXJQcm9ncmFtLFxuICAgICAgdGhpcy5nbC5MSU5LX1NUQVRVU1xuICAgICk7XG5cbiAgICAvLyDjg6rjg7Pjgq/jgavlpLHmlZfjgZfjgZ/jgonjgrfjgqfjg7zjg4Djg7zjgpLliYrpmaRcbiAgICBpZiAoIWxpbmtTdGF0dXMpIHtcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdGYWlsZWQgdG8gbGluayBwcm9ncmFtOiB7MH0nLCBzaGFkZXJQcm9ncmFtKTtcblxuICAgICAgdGhpcy5nbC5kZWxldGVTaGFkZXIodmVydFNoYWRlcik7XG4gICAgICB2ZXJ0U2hhZGVyID0gMDtcblxuICAgICAgdGhpcy5nbC5kZWxldGVTaGFkZXIoZnJhZ1NoYWRlcik7XG4gICAgICBmcmFnU2hhZGVyID0gMDtcblxuICAgICAgaWYgKHNoYWRlclByb2dyYW0pIHtcbiAgICAgICAgdGhpcy5nbC5kZWxldGVQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xuICAgICAgICBzaGFkZXJQcm9ncmFtID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLy8gUmVsZWFzZSB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNoYWRlcnMuXG4gICAgdGhpcy5nbC5kZWxldGVTaGFkZXIodmVydFNoYWRlcik7XG4gICAgdGhpcy5nbC5kZWxldGVTaGFkZXIoZnJhZ1NoYWRlcik7XG5cbiAgICByZXR1cm4gc2hhZGVyUHJvZ3JhbTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgpLjgrPjg7Pjg5HjgqTjg6vjgZnjgotcbiAgICogQHBhcmFtIHNoYWRlclR5cGUg44K344Kn44O844OA44K/44Kk44OXKFZlcnRleC9GcmFnbWVudClcbiAgICogQHBhcmFtIHNoYWRlclNvdXJjZSDjgrfjgqfjg7zjg4Djgr3jg7zjgrnjgrPjg7zjg4lcbiAgICpcbiAgICogQHJldHVybiDjgrPjg7Pjg5HjgqTjg6vjgZXjgozjgZ/jgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6BcbiAgICovXG4gIHB1YmxpYyBjb21waWxlU2hhZGVyU291cmNlKFxuICAgIHNoYWRlclR5cGU6IEdMZW51bSxcbiAgICBzaGFkZXJTb3VyY2U6IHN0cmluZ1xuICApOiBXZWJHTFByb2dyYW0ge1xuICAgIGNvbnN0IHNvdXJjZTogc3RyaW5nID0gc2hhZGVyU291cmNlO1xuXG4gICAgY29uc3Qgc2hhZGVyOiBXZWJHTFByb2dyYW0gPSB0aGlzLmdsLmNyZWF0ZVNoYWRlcihzaGFkZXJUeXBlKTtcbiAgICB0aGlzLmdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XG4gICAgdGhpcy5nbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XG5cbiAgICBpZiAoIXNoYWRlcikge1xuICAgICAgY29uc3QgbG9nOiBzdHJpbmcgPSB0aGlzLmdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcbiAgICAgIEN1YmlzbUxvZ0Vycm9yKCdTaGFkZXIgY29tcGlsZSBsb2c6IHswfSAnLCBsb2cpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXR1czogYW55ID0gdGhpcy5nbC5nZXRTaGFkZXJQYXJhbWV0ZXIoXG4gICAgICBzaGFkZXIsXG4gICAgICB0aGlzLmdsLkNPTVBJTEVfU1RBVFVTXG4gICAgKTtcbiAgICBpZiAoIXN0YXR1cykge1xuICAgICAgdGhpcy5nbC5kZWxldGVTaGFkZXIoc2hhZGVyKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBzaGFkZXI7XG4gIH1cblxuICBwdWJsaWMgc2V0R2woZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCk6IHZvaWQge1xuICAgIHRoaXMuZ2wgPSBnbDtcbiAgfVxuXG4gIF9zaGFkZXJTZXRzOiBjc21WZWN0b3I8Q3ViaXNtU2hhZGVyU2V0PjsgLy8g44Ot44O844OJ44GX44Gf44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS5L+d5oyB44GZ44KL5aSJ5pWwXG4gIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7IC8vIHdlYmds44Kz44Oz44OG44Kt44K544OIXG59XG5cbi8qKlxuICogQ3ViaXNtU2hhZGVyX1dlYkdM44Gu44Kk44Oz44OK44O844Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21TaGFkZXJTZXQge1xuICBzaGFkZXJQcm9ncmFtOiBXZWJHTFByb2dyYW07IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBruOCouODieODrOOCuVxuICBhdHRyaWJ1dGVQb3NpdGlvbkxvY2F0aW9uOiBHTHVpbnQ7IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFBvc2l0aW9u77yJXG4gIGF0dHJpYnV0ZVRleENvb3JkTG9jYXRpb246IEdMdWludDsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIVGV4Q29vcmTvvIlcbiAgdW5pZm9ybU1hdHJpeExvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yITWF0cml477yJXG4gIHVuaWZvcm1DbGlwTWF0cml4TG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhDbGlwTWF0cml477yJXG4gIHNhbXBsZXJUZXh0dXJlMExvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yIVGV4dHVyZTDvvIlcbiAgc2FtcGxlclRleHR1cmUxTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhUZXh0dXJlMe+8iVxuICB1bmlmb3JtQmFzZUNvbG9yTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhCYXNlQ29sb3LvvIlcbiAgdW5pZm9ybUNoYW5uZWxGbGFnTG9jYXRpb246IFdlYkdMVW5pZm9ybUxvY2F0aW9uOyAvLyDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6DjgavmuKHjgZnlpInmlbDjga7jgqLjg4njg6zjgrnvvIhDaGFubmVsRmxhZ++8iVxuICB1bmlmb3JtTXVsdGlwbHlDb2xvckxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjsgLy8g44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44Gr5rih44GZ5aSJ5pWw44Gu44Ki44OJ44Os44K577yITXVsdGlwbHlDb2xvcu+8iVxuICB1bmlmb3JtU2NyZWVuQ29sb3JMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247IC8vIOOCt+OCp+ODvOODgOODvOODl+ODreOCsOODqeODoOOBq+a4oeOBmeWkieaVsOOBruOCouODieODrOOCue+8iFNjcmVlbkNvbG9y77yJXG59XG5cbmV4cG9ydCBlbnVtIFNoYWRlck5hbWVzIHtcbiAgLy8gU2V0dXBNYXNrXG4gIFNoYWRlck5hbWVzX1NldHVwTWFzayxcblxuICAvLyBOb3JtYWxcbiAgU2hhZGVyTmFtZXNfTm9ybWFsUHJlbXVsdGlwbGllZEFscGhhLFxuICBTaGFkZXJOYW1lc19Ob3JtYWxNYXNrZWRQcmVtdWx0aXBsaWVkQWxwaGEsXG4gIFNoYWRlck5hbWVzX05vbXJhbE1hc2tlZEludmVydGVkUHJlbXVsdGlwbGllZEFscGhhLFxuXG4gIC8vIEFkZFxuICBTaGFkZXJOYW1lc19BZGRQcmVtdWx0aXBsaWVkQWxwaGEsXG4gIFNoYWRlck5hbWVzX0FkZE1hc2tlZFByZW11bHRpcGxpZWRBbHBoYSxcbiAgU2hhZGVyTmFtZXNfQWRkTWFza2VkUHJlbXVsdGlwbGllZEFscGhhSW52ZXJ0ZWQsXG5cbiAgLy8gTXVsdFxuICBTaGFkZXJOYW1lc19NdWx0UHJlbXVsdGlwbGllZEFscGhhLFxuICBTaGFkZXJOYW1lc19NdWx0TWFza2VkUHJlbXVsdGlwbGllZEFscGhhLFxuICBTaGFkZXJOYW1lc19NdWx0TWFza2VkUHJlbXVsdGlwbGllZEFscGhhSW52ZXJ0ZWQsXG59XG5cbmV4cG9ydCBjb25zdCB2ZXJ0ZXhTaGFkZXJTcmNTZXR1cE1hc2sgPVxuICAnYXR0cmlidXRlIHZlYzQgICAgIGFfcG9zaXRpb247JyArXG4gICdhdHRyaWJ1dGUgdmVjMiAgICAgYV90ZXhDb29yZDsnICtcbiAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgK1xuICAndmFyeWluZyB2ZWM0ICAgICAgIHZfbXlQb3M7JyArXG4gICd1bmlmb3JtIG1hdDQgICAgICAgdV9jbGlwTWF0cml4OycgK1xuICAndm9pZCBtYWluKCknICtcbiAgJ3snICtcbiAgJyAgIGdsX1Bvc2l0aW9uID0gdV9jbGlwTWF0cml4ICogYV9wb3NpdGlvbjsnICtcbiAgJyAgIHZfbXlQb3MgPSB1X2NsaXBNYXRyaXggKiBhX3Bvc2l0aW9uOycgK1xuICAnICAgdl90ZXhDb29yZCA9IGFfdGV4Q29vcmQ7JyArXG4gICcgICB2X3RleENvb3JkLnkgPSAxLjAgLSB2X3RleENvb3JkLnk7JyArXG4gICd9JztcbmV4cG9ydCBjb25zdCBmcmFnbWVudFNoYWRlclNyY3NldHVwTWFzayA9XG4gICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgJ3ZhcnlpbmcgdmVjMiAgICAgICB2X3RleENvb3JkOycgK1xuICAndmFyeWluZyB2ZWM0ICAgICAgIHZfbXlQb3M7JyArXG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9iYXNlQ29sb3I7JyArXG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9jaGFubmVsRmxhZzsnICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEICBzX3RleHR1cmUwOycgK1xuICAndm9pZCBtYWluKCknICtcbiAgJ3snICtcbiAgJyAgIGZsb2F0IGlzSW5zaWRlID0gJyArXG4gICcgICAgICAgc3RlcCh1X2Jhc2VDb2xvci54LCB2X215UG9zLngvdl9teVBvcy53KScgK1xuICAnICAgICAgICogc3RlcCh1X2Jhc2VDb2xvci55LCB2X215UG9zLnkvdl9teVBvcy53KScgK1xuICAnICAgICAgICogc3RlcCh2X215UG9zLngvdl9teVBvcy53LCB1X2Jhc2VDb2xvci56KScgK1xuICAnICAgICAgICogc3RlcCh2X215UG9zLnkvdl9teVBvcy53LCB1X2Jhc2VDb2xvci53KTsnICtcbiAgJyAgIGdsX0ZyYWdDb2xvciA9IHVfY2hhbm5lbEZsYWcgKiB0ZXh0dXJlMkQoc190ZXh0dXJlMCwgdl90ZXhDb29yZCkuYSAqIGlzSW5zaWRlOycgK1xuICAnfSc7XG5cbi8vLS0tLS0g44OQ44O844OG44OD44Kv44K544K344Kn44O844OA44OX44Ot44Kw44Op44OgIC0tLS0tXG4vLyBOb3JtYWwgJiBBZGQgJiBNdWx0IOWFsemAmlxuZXhwb3J0IGNvbnN0IHZlcnRleFNoYWRlclNyYyA9XG4gICdhdHRyaWJ1dGUgdmVjNCAgICAgYV9wb3NpdGlvbjsnICsgLy92LnZlcnRleFxuICAnYXR0cmlidXRlIHZlYzIgICAgIGFfdGV4Q29vcmQ7JyArIC8vdi50ZXhjb29yZFxuICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArIC8vdjJmLnRleGNvb3JkXG4gICd1bmlmb3JtIG1hdDQgICAgICAgdV9tYXRyaXg7JyArXG4gICd2b2lkIG1haW4oKScgK1xuICAneycgK1xuICAnICAgZ2xfUG9zaXRpb24gPSB1X21hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICcgICB2X3RleENvb3JkID0gYV90ZXhDb29yZDsnICtcbiAgJyAgIHZfdGV4Q29vcmQueSA9IDEuMCAtIHZfdGV4Q29vcmQueTsnICtcbiAgJ30nO1xuXG4vLyBOb3JtYWwgJiBBZGQgJiBNdWx0IOWFsemAmu+8iOOCr+ODquODg+ODlOODs+OCsOOBleOCjOOBn+OCguOBruOBruaPj+eUu+eUqO+8iVxuZXhwb3J0IGNvbnN0IHZlcnRleFNoYWRlclNyY01hc2tlZCA9XG4gICdhdHRyaWJ1dGUgdmVjNCAgICAgYV9wb3NpdGlvbjsnICtcbiAgJ2F0dHJpYnV0ZSB2ZWMyICAgICBhX3RleENvb3JkOycgK1xuICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArXG4gICd2YXJ5aW5nIHZlYzQgICAgICAgdl9jbGlwUG9zOycgK1xuICAndW5pZm9ybSBtYXQ0ICAgICAgIHVfbWF0cml4OycgK1xuICAndW5pZm9ybSBtYXQ0ICAgICAgIHVfY2xpcE1hdHJpeDsnICtcbiAgJ3ZvaWQgbWFpbigpJyArXG4gICd7JyArXG4gICcgICBnbF9Qb3NpdGlvbiA9IHVfbWF0cml4ICogYV9wb3NpdGlvbjsnICtcbiAgJyAgIHZfY2xpcFBvcyA9IHVfY2xpcE1hdHJpeCAqIGFfcG9zaXRpb247JyArXG4gICcgICB2X3RleENvb3JkID0gYV90ZXhDb29yZDsnICtcbiAgJyAgIHZfdGV4Q29vcmQueSA9IDEuMCAtIHZfdGV4Q29vcmQueTsnICtcbiAgJ30nO1xuXG4vLy0tLS0tIOODleODqeOCsOODoeODs+ODiOOCt+OCp+ODvOODgOODl+ODreOCsOODqeODoCAtLS0tLVxuLy8gTm9ybWFsICYgQWRkICYgTXVsdCDlhbHpgJog77yIUHJlbXVsdGlwbGllZEFscGhh77yJXG5leHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNQcmVtdWx0aXBsaWVkQWxwaGEgPVxuICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXG4gICd2YXJ5aW5nIHZlYzIgICAgICAgdl90ZXhDb29yZDsnICsgLy92MmYudGV4Y29vcmRcbiAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X2Jhc2VDb2xvcjsnICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEICBzX3RleHR1cmUwOycgKyAvL19NYWluVGV4XG4gICd1bmlmb3JtIHZlYzQgICAgICAgdV9tdWx0aXBseUNvbG9yOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgIHVfc2NyZWVuQ29sb3I7JyArXG4gICd2b2lkIG1haW4oKScgK1xuICAneycgK1xuICAnICAgdmVjNCB0ZXhDb2xvciA9IHRleHR1cmUyRChzX3RleHR1cmUwLCB2X3RleENvb3JkKTsnICtcbiAgJyAgIHRleENvbG9yLnJnYiA9IHRleENvbG9yLnJnYiAqIHVfbXVsdGlwbHlDb2xvci5yZ2I7JyArXG4gICcgICB0ZXhDb2xvci5yZ2IgPSAodGV4Q29sb3IucmdiICsgdV9zY3JlZW5Db2xvci5yZ2IgKiB0ZXhDb2xvci5hKSAtICh0ZXhDb2xvci5yZ2IgKiB1X3NjcmVlbkNvbG9yLnJnYik7JyArXG4gICcgICB2ZWM0IGNvbG9yID0gdGV4Q29sb3IgKiB1X2Jhc2VDb2xvcjsnICtcbiAgJyAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoY29sb3IucmdiLCBjb2xvci5hKTsnICtcbiAgJ30nO1xuXG4vLyBOb3JtYWwg77yI44Kv44Oq44OD44OU44Oz44Kw44GV44KM44Gf44KC44Gu44Gu5o+P55S755So44CBUHJlbXVsdGlwbGllZEFscGhh5YW855So77yJXG5leHBvcnQgY29uc3QgZnJhZ21lbnRTaGFkZXJTcmNNYXNrUHJlbXVsdGlwbGllZEFscGhhID1cbiAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycgK1xuICAndmFyeWluZyB2ZWMyICAgICAgIHZfdGV4Q29vcmQ7JyArXG4gICd2YXJ5aW5nIHZlYzQgICAgICAgdl9jbGlwUG9zOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgIHVfYmFzZUNvbG9yOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgIHVfY2hhbm5lbEZsYWc7JyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCAgc190ZXh0dXJlMDsnICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEICBzX3RleHR1cmUxOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgIHVfbXVsdGlwbHlDb2xvcjsnICtcbiAgJ3VuaWZvcm0gdmVjNCAgICAgICB1X3NjcmVlbkNvbG9yOycgK1xuICAndm9pZCBtYWluKCknICtcbiAgJ3snICtcbiAgJyAgIHZlYzQgdGV4Q29sb3IgPSB0ZXh0dXJlMkQoc190ZXh0dXJlMCwgdl90ZXhDb29yZCk7JyArXG4gICcgICB0ZXhDb2xvci5yZ2IgPSB0ZXhDb2xvci5yZ2IgKiB1X211bHRpcGx5Q29sb3IucmdiOycgK1xuICAnICAgdGV4Q29sb3IucmdiID0gKHRleENvbG9yLnJnYiArIHVfc2NyZWVuQ29sb3IucmdiICogdGV4Q29sb3IuYSkgLSAodGV4Q29sb3IucmdiICogdV9zY3JlZW5Db2xvci5yZ2IpOycgK1xuICAnICAgdmVjNCBjb2xfZm9ybWFzayA9IHRleENvbG9yICogdV9iYXNlQ29sb3I7JyArXG4gICcgICB2ZWM0IGNsaXBNYXNrID0gKDEuMCAtIHRleHR1cmUyRChzX3RleHR1cmUxLCB2X2NsaXBQb3MueHkgLyB2X2NsaXBQb3MudykpICogdV9jaGFubmVsRmxhZzsnICtcbiAgJyAgIGZsb2F0IG1hc2tWYWwgPSBjbGlwTWFzay5yICsgY2xpcE1hc2suZyArIGNsaXBNYXNrLmIgKyBjbGlwTWFzay5hOycgK1xuICAnICAgY29sX2Zvcm1hc2sgPSBjb2xfZm9ybWFzayAqIG1hc2tWYWw7JyArXG4gICcgICBnbF9GcmFnQ29sb3IgPSBjb2xfZm9ybWFzazsnICtcbiAgJ30nO1xuXG4vLyBOb3JtYWwgJiBBZGQgJiBNdWx0IOWFsemAmu+8iOOCr+ODquODg+ODlOODs+OCsOOBleOCjOOBpuWPjei7ouS9v+eUqOOBruaPj+eUu+eUqOOAgVByZW11bHRpcGxpZWRBbHBoYeOBruWgtOWQiO+8iVxuZXhwb3J0IGNvbnN0IGZyYWdtZW50U2hhZGVyU3JjTWFza0ludmVydGVkUHJlbXVsdGlwbGllZEFscGhhID1cbiAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycgK1xuICAndmFyeWluZyB2ZWMyICAgICAgdl90ZXhDb29yZDsnICtcbiAgJ3ZhcnlpbmcgdmVjNCAgICAgIHZfY2xpcFBvczsnICtcbiAgJ3VuaWZvcm0gc2FtcGxlcjJEIHNfdGV4dHVyZTA7JyArXG4gICd1bmlmb3JtIHNhbXBsZXIyRCBzX3RleHR1cmUxOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgdV9jaGFubmVsRmxhZzsnICtcbiAgJ3VuaWZvcm0gdmVjNCAgICAgIHVfYmFzZUNvbG9yOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgdV9tdWx0aXBseUNvbG9yOycgK1xuICAndW5pZm9ybSB2ZWM0ICAgICAgdV9zY3JlZW5Db2xvcjsnICtcbiAgJ3ZvaWQgbWFpbigpJyArXG4gICd7JyArXG4gICcgICB2ZWM0IHRleENvbG9yID0gdGV4dHVyZTJEKHNfdGV4dHVyZTAsIHZfdGV4Q29vcmQpOycgK1xuICAnICAgdGV4Q29sb3IucmdiID0gdGV4Q29sb3IucmdiICogdV9tdWx0aXBseUNvbG9yLnJnYjsnICtcbiAgJyAgIHRleENvbG9yLnJnYiA9ICh0ZXhDb2xvci5yZ2IgKyB1X3NjcmVlbkNvbG9yLnJnYiAqIHRleENvbG9yLmEpIC0gKHRleENvbG9yLnJnYiAqIHVfc2NyZWVuQ29sb3IucmdiKTsnICtcbiAgJyAgIHZlYzQgY29sX2Zvcm1hc2sgPSB0ZXhDb2xvciAqIHVfYmFzZUNvbG9yOycgK1xuICAnICAgdmVjNCBjbGlwTWFzayA9ICgxLjAgLSB0ZXh0dXJlMkQoc190ZXh0dXJlMSwgdl9jbGlwUG9zLnh5IC8gdl9jbGlwUG9zLncpKSAqIHVfY2hhbm5lbEZsYWc7JyArXG4gICcgICBmbG9hdCBtYXNrVmFsID0gY2xpcE1hc2suciArIGNsaXBNYXNrLmcgKyBjbGlwTWFzay5iICsgY2xpcE1hc2suYTsnICtcbiAgJyAgIGNvbF9mb3JtYXNrID0gY29sX2Zvcm1hc2sgKiAoMS4wIC0gbWFza1ZhbCk7JyArXG4gICcgICBnbF9GcmFnQ29sb3IgPSBjb2xfZm9ybWFzazsnICtcbiAgJ30nO1xuXG4vKipcbiAqIFdlYkdM55So44Gu5o+P55S75ZG95Luk44KS5a6f6KOF44GX44Gf44Kv44Op44K5XG4gKi9cbmV4cG9ydCBjbGFzcyBDdWJpc21SZW5kZXJlcl9XZWJHTCBleHRlbmRzIEN1YmlzbVJlbmRlcmVyIHtcbiAgLyoqXG4gICAqIOODrOODs+ODgOODqeOBruWIneacn+WMluWHpueQhuOCkuWun+ihjOOBmeOCi1xuICAgKiDlvJXmlbDjgavmuKHjgZfjgZ/jg6Ljg4fjg6vjgYvjgonjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgavlv4XopoHjgarmg4XloLHjgpLlj5bjgorlh7rjgZnjgZPjgajjgYzjgafjgY3jgotcbiAgICpcbiAgICogQHBhcmFtIG1vZGVsIOODouODh+ODq+OBruOCpOODs+OCueOCv+ODs+OCuVxuICAgKiBAcGFyYW0gbWFza0J1ZmZlckNvdW50IOODkOODg+ODleOCoeOBrueUn+aIkOaVsFxuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemUobW9kZWw6IEN1YmlzbU1vZGVsLCBtYXNrQnVmZmVyQ291bnQgPSAxKTogdm9pZCB7XG4gICAgaWYgKG1vZGVsLmlzVXNpbmdNYXNraW5nKCkpIHtcbiAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IG5ldyBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0woKTsgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44O744OQ44OD44OV44Kh5YmN5Yem55CG5pa55byP44KS5Yid5pyf5YyWXG4gICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIuaW5pdGlhbGl6ZShcbiAgICAgICAgbW9kZWwsXG4gICAgICAgIG1vZGVsLmdldERyYXdhYmxlQ291bnQoKSxcbiAgICAgICAgbW9kZWwuZ2V0RHJhd2FibGVNYXNrcygpLFxuICAgICAgICBtb2RlbC5nZXREcmF3YWJsZU1hc2tDb3VudHMoKSxcbiAgICAgICAgbWFza0J1ZmZlckNvdW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0LnJlc2l6ZShtb2RlbC5nZXREcmF3YWJsZUNvdW50KCksIDApO1xuXG4gICAgc3VwZXIuaW5pdGlhbGl6ZShtb2RlbCk7IC8vIOimquOCr+ODqeOCueOBruWHpueQhuOCkuWRvOOBtlxuICB9XG5cbiAgLyoqXG4gICAqIFdlYkdM44OG44Kv44K544OB44Oj44Gu44OQ44Kk44Oz44OJ5Yem55CGXG4gICAqIEN1YmlzbVJlbmRlcmVy44Gr44OG44Kv44K544OB44Oj44KS6Kit5a6a44GX44CBQ3ViaXNtUmVuZGVyZXLlhoXjgafjgZ3jga7nlLvlg4/jgpLlj4LnhafjgZnjgovjgZ/jgoHjga5JbmRleOWApOOCkuaIu+OCiuWApOOBqOOBmeOCi1xuICAgKiBAcGFyYW0gbW9kZWxUZXh0dXJlTm8g44K744OD44OI44GZ44KL44Oi44OH44Or44OG44Kv44K544OB44Oj44Gu55Wq5Y+3XG4gICAqIEBwYXJhbSBnbFRleHR1cmVObyBXZWJHTOODhuOCr+OCueODgeODo+OBrueVquWPt1xuICAgKi9cbiAgcHVibGljIGJpbmRUZXh0dXJlKG1vZGVsVGV4dHVyZU5vOiBudW1iZXIsIGdsVGV4dHVyZTogV2ViR0xUZXh0dXJlKTogdm9pZCB7XG4gICAgdGhpcy5fdGV4dHVyZXMuc2V0VmFsdWUobW9kZWxUZXh0dXJlTm8sIGdsVGV4dHVyZSk7XG4gIH1cblxuICAvKipcbiAgICogV2ViR0zjgavjg5DjgqTjg7Pjg4njgZXjgozjgZ/jg4bjgq/jgrnjg4Hjg6Pjga7jg6rjgrnjg4jjgpLlj5blvpfjgZnjgotcbiAgICogQHJldHVybiDjg4bjgq/jgrnjg4Hjg6Pjga7jg6rjgrnjg4hcbiAgICovXG4gIHB1YmxpYyBnZXRCaW5kZWRUZXh0dXJlcygpOiBjc21NYXA8bnVtYmVyLCBXZWJHTFRleHR1cmU+IHtcbiAgICByZXR1cm4gdGhpcy5fdGV4dHVyZXM7XG4gIH1cblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K644KS6Kit5a6a44GZ44KLXG4gICAqIOODnuOCueOCr+eUqOOBrkZyYW1lQnVmZmVy44KS56C05qOE44CB5YaN5L2c5oiQ44GZ44KL54K65Yem55CG44Kz44K544OI44Gv6auY44GEXG4gICAqIEBwYXJhbSBzaXplIOOCr+ODquODg+ODlOODs+OCsOODnuOCueOCr+ODkOODg+ODleOCoeOBruOCteOCpOOCulxuICAgKi9cbiAgcHVibGljIHNldENsaXBwaW5nTWFza0J1ZmZlclNpemUoc2l6ZTogbnVtYmVyKSB7XG4gICAgLy8g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44KS5Yip55So44GX44Gq44GE5aC05ZCI44Gv5pep5pyf44Oq44K/44O844OzXG4gICAgaWYgKCF0aGlzLl9tb2RlbC5pc1VzaW5nTWFza2luZygpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8g44Kk44Oz44K544K/44Oz44K556C05qOE5YmN44Gr44Os44Oz44OA44O844OG44Kv44K544OB44Oj44Gu5pWw44KS5L+d5a2YXG4gICAgY29uc3QgcmVuZGVyVGV4dHVyZUNvdW50OiBudW1iZXIgPVxuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLmdldFJlbmRlclRleHR1cmVDb3VudCgpO1xuXG4gICAgLy8gRnJhbWVCdWZmZXLjga7jgrXjgqTjgrrjgpLlpInmm7TjgZnjgovjgZ/jgoHjgavjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnoLTmo4Tjg7vlho3kvZzmiJDjgZnjgotcbiAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIucmVsZWFzZSgpO1xuICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlciA9IHZvaWQgMDtcbiAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgPSBudWxsO1xuXG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyID0gbmV3IEN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTCgpO1xuXG4gICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLnNldENsaXBwaW5nTWFza0J1ZmZlclNpemUoc2l6ZSk7XG5cbiAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIuaW5pdGlhbGl6ZShcbiAgICAgIHRoaXMuZ2V0TW9kZWwoKSxcbiAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUNvdW50KCksXG4gICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVNYXNrcygpLFxuICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlTWFza0NvdW50cygpLFxuICAgICAgcmVuZGVyVGV4dHVyZUNvdW50IC8vIOOCpOODs+OCueOCv+ODs+OCueegtOajhOWJjeOBq+S/neWtmOOBl+OBn+ODrOODs+ODgOODvOODhuOCr+OCueODgeODo+OBruaVsFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K644KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Kv44Oq44OD44OU44Oz44Kw44Oe44K544Kv44OQ44OD44OV44Kh44Gu44K144Kk44K6XG4gICAqL1xuICBwdWJsaWMgZ2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbC5pc1VzaW5nTWFza2luZygpXG4gICAgICA/IHRoaXMuX2NsaXBwaW5nTWFuYWdlci5nZXRDbGlwcGluZ01hc2tCdWZmZXJTaXplKClcbiAgICAgIDogLTE7XG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44O844OG44Kv44K544OB44Oj44Gu5p6a5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Os44Oz44OA44O844OG44Kv44K544OB44Oj44Gu5p6a5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0UmVuZGVyVGV4dHVyZUNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsLmlzVXNpbmdNYXNraW5nKClcbiAgICAgID8gdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLmdldFJlbmRlclRleHR1cmVDb3VudCgpXG4gICAgICA6IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayA9IG51bGw7XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyA9IG51bGw7XG4gICAgdGhpcy5fcmVuZGVyZXJQcm9maWxlID0gbmV3IEN1YmlzbVJlbmRlcmVyUHJvZmlsZV9XZWJHTCgpO1xuICAgIHRoaXMuZmlyc3REcmF3ID0gdHJ1ZTtcbiAgICB0aGlzLl90ZXh0dXJlcyA9IG5ldyBjc21NYXA8bnVtYmVyLCBudW1iZXI+KCk7XG4gICAgdGhpcy5fc29ydGVkRHJhd2FibGVJbmRleExpc3QgPSBuZXcgY3NtVmVjdG9yPG51bWJlcj4oKTtcbiAgICB0aGlzLl9idWZmZXJEYXRhID0ge1xuICAgICAgdmVydGV4OiAoV2ViR0xCdWZmZXIgPSBudWxsKSxcbiAgICAgIHV2OiAoV2ViR0xCdWZmZXIgPSBudWxsKSxcbiAgICAgIGluZGV4OiAoV2ViR0xCdWZmZXIgPSBudWxsKSxcbiAgICB9O1xuXG4gICAgLy8g44OG44Kv44K544OB44Oj5a++5b+c44Oe44OD44OX44Gu5a656YeP44KS56K65L+d44GX44Gm44GK44GPXG4gICAgdGhpcy5fdGV4dHVyZXMucHJlcGFyZUNhcGFjaXR5KDMyLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9jbGlwcGluZ01hbmFnZXIpIHtcbiAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5yZWxlYXNlKCk7XG4gICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgPSB2b2lkIDA7XG4gICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmdsID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5fYnVmZmVyRGF0YS52ZXJ0ZXgpO1xuICAgIHRoaXMuX2J1ZmZlckRhdGEudmVydGV4ID0gbnVsbDtcbiAgICB0aGlzLmdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9idWZmZXJEYXRhLnV2KTtcbiAgICB0aGlzLl9idWZmZXJEYXRhLnV2ID0gbnVsbDtcbiAgICB0aGlzLmdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9idWZmZXJEYXRhLmluZGV4KTtcbiAgICB0aGlzLl9idWZmZXJEYXRhLmluZGV4ID0gbnVsbDtcbiAgICB0aGlzLl9idWZmZXJEYXRhID0gbnVsbDtcblxuICAgIHRoaXMuX3RleHR1cmVzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovlrp/pmpvjga7lh6bnkIZcbiAgICovXG4gIHB1YmxpYyBkb0RyYXdNb2RlbCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5nbCA9PSBudWxsKSB7XG4gICAgICBDdWJpc21Mb2dFcnJvcihcbiAgICAgICAgXCInZ2wnIGlzIG51bGwuIFdlYkdMUmVuZGVyaW5nQ29udGV4dCBpcyByZXF1aXJlZC5cXG5QbGVhc2UgY2FsbCAnQ3ViaW1SZW5kZXJlcl9XZWJHTC5zdGFydFVwJyBmdW5jdGlvbi5cIlxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLy0tLS0tLS0tLS0tLSDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jg7vjg5Djg4Pjg5XjgqHliY3lh6bnkIbmlrnlvI/jga7loLTlkIggLS0tLS0tLS0tLS0tXG4gICAgaWYgKHRoaXMuX2NsaXBwaW5nTWFuYWdlciAhPSBudWxsKSB7XG4gICAgICB0aGlzLnByZURyYXcoKTtcbiAgICAgIHRoaXMuX2NsaXBwaW5nTWFuYWdlci5zZXR1cENsaXBwaW5nQ29udGV4dCh0aGlzLmdldE1vZGVsKCksIHRoaXMpO1xuICAgIH1cblxuICAgIC8vIOS4iuiomOOCr+ODquODg+ODlOODs+OCsOWHpueQhuWGheOBp+OCguS4gOW6plByZURyYXfjgpLlkbzjgbbjga7jgafms6jmhI8hIVxuICAgIHRoaXMucHJlRHJhdygpO1xuXG4gICAgY29uc3QgZHJhd2FibGVDb3VudDogbnVtYmVyID0gdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlQ291bnQoKTtcbiAgICBjb25zdCByZW5kZXJPcmRlcjogSW50MzJBcnJheSA9IHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVJlbmRlck9yZGVycygpO1xuXG4gICAgLy8g44Kk44Oz44OH44OD44Kv44K544KS5o+P55S76aCG44Gn44K944O844OIXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkcmF3YWJsZUNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IG9yZGVyOiBudW1iZXIgPSByZW5kZXJPcmRlcltpXTtcbiAgICAgIHRoaXMuX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0LnNldChvcmRlciwgaSk7XG4gICAgfVxuXG4gICAgLy8g5o+P55S7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkcmF3YWJsZUNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IGRyYXdhYmxlSW5kZXg6IG51bWJlciA9IHRoaXMuX3NvcnRlZERyYXdhYmxlSW5kZXhMaXN0LmF0KGkpO1xuXG4gICAgICAvLyBEcmF3YWJsZeOBjOihqOekuueKtuaFi+OBp+OBquOBkeOCjOOBsOWHpueQhuOCkuODkeOCueOBmeOCi1xuICAgICAgaWYgKCF0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVEeW5hbWljRmxhZ0lzVmlzaWJsZShkcmF3YWJsZUluZGV4KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2xpcENvbnRleHQgPVxuICAgICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIgIT0gbnVsbFxuICAgICAgICAgID8gdGhpcy5fY2xpcHBpbmdNYW5hZ2VyXG4gICAgICAgICAgICAgIC5nZXRDbGlwcGluZ0NvbnRleHRMaXN0Rm9yRHJhdygpXG4gICAgICAgICAgICAgIC5hdChkcmF3YWJsZUluZGV4KVxuICAgICAgICAgIDogbnVsbDtcblxuICAgICAgaWYgKGNsaXBDb250ZXh0ICE9IG51bGwgJiYgdGhpcy5pc1VzaW5nSGlnaFByZWNpc2lvbk1hc2soKSkge1xuICAgICAgICAvLyDmj4/jgY/jgZPjgajjgavjgarjgaPjgabjgYTjgZ9cbiAgICAgICAgaWYgKGNsaXBDb250ZXh0Ll9pc1VzaW5nKSB7XG4gICAgICAgICAgLy8g55Sf5oiQ44GX44GfRnJhbWVCdWZmZXLjgajlkIzjgZjjgrXjgqTjgrrjgafjg5Pjg6Xjg7zjg53jg7zjg4jjgpLoqK3lrppcbiAgICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICB0aGlzLl9jbGlwcGluZ01hbmFnZXIuZ2V0Q2xpcHBpbmdNYXNrQnVmZmVyU2l6ZSgpLFxuICAgICAgICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLmdldENsaXBwaW5nTWFza0J1ZmZlclNpemUoKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICB0aGlzLnByZURyYXcoKTsgLy8g44OQ44OD44OV44Kh44KS44Kv44Oq44Ki44GZ44KLXG5cbiAgICAgICAgICAvLyAtLS0tLS0tLS0tIOODnuOCueOCr+aPj+eUu+WHpueQhiAtLS0tLS0tLS0tXG4gICAgICAgICAgLy8g44Oe44K544Kv55SoUmVuZGVyVGV4dHVyZeOCkmFjdGl2ZeOBq+OCu+ODg+ODiFxuICAgICAgICAgIHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKFxuICAgICAgICAgICAgdGhpcy5nbC5GUkFNRUJVRkZFUixcbiAgICAgICAgICAgIGNsaXBDb250ZXh0XG4gICAgICAgICAgICAgIC5nZXRDbGlwcGluZ01hbmFnZXIoKVxuICAgICAgICAgICAgICAuZ2V0TWFza1JlbmRlclRleHR1cmUoKVxuICAgICAgICAgICAgICAuYXQoY2xpcENvbnRleHQuX2J1ZmZlckluZGV4KVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyDjg57jgrnjgq/jgpLjgq/jg6rjgqLjgZnjgotcbiAgICAgICAgICAvLyAo5Luu5LuV5qeYKSAx44GM54Sh5Yq577yI5o+P44GL44KM44Gq44GE77yJ6aCY5Z+f44CBMOOBjOacieWKue+8iOaPj+OBi+OCjOOCi++8iemgmOWfn+OAgu+8iOOCt+OCp+ODvOODgOODvENkKkNz44GnMOOBq+i/keOBhOWApOOCkuOBi+OBkeOBpuODnuOCueOCr+OCkuS9nOOCi+OAgjHjgpLjgYvjgZHjgovjgajkvZXjgoLotbfjgZPjgonjgarjgYTvvIlcbiAgICAgICAgICB0aGlzLmdsLmNsZWFyQ29sb3IoMS4wLCAxLjAsIDEuMCwgMS4wKTtcbiAgICAgICAgICB0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG4gICAgICAgIH1cblxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgY2xpcERyYXdDb3VudDogbnVtYmVyID0gY2xpcENvbnRleHQuX2NsaXBwaW5nSWRDb3VudDtcblxuICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjbGlwRHJhd0NvdW50OyBpbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBjbGlwRHJhd0luZGV4OiBudW1iZXIgPSBjbGlwQ29udGV4dC5fY2xpcHBpbmdJZExpc3RbaW5kZXhdO1xuXG4gICAgICAgICAgICAvLyDpoILngrnmg4XloLHjgYzmm7TmlrDjgZXjgozjgabjgYrjgonjgZrjgIHkv6HpoLzmgKfjgYzjgarjgYTloLTlkIjjga/mj4/nlLvjgpLjg5HjgrnjgZnjgotcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgIXRoaXMuX21vZGVsLmdldERyYXdhYmxlRHluYW1pY0ZsYWdWZXJ0ZXhQb3NpdGlvbnNEaWRDaGFuZ2UoXG4gICAgICAgICAgICAgICAgY2xpcERyYXdJbmRleFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2V0SXNDdWxsaW5nKFxuICAgICAgICAgICAgICB0aGlzLl9tb2RlbC5nZXREcmF3YWJsZUN1bGxpbmcoY2xpcERyYXdJbmRleCkgIT0gZmFsc2VcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIC8vIOS7iuWbnuWwgueUqOOBruWkieaPm+OCkumBqeeUqOOBl+OBpuaPj+OBj1xuICAgICAgICAgICAgLy8g44OB44Oj44Oz44ON44Or44KC5YiH44KK5pu/44GI44KL5b+F6KaB44GM44GC44KLKEEsUixHLEIpXG4gICAgICAgICAgICB0aGlzLnNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soY2xpcENvbnRleHQpO1xuXG4gICAgICAgICAgICB0aGlzLmRyYXdNZXNoKFxuICAgICAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVUZXh0dXJlSW5kZXgoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRleEluZGV4Q291bnQoY2xpcERyYXdJbmRleCksXG4gICAgICAgICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRleENvdW50KGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0ZXhJbmRpY2VzKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0aWNlcyhjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGV4VXZzKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0TXVsdGlwbHlDb2xvcihjbGlwRHJhd0luZGV4KSxcbiAgICAgICAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldFNjcmVlbkNvbG9yKGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVPcGFjaXR5KGNsaXBEcmF3SW5kZXgpLFxuICAgICAgICAgICAgICBDdWJpc21CbGVuZE1vZGUuQ3ViaXNtQmxlbmRNb2RlX05vcm1hbCwgLy8g44Kv44Oq44OD44OU44Oz44Kw44Gv6YCa5bi45o+P55S744KS5by35Yi2XG4gICAgICAgICAgICAgIGZhbHNlIC8vIOODnuOCueOCr+eUn+aIkOaZguOBr+OCr+ODquODg+ODlOODs+OCsOOBruWPjei7ouS9v+eUqOOBr+WFqOOBj+mWouS/guOBjOOBquOBhFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB7XG4gICAgICAgICAgLy8gLS0tIOW+jOWHpueQhiAtLS1cbiAgICAgICAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcih0aGlzLmdsLkZSQU1FQlVGRkVSLCBzX2Zibyk7IC8vIOaPj+eUu+WvvuixoeOCkuaIu+OBmVxuICAgICAgICAgIHRoaXMuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayhudWxsKTtcblxuICAgICAgICAgIHRoaXMuZ2wudmlld3BvcnQoXG4gICAgICAgICAgICBzX3ZpZXdwb3J0WzBdLFxuICAgICAgICAgICAgc192aWV3cG9ydFsxXSxcbiAgICAgICAgICAgIHNfdmlld3BvcnRbMl0sXG4gICAgICAgICAgICBzX3ZpZXdwb3J0WzNdXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHRoaXMucHJlRHJhdygpOyAvLyDjg5Djg4Pjg5XjgqHjgpLjgq/jg6rjgqLjgZnjgotcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgpLjgrvjg4Pjg4jjgZnjgotcbiAgICAgIHRoaXMuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyhjbGlwQ29udGV4dCk7XG5cbiAgICAgIHRoaXMuc2V0SXNDdWxsaW5nKHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUN1bGxpbmcoZHJhd2FibGVJbmRleCkpO1xuXG4gICAgICB0aGlzLmRyYXdNZXNoKFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVUZXh0dXJlSW5kZXgoZHJhd2FibGVJbmRleCksXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRleEluZGV4Q291bnQoZHJhd2FibGVJbmRleCksXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZVZlcnRleENvdW50KGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0ZXhJbmRpY2VzKGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVWZXJ0aWNlcyhkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldERyYXdhYmxlVmVydGV4VXZzKGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0TXVsdGlwbHlDb2xvcihkcmF3YWJsZUluZGV4KSxcbiAgICAgICAgdGhpcy5nZXRNb2RlbCgpLmdldFNjcmVlbkNvbG9yKGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVPcGFjaXR5KGRyYXdhYmxlSW5kZXgpLFxuICAgICAgICB0aGlzLmdldE1vZGVsKCkuZ2V0RHJhd2FibGVCbGVuZE1vZGUoZHJhd2FibGVJbmRleCksXG4gICAgICAgIHRoaXMuZ2V0TW9kZWwoKS5nZXREcmF3YWJsZUludmVydGVkTWFza0JpdChkcmF3YWJsZUluZGV4KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogW+OCquODvOODkOODvOODqeOCpOODiV1cbiAgICog5o+P55S744Kq44OW44K444Kn44Kv44OI77yI44Ki44O844OI44Oh44OD44K344Ol77yJ44KS5o+P55S744GZ44KL44CCXG4gICAqIOODneODquOCtOODs+ODoeODg+OCt+ODpeOBqOODhuOCr+OCueODgeODo+eVquWPt+OCkuOCu+ODg+ODiOOBp+a4oeOBmeOAglxuICAgKiBAcGFyYW0gdGV4dHVyZU5vIOaPj+eUu+OBmeOCi+ODhuOCr+OCueODgeODo+eVquWPt1xuICAgKiBAcGFyYW0gaW5kZXhDb3VudCDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHBhcmFtIHZlcnRleENvdW50IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBrumggueCueaVsFxuICAgKiBAcGFyYW0gaW5kZXhBcnJheSDjg53jg6rjgrTjg7Pjg6Hjg4Pjgrfjg6Xjga7jgqTjg7Pjg4fjg4Pjgq/jgrnphY3liJdcbiAgICogQHBhcmFtIHZlcnRleEFycmF5IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBrumggueCuemFjeWIl1xuICAgKiBAcGFyYW0gdXZBcnJheSB1dumFjeWIl1xuICAgKiBAcGFyYW0gb3BhY2l0eSDkuI3pgI/mmI7luqZcbiAgICogQHBhcmFtIGNvbG9yQmxlbmRNb2RlIOOCq+ODqeODvOWQiOaIkOOCv+OCpOODl1xuICAgKiBAcGFyYW0gaW52ZXJ0ZWRNYXNrIOODnuOCueOCr+S9v+eUqOaZguOBruODnuOCueOCr+OBruWPjei7ouS9v+eUqFxuICAgKi9cbiAgcHVibGljIGRyYXdNZXNoKFxuICAgIHRleHR1cmVObzogbnVtYmVyLFxuICAgIGluZGV4Q291bnQ6IG51bWJlcixcbiAgICB2ZXJ0ZXhDb3VudDogbnVtYmVyLFxuICAgIGluZGV4QXJyYXk6IFVpbnQxNkFycmF5LFxuICAgIHZlcnRleEFycmF5OiBGbG9hdDMyQXJyYXksXG4gICAgdXZBcnJheTogRmxvYXQzMkFycmF5LFxuICAgIG11bHRpcGx5Q29sb3I6IEN1YmlzbVRleHR1cmVDb2xvcixcbiAgICBzY3JlZW5Db2xvcjogQ3ViaXNtVGV4dHVyZUNvbG9yLFxuICAgIG9wYWNpdHk6IG51bWJlcixcbiAgICBjb2xvckJsZW5kTW9kZTogQ3ViaXNtQmxlbmRNb2RlLFxuICAgIGludmVydGVkTWFzazogYm9vbGVhblxuICApOiB2b2lkIHtcbiAgICAvLyDoo4/pnaLmj4/nlLvjga7mnInlirnjg7vnhKHlirlcbiAgICBpZiAodGhpcy5pc0N1bGxpbmcoKSkge1xuICAgICAgdGhpcy5nbC5lbmFibGUodGhpcy5nbC5DVUxMX0ZBQ0UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5DVUxMX0ZBQ0UpO1xuICAgIH1cblxuICAgIHRoaXMuZ2wuZnJvbnRGYWNlKHRoaXMuZ2wuQ0NXKTsgLy8gQ3ViaXNtIFNESyBPcGVuR0zjga/jg57jgrnjgq/jg7vjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XlhbHjgatDQ1fjgYzooajpnaJcblxuICAgIGNvbnN0IG1vZGVsQ29sb3JSR0JBOiBDdWJpc21UZXh0dXJlQ29sb3IgPSB0aGlzLmdldE1vZGVsQ29sb3IoKTtcblxuICAgIGlmICh0aGlzLmdldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soKSA9PSBudWxsKSB7XG4gICAgICAvLyDjg57jgrnjgq/nlJ/miJDmmYLku6XlpJZcbiAgICAgIG1vZGVsQ29sb3JSR0JBLkEgKj0gb3BhY2l0eTtcbiAgICAgIGlmICh0aGlzLmlzUHJlbXVsdGlwbGllZEFscGhhKCkpIHtcbiAgICAgICAgbW9kZWxDb2xvclJHQkEuUiAqPSBtb2RlbENvbG9yUkdCQS5BO1xuICAgICAgICBtb2RlbENvbG9yUkdCQS5HICo9IG1vZGVsQ29sb3JSR0JBLkE7XG4gICAgICAgIG1vZGVsQ29sb3JSR0JBLkIgKj0gbW9kZWxDb2xvclJHQkEuQTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgZHJhd3RleHR1cmU6IFdlYkdMVGV4dHVyZTsgLy8g44K344Kn44O844OA44Gr5rih44GZ44OG44Kv44K544OB44OjXG5cbiAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjg57jg4Pjg5fjgYvjgonjg5DjgqTjg7Pjg4nmuIjjgb/jg4bjgq/jgrnjg4Hjg6PvvKnvvKTjgpLlj5blvpdcbiAgICAvLyDjg5DjgqTjg7Pjg4njgZXjgozjgabjgYTjgarjgZHjgozjgbDjg4Djg5/jg7zjga7jg4bjgq/jgrnjg4Hjg6NJROOCkuOCu+ODg+ODiOOBmeOCi1xuICAgIGlmICh0aGlzLl90ZXh0dXJlcy5nZXRWYWx1ZSh0ZXh0dXJlTm8pICE9IG51bGwpIHtcbiAgICAgIGRyYXd0ZXh0dXJlID0gdGhpcy5fdGV4dHVyZXMuZ2V0VmFsdWUodGV4dHVyZU5vKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhd3RleHR1cmUgPSBudWxsO1xuICAgIH1cblxuICAgIEN1YmlzbVNoYWRlcl9XZWJHTC5nZXRJbnN0YW5jZSgpLnNldHVwU2hhZGVyUHJvZ3JhbShcbiAgICAgIHRoaXMsXG4gICAgICBkcmF3dGV4dHVyZSxcbiAgICAgIHZlcnRleENvdW50LFxuICAgICAgdmVydGV4QXJyYXksXG4gICAgICBpbmRleEFycmF5LFxuICAgICAgdXZBcnJheSxcbiAgICAgIHRoaXMuX2J1ZmZlckRhdGEsXG4gICAgICBvcGFjaXR5LFxuICAgICAgY29sb3JCbGVuZE1vZGUsXG4gICAgICBtb2RlbENvbG9yUkdCQSxcbiAgICAgIG11bHRpcGx5Q29sb3IsXG4gICAgICBzY3JlZW5Db2xvcixcbiAgICAgIHRoaXMuaXNQcmVtdWx0aXBsaWVkQWxwaGEoKSxcbiAgICAgIHRoaXMuZ2V0TXZwTWF0cml4KCksXG4gICAgICBpbnZlcnRlZE1hc2tcbiAgICApO1xuXG4gICAgLy8g44Od44Oq44K044Oz44Oh44OD44K344Ol44KS5o+P55S744GZ44KLXG4gICAgdGhpcy5nbC5kcmF3RWxlbWVudHMoXG4gICAgICB0aGlzLmdsLlRSSUFOR0xFUyxcbiAgICAgIGluZGV4Q291bnQsXG4gICAgICB0aGlzLmdsLlVOU0lHTkVEX1NIT1JULFxuICAgICAgMFxuICAgICk7XG5cbiAgICAvLyDlvozlh6bnkIZcbiAgICB0aGlzLmdsLnVzZVByb2dyYW0obnVsbCk7XG4gICAgdGhpcy5zZXRDbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3KG51bGwpO1xuICAgIHRoaXMuc2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayhudWxsKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzYXZlUHJvZmlsZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9yZW5kZXJlclByb2ZpbGUuc2F2ZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlc3RvcmVQcm9maWxlKCk6IHZvaWQge1xuICAgIHRoaXMuX3JlbmRlcmVyUHJvZmlsZS5yZXN0b3JlKCk7XG4gIH1cblxuICAvKipcbiAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6Kej5pS+44GZ44KLXG4gICAqIFdlYkdM44Gu6Z2Z55qE44Gq44K344Kn44O844OA44O844OX44Ot44Kw44Op44Og44KS6Kej5pS+44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGRvU3RhdGljUmVsZWFzZSgpOiB2b2lkIHtcbiAgICBDdWJpc21TaGFkZXJfV2ViR0wuZGVsZXRlSW5zdGFuY2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg7zjgrnjg4bjg7zjg4jjgpLoqK3lrprjgZnjgotcbiAgICogQHBhcmFtIGZibyDjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7PlgbTjgafmjIflrprjgZfjgabjgYTjgovjg5Xjg6zjg7zjg6Djg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtIHZpZXdwb3J0IOODk+ODpeODvOODneODvOODiFxuICAgKi9cbiAgcHVibGljIHNldFJlbmRlclN0YXRlKGZibzogV2ViR0xGcmFtZWJ1ZmZlciwgdmlld3BvcnQ6IG51bWJlcltdKTogdm9pZCB7XG4gICAgc19mYm8gPSBmYm87XG4gICAgc192aWV3cG9ydCA9IHZpZXdwb3J0O1xuICB9XG5cbiAgLyoqXG4gICAqIOaPj+eUu+mWi+Wni+aZguOBrui/veWKoOWHpueQhlxuICAgKiDjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovliY3jgavjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/jgavlv4XopoHjgarlh6bnkIbjgpLlrp/oo4XjgZfjgabjgYTjgotcbiAgICovXG4gIHB1YmxpYyBwcmVEcmF3KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmZpcnN0RHJhdykge1xuICAgICAgdGhpcy5maXJzdERyYXcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmdsLmRpc2FibGUodGhpcy5nbC5TQ0lTU09SX1RFU1QpO1xuICAgIHRoaXMuZ2wuZGlzYWJsZSh0aGlzLmdsLlNURU5DSUxfVEVTVCk7XG4gICAgdGhpcy5nbC5kaXNhYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG5cbiAgICAvLyDjgqvjg6rjg7PjgrDvvIgxLjBiZXRhM++8iVxuICAgIHRoaXMuZ2wuZnJvbnRGYWNlKHRoaXMuZ2wuQ1cpO1xuXG4gICAgdGhpcy5nbC5lbmFibGUodGhpcy5nbC5CTEVORCk7XG4gICAgdGhpcy5nbC5jb2xvck1hc2sodHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIG51bGwpOyAvLyDliY3jgavjg5Djg4Pjg5XjgqHjgYzjg5DjgqTjg7Pjg4njgZXjgozjgabjgYTjgZ/jgonnoLTmo4TjgZnjgovlv4XopoHjgYzjgYLjgotcbiAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCk7XG5cbiAgICAvLyDnlbDmlrnmgKfjg5XjgqPjg6vjgr/jg6rjg7PjgrDjgpLpgannlKjjgZnjgotcbiAgICBpZiAodGhpcy5nZXRBbmlzb3Ryb3B5KCkgPiAwLjAgJiYgdGhpcy5fZXh0ZW5zaW9uKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RleHR1cmVzLmdldFNpemUoKTsgKytpKSB7XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLl90ZXh0dXJlcy5nZXRWYWx1ZShpKSk7XG4gICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyZihcbiAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgdGhpcy5fZXh0ZW5zaW9uLlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULFxuICAgICAgICAgIHRoaXMuZ2V0QW5pc290cm9weSgpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODnuOCueOCr+ODhuOCr+OCueODgeODo+OBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2soY2xpcDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0KSB7XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzayA9IGNsaXA7XG4gIH1cblxuICAvKipcbiAgICog44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yTWFzaygpOiBDdWJpc21DbGlwcGluZ0NvbnRleHQge1xuICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JNYXNrO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+mdouS4iuOBq+aPj+eUu+OBmeOCi+OCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiOOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldENsaXBwaW5nQ29udGV4dEJ1ZmZlckZvckRyYXcoY2xpcDogQ3ViaXNtQ2xpcHBpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgdGhpcy5fY2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdyA9IGNsaXA7XG4gIH1cblxuICAvKipcbiAgICog55S76Z2i5LiK44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OI44KS5Y+W5b6X44GZ44KLXG4gICAqIEByZXR1cm4g55S76Z2i5LiK44Gr5o+P55S744GZ44KL44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2xpcHBpbmdDb250ZXh0QnVmZmVyRm9yRHJhdygpOiBDdWJpc21DbGlwcGluZ0NvbnRleHQge1xuICAgIHJldHVybiB0aGlzLl9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3O1xuICB9XG5cbiAgLyoqXG4gICAqIGds44Gu6Kit5a6aXG4gICAqL1xuICBwdWJsaWMgc3RhcnRVcChnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KTogdm9pZCB7XG4gICAgdGhpcy5nbCA9IGdsO1xuXG4gICAgaWYgKHRoaXMuX2NsaXBwaW5nTWFuYWdlcikge1xuICAgICAgdGhpcy5fY2xpcHBpbmdNYW5hZ2VyLnNldEdMKGdsKTtcbiAgICB9XG5cbiAgICBDdWJpc21TaGFkZXJfV2ViR0wuZ2V0SW5zdGFuY2UoKS5zZXRHbChnbCk7XG4gICAgdGhpcy5fcmVuZGVyZXJQcm9maWxlLnNldEdsKGdsKTtcblxuICAgIC8vIOeVsOaWueaAp+ODleOCo+ODq+OCv+ODquODs+OCsOOBjOS9v+eUqOOBp+OBjeOCi+OBi+ODgeOCp+ODg+OCr1xuICAgIHRoaXMuX2V4dGVuc2lvbiA9XG4gICAgICB0aGlzLmdsLmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykgfHxcbiAgICAgIHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJLSVRfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykgfHxcbiAgICAgIHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyk7XG4gIH1cblxuICBfdGV4dHVyZXM6IGNzbU1hcDxudW1iZXIsIFdlYkdMVGV4dHVyZT47IC8vIOODouODh+ODq+OBjOWPgueFp+OBmeOCi+ODhuOCr+OCueODgeODo+OBqOODrOODs+ODgOODqeOBp+ODkOOCpOODs+ODieOBl+OBpuOBhOOCi+ODhuOCr+OCueODgeODo+OBqOOBruODnuODg+ODl1xuICBfc29ydGVkRHJhd2FibGVJbmRleExpc3Q6IGNzbVZlY3RvcjxudW1iZXI+OyAvLyDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrnjgpLmj4/nlLvpoIbjgavkuKbjgbnjgZ/jg6rjgrnjg4hcbiAgX2NsaXBwaW5nTWFuYWdlcjogQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMOyAvLyDjgq/jg6rjg4Pjg5Tjg7PjgrDjg57jgrnjgq/nrqHnkIbjgqrjg5bjgrjjgqfjgq/jg4hcbiAgX2NsaXBwaW5nQ29udGV4dEJ1ZmZlckZvck1hc2s6IEN1YmlzbUNsaXBwaW5nQ29udGV4dDsgLy8g44Oe44K544Kv44OG44Kv44K544OB44Oj44Gr5o+P55S744GZ44KL44Gf44KB44Gu44Kv44Oq44OD44OU44Oz44Kw44Kz44Oz44OG44Kt44K544OIXG4gIF9jbGlwcGluZ0NvbnRleHRCdWZmZXJGb3JEcmF3OiBDdWJpc21DbGlwcGluZ0NvbnRleHQ7IC8vIOeUu+mdouS4iuaPj+eUu+OBmeOCi+OBn+OCgeOBruOCr+ODquODg+ODlOODs+OCsOOCs+ODs+ODhuOCreOCueODiFxuICBfcmVuZGVyZXJQcm9maWxlOiBDdWJpc21SZW5kZXJlclByb2ZpbGVfV2ViR0w7XG4gIGZpcnN0RHJhdzogYm9vbGVhbjtcbiAgX2J1ZmZlckRhdGE6IHtcbiAgICB2ZXJ0ZXg6IFdlYkdMQnVmZmVyO1xuICAgIHV2OiBXZWJHTEJ1ZmZlcjtcbiAgICBpbmRleDogV2ViR0xCdWZmZXI7XG4gIH07IC8vIOmggueCueODkOODg+ODleOCoeODh+ODvOOCv1xuICBfZXh0ZW5zaW9uOiBhbnk7IC8vIOaLoeW8teapn+iDvVxuICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0OyAvLyB3ZWJnbOOCs+ODs+ODhuOCreOCueODiFxufVxuXG4vKipcbiAqIOODrOODs+ODgOODqeOBjOS/neaMgeOBmeOCi+mdmeeahOOBquODquOCveODvOOCueOCkumWi+aUvuOBmeOCi1xuICovXG5DdWJpc21SZW5kZXJlci5zdGF0aWNSZWxlYXNlID0gKCk6IHZvaWQgPT4ge1xuICBDdWJpc21SZW5kZXJlcl9XZWJHTC5kb1N0YXRpY1JlbGVhc2UoKTtcbn07XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbXJlbmRlcmVyX3dlYmdsJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21DbGlwcGluZ0NvbnRleHQgPSAkLkN1YmlzbUNsaXBwaW5nQ29udGV4dDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtQ2xpcHBpbmdDb250ZXh0ID0gJC5DdWJpc21DbGlwcGluZ0NvbnRleHQ7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0wgPSAkLkN1YmlzbUNsaXBwaW5nTWFuYWdlcl9XZWJHTDtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtQ2xpcHBpbmdNYW5hZ2VyX1dlYkdMID0gJC5DdWJpc21DbGlwcGluZ01hbmFnZXJfV2ViR0w7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2UgPSAkLkN1YmlzbVJlbmRlclRleHR1cmVSZXNvdXJjZTtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtUmVuZGVyVGV4dHVyZVJlc291cmNlID0gJC5DdWJpc21SZW5kZXJUZXh0dXJlUmVzb3VyY2U7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21SZW5kZXJlcl9XZWJHTCA9ICQuQ3ViaXNtUmVuZGVyZXJfV2ViR0w7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbVJlbmRlcmVyX1dlYkdMID0gJC5DdWJpc21SZW5kZXJlcl9XZWJHTDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVNoYWRlclNldCA9ICQuQ3ViaXNtU2hhZGVyU2V0O1xuICBleHBvcnQgdHlwZSBDdWJpc21TaGFkZXJTZXQgPSAkLkN1YmlzbVNoYWRlclNldDtcbiAgZXhwb3J0IGNvbnN0IEN1YmlzbVNoYWRlcl9XZWJHTCA9ICQuQ3ViaXNtU2hhZGVyX1dlYkdMO1xuICBleHBvcnQgdHlwZSBDdWJpc21TaGFkZXJfV2ViR0wgPSAkLkN1YmlzbVNoYWRlcl9XZWJHTDtcbiAgZXhwb3J0IGNvbnN0IFNoYWRlck5hbWVzID0gJC5TaGFkZXJOYW1lcztcbiAgZXhwb3J0IHR5cGUgU2hhZGVyTmFtZXMgPSAkLlNoYWRlck5hbWVzO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTG9nRGVidWcgfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XG5cbi8qKlxuICogS2V5LVZhbHVl44Gu44Oa44Ki44KS5a6a576p44GZ44KL44Kv44Op44K5XG4gKiBjc21NYXDjgq/jg6njgrnjga7lhoXpg6jjg4fjg7zjgr/jgafkvb/nlKjjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIGNzbVBhaXI8X0tleVQsIF9WYWxUPiB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogQHBhcmFtIGtleSBLZXnjgajjgZfjgabjgrvjg4Pjg4jjgZnjgovlgKRcbiAgICogQHBhcmFtIHZhbHVlIFZhbHVl44Go44GX44Gm44K744OD44OI44GZ44KL5YCkXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3Ioa2V5PzogX0tleVQsIHZhbHVlPzogX1ZhbFQpIHtcbiAgICB0aGlzLmZpcnN0ID0ga2V5ID09IHVuZGVmaW5lZCA/IG51bGwgOiBrZXk7XG5cbiAgICB0aGlzLnNlY29uZCA9IHZhbHVlID09IHVuZGVmaW5lZCA/IG51bGwgOiB2YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBmaXJzdDogX0tleVQ7IC8vIGtleeOBqOOBl+OBpueUqOOBhOOCi+WkieaVsFxuICBwdWJsaWMgc2Vjb25kOiBfVmFsVDsgLy8gdmFsdWXjgajjgZfjgabnlKjjgYTjgovlpInmlbBcbn1cblxuLyoqXG4gKiDjg57jg4Pjg5flnotcbiAqL1xuZXhwb3J0IGNsYXNzIGNzbU1hcDxfS2V5VCwgX1ZhbFQ+IHtcbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKiBAcGFyYW0gc2l6ZSDliJ3mnJ/ljJbmmYLngrnjgafnorrkv53jgZnjgovjgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzaXplPzogbnVtYmVyKSB7XG4gICAgaWYgKHNpemUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoc2l6ZSA8IDEpIHtcbiAgICAgICAgdGhpcy5fa2V5VmFsdWVzID0gW107XG4gICAgICAgIHRoaXMuX2R1bW15VmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2tleVZhbHVlcyA9IG5ldyBBcnJheShzaXplKTtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IHNpemU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2tleVZhbHVlcyA9IFtdO1xuICAgICAgdGhpcy5fZHVtbXlWYWx1ZSA9IG51bGw7XG4gICAgICB0aGlzLl9zaXplID0gMDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpIHtcbiAgICB0aGlzLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICog44Kt44O844KS6L+95Yqg44GZ44KLXG4gICAqIEBwYXJhbSBrZXkg5paw44Gf44Gr6L+95Yqg44GZ44KL44Kt44O8XG4gICAqL1xuICBwdWJsaWMgYXBwZW5kS2V5KGtleTogX0tleVQpOiB2b2lkIHtcbiAgICAvLyDmlrDjgZfjgY9LZXkvVmFsdWXjga7jg5rjgqLjgpLkvZzjgotcbiAgICB0aGlzLnByZXBhcmVDYXBhY2l0eSh0aGlzLl9zaXplICsgMSwgZmFsc2UpOyAvLyAx44Gk5Lul5LiK5YWl44KL6ZqZ6ZaT44KS5L2c44KLXG4gICAgLy8g5paw44GX44GEa2V5L3ZhbHVl44Gu44Kk44Oz44OH44OD44Kv44K544GvX3NpemVcblxuICAgIHRoaXMuX2tleVZhbHVlc1t0aGlzLl9zaXplXSA9IG5ldyBjc21QYWlyPF9LZXlULCBfVmFsVD4oa2V5KTtcbiAgICB0aGlzLl9zaXplICs9IDE7XG4gIH1cblxuICAvKipcbiAgICog5re75a2X5ryU566X5a2QW2tleV3jga7jgqrjg7zjg5Djg7zjg63jg7zjg4koZ2V0KVxuICAgKiBAcGFyYW0ga2V5IOa3u+Wtl+OBi+OCieeJueWumuOBleOCjOOCi1ZhbHVl5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0VmFsdWUoa2V5OiBfS2V5VCk6IF9WYWxUIHtcbiAgICBsZXQgZm91bmQgPSAtMTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fa2V5VmFsdWVzW2ldLmZpcnN0ID09IGtleSkge1xuICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmb3VuZCA+PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fa2V5VmFsdWVzW2ZvdW5kXS5zZWNvbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXBwZW5kS2V5KGtleSk7IC8vIOaWsOimj+OCreODvOOCkui/veWKoFxuICAgICAgcmV0dXJuIHRoaXMuX2tleVZhbHVlc1t0aGlzLl9zaXplIC0gMV0uc2Vjb25kO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDmt7vlrZfmvJTnrpflrZBba2V5XeOBruOCquODvOODkOODvOODreODvOODiShzZXQpXG4gICAqIEBwYXJhbSBrZXkg5re75a2X44GL44KJ54m55a6a44GV44KM44KLVmFsdWXlgKRcbiAgICogQHBhcmFtIHZhbHVlIOS7o+WFpeOBmeOCi1ZhbHVl5YCkXG4gICAqL1xuICBwdWJsaWMgc2V0VmFsdWUoa2V5OiBfS2V5VCwgdmFsdWU6IF9WYWxUKTogdm9pZCB7XG4gICAgbGV0IGZvdW5kID0gLTE7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NpemU7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX2tleVZhbHVlc1tpXS5maXJzdCA9PSBrZXkpIHtcbiAgICAgICAgZm91bmQgPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZm91bmQgPj0gMCkge1xuICAgICAgdGhpcy5fa2V5VmFsdWVzW2ZvdW5kXS5zZWNvbmQgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hcHBlbmRLZXkoa2V5KTsgLy8g5paw6KaP44Kt44O844KS6L+95YqgXG4gICAgICB0aGlzLl9rZXlWYWx1ZXNbdGhpcy5fc2l6ZSAtIDFdLnNlY29uZCA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjgafmuKHjgZfjgZ9LZXnjgpLmjIHjgaTopoHntKDjgYzlrZjlnKjjgZnjgovjgYtcbiAgICogQHBhcmFtIGtleSDlrZjlnKjjgpLnorroqo3jgZnjgotrZXlcbiAgICogQHJldHVybiB0cnVlIOW8leaVsOOBp+a4oeOBl+OBn2tleeOCkuaMgeOBpOimgee0oOOBjOWtmOWcqOOBmeOCi1xuICAgKiBAcmV0dXJuIGZhbHNlIOW8leaVsOOBp+a4oeOBl+OBn2tleeOCkuaMgeOBpOimgee0oOOBjOWtmOWcqOOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzRXhpc3Qoa2V5OiBfS2V5VCk6IGJvb2xlYW4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fa2V5VmFsdWVzW2ldLmZpcnN0ID09IGtleSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIGtleVZhbHVl44Gu44Od44Kk44Oz44K/44KS5YWo44Gm6Kej5pS+44GZ44KLXG4gICAqL1xuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5fa2V5VmFsdWVzID0gdm9pZCAwO1xuICAgIHRoaXMuX2tleVZhbHVlcyA9IG51bGw7XG4gICAgdGhpcy5fa2V5VmFsdWVzID0gW107XG5cbiAgICB0aGlzLl9zaXplID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjga7jgrXjgqTjgrrjgpLlj5blvpfjgZnjgotcbiAgICpcbiAgICogQHJldHVybiDjgrPjg7Pjg4bjg4rjga7jgrXjgqTjgrpcbiAgICovXG4gIHB1YmxpYyBnZXRTaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu44Kt44Oj44OR44K344OG44Kj44KS56K65L+d44GZ44KLXG4gICAqIEBwYXJhbSBuZXdTaXplIOaWsOOBn+OBquOCreODo+ODkeOCt+ODhuOCo+OAguW8leaVsOOBruWApOOBjOePvuWcqOOBruOCteOCpOOCuuacqua6gOOBruWgtOWQiOOBr+S9leOCguOBl+OBquOBhOOAglxuICAgKiBAcGFyYW0gZml0VG9TaXplIHRydWXjgarjgonmjIflrprjgZfjgZ/jgrXjgqTjgrrjgavlkIjjgo/jgZvjgovjgIJmYWxzZeOBquOCieOCteOCpOOCuuOCkjLlgI3norrkv53jgZfjgabjgYrjgY/jgIJcbiAgICovXG4gIHB1YmxpYyBwcmVwYXJlQ2FwYWNpdHkobmV3U2l6ZTogbnVtYmVyLCBmaXRUb1NpemU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAobmV3U2l6ZSA+IHRoaXMuX2tleVZhbHVlcy5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgaWYgKCFmaXRUb1NpemUgJiYgbmV3U2l6ZSA8IGNzbU1hcC5EZWZhdWx0U2l6ZSlcbiAgICAgICAgICBuZXdTaXplID0gY3NtTWFwLkRlZmF1bHRTaXplO1xuICAgICAgICB0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoID0gbmV3U2l6ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghZml0VG9TaXplICYmIG5ld1NpemUgPCB0aGlzLl9rZXlWYWx1ZXMubGVuZ3RoICogMilcbiAgICAgICAgICBuZXdTaXplID0gdGhpcy5fa2V5VmFsdWVzLmxlbmd0aCAqIDI7XG4gICAgICAgIHRoaXMuX2tleVZhbHVlcy5sZW5ndGggPSBuZXdTaXplO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjga7lhYjpoK3opoHntKDjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBiZWdpbigpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4gPSBuZXcgaXRlcmF0b3I8X0tleVQsIF9WYWxUPih0aGlzLCAwKTtcbiAgICByZXR1cm4gaXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBrue1guerr+imgee0oOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGVuZCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICBjb25zdCBpdGU6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4gPSBuZXcgaXRlcmF0b3I8X0tleVQsIF9WYWxUPihcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLl9zaXplXG4gICAgKTsgLy8g57WC5LqGXG4gICAgcmV0dXJuIGl0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjgYvjgonopoHntKDjgpLliYrpmaTjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGl0ZSDliYrpmaTjgZnjgovopoHntKBcbiAgICovXG4gIHB1YmxpYyBlcmFzZShpdGU6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4pOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICBjb25zdCBpbmRleDogbnVtYmVyID0gaXRlLl9pbmRleDtcbiAgICBpZiAoaW5kZXggPCAwIHx8IHRoaXMuX3NpemUgPD0gaW5kZXgpIHtcbiAgICAgIHJldHVybiBpdGU7IC8vIOWJiumZpOevhOWbsuWkllxuICAgIH1cblxuICAgIC8vIOWJiumZpFxuICAgIHRoaXMuX2tleVZhbHVlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIC0tdGhpcy5fc2l6ZTtcblxuICAgIGNvbnN0IGl0ZTI6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4gPSBuZXcgaXRlcmF0b3I8X0tleVQsIF9WYWxUPihcbiAgICAgIHRoaXMsXG4gICAgICBpbmRleFxuICAgICk7IC8vIOe1guS6hlxuICAgIHJldHVybiBpdGUyO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruWApOOCkjMy44OT44OD44OI56ym5Y+35LuY44GN5pW05pWw5Z6L44Gn44OA44Oz44OX44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZHVtcEFzSW50KCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fc2l6ZTsgaSsrKSB7XG4gICAgICBDdWJpc21Mb2dEZWJ1ZygnezB9ICwnLCB0aGlzLl9rZXlWYWx1ZXNbaV0pO1xuICAgICAgQ3ViaXNtTG9nRGVidWcoJ1xcbicpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRGVmYXVsdFNpemUgPSAxMDsgLy8g44Kz44Oz44OG44OK44Gu5Yid5pyf5YyW44Gu44OH44OV44Kp44Or44OI44K144Kk44K6XG4gIHB1YmxpYyBfa2V5VmFsdWVzOiBjc21QYWlyPF9LZXlULCBfVmFsVD5bXTsgLy8ga2V5LXZhbHVl44Oa44Ki44Gu6YWN5YiXXG4gIHB1YmxpYyBfZHVtbXlWYWx1ZTogX1ZhbFQ7IC8vIOepuuOBruWApOOCkui/lOOBmeeCuuOBruODgOODn+ODvFxuICBwdWJsaWMgX3NpemU6IG51bWJlcjsgLy8g44Kz44Oz44OG44OK44Gu6KaB57Sg5pWwXG59XG5cbi8qKlxuICogY3NtTWFwPFQ+44Gu44Kk44OG44Os44O844K/XG4gKi9cbmV4cG9ydCBjbGFzcyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3Iodj86IGNzbU1hcDxfS2V5VCwgX1ZhbFQ+LCBpZHg/OiBudW1iZXIpIHtcbiAgICB0aGlzLl9tYXAgPSB2ICE9IHVuZGVmaW5lZCA/IHYgOiBuZXcgY3NtTWFwPF9LZXlULCBfVmFsVD4oKTtcblxuICAgIHRoaXMuX2luZGV4ID0gaWR4ICE9IHVuZGVmaW5lZCA/IGlkeCA6IDA7XG4gIH1cblxuICAvKipcbiAgICogPea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgKi9cbiAgcHVibGljIHNldChpdGU6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4pOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICB0aGlzLl9pbmRleCA9IGl0ZS5faW5kZXg7XG4gICAgdGhpcy5fbWFwID0gaXRlLl9tYXA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5YmN572u44GNKyvmvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBwcmVJbmNyZW1lbnQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XG4gICAgKyt0aGlzLl9pbmRleDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDliY3nva7jgY0tLea8lOeul+WtkOOBruOCquODvOODkOODvOODreODvOODiVxuICAgKi9cbiAgcHVibGljIHByZURlY3JlbWVudCgpOiBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+IHtcbiAgICAtLXRoaXMuX2luZGV4O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOW+jOe9ruOBjSsr5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAqL1xuICBwdWJsaWMgaW5jcmVtZW50KCk6IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4ge1xuICAgIGNvbnN0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxfS2V5VCwgX1ZhbFQ+KHRoaXMuX21hcCwgdGhpcy5faW5kZXgrKyk7IC8vIOWPpOOBhOWApOOCkuS/neWtmFxuICAgIHJldHVybiBpdGVvbGQ7XG4gIH1cblxuICAvKipcbiAgICog5b6M572u44GNLS3mvJTnrpflrZDjga7jgqrjg7zjg5Djg7zjg63jg7zjg4lcbiAgICovXG4gIHB1YmxpYyBkZWNyZW1lbnQoKTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPiB7XG4gICAgY29uc3QgaXRlb2xkID0gbmV3IGl0ZXJhdG9yPF9LZXlULCBfVmFsVD4odGhpcy5fbWFwLCB0aGlzLl9pbmRleCk7IC8vIOWPpOOBhOWApOOCkuS/neWtmFxuICAgIHRoaXMuX21hcCA9IGl0ZW9sZC5fbWFwO1xuICAgIHRoaXMuX2luZGV4ID0gaXRlb2xkLl9pbmRleDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiAq5ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAqL1xuICBwdWJsaWMgcHRyKCk6IGNzbVBhaXI8X0tleVQsIF9WYWxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5fa2V5VmFsdWVzW3RoaXMuX2luZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiAhPea8lOeul1xuICAgKi9cbiAgcHVibGljIG5vdEVxdWFsKGl0ZTogaXRlcmF0b3I8X0tleVQsIF9WYWxUPik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pbmRleCAhPSBpdGUuX2luZGV4IHx8IHRoaXMuX21hcCAhPSBpdGUuX21hcDtcbiAgfVxuXG4gIF9pbmRleDogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgX21hcDogY3NtTWFwPF9LZXlULCBfVmFsVD47IC8vIOOCs+ODs+ODhuODilxufVxuXG4vLyBOYW1lc3BhY2UgZGVmaW5pdGlvbiBmb3IgY29tcGF0aWJpbGl0eS5cbmltcG9ydCAqIGFzICQgZnJvbSAnLi9jc21tYXAnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcbiAgZXhwb3J0IGNvbnN0IGNzbU1hcCA9ICQuY3NtTWFwO1xuICBleHBvcnQgdHlwZSBjc21NYXA8SywgVj4gPSAkLmNzbU1hcDxLLCBWPjtcbiAgZXhwb3J0IGNvbnN0IGNzbVBhaXIgPSAkLmNzbVBhaXI7XG4gIGV4cG9ydCB0eXBlIGNzbVBhaXI8SywgVj4gPSAkLmNzbVBhaXI8SywgVj47XG4gIGV4cG9ydCBjb25zdCBpdGVyYXRvciA9ICQuaXRlcmF0b3I7XG4gIGV4cG9ydCB0eXBlIGl0ZXJhdG9yPEssIFY+ID0gJC5pdGVyYXRvcjxLLCBWPjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbi8qKlxuICog55+p5b2i5b2i54q277yI5bqn5qiZ44O76ZW344GV44GvZmxvYXTlgKTvvInjgpLlrprnvqnjgZnjgovjgq/jg6njgrlcbiAqL1xuZXhwb3J0IGNsYXNzIGNzbVJlY3Qge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSB4IOW3puerr1jluqfmqJlcbiAgICogQHBhcmFtIHkg5LiK56uvWeW6p+aomVxuICAgKiBAcGFyYW0gdyDluYVcbiAgICogQHBhcmFtIGgg6auY44GVXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoeD86IG51bWJlciwgeT86IG51bWJlciwgdz86IG51bWJlciwgaD86IG51bWJlcikge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLndpZHRoID0gdztcbiAgICB0aGlzLmhlaWdodCA9IGg7XG4gIH1cblxuICAvKipcbiAgICog55+p5b2i5Lit5aSu44GuWOW6p+aomeOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldENlbnRlclgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy54ICsgMC41ICogdGhpcy53aWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnn6nlvaLkuK3lpK7jga5Z5bqn5qiZ44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0Q2VudGVyWSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnkgKyAwLjUgKiB0aGlzLmhlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiDlj7PlgbTjga5Y5bqn5qiZ44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0UmlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy54ICsgdGhpcy53aWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiDkuIvnq6/jga5Z5bqn5qiZ44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0Qm90dG9tKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMueSArIHRoaXMuaGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIOefqeW9ouOBq+WApOOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKiBAcGFyYW0gciDnn6nlvaLjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzZXRSZWN0KHI6IGNzbVJlY3QpOiB2b2lkIHtcbiAgICB0aGlzLnggPSByLng7XG4gICAgdGhpcy55ID0gci55O1xuICAgIHRoaXMud2lkdGggPSByLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gci5oZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICog55+p5b2i5Lit5aSu44KS6Lu444Gr44GX44Gm57im5qiq44KS5ouh57iu44GZ44KLXG4gICAqIEBwYXJhbSB3IOW5heaWueWQkeOBq+aLoee4ruOBmeOCi+mHj1xuICAgKiBAcGFyYW0gaCDpq5jjgZXmlrnlkJHjgavmi6HnuK7jgZnjgovph49cbiAgICovXG4gIHB1YmxpYyBleHBhbmQodzogbnVtYmVyLCBoOiBudW1iZXIpIHtcbiAgICB0aGlzLnggLT0gdztcbiAgICB0aGlzLnkgLT0gaDtcbiAgICB0aGlzLndpZHRoICs9IHcgKiAyLjA7XG4gICAgdGhpcy5oZWlnaHQgKz0gaCAqIDIuMDtcbiAgfVxuXG4gIHB1YmxpYyB4OiBudW1iZXI7IC8vIOW3puerr1jluqfmqJlcbiAgcHVibGljIHk6IG51bWJlcjsgLy8g5LiK56uvWeW6p+aomVxuICBwdWJsaWMgd2lkdGg6IG51bWJlcjsgLy8g5bmFXG4gIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjsgLy8g6auY44GVXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2NzbXJlY3RmJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBjc21SZWN0ID0gJC5jc21SZWN0O1xuICBleHBvcnQgdHlwZSBjc21SZWN0ID0gJC5jc21SZWN0O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiDmloflrZfliJfjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIGNzbVN0cmluZyB7XG4gIC8qKlxuICAgKiDmloflrZfliJfjgpLlvozmlrnjgavov73liqDjgZnjgotcbiAgICpcbiAgICogQHBhcmFtIGMg6L+95Yqg44GZ44KL5paH5a2X5YiXXG4gICAqIEByZXR1cm4g5pu05paw44GV44KM44Gf5paH5a2X5YiXXG4gICAqL1xuICBwdWJsaWMgYXBwZW5kKGM6IHN0cmluZywgbGVuZ3RoPzogbnVtYmVyKTogY3NtU3RyaW5nIHtcbiAgICB0aGlzLnMgKz0gbGVuZ3RoICE9PSB1bmRlZmluZWQgPyBjLnN1YnN0cigwLCBsZW5ndGgpIDogYztcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWh+Wtl+OCteOCpOOCuuOCkuaLoeW8teOBl+OBpuaWh+Wtl+OCkuWfi+OCgeOCi1xuICAgKiBAcGFyYW0gbGVuZ3RoICAgIOaLoeW8teOBmeOCi+aWh+Wtl+aVsFxuICAgKiBAcGFyYW0gdiAgICAgICAgIOWfi+OCgeOCi+aWh+Wtl1xuICAgKiBAcmV0dXJuIOabtOaWsOOBleOCjOOBn+aWh+Wtl+WIl1xuICAgKi9cbiAgcHVibGljIGV4cGFuc2lvbihsZW5ndGg6IG51bWJlciwgdjogc3RyaW5nKTogY3NtU3RyaW5nIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmFwcGVuZCh2KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiDmloflrZfliJfjga7plbfjgZXjgpLjg5DjgqTjg4jmlbDjgaflj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRCeXRlcygpOiBudW1iZXIge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodGhpcy5zKS5yZXBsYWNlKC8lLi4vZywgJ3gnKS5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICog5paH5a2X5YiX44Gu6ZW344GV44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZ2V0TGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucy5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICog5paH5a2X5YiX5q+U6LyDIDxcbiAgICogQHBhcmFtIHMg5q+U6LyD44GZ44KL5paH5a2X5YiXXG4gICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5bCP44GV44GEXG4gICAqIEByZXR1cm4gZmFsc2U6ICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5aSn44GN44GEXG4gICAqL1xuICBwdWJsaWMgaXNMZXNzKHM6IGNzbVN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnMgPCBzLnM7XG4gIH1cblxuICAvKipcbiAgICog5paH5a2X5YiX5q+U6LyDID5cbiAgICogQHBhcmFtIHMg5q+U6LyD44GZ44KL5paH5a2X5YiXXG4gICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5aSn44GN44GEXG4gICAqIEByZXR1cm4gZmFsc2U6ICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5bCP44GV44GEXG4gICAqL1xuICBwdWJsaWMgaXNHcmVhdChzOiBjc21TdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zID4gcy5zO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWh+Wtl+WIl+avlOi8gyA9PVxuICAgKiBAcGFyYW0gcyDmr5TovIPjgZnjgovmloflrZfliJdcbiAgICogQHJldHVybiB0cnVlOiAgICDmr5TovIPjgZnjgovmloflrZfliJfjgajnrYnjgZfjgYRcbiAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgajnlbDjgarjgotcbiAgICovXG4gIHB1YmxpYyBpc0VxdWFsKHM6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnMgPT0gcztcbiAgfVxuXG4gIC8qKlxuICAgKiDmloflrZfliJfjgYznqbrjgYvjganjgYbjgYtcbiAgICogQHJldHVybiB0cnVlOiDnqbrjga7mloflrZfliJdcbiAgICogQHJldHVybiBmYWxzZTog5YCk44GM6Kit5a6a44GV44KM44Gm44GE44KLXG4gICAqL1xuICBwdWJsaWMgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zLmxlbmd0aCA9PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHM6IHN0cmluZykge1xuICAgIHRoaXMucyA9IHM7XG4gIH1cblxuICBzOiBzdHJpbmc7XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2NzbXN0cmluZyc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgY3NtU3RyaW5nID0gJC5jc21TdHJpbmc7XG4gIGV4cG9ydCB0eXBlIGNzbVN0cmluZyA9ICQuY3NtU3RyaW5nO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiDjg5njgq/jgr/jg7zlnovvvIjlj6/lpInphY3liJflnovvvIlcbiAqL1xuZXhwb3J0IGNsYXNzIGNzbVZlY3RvcjxUPiB7XG4gIC8qKlxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICogQHBhcmFtIGluaWl0YWxDYXBhY2l0eSDliJ3mnJ/ljJblvozjga7jgq3jg6Pjg5Hjgrfjg4bjgqPjgILjg4fjg7zjgr/jgrXjgqTjgrrjga9fY2FwYWNpdHkgKiBzaXplb2YoVClcbiAgICogQHBhcmFtIHplcm9DbGVhciB0cnVl44Gq44KJ5Yid5pyf5YyW5pmC44Gr56K65L+d44GX44Gf6aCY5Z+f44KSMOOBp+Wfi+OCgeOCi1xuICAgKi9cbiAgY29uc3RydWN0b3IoaW5pdGlhbENhcGFjaXR5ID0gMCkge1xuICAgIGlmIChpbml0aWFsQ2FwYWNpdHkgPCAxKSB7XG4gICAgICB0aGlzLl9wdHIgPSBbXTtcbiAgICAgIHRoaXMuX2NhcGFjaXR5ID0gMDtcbiAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wdHIgPSBuZXcgQXJyYXkoaW5pdGlhbENhcGFjaXR5KTtcbiAgICAgIHRoaXMuX2NhcGFjaXR5ID0gaW5pdGlhbENhcGFjaXR5O1xuICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODs+ODh+ODg+OCr+OCueOBp+aMh+WumuOBl+OBn+imgee0oOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGF0KGluZGV4OiBudW1iZXIpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5fcHRyW2luZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLjgrvjg4Pjg4hcbiAgICogQHBhcmFtIGluZGV4IOimgee0oOOCkuOCu+ODg+ODiOOBmeOCi+OCpOODs+ODh+ODg+OCr+OCuVxuICAgKiBAcGFyYW0gdmFsdWUg44K744OD44OI44GZ44KL6KaB57SgXG4gICAqL1xuICBwdWJsaWMgc2V0KGluZGV4OiBudW1iZXIsIHZhbHVlOiBUKTogdm9pZCB7XG4gICAgdGhpcy5fcHRyW2luZGV4XSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOCkuWPluW+l+OBmeOCi1xuICAgKi9cbiAgcHVibGljIGdldChvZmZzZXQgPSAwKTogVFtdIHtcbiAgICBjb25zdCByZXQ6IFRbXSA9IG5ldyBBcnJheTxUPigpO1xuICAgIGZvciAobGV0IGkgPSBvZmZzZXQ7IGkgPCB0aGlzLl9zaXplOyBpKyspIHtcbiAgICAgIHJldC5wdXNoKHRoaXMuX3B0cltpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogcHVzaEJhY2vlh6bnkIbjgIHjgrPjg7Pjg4bjg4rjgavmlrDjgZ/jgaropoHntKDjgpLov73liqDjgZnjgotcbiAgICogQHBhcmFtIHZhbHVlIFB1c2hCYWNr5Yem55CG44Gn6L+95Yqg44GZ44KL5YCkXG4gICAqL1xuICBwdWJsaWMgcHVzaEJhY2sodmFsdWU6IFQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fc2l6ZSA+PSB0aGlzLl9jYXBhY2l0eSkge1xuICAgICAgdGhpcy5wcmVwYXJlQ2FwYWNpdHkoXG4gICAgICAgIHRoaXMuX2NhcGFjaXR5ID09IDAgPyBjc21WZWN0b3Iuc19kZWZhdWx0U2l6ZSA6IHRoaXMuX2NhcGFjaXR5ICogMlxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLl9wdHJbdGhpcy5fc2l6ZSsrXSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruWFqOimgee0oOOCkuino+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuX3B0ci5sZW5ndGggPSAwO1xuICAgIHRoaXMuX3NpemUgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruimgee0oOaVsOOCkui/lOOBmVxuICAgKiBAcmV0dXJuIOOCs+ODs+ODhuODiuOBruimgee0oOaVsFxuICAgKi9cbiAgcHVibGljIGdldFNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrPjg7Pjg4bjg4rjga7lhajopoHntKDjgavlr77jgZfjgabku6PlhaXlh6bnkIbjgpLooYzjgYZcbiAgICogQHBhcmFtIG5ld1NpemUg5Luj5YWl5Yem55CG5b6M44Gu44K144Kk44K6XG4gICAqIEBwYXJhbSB2YWx1ZSDopoHntKDjgavku6PlhaXjgZnjgovlgKRcbiAgICovXG4gIHB1YmxpYyBhc3NpZ24obmV3U2l6ZTogbnVtYmVyLCB2YWx1ZTogVCk6IHZvaWQge1xuICAgIGNvbnN0IGN1clNpemUgPSB0aGlzLl9zaXplO1xuXG4gICAgaWYgKGN1clNpemUgPCBuZXdTaXplKSB7XG4gICAgICB0aGlzLnByZXBhcmVDYXBhY2l0eShuZXdTaXplKTsgLy8gY2FwYWNpdHnmm7TmlrBcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld1NpemU7IGkrKykge1xuICAgICAgdGhpcy5fcHRyW2ldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgdGhpcy5fc2l6ZSA9IG5ld1NpemU7XG4gIH1cblxuICAvKipcbiAgICog44K144Kk44K65aSJ5pu0XG4gICAqL1xuICBwdWJsaWMgcmVzaXplKG5ld1NpemU6IG51bWJlciwgdmFsdWU6IFQgPSBudWxsKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVTaXplKG5ld1NpemUsIHZhbHVlLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgrXjgqTjgrrlpInmm7RcbiAgICovXG4gIHB1YmxpYyB1cGRhdGVTaXplKFxuICAgIG5ld1NpemU6IG51bWJlcixcbiAgICB2YWx1ZTogYW55ID0gbnVsbCxcbiAgICBjYWxsUGxhY2VtZW50TmV3ID0gdHJ1ZVxuICApOiB2b2lkIHtcbiAgICBjb25zdCBjdXJTaXplOiBudW1iZXIgPSB0aGlzLl9zaXplO1xuXG4gICAgaWYgKGN1clNpemUgPCBuZXdTaXplKSB7XG4gICAgICB0aGlzLnByZXBhcmVDYXBhY2l0eShuZXdTaXplKTsgLy8gY2FwYWNpdHnmm7TmlrBcblxuICAgICAgaWYgKGNhbGxQbGFjZW1lbnROZXcpIHtcbiAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gdGhpcy5fc2l6ZTsgaSA8IG5ld1NpemU7IGkrKykge1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gbmV3XG4gICAgICAgICAgICB0aGlzLl9wdHJbaV0gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG5ldyB2YWx1ZSgpKSk7XG4gICAgICAgICAgfSAvLyDjg5fjg6rjg5/jg4bjgqPjg5blnovjgarjga7jgaflgKTmuKHjgZdcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3B0cltpXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gdGhpcy5fc2l6ZTsgaSA8IG5ld1NpemU7IGkrKykge1xuICAgICAgICAgIHRoaXMuX3B0cltpXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG5ld1NpemUgPD0gdGhpcy5fc2l6ZVxuICAgICAgLy8tLS1cbiAgICAgIGNvbnN0IHN1YiA9IHRoaXMuX3NpemUgLSBuZXdTaXplO1xuICAgICAgdGhpcy5fcHRyLnNwbGljZSh0aGlzLl9zaXplIC0gc3ViLCBzdWIpOyAvLyDkuI3opoHjgarjga7jgafnoLTmo4TjgZnjgotcbiAgICB9XG4gICAgdGhpcy5fc2l6ZSA9IG5ld1NpemU7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gr44Kz44Oz44OG44OK6KaB57Sg44KS5oy/5YWl44GZ44KLXG4gICAqIEBwYXJhbSBwb3NpdGlvbiDmjL/lhaXjgZnjgovkvY3nva5cbiAgICogQHBhcmFtIGJlZ2luIOaMv+WFpeOBmeOCi+OCs+ODs+ODhuODiuOBrumWi+Wni+S9jee9rlxuICAgKiBAcGFyYW0gZW5kIOaMv+WFpeOBmeOCi+OCs+ODs+ODhuODiuOBrue1guerr+S9jee9rlxuICAgKi9cbiAgcHVibGljIGluc2VydChcbiAgICBwb3NpdGlvbjogaXRlcmF0b3I8VD4sXG4gICAgYmVnaW46IGl0ZXJhdG9yPFQ+LFxuICAgIGVuZDogaXRlcmF0b3I8VD5cbiAgKTogdm9pZCB7XG4gICAgbGV0IGRzdFNpOiBudW1iZXIgPSBwb3NpdGlvbi5faW5kZXg7XG4gICAgY29uc3Qgc3JjU2k6IG51bWJlciA9IGJlZ2luLl9pbmRleDtcbiAgICBjb25zdCBzcmNFaTogbnVtYmVyID0gZW5kLl9pbmRleDtcblxuICAgIGNvbnN0IGFkZENvdW50OiBudW1iZXIgPSBzcmNFaSAtIHNyY1NpO1xuXG4gICAgdGhpcy5wcmVwYXJlQ2FwYWNpdHkodGhpcy5fc2l6ZSArIGFkZENvdW50KTtcblxuICAgIC8vIOaMv+WFpeeUqOOBruaXouWtmOODh+ODvOOCv+OCkuOCt+ODleODiOOBl+OBpumamemWk+OCkuS9nOOCi1xuICAgIGNvbnN0IGFkZFNpemUgPSB0aGlzLl9zaXplIC0gZHN0U2k7XG4gICAgaWYgKGFkZFNpemUgPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFkZFNpemU7IGkrKykge1xuICAgICAgICB0aGlzLl9wdHIuc3BsaWNlKGRzdFNpICsgaSwgMCwgbnVsbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaTogbnVtYmVyID0gc3JjU2k7IGkgPCBzcmNFaTsgaSsrLCBkc3RTaSsrKSB7XG4gICAgICB0aGlzLl9wdHJbZHN0U2ldID0gYmVnaW4uX3ZlY3Rvci5fcHRyW2ldO1xuICAgIH1cblxuICAgIHRoaXMuX3NpemUgPSB0aGlzLl9zaXplICsgYWRkQ291bnQ7XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44GL44KJ44Kk44Oz44OH44OD44Kv44K544Gn5oyH5a6a44GX44Gf6KaB57Sg44KS5YmK6Zmk44GZ44KLXG4gICAqIEBwYXJhbSBpbmRleCDjgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICogQHJldHVybiB0cnVlIOWJiumZpOWun+ihjFxuICAgKiBAcmV0dXJuIGZhbHNlIOWJiumZpOevhOWbsuWkllxuICAgKi9cbiAgcHVibGljIHJlbW92ZShpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgaWYgKGluZGV4IDwgMCB8fCB0aGlzLl9zaXplIDw9IGluZGV4KSB7XG4gICAgICByZXR1cm4gZmFsc2U7IC8vIOWJiumZpOevhOWbsuWkllxuICAgIH1cblxuICAgIHRoaXMuX3B0ci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIC0tdGhpcy5fc2l6ZTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBi+OCieimgee0oOOCkuWJiumZpOOBl+OBpuS7luOBruimgee0oOOCkuOCt+ODleODiOOBmeOCi1xuICAgKiBAcGFyYW0gaXRlIOWJiumZpOOBmeOCi+imgee0oFxuICAgKi9cbiAgcHVibGljIGVyYXNlKGl0ZTogaXRlcmF0b3I8VD4pOiBpdGVyYXRvcjxUPiB7XG4gICAgY29uc3QgaW5kZXg6IG51bWJlciA9IGl0ZS5faW5kZXg7XG4gICAgaWYgKGluZGV4IDwgMCB8fCB0aGlzLl9zaXplIDw9IGluZGV4KSB7XG4gICAgICByZXR1cm4gaXRlOyAvLyDliYrpmaTnr4Tlm7LlpJZcbiAgICB9XG5cbiAgICAvLyDliYrpmaRcbiAgICB0aGlzLl9wdHIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAtLXRoaXMuX3NpemU7XG5cbiAgICBjb25zdCBpdGUyOiBpdGVyYXRvcjxUPiA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLCBpbmRleCk7IC8vIOe1guS6hlxuICAgIHJldHVybiBpdGUyO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBruOCreODo+ODkeOCt+ODhuOCo+OCkueiuuS/neOBmeOCi1xuICAgKiBAcGFyYW0gbmV3U2l6ZSDmlrDjgZ/jgarjgq3jg6Pjg5Hjgrfjg4bjgqPjgILlvJXmlbDjga7lgKTjgYznj77lnKjjga7jgrXjgqTjgrrmnKrmuoDjga7loLTlkIjjga/kvZXjgoLjgZfjgarjgYQuXG4gICAqL1xuICBwdWJsaWMgcHJlcGFyZUNhcGFjaXR5KG5ld1NpemU6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChuZXdTaXplID4gdGhpcy5fY2FwYWNpdHkpIHtcbiAgICAgIGlmICh0aGlzLl9jYXBhY2l0eSA9PSAwKSB7XG4gICAgICAgIHRoaXMuX3B0ciA9IG5ldyBBcnJheShuZXdTaXplKTtcbiAgICAgICAgdGhpcy5fY2FwYWNpdHkgPSBuZXdTaXplO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcHRyLmxlbmd0aCA9IG5ld1NpemU7XG4gICAgICAgIHRoaXMuX2NhcGFjaXR5ID0gbmV3U2l6ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kz44Oz44OG44OK44Gu5YWI6aCt6KaB57Sg44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgYmVnaW4oKTogaXRlcmF0b3I8VD4ge1xuICAgIGNvbnN0IGl0ZTogaXRlcmF0b3I8VD4gPVxuICAgICAgdGhpcy5fc2l6ZSA9PSAwID8gdGhpcy5lbmQoKSA6IG5ldyBpdGVyYXRvcjxUPih0aGlzLCAwKTtcbiAgICByZXR1cm4gaXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+ODhuODiuOBrue1guerr+imgee0oOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGVuZCgpOiBpdGVyYXRvcjxUPiB7XG4gICAgY29uc3QgaXRlOiBpdGVyYXRvcjxUPiA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLCB0aGlzLl9zaXplKTtcbiAgICByZXR1cm4gaXRlO1xuICB9XG5cbiAgcHVibGljIGdldE9mZnNldChvZmZzZXQ6IG51bWJlcik6IGNzbVZlY3RvcjxUPiB7XG4gICAgY29uc3QgbmV3VmVjdG9yID0gbmV3IGNzbVZlY3RvcjxUPigpO1xuICAgIG5ld1ZlY3Rvci5fcHRyID0gdGhpcy5nZXQob2Zmc2V0KTtcbiAgICBuZXdWZWN0b3IuX3NpemUgPSB0aGlzLmdldChvZmZzZXQpLmxlbmd0aDtcbiAgICBuZXdWZWN0b3IuX2NhcGFjaXR5ID0gdGhpcy5nZXQob2Zmc2V0KS5sZW5ndGg7XG5cbiAgICByZXR1cm4gbmV3VmVjdG9yO1xuICB9XG5cbiAgX3B0cjogVFtdOyAvLyDjgrPjg7Pjg4bjg4rjga7lhYjpoK3jgqLjg4njg6zjgrlcbiAgX3NpemU6IG51bWJlcjsgLy8g44Kz44Oz44OG44OK44Gu6KaB57Sg5pWwXG4gIF9jYXBhY2l0eTogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7jgq3jg6Pjg5Hjgrfjg4bjgqNcblxuICBzdGF0aWMgcmVhZG9ubHkgc19kZWZhdWx0U2l6ZSA9IDEwOyAvLyDjgrPjg7Pjg4bjg4rliJ3mnJ/ljJbjga7jg4fjg5Xjgqnjg6vjg4jjgrXjgqTjgrpcbn1cblxuZXhwb3J0IGNsYXNzIGl0ZXJhdG9yPFQ+IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHY/OiBjc21WZWN0b3I8VD4sIGluZGV4PzogbnVtYmVyKSB7XG4gICAgdGhpcy5fdmVjdG9yID0gdiAhPSB1bmRlZmluZWQgPyB2IDogbnVsbDtcbiAgICB0aGlzLl9pbmRleCA9IGluZGV4ICE9IHVuZGVmaW5lZCA/IGluZGV4IDogMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDku6PlhaVcbiAgICovXG4gIHB1YmxpYyBzZXQoaXRlOiBpdGVyYXRvcjxUPik6IGl0ZXJhdG9yPFQ+IHtcbiAgICB0aGlzLl9pbmRleCA9IGl0ZS5faW5kZXg7XG4gICAgdGhpcy5fdmVjdG9yID0gaXRlLl92ZWN0b3I7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5YmN572u44GNKyvmvJTnrpdcbiAgICovXG4gIHB1YmxpYyBwcmVJbmNyZW1lbnQoKTogaXRlcmF0b3I8VD4ge1xuICAgICsrdGhpcy5faW5kZXg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5YmN572u44GNLS3mvJTnrpdcbiAgICovXG4gIHB1YmxpYyBwcmVEZWNyZW1lbnQoKTogaXRlcmF0b3I8VD4ge1xuICAgIC0tdGhpcy5faW5kZXg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICog5b6M572u44GNKyvmvJTnrpflrZBcbiAgICovXG4gIHB1YmxpYyBpbmNyZW1lbnQoKTogaXRlcmF0b3I8VD4ge1xuICAgIGNvbnN0IGl0ZW9sZCA9IG5ldyBpdGVyYXRvcjxUPih0aGlzLl92ZWN0b3IsIHRoaXMuX2luZGV4KyspOyAvLyDlj6TjgYTlgKTjgpLkv53lrZhcbiAgICByZXR1cm4gaXRlb2xkO1xuICB9XG5cbiAgLyoqXG4gICAqIOW+jOe9ruOBjS0t5ryU566X5a2QXG4gICAqL1xuICBwdWJsaWMgZGVjcmVtZW50KCk6IGl0ZXJhdG9yPFQ+IHtcbiAgICBjb25zdCBpdGVvbGQgPSBuZXcgaXRlcmF0b3I8VD4odGhpcy5fdmVjdG9yLCB0aGlzLl9pbmRleC0tKTsgLy8g5Y+k44GE5YCk44KS5L+d5a2YXG4gICAgcmV0dXJuIGl0ZW9sZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBwdHJcbiAgICovXG4gIHB1YmxpYyBwdHIoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX3ZlY3Rvci5fcHRyW3RoaXMuX2luZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiA95ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAqL1xuICBwdWJsaWMgc3Vic3RpdHV0aW9uKGl0ZTogaXRlcmF0b3I8VD4pOiBpdGVyYXRvcjxUPiB7XG4gICAgdGhpcy5faW5kZXggPSBpdGUuX2luZGV4O1xuICAgIHRoaXMuX3ZlY3RvciA9IGl0ZS5fdmVjdG9yO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqICE95ryU566X5a2Q44Gu44Kq44O844OQ44O844Ot44O844OJXG4gICAqL1xuICBwdWJsaWMgbm90RXF1YWwoaXRlOiBpdGVyYXRvcjxUPik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pbmRleCAhPSBpdGUuX2luZGV4IHx8IHRoaXMuX3ZlY3RvciAhPSBpdGUuX3ZlY3RvcjtcbiAgfVxuXG4gIF9pbmRleDogbnVtYmVyOyAvLyDjgrPjg7Pjg4bjg4rjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgX3ZlY3RvcjogY3NtVmVjdG9yPFQ+OyAvLyDjgrPjg7Pjg4bjg4pcbn1cblxuLy8gTmFtZXNwYWNlIGRlZmluaXRpb24gZm9yIGNvbXBhdGliaWxpdHkuXG5pbXBvcnQgKiBhcyAkIGZyb20gJy4vY3NtdmVjdG9yJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBjc21WZWN0b3IgPSAkLmNzbVZlY3RvcjtcbiAgZXhwb3J0IHR5cGUgY3NtVmVjdG9yPFQ+ID0gJC5jc21WZWN0b3I8VD47XG4gIGV4cG9ydCBjb25zdCBpdGVyYXRvciA9ICQuaXRlcmF0b3I7XG4gIGV4cG9ydCB0eXBlIGl0ZXJhdG9yPFQ+ID0gJC5pdGVyYXRvcjxUPjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7XG4gIENTTV9MT0dfTEVWRUwsXG4gIENTTV9MT0dfTEVWRUxfREVCVUcsXG4gIENTTV9MT0dfTEVWRUxfRVJST1IsXG4gIENTTV9MT0dfTEVWRUxfSU5GTyxcbiAgQ1NNX0xPR19MRVZFTF9WRVJCT1NFLFxuICBDU01fTE9HX0xFVkVMX1dBUk5JTkcsXG59IGZyb20gJy4uL2N1YmlzbWZyYW1ld29ya2NvbmZpZyc7XG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmssIExvZ0xldmVsIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcblxuZXhwb3J0IGNvbnN0IEN1YmlzbUxvZ1ByaW50ID0gKGxldmVsOiBMb2dMZXZlbCwgZm10OiBzdHJpbmcsIGFyZ3M6IGFueVtdKSA9PiB7XG4gIEN1YmlzbURlYnVnLnByaW50KGxldmVsLCAnW0NTTV0nICsgZm10LCBhcmdzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBDdWJpc21Mb2dQcmludEluID0gKGxldmVsOiBMb2dMZXZlbCwgZm10OiBzdHJpbmcsIGFyZ3M6IGFueVtdKSA9PiB7XG4gIEN1YmlzbUxvZ1ByaW50KGxldmVsLCBmbXQgKyAnXFxuJywgYXJncyk7XG59O1xuXG5leHBvcnQgY29uc3QgQ1NNX0FTU0VSVCA9IChleHByOiBhbnkpID0+IHtcbiAgY29uc29sZS5hc3NlcnQoZXhwcik7XG59O1xuXG5leHBvcnQgbGV0IEN1YmlzbUxvZ1ZlcmJvc2U6IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG5leHBvcnQgbGV0IEN1YmlzbUxvZ0RlYnVnOiAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuZXhwb3J0IGxldCBDdWJpc21Mb2dJbmZvOiAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuZXhwb3J0IGxldCBDdWJpc21Mb2dXYXJuaW5nOiAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuZXhwb3J0IGxldCBDdWJpc21Mb2dFcnJvcjogKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcblxuaWYgKENTTV9MT0dfTEVWRUwgPD0gQ1NNX0xPR19MRVZFTF9WRVJCT1NFKSB7XG4gIEN1YmlzbUxvZ1ZlcmJvc2UgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9WZXJib3NlLCAnW1ZdJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nRGVidWcgPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9EZWJ1ZywgJ1tEXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0luZm8gPSAoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgQ3ViaXNtTG9nUHJpbnRJbihMb2dMZXZlbC5Mb2dMZXZlbF9JbmZvLCAnW0ldJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nV2FybmluZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX1dhcm5pbmcsICdbV10nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dFcnJvciA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCAnW0VdJyArIGZtdCwgYXJncyk7XG4gIH07XG59IGVsc2UgaWYgKENTTV9MT0dfTEVWRUwgPT0gQ1NNX0xPR19MRVZFTF9ERUJVRykge1xuICBDdWJpc21Mb2dEZWJ1ZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0RlYnVnLCAnW0RdJyArIGZtdCwgYXJncyk7XG4gIH07XG5cbiAgQ3ViaXNtTG9nSW5mbyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0luZm8sICdbSV0nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dXYXJuaW5nID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfV2FybmluZywgJ1tXXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0Vycm9yID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRXJyb3IsICdbRV0nICsgZm10LCBhcmdzKTtcbiAgfTtcbn0gZWxzZSBpZiAoQ1NNX0xPR19MRVZFTCA9PSBDU01fTE9HX0xFVkVMX0lORk8pIHtcbiAgQ3ViaXNtTG9nSW5mbyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0luZm8sICdbSV0nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dXYXJuaW5nID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfV2FybmluZywgJ1tXXScgKyBmbXQsIGFyZ3MpO1xuICB9O1xuXG4gIEN1YmlzbUxvZ0Vycm9yID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgIEN1YmlzbUxvZ1ByaW50SW4oTG9nTGV2ZWwuTG9nTGV2ZWxfRXJyb3IsICdbRV0nICsgZm10LCBhcmdzKTtcbiAgfTtcbn0gZWxzZSBpZiAoQ1NNX0xPR19MRVZFTCA9PSBDU01fTE9HX0xFVkVMX1dBUk5JTkcpIHtcbiAgQ3ViaXNtTG9nV2FybmluZyA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX1dhcm5pbmcsICdbV10nICsgZm10LCBhcmdzKTtcbiAgfTtcblxuICBDdWJpc21Mb2dFcnJvciA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCAnW0VdJyArIGZtdCwgYXJncyk7XG4gIH07XG59IGVsc2UgaWYgKENTTV9MT0dfTEVWRUwgPT0gQ1NNX0xPR19MRVZFTF9FUlJPUikge1xuICBDdWJpc21Mb2dFcnJvciA9IChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pID0+IHtcbiAgICBDdWJpc21Mb2dQcmludEluKExvZ0xldmVsLkxvZ0xldmVsX0Vycm9yLCAnW0VdJyArIGZtdCwgYXJncyk7XG4gIH07XG59XG5cbi8qKlxuICog44OH44OQ44OD44Kw55So44Gu44Om44O844OG44Kj44Oq44OG44Kj44Kv44Op44K544CCXG4gKiDjg63jgrDjga7lh7rlipvjgIHjg5DjgqTjg4jjga7jg4Djg7Pjg5fjgarjgalcbiAqL1xuZXhwb3J0IGNsYXNzIEN1YmlzbURlYnVnIHtcbiAgLyoqXG4gICAqIOODreOCsOOCkuWHuuWKm+OBmeOCi+OAguesrOS4gOW8leaVsOOBq+ODreOCsOODrOODmeODq+OCkuioreWumuOBmeOCi+OAglxuICAgKiBDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgp5pmC44Gr44Kq44OX44K344On44Oz44Gn6Kit5a6a44GV44KM44Gf44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5LiL5Zue44KL5aC05ZCI44Gv44Ot44Kw44Gr5Ye644GV44Gq44GE44CCXG4gICAqXG4gICAqIEBwYXJhbSBsb2dMZXZlbCDjg63jgrDjg6zjg5njg6vjga7oqK3lrppcbiAgICogQHBhcmFtIGZvcm1hdCDmm7jlvI/ku5jjgY3mloflrZfliJdcbiAgICogQHBhcmFtIGFyZ3Mg5Y+v5aSJ6ZW35byV5pWwXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHByaW50KGxvZ0xldmVsOiBMb2dMZXZlbCwgZm9ybWF0OiBzdHJpbmcsIGFyZ3M/OiBhbnlbXSk6IHZvaWQge1xuICAgIC8vIOOCquODl+OCt+ODp+ODs+OBp+ioreWumuOBleOCjOOBn+ODreOCsOWHuuWKm+ODrOODmeODq+OCkuS4i+WbnuOCi+WgtOWQiOOBr+ODreOCsOOBq+WHuuOBleOBquOBhFxuICAgIGlmIChsb2dMZXZlbCA8IEN1YmlzbUZyYW1ld29yay5nZXRMb2dnaW5nTGV2ZWwoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGxvZ1ByaW50OiBMaXZlMkRDdWJpc21Db3JlLmNzbUxvZ0Z1bmN0aW9uID1cbiAgICAgIEN1YmlzbUZyYW1ld29yay5jb3JlTG9nRnVuY3Rpb247XG5cbiAgICBpZiAoIWxvZ1ByaW50KSByZXR1cm47XG5cbiAgICBjb25zdCBidWZmZXI6IHN0cmluZyA9IGZvcm1hdC5yZXBsYWNlKC9cXHsoXFxkKylcXH0vZywgKG0sIGspID0+IHtcbiAgICAgIHJldHVybiBhcmdzW2tdO1xuICAgIH0pO1xuICAgIGxvZ1ByaW50KGJ1ZmZlcik7XG4gIH1cblxuICAvKipcbiAgICog44OH44O844K/44GL44KJ5oyH5a6a44GX44Gf6ZW344GV44Gg44GR44OA44Oz44OX5Ye65Yqb44GZ44KL44CCXG4gICAqIEN1YmlzbUZyYW1ld29yay5pbml0aWFsaXplKCnmmYLjgavjgqrjg5fjgrfjg6fjg7PjgafoqK3lrprjgZXjgozjgZ/jg63jgrDlh7rlipvjg6zjg5njg6vjgpLkuIvlm57jgovloLTlkIjjga/jg63jgrDjgavlh7rjgZXjgarjgYTjgIJcbiAgICpcbiAgICogQHBhcmFtIGxvZ0xldmVsIOODreOCsOODrOODmeODq+OBruioreWumlxuICAgKiBAcGFyYW0gZGF0YSDjg4Djg7Pjg5fjgZnjgovjg4fjg7zjgr9cbiAgICogQHBhcmFtIGxlbmd0aCDjg4Djg7Pjg5fjgZnjgovplbfjgZVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZHVtcEJ5dGVzKFxuICAgIGxvZ0xldmVsOiBMb2dMZXZlbCxcbiAgICBkYXRhOiBVaW50OEFycmF5LFxuICAgIGxlbmd0aDogbnVtYmVyXG4gICk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpICUgMTYgPT0gMCAmJiBpID4gMCkgdGhpcy5wcmludChsb2dMZXZlbCwgJ1xcbicpO1xuICAgICAgZWxzZSBpZiAoaSAlIDggPT0gMCAmJiBpID4gMCkgdGhpcy5wcmludChsb2dMZXZlbCwgJyAgJyk7XG4gICAgICB0aGlzLnByaW50KGxvZ0xldmVsLCAnezB9ICcsIFtkYXRhW2ldICYgMHhmZl0pO1xuICAgIH1cblxuICAgIHRoaXMucHJpbnQobG9nTGV2ZWwsICdcXG4nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBwcml2YXRlIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWRlYnVnJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XG4gIGV4cG9ydCBjb25zdCBDdWJpc21EZWJ1ZyA9ICQuQ3ViaXNtRGVidWc7XG4gIGV4cG9ydCB0eXBlIEN1YmlzbURlYnVnID0gJC5DdWJpc21EZWJ1Zztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IHN0cnRvZCB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBjc21NYXAsIGl0ZXJhdG9yIGFzIGNzbU1hcF9pdGVyYXRvciB9IGZyb20gJy4uL3R5cGUvY3NtbWFwJztcbmltcG9ydCB7IGNzbVN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IGNzbVZlY3RvciwgaXRlcmF0b3IgYXMgY3NtVmVjdG9yX2l0ZXJhdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHsgQ3ViaXNtTG9nSW5mbyB9IGZyb20gJy4vY3ViaXNtZGVidWcnO1xuXG4vLyBTdGF0aWNJbml0aWFsaXplTm90Rm9yQ2xpZW50Q2FsbCgp44Gn5Yid5pyf5YyW44GZ44KLXG5jb25zdCBDU01fSlNPTl9FUlJPUl9UWVBFX01JU01BVENIID0gJ0Vycm9yOiB0eXBlIG1pc21hdGNoJztcbmNvbnN0IENTTV9KU09OX0VSUk9SX0lOREVYX09GX0JPVU5EUyA9ICdFcnJvcjogaW5kZXggb3V0IG9mIGJvdW5kcyc7XG5cbi8qKlxuICog44OR44O844K544GX44GfSlNPTuOCqOODrOODoeODs+ODiOOBruimgee0oOOBruWfuuW6leOCr+ODqeOCueOAglxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmFsdWUge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLmloflrZfliJflnovjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldFN0cmluZyhkZWZhdWx0VmFsdWU/OiBzdHJpbmcsIGluZGVudD86IHN0cmluZyk6IHN0cmluZztcblxuICAvKipcbiAgICog6KaB57Sg44KS5paH5a2X5YiX5Z6L44Gn6L+U44GZKHN0cmluZylcbiAgICovXG4gIHB1YmxpYyBnZXRSYXdTdHJpbmcoZGVmYXVsdFZhbHVlPzogc3RyaW5nLCBpbmRlbnQ/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZyhkZWZhdWx0VmFsdWUsIGluZGVudCk7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS5pWw5YCk5Z6L44Gn6L+U44GZKG51bWJlcilcbiAgICovXG4gIHB1YmxpYyB0b0ludChkZWZhdWx0VmFsdWUgPSAwKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaVsOWApOWei+OBp+i/lOOBmShudW1iZXIpXG4gICAqL1xuICBwdWJsaWMgdG9GbG9hdChkZWZhdWx0VmFsdWUgPSAwKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuecn+WBveWApOOBp+i/lOOBmShib29sZWFuKVxuICAgKi9cbiAgcHVibGljIHRvQm9vbGVhbihkZWZhdWx0VmFsdWUgPSBmYWxzZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog44K144Kk44K644KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkumFjeWIl+OBp+i/lOOBmShWYWx1ZVtdKVxuICAgKi9cbiAgcHVibGljIGdldEFycmF5KGRlZmF1bHRWYWx1ZTogVmFsdWVbXSA9IG51bGwpOiBWYWx1ZVtdIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuOCs+ODs+ODhuODiuOBp+i/lOOBmShhcnJheSlcbiAgICovXG4gIHB1YmxpYyBnZXRWZWN0b3IoZGVmYXVsdFZhbHVlID0gbmV3IGNzbVZlY3RvcjxWYWx1ZT4oKSk6IGNzbVZlY3RvcjxWYWx1ZT4ge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS44Oe44OD44OX44Gn6L+U44GZKGNzbU1hcDxjc21TdHJpbmcsIFZhbHVlPilcbiAgICovXG4gIHB1YmxpYyBnZXRNYXAoZGVmYXVsdFZhbHVlPzogY3NtTWFwPHN0cmluZywgVmFsdWU+KTogY3NtTWFwPHN0cmluZywgVmFsdWU+IHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtpbmRleF1cbiAgICovXG4gIHB1YmxpYyBnZXRWYWx1ZUJ5SW5kZXgoaW5kZXg6IG51bWJlcik6IFZhbHVlIHtcbiAgICByZXR1cm4gVmFsdWUuZXJyb3JWYWx1ZS5zZXRFcnJvck5vdEZvckNsaWVudENhbGwoXG4gICAgICBDU01fSlNPTl9FUlJPUl9UWVBFX01JU01BVENIXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmt7vlrZfmvJTnrpflrZBbc3RyaW5nIHwgY3NtU3RyaW5nXVxuICAgKi9cbiAgcHVibGljIGdldFZhbHVlQnlTdHJpbmcoczogc3RyaW5nIHwgY3NtU3RyaW5nKTogVmFsdWUge1xuICAgIHJldHVybiBWYWx1ZS5udWxsVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog44Oe44OD44OX44Gu44Kt44O85LiA6Kan44KS44Kz44Oz44OG44OK44Gn6L+U44GZXG4gICAqXG4gICAqIEByZXR1cm4g44Oe44OD44OX44Gu44Kt44O844Gu5LiA6KanXG4gICAqL1xuICBwdWJsaWMgZ2V0S2V5cygpOiBjc21WZWN0b3I8c3RyaW5nPiB7XG4gICAgcmV0dXJuIFZhbHVlLnNfZHVtbXlLZXlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM44Ko44Op44O85YCk44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzRXJyb3IoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GMbnVsbOOBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc051bGwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM55yf5YG95YCk44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzQm9vbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzmlbDlgKTlnovjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNGbG9hdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzmloflrZfliJfjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNTdHJpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM6YWN5YiX44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzQXJyYXkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM44Oe44OD44OX5Z6L44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzTWFwKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjga7lgKTjgajnrYnjgZfjgZHjgozjgbB0cnVlXG4gICAqL1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBjc21TdHJpbmcpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBib29sZWFuKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu5YCk44GM6Z2Z55qE44Gq44KJdHJ1ZeOAgemdmeeahOOBquOCieino+aUvuOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzU3RhdGljKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBq+OCqOODqeODvOWApOOCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChlcnJvclN0cjogc3RyaW5nKTogVmFsdWUge1xuICAgIHJldHVybiBKc29uRXJyb3IuZXJyb3JWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliJ3mnJ/ljJbnlKjjg6Hjgr3jg4Pjg4lcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc3RhdGljSW5pdGlhbGl6ZU5vdEZvckNsaWVudENhbGwoKTogdm9pZCB7XG4gICAgSnNvbkJvb2xlYW4udHJ1ZVZhbHVlID0gbmV3IEpzb25Cb29sZWFuKHRydWUpO1xuICAgIEpzb25Cb29sZWFuLmZhbHNlVmFsdWUgPSBuZXcgSnNvbkJvb2xlYW4oZmFsc2UpO1xuICAgIFZhbHVlLmVycm9yVmFsdWUgPSBuZXcgSnNvbkVycm9yKCdFUlJPUicsIHRydWUpO1xuICAgIFZhbHVlLm51bGxWYWx1ZSA9IG5ldyBKc29uTnVsbHZhbHVlKCk7XG4gICAgVmFsdWUuc19kdW1teUtleXMgPSBuZXcgY3NtVmVjdG9yPHN0cmluZz4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6rjg6rjg7zjgrnnlKjjg6Hjgr3jg4Pjg4lcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc3RhdGljUmVsZWFzZU5vdEZvckNsaWVudENhbGwoKTogdm9pZCB7XG4gICAgSnNvbkJvb2xlYW4udHJ1ZVZhbHVlID0gbnVsbDtcbiAgICBKc29uQm9vbGVhbi5mYWxzZVZhbHVlID0gbnVsbDtcbiAgICBWYWx1ZS5lcnJvclZhbHVlID0gbnVsbDtcbiAgICBWYWx1ZS5udWxsVmFsdWUgPSBudWxsO1xuICAgIFZhbHVlLnNfZHVtbXlLZXlzID0gbnVsbDtcbiAgfVxuXG4gIHByb3RlY3RlZCBfc3RyaW5nQnVmZmVyOiBzdHJpbmc7IC8vIOaWh+Wtl+WIl+ODkOODg+ODleOCoVxuXG4gIHByaXZhdGUgc3RhdGljIHNfZHVtbXlLZXlzOiBjc21WZWN0b3I8c3RyaW5nPjsgLy8g44OA44Of44O844Kt44O8XG5cbiAgcHVibGljIHN0YXRpYyBlcnJvclZhbHVlOiBWYWx1ZTsgLy8g5LiA5pmC55qE44Gq6L+U44KK5YCk44Go44GX44Gm6L+U44GZ44Ko44Op44O844CCIEN1YmlzbUZyYW1ld29yazo6RGlzcG9zZeOBmeOCi+OBvuOBp+OBr2RlbGV0ZeOBl+OBquOBhFxuICBwdWJsaWMgc3RhdGljIG51bGxWYWx1ZTogVmFsdWU7IC8vIOS4gOaZgueahOOBqui/lOOCiuWApOOBqOOBl+OBpui/lOOBmU5VTEzjgIIgICBDdWJpc21GcmFtZXdvcms6OkRpc3Bvc2XjgZnjgovjgb7jgafjga9kZWxldGXjgZfjgarjgYRcblxuICBba2V5OiBzdHJpbmddOiBhbnk7IC8vIOaYjuekuueahOOBq+mAo+aDs+mFjeWIl+OCkmFueeWei+OBp+aMh+WumlxufVxuXG4vKipcbiAqIEFzY2lp5paH5a2X44Gu44G/5a++5b+c44GX44Gf5pyA5bCP6ZmQ44Gu6Lu96YePSlNPTuODkeODvOOCteOAglxuICog5LuV5qeY44GvSlNPTuOBruOCteODluOCu+ODg+ODiOOBqOOBquOCi+OAglxuICog6Kit5a6a44OV44Kh44Kk44OrKG1vZGVsMy5qc29uKeOBquOBqeOBruODreODvOODieeUqFxuICpcbiAqIFvmnKrlr77lv5zpoIXnm65dXG4gKiDjg7vml6XmnKzoqp7jgarjganjga7pnZ5BU0NJSeaWh+Wtl1xuICog44O7ZeOBq+OCiOOCi+aMh+aVsOihqOePvlxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtSnNvbiB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI/OiBBcnJheUJ1ZmZlciwgbGVuZ3RoPzogbnVtYmVyKSB7XG4gICAgdGhpcy5fZXJyb3IgPSBudWxsO1xuICAgIHRoaXMuX2xpbmVDb3VudCA9IDA7XG4gICAgdGhpcy5fcm9vdCA9IG51bGw7XG5cbiAgICBpZiAoYnVmZmVyICE9IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5wYXJzZUJ5dGVzKGJ1ZmZlciwgbGVuZ3RoLCB0aGlzLl9wYXJzZUNhbGxiYWNrKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44OQ44Kk44OI44OH44O844K/44GL44KJ55u05o6l44Ot44O844OJ44GX44Gm44OR44O844K544GZ44KLXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIg44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOCteOCpOOCulxuICAgKiBAcmV0dXJuIEN1YmlzbUpzb27jgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgILlpLHmlZfjgZfjgZ/jgolOVUxMXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpIHtcbiAgICBjb25zdCBqc29uID0gbmV3IEN1YmlzbUpzb24oKTtcbiAgICBjb25zdCBzdWNjZWVkZWQ6IGJvb2xlYW4gPSBqc29uLnBhcnNlQnl0ZXMoXG4gICAgICBidWZmZXIsXG4gICAgICBzaXplLFxuICAgICAganNvbi5fcGFyc2VDYWxsYmFja1xuICAgICk7XG5cbiAgICBpZiAoIXN1Y2NlZWRlZCkge1xuICAgICAgQ3ViaXNtSnNvbi5kZWxldGUoanNvbik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOOCueOBl+OBn0pTT07jgqrjg5bjgrjjgqfjgq/jg4jjga7op6PmlL7lh6bnkIZcbiAgICpcbiAgICogQHBhcmFtIGluc3RhbmNlIEN1YmlzbUpzb27jgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVsZXRlKGluc3RhbmNlOiBDdWJpc21Kc29uKSB7XG4gICAgaW5zdGFuY2UgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODkeODvOOCueOBl+OBn0pTT07jga7jg6vjg7zjg4jopoHntKDjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBnZXRSb290KCk6IFZhbHVlIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdDtcbiAgfVxuXG4gIC8qKlxuICAgKiAgVW5pY29kZeOBruODkOOCpOODiuODquOCklN0cmluZ+OBq+WkieaPm1xuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyIOWkieaPm+OBmeOCi+ODkOOCpOODiuODquODh+ODvOOCv1xuICAgKiBAcmV0dXJuIOWkieaPm+W+jOOBruaWh+Wtl+WIl1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBhcnJheUJ1ZmZlclRvU3RyaW5nKGJ1ZmZlcjogQXJyYXlCdWZmZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IHVpbnQ4QXJyYXk6IFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGxldCBzdHIgPSAnJztcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW46IG51bWJlciA9IHVpbnQ4QXJyYXkubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHN0ciArPSAnJScgKyB0aGlzLnBhZCh1aW50OEFycmF5W2ldLnRvU3RyaW5nKDE2KSk7XG4gICAgfVxuXG4gICAgc3RyID0gZGVjb2RlVVJJQ29tcG9uZW50KHN0cik7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqjjg7PjgrPjg7zjg4njgIHjg5Hjg4fjgqPjg7PjgrBcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIHBhZChuOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBuLmxlbmd0aCA8IDIgPyAnMCcgKyBuIDogbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBKU09O44Gu44OR44O844K544KS5a6f6KGM44GZ44KLXG4gICAqIEBwYXJhbSBidWZmZXIgICAg44OR44O844K55a++6LGh44Gu44OH44O844K/44OQ44Kk44OIXG4gICAqIEBwYXJhbSBzaXplICAgICAg44OH44O844K/44OQ44Kk44OI44Gu44K144Kk44K6XG4gICAqIHJldHVybiB0cnVlIDog5oiQ5YqfXG4gICAqIHJldHVybiBmYWxzZTog5aSx5pWXXG4gICAqL1xuICBwdWJsaWMgcGFyc2VCeXRlcyhcbiAgICBidWZmZXI6IEFycmF5QnVmZmVyLFxuICAgIHNpemU6IG51bWJlcixcbiAgICBwYXJzZUNhbGxiYWNrPzogcGFyc2VKc29uT2JqZWN0XG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGVuZFBvczogbnVtYmVyW10gPSBuZXcgQXJyYXk8bnVtYmVyPigxKTsgLy8g5Y+C54Wn5rih44GX44Gr44GZ44KL44Gf44KB6YWN5YiXXG4gICAgY29uc3QgZGVjb2RlQnVmZmVyOiBzdHJpbmcgPSBDdWJpc21Kc29uLmFycmF5QnVmZmVyVG9TdHJpbmcoYnVmZmVyKTtcblxuICAgIGlmIChwYXJzZUNhbGxiYWNrID09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fcm9vdCA9IHRoaXMucGFyc2VWYWx1ZShkZWNvZGVCdWZmZXIsIHNpemUsIDAsIGVuZFBvcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFR5cGVTY3JpcHTmqJnmupbjga5KU09O44OR44O844K144KS5L2/44GGXG4gICAgICB0aGlzLl9yb290ID0gcGFyc2VDYWxsYmFjayhKU09OLnBhcnNlKGRlY29kZUJ1ZmZlciksIG5ldyBKc29uTWFwKCkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgbGV0IHN0cmJ1ZiA9ICdcXDAnO1xuICAgICAgc3RyYnVmID0gJ0pzb24gcGFyc2UgZXJyb3IgOiBAbGluZSAnICsgKHRoaXMuX2xpbmVDb3VudCArIDEpICsgJ1xcbic7XG4gICAgICB0aGlzLl9yb290ID0gbmV3IEpzb25TdHJpbmcoc3RyYnVmKTtcblxuICAgICAgQ3ViaXNtTG9nSW5mbygnezB9JywgdGhpcy5fcm9vdC5nZXRSYXdTdHJpbmcoKSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9yb290ID09IG51bGwpIHtcbiAgICAgIHRoaXMuX3Jvb3QgPSBuZXcgSnNvbkVycm9yKG5ldyBjc21TdHJpbmcodGhpcy5fZXJyb3IpLCBmYWxzZSk7IC8vIHJvb3Tjga/op6PmlL7jgZXjgozjgovjga7jgafjgqjjg6njg7zjgqrjg5bjgrjjgqfjgq/jg4jjgpLliKXpgJTkvZzmiJDjgZnjgotcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICog44OR44O844K55pmC44Gu44Ko44Op44O85YCk44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgZ2V0UGFyc2VFcnJvcigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9lcnJvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6vjg7zjg4jopoHntKDjga7mrKHjga7opoHntKDjgYzjg5XjgqHjgqTjg6vjga7ntYLnq6/jgaDjgaPjgZ/jgol0cnVl44KS6L+U44GZXG4gICAqL1xuICBwdWJsaWMgY2hlY2tFbmRPZkZpbGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3QuZ2V0QXJyYXkoKVsxXS5lcXVhbHMoJ0VPRicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEpTT07jgqjjg6zjg6Hjg7Pjg4jjgYvjgolWYWx1ZShmbG9hdCxTdHJpbmcsVmFsdWUqLEFycmF5LG51bGwsdHJ1ZSxmYWxzZSnjgpLjg5Hjg7zjgrnjgZnjgotcbiAgICog44Ko44Os44Oh44Oz44OI44Gu5pu45byP44Gr5b+c44GY44Gm5YaF6YOo44GnUGFyc2VTdHJpbmcoKSwgUGFyc2VPYmplY3QoKSwgUGFyc2VBcnJheSgp44KS5ZG844G2XG4gICAqXG4gICAqIEBwYXJhbSAgIGJ1ZmZlciAgICAgIEpTT07jgqjjg6zjg6Hjg7Pjg4jjga7jg5Djg4Pjg5XjgqFcbiAgICogQHBhcmFtICAgbGVuZ3RoICAgICAg44OR44O844K544GZ44KL6ZW344GVXG4gICAqIEBwYXJhbSAgIGJlZ2luICAgICAgIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxuICAgKiBAcGFyYW0gICBvdXRFbmRQb3MgICDjg5Hjg7zjgrnntYLkuobmmYLjga7kvY3nva5cbiAgICogQHJldHVybiAgICAgIOODkeODvOOCueOBi+OCieWPluW+l+OBl+OBn1ZhbHVl44Kq44OW44K444Kn44Kv44OIXG4gICAqL1xuICBwcm90ZWN0ZWQgcGFyc2VWYWx1ZShcbiAgICBidWZmZXI6IHN0cmluZyxcbiAgICBsZW5ndGg6IG51bWJlcixcbiAgICBiZWdpbjogbnVtYmVyLFxuICAgIG91dEVuZFBvczogbnVtYmVyW11cbiAgKSB7XG4gICAgaWYgKHRoaXMuX2Vycm9yKSByZXR1cm4gbnVsbDtcblxuICAgIGxldCBvOiBWYWx1ZSA9IG51bGw7XG4gICAgbGV0IGk6IG51bWJlciA9IGJlZ2luO1xuICAgIGxldCBmOiBudW1iZXI7XG5cbiAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjOiBzdHJpbmcgPSBidWZmZXJbaV07XG4gICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgY2FzZSAnLSc6XG4gICAgICAgIGNhc2UgJy4nOlxuICAgICAgICBjYXNlICcwJzpcbiAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgIGNhc2UgJzInOlxuICAgICAgICBjYXNlICczJzpcbiAgICAgICAgY2FzZSAnNCc6XG4gICAgICAgIGNhc2UgJzUnOlxuICAgICAgICBjYXNlICc2JzpcbiAgICAgICAgY2FzZSAnNyc6XG4gICAgICAgIGNhc2UgJzgnOlxuICAgICAgICBjYXNlICc5Jzoge1xuICAgICAgICAgIGNvbnN0IGFmdGVyU3RyaW5nOiBzdHJpbmdbXSA9IG5ldyBBcnJheSgxKTsgLy8g5Y+C54Wn5rih44GX44Gr44GZ44KL44Gf44KBXG4gICAgICAgICAgZiA9IHN0cnRvZChidWZmZXIuc2xpY2UoaSksIGFmdGVyU3RyaW5nKTtcbiAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBidWZmZXIuaW5kZXhPZihhZnRlclN0cmluZ1swXSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBKc29uRmxvYXQoZik7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgIHJldHVybiBuZXcgSnNvblN0cmluZyhcbiAgICAgICAgICAgIHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyLCBsZW5ndGgsIGkgKyAxLCBvdXRFbmRQb3MpXG4gICAgICAgICAgKTsgLy8gXFxcIuOBruasoeOBruaWh+Wtl+OBi+OCiVxuICAgICAgICBjYXNlICdbJzpcbiAgICAgICAgICBvID0gdGhpcy5wYXJzZUFycmF5KGJ1ZmZlciwgbGVuZ3RoLCBpICsgMSwgb3V0RW5kUG9zKTtcbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgY2FzZSAneyc6XG4gICAgICAgICAgbyA9IHRoaXMucGFyc2VPYmplY3QoYnVmZmVyLCBsZW5ndGgsIGkgKyAxLCBvdXRFbmRQb3MpO1xuICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICBjYXNlICduJzogLy8gbnVsbOS7peWkluOBq+OBquOBhFxuICAgICAgICAgIGlmIChpICsgMyA8IGxlbmd0aCkge1xuICAgICAgICAgICAgbyA9IG5ldyBKc29uTnVsbHZhbHVlKCk7IC8vIOino+aUvuOBp+OBjeOCi+OCiOOBhuOBq+OBmeOCi1xuICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gJ3BhcnNlIG51bGwnO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgY2FzZSAndCc6IC8vIHRydWXku6XlpJbjgavjgarjgYRcbiAgICAgICAgICBpZiAoaSArIDMgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIG8gPSBKc29uQm9vbGVhbi50cnVlVmFsdWU7XG4gICAgICAgICAgICBvdXRFbmRQb3NbMF0gPSBpICsgNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSAncGFyc2UgdHJ1ZSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICBjYXNlICdmJzogLy8gZmFsc2Xku6XlpJbjgavjgarjgYRcbiAgICAgICAgICBpZiAoaSArIDQgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIG8gPSBKc29uQm9vbGVhbi5mYWxzZVZhbHVlO1xuICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJpbGxlZ2FsICcsJyBwb3NpdGlvblwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgY2FzZSAnLCc6IC8vIEFycmF5IHNlcGFyYXRvclxuICAgICAgICAgIHRoaXMuX2Vycm9yID0gXCJpbGxlZ2FsICcsJyBwb3NpdGlvblwiO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjYXNlICddJzogLy8g5LiN5q2j44Gq772d44Gg44GM44K544Kt44OD44OX44GZ44KL44CC6YWN5YiX44Gu5pyA5b6M44Gr5LiN6KaB44GqICwg44GM44GC44KL44Go5oCd44KP44KM44KLXG4gICAgICAgICAgb3V0RW5kUG9zWzBdID0gaTsgLy8g5ZCM44GY5paH5a2X44KS5YaN5Yem55CGXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgdGhpcy5fbGluZUNvdW50Kys7XG4gICAgICAgIGNhc2UgJyAnOlxuICAgICAgICBjYXNlICdcXHQnOlxuICAgICAgICBjYXNlICdcXHInOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vIOOCueOCreODg+ODl1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2Vycm9yID0gJ2lsbGVnYWwgZW5kIG9mIHZhbHVlJztcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmrKHjga7jgIxcIuOAjeOBvuOBp+OBruaWh+Wtl+WIl+OCkuODkeODvOOCueOBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gICBzdHJpbmcgIC0+ICDjg5Hjg7zjgrnlr77osaHjga7mloflrZfliJdcbiAgICogQHBhcmFtICAgbGVuZ3RoICAtPiAg44OR44O844K544GZ44KL6ZW344GVXG4gICAqIEBwYXJhbSAgIGJlZ2luICAgLT4gIOODkeODvOOCueOCkumWi+Wni+OBmeOCi+S9jee9rlxuICAgKiBAcGFyYW0gIG91dEVuZFBvcyAgIC0+ICDjg5Hjg7zjgrnntYLkuobmmYLjga7kvY3nva5cbiAgICogQHJldHVybiAgICAgIOODkeODvOOCueOBl+OBn+aWh0blrZfliJfopoHntKBcbiAgICovXG4gIHByb3RlY3RlZCBwYXJzZVN0cmluZyhcbiAgICBzdHJpbmc6IHN0cmluZyxcbiAgICBsZW5ndGg6IG51bWJlcixcbiAgICBiZWdpbjogbnVtYmVyLFxuICAgIG91dEVuZFBvczogbnVtYmVyW11cbiAgKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5fZXJyb3IpIHJldHVybiBudWxsO1xuXG4gICAgbGV0IGkgPSBiZWdpbjtcbiAgICBsZXQgYzogc3RyaW5nLCBjMjogc3RyaW5nO1xuICAgIGNvbnN0IHJldDogY3NtU3RyaW5nID0gbmV3IGNzbVN0cmluZygnJyk7XG4gICAgbGV0IGJ1ZlN0YXJ0OiBudW1iZXIgPSBiZWdpbjsgLy8gc2J1ZuOBq+eZu+mMsuOBleOCjOOBpuOBhOOBquOBhOaWh+Wtl+OBrumWi+Wni+S9jee9rlxuXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYyA9IHN0cmluZ1tpXTtcblxuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgJ1wiJzoge1xuICAgICAgICAgIC8vIOe1guerr+OBruKAneOAgeOCqOOCueOCseODvOODl+aWh+Wtl+OBr+WIpeOBq+WHpueQhuOBleOCjOOCi+OBruOBp+OBk+OBk+OBq+adpeOBquOBhFxuICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyAxOyAvLyDigJ3jga7mrKHjga7mloflrZdcbiAgICAgICAgICByZXQuYXBwZW5kKHN0cmluZy5zbGljZShidWZTdGFydCksIGkgLSBidWZTdGFydCk7IC8vIOWJjeOBruaWh+Wtl+OBvuOBp+OCkueZu+mMsuOBmeOCi1xuICAgICAgICAgIHJldHVybiByZXQucztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICcvLyc6IHtcbiAgICAgICAgICAvLyDjgqjjgrnjgrHjg7zjg5fjga7loLTlkIhcbiAgICAgICAgICBpKys7IC8vIO+8kuaWh+Wtl+OCkuOCu+ODg+ODiOOBp+aJseOBhlxuXG4gICAgICAgICAgaWYgKGkgLSAxID4gYnVmU3RhcnQpIHtcbiAgICAgICAgICAgIHJldC5hcHBlbmQoc3RyaW5nLnNsaWNlKGJ1ZlN0YXJ0KSwgaSAtIGJ1ZlN0YXJ0KTsgLy8g5YmN44Gu5paH5a2X44G+44Gn44KS55m76Yyy44GZ44KLXG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZlN0YXJ0ID0gaSArIDE7IC8vIOOCqOOCueOCseODvOODl++8iO+8kuaWh+Wtlynjga7mrKHjga7mloflrZfjgYvjgolcblxuICAgICAgICAgIGlmIChpIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjMiA9IHN0cmluZ1tpXTtcblxuICAgICAgICAgICAgc3dpdGNoIChjMikge1xuICAgICAgICAgICAgICBjYXNlICdcXFxcJzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXFxcJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcIicpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICcvJzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICcvJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ2InOlxuICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1xcYicpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXGYnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgICAgICAgcmV0LmV4cGFuc2lvbigxLCAnXFxuJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ3InOlxuICAgICAgICAgICAgICAgIHJldC5leHBhbnNpb24oMSwgJ1xccicpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICd0JzpcbiAgICAgICAgICAgICAgICByZXQuZXhwYW5zaW9uKDEsICdcXHQnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAndSc6XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSAncGFyc2Ugc3RyaW5nL3VuaWNvcmQgZXNjYXBlIG5vdCBzdXBwb3J0ZWQnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9ICdwYXJzZSBzdHJpbmcvZXNjYXBlIGVycm9yJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fZXJyb3IgPSAncGFyc2Ugc3RyaW5nL2lsbGVnYWwgZW5kJztcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBKU09O44Gu44Kq44OW44K444Kn44Kv44OI44Ko44Os44Oh44Oz44OI44KS44OR44O844K544GX44GmVmFsdWXjgqrjg5bjgrjjgqfjgq/jg4jjgpLov5TjgZlcbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciAgICBKU09O44Ko44Os44Oh44Oz44OI44Gu44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBsZW5ndGggICAg44OR44O844K544GZ44KL6ZW344GVXG4gICAqIEBwYXJhbSBiZWdpbiAgICAg44OR44O844K544KS6ZaL5aeL44GZ44KL5L2N572uXG4gICAqIEBwYXJhbSBvdXRFbmRQb3Mg44OR44O844K557WC5LqG5pmC44Gu5L2N572uXG4gICAqIEByZXR1cm4g44OR44O844K544GL44KJ5Y+W5b6X44GX44GfVmFsdWXjgqrjg5bjgrjjgqfjgq/jg4hcbiAgICovXG4gIHByb3RlY3RlZCBwYXJzZU9iamVjdChcbiAgICBidWZmZXI6IHN0cmluZyxcbiAgICBsZW5ndGg6IG51bWJlcixcbiAgICBiZWdpbjogbnVtYmVyLFxuICAgIG91dEVuZFBvczogbnVtYmVyW11cbiAgKTogVmFsdWUge1xuICAgIGlmICh0aGlzLl9lcnJvcikgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgcmV0OiBKc29uTWFwID0gbmV3IEpzb25NYXAoKTtcblxuICAgIC8vIEtleTogVmFsdWVcbiAgICBsZXQga2V5ID0gJyc7XG4gICAgbGV0IGk6IG51bWJlciA9IGJlZ2luO1xuICAgIGxldCBjID0gJyc7XG4gICAgY29uc3QgbG9jYWxSZXRFbmRQb3MyOiBudW1iZXJbXSA9IEFycmF5KDEpO1xuICAgIGxldCBvayA9IGZhbHNlO1xuXG4gICAgLy8gLCDjgYzntprjgY/pmZDjgorjg6vjg7zjg5dcbiAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBGT1JfTE9PUDogZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjID0gYnVmZmVyW2ldO1xuXG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VTdHJpbmcoYnVmZmVyLCBsZW5ndGgsIGkgKyAxLCBsb2NhbFJldEVuZFBvczIpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpID0gbG9jYWxSZXRFbmRQb3MyWzBdO1xuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWsgRk9SX0xPT1A7IC8vLS0gbG9vcOOBi+OCieWHuuOCi1xuICAgICAgICAgIGNhc2UgJ30nOiAvLyDplonjgZjjgqvjg4PjgrNcbiAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyAxO1xuICAgICAgICAgICAgcmV0dXJuIHJldDsgLy8g56m6XG4gICAgICAgICAgY2FzZSAnOic6XG4gICAgICAgICAgICB0aGlzLl9lcnJvciA9IFwiaWxsZWdhbCAnOicgcG9zaXRpb25cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgICB0aGlzLl9saW5lQ291bnQrKztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7IC8vIOOCueOCreODg+ODl+OBmeOCi+aWh+Wtl1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIW9rKSB7XG4gICAgICAgIHRoaXMuX2Vycm9yID0gJ2tleSBub3QgZm91bmQnO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgb2sgPSBmYWxzZTtcblxuICAgICAgLy8gOiDjgpLjg4Hjgqfjg4Pjgq9cbiAgICAgIEZPUl9MT09QMjogZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjID0gYnVmZmVyW2ldO1xuXG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgIGNhc2UgJzonOlxuICAgICAgICAgICAgb2sgPSB0cnVlO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgYnJlYWsgRk9SX0xPT1AyO1xuICAgICAgICAgIGNhc2UgJ30nOlxuICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBcImlsbGVnYWwgJ30nIHBvc2l0aW9uXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICAgICAgdGhpcy5fbGluZUNvdW50Kys7XG4gICAgICAgICAgLy8gY2FzZSAnICc6IGNhc2UgJ1xcdCcgOiBjYXNlICdcXHInOlxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhazsgLy8g44K544Kt44OD44OX44GZ44KL5paH5a2XXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFvaykge1xuICAgICAgICB0aGlzLl9lcnJvciA9IFwiJzonIG5vdCBmb3VuZFwiO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8g5YCk44KS44OB44Kn44OD44KvXG4gICAgICBjb25zdCB2YWx1ZTogVmFsdWUgPSB0aGlzLnBhcnNlVmFsdWUoYnVmZmVyLCBsZW5ndGgsIGksIGxvY2FsUmV0RW5kUG9zMik7XG4gICAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGkgPSBsb2NhbFJldEVuZFBvczJbMF07XG5cbiAgICAgIC8vIHJldC5wdXQoa2V5LCB2YWx1ZSk7XG4gICAgICByZXQucHV0KGtleSwgdmFsdWUpO1xuXG4gICAgICBGT1JfTE9PUDM6IGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYyA9IGJ1ZmZlcltpXTtcblxuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICBjYXNlICcsJzpcbiAgICAgICAgICAgIGJyZWFrIEZPUl9MT09QMztcbiAgICAgICAgICBjYXNlICd9JzpcbiAgICAgICAgICAgIG91dEVuZFBvc1swXSA9IGkgKyAxO1xuICAgICAgICAgICAgcmV0dXJuIHJldDsgLy8g5q2j5bi457WC5LqGXG4gICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgIHRoaXMuX2xpbmVDb3VudCsrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhazsgLy8g44K544Kt44OD44OXXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9lcnJvciA9ICdpbGxlZ2FsIGVuZCBvZiBwZXJzZU9iamVjdCc7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5qyh44Gu44CMXCLjgI3jgb7jgafjga7mloflrZfliJfjgpLjg5Hjg7zjgrnjgZnjgovjgIJcbiAgICogQHBhcmFtIGJ1ZmZlciAgICBKU09O44Ko44Os44Oh44Oz44OI44Gu44OQ44OD44OV44KhXG4gICAqIEBwYXJhbSBsZW5ndGggICAg44OR44O844K544GZ44KL6ZW344GVXG4gICAqIEBwYXJhbSBiZWdpbiAgICAg44OR44O844K544KS6ZaL5aeL44GZ44KL5L2N572uXG4gICAqIEBwYXJhbSBvdXRFbmRQb3Mg44OR44O844K557WC5LqG5pmC44Gu5L2N572uXG4gICAqIEByZXR1cm4g44OR44O844K544GL44KJ5Y+W5b6X44GX44GfVmFsdWXjgqrjg5bjgrjjgqfjgq/jg4hcbiAgICovXG4gIHByb3RlY3RlZCBwYXJzZUFycmF5KFxuICAgIGJ1ZmZlcjogc3RyaW5nLFxuICAgIGxlbmd0aDogbnVtYmVyLFxuICAgIGJlZ2luOiBudW1iZXIsXG4gICAgb3V0RW5kUG9zOiBudW1iZXJbXVxuICApOiBWYWx1ZSB7XG4gICAgaWYgKHRoaXMuX2Vycm9yKSByZXR1cm4gbnVsbDtcbiAgICBsZXQgcmV0OiBKc29uQXJyYXkgPSBuZXcgSnNvbkFycmF5KCk7XG5cbiAgICAvLyBrZXkgOiB2YWx1ZVxuICAgIGxldCBpOiBudW1iZXIgPSBiZWdpbjtcbiAgICBsZXQgYzogc3RyaW5nO1xuICAgIGNvbnN0IGxvY2FsUmV0RW5kcG9zMjogbnVtYmVyW10gPSBuZXcgQXJyYXkoMSk7XG5cbiAgICAvLyAsIOOBjOe2muOBj+mZkOOCiuODq+ODvOODl1xuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIDog44KS44OB44Kn44OD44KvXG4gICAgICBjb25zdCB2YWx1ZTogVmFsdWUgPSB0aGlzLnBhcnNlVmFsdWUoYnVmZmVyLCBsZW5ndGgsIGksIGxvY2FsUmV0RW5kcG9zMik7XG5cbiAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGkgPSBsb2NhbFJldEVuZHBvczJbMF07XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICByZXQuYWRkKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgLy8gRk9SX0xPT1AzOlxuICAgICAgLy8gYm9vbGVhbiBicmVha2ZsYWcgPSBmYWxzZTtcbiAgICAgIEZPUl9MT09QOiBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGMgPSBidWZmZXJbaV07XG5cbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgY2FzZSAnLCc6XG4gICAgICAgICAgICAvLyBicmVha2ZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgLy8gYnJlYWs7IC8vIOasoeOBrktFWSwgVkFsVUXjgbhcbiAgICAgICAgICAgIGJyZWFrIEZPUl9MT09QO1xuICAgICAgICAgIGNhc2UgJ10nOlxuICAgICAgICAgICAgb3V0RW5kUG9zWzBdID0gaSArIDE7XG4gICAgICAgICAgICByZXR1cm4gcmV0OyAvLyDntYLkuoZcbiAgICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICAgICAgKyt0aGlzLl9saW5lQ291bnQ7XG4gICAgICAgICAgLy9jYXNlICcgJzogY2FzZSAnXFx0JzogY2FzZSAnXFxyJzpcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7IC8vIOOCueOCreODg+ODl1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0ID0gdm9pZCAwO1xuICAgIHRoaXMuX2Vycm9yID0gJ2lsbGVnYWwgZW5kIG9mIHBhcnNlT2JqZWN0JztcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIF9wYXJzZUNhbGxiYWNrOiBwYXJzZUpzb25PYmplY3QgPSBDdWJpc21Kc29uRXh0ZW5zaW9uLnBhcnNlSnNvbk9iamVjdDsgLy8g44OR44O844K55pmC44Gr5L2/44GG5Yem55CG44Gu44Kz44O844Or44OQ44OD44Kv6Zai5pWwXG5cbiAgX2Vycm9yOiBzdHJpbmc7IC8vIOODkeODvOOCueaZguOBruOCqOODqeODvFxuICBfbGluZUNvdW50OiBudW1iZXI7IC8vIOOCqOODqeODvOWgseWRiuOBq+eUqOOBhOOCi+ihjOaVsOOCq+OCpuODs+ODiFxuICBfcm9vdDogVmFsdWU7IC8vIOODkeODvOOCueOBleOCjOOBn+ODq+ODvOODiOimgee0oFxufVxuXG5pbnRlcmZhY2UgcGFyc2VKc29uT2JqZWN0IHtcbiAgKG9iajogVmFsdWUsIG1hcDogSnNvbk1hcCk6IEpzb25NYXA7XG59XG5cbi8qKlxuICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkmZsb2F05YCk44Go44GX44Gm5omx44GGXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uRmxvYXQgZXh0ZW5kcyBWYWx1ZSB7XG4gIC8qKlxuICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIGNvbnN0cnVjdG9yKHY6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl92YWx1ZSA9IHY7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzmlbDlgKTlnovjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNGbG9hdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLmloflrZfliJfjgafov5TjgZkoY3NtU3RyaW5n5Z6LKVxuICAgKi9cbiAgcHVibGljIGdldFN0cmluZyhkZWZhdWx0VmFsdWU6IHN0cmluZywgaW5kZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHN0cmJ1ZiA9ICdcXDAnO1xuICAgIHRoaXMuX3ZhbHVlID0gcGFyc2VGbG9hdChzdHJidWYpO1xuICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHN0cmJ1ZjtcblxuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS5pWw5YCk5Z6L44Gn6L+U44GZKG51bWJlcilcbiAgICovXG4gIHB1YmxpYyB0b0ludChkZWZhdWx0VmFsdWUgPSAwKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5fdmFsdWUudG9TdHJpbmcoKSk7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS5pWw5YCk5Z6L44Gn6L+U44GZKG51bWJlcilcbiAgICovXG4gIHB1YmxpYyB0b0Zsb2F0KGRlZmF1bHRWYWx1ZSA9IDAuMCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBruWApOOBqOetieOBl+OBkeOCjOOBsHRydWVcbiAgICovXG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGNzbVN0cmluZyk6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IHN0cmluZyk6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IG51bWJlcik6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGJvb2xlYW4pOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgICAgLy8gaW50XG4gICAgICBpZiAoTWF0aC5yb3VuZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gZmxvYXRcbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT0gdGhpcy5fdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgX3ZhbHVlOiBudW1iZXI7IC8vIEpTT07opoHntKDjga7lgKRcbn1cblxuLyoqXG4gKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KS55yf5YG95YCk44Go44GX44Gm5omx44GGXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uQm9vbGVhbiBleHRlbmRzIFZhbHVlIHtcbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM55yf5YG95YCk44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzQm9vbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpLnnJ/lgb3lgKTjgafov5TjgZkoYm9vbGVhbilcbiAgICovXG4gIHB1YmxpYyB0b0Jvb2xlYW4oZGVmYXVsdFZhbHVlID0gZmFsc2UpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYm9vbFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgdGhpcy5fc3RyaW5nQnVmZmVyID0gdGhpcy5fYm9vbFZhbHVlID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw44Gu5YCk44Go562J44GX44GR44KM44GwdHJ1ZVxuICAgKi9cbiAgcHVibGljIGVxdWFscyh2YWx1ZTogY3NtU3RyaW5nKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogYm9vbGVhbik6IGJvb2xlYW47XG4gIHB1YmxpYyBlcXVhbHModmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmICgnYm9vbGVhbicgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IHRoaXMuX2Jvb2xWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu5YCk44GM6Z2Z55qE44Gq44KJdHJ1ZSwg6Z2Z55qE44Gq44KJ6Kej5pS+44GX44Gq44GEXG4gICAqL1xuICBwdWJsaWMgaXNTdGF0aWMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IodjogYm9vbGVhbikge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9ib29sVmFsdWUgPSB2O1xuICB9XG5cbiAgc3RhdGljIHRydWVWYWx1ZTogSnNvbkJvb2xlYW47IC8vIHRydWVcbiAgc3RhdGljIGZhbHNlVmFsdWU6IEpzb25Cb29sZWFuOyAvLyBmYWxzZVxuXG4gIHByaXZhdGUgX2Jvb2xWYWx1ZTogYm9vbGVhbjsgLy8gSlNPTuimgee0oOOBruWApFxufVxuXG4vKipcbiAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpLmloflrZfliJfjgajjgZfjgabmibHjgYZcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25TdHJpbmcgZXh0ZW5kcyBWYWx1ZSB7XG4gIC8qKlxuICAgKiDlvJXmlbDku5jjgY3jgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBzdHJpbmcpO1xuICBwdWJsaWMgY29uc3RydWN0b3IoczogY3NtU3RyaW5nKTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHM6IGFueSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBzKSB7XG4gICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzO1xuICAgIH1cblxuICAgIGlmIChzIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XG4gICAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzLnM7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu56iu6aGe44GM5paH5a2X5YiX44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzU3RyaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjga7lgKTjgajnrYnjgZfjgZHjgozjgbB0cnVlXG4gICAqL1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBjc21TdHJpbmcpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBzdHJpbmcpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xuICBwdWJsaWMgZXF1YWxzKHZhbHVlOiBib29sZWFuKTogYm9vbGVhbjtcbiAgcHVibGljIGVxdWFscyh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXIgPT0gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RyaW5nQnVmZmVyID09IHZhbHVlLnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogSlNPTuODkeODvOOCueaZguOBruOCqOODqeODvOe1kOaenOOAguaWh+Wtl+WIl+Wei+OBruOCiOOBhuOBq+OBteOCi+OBvuOBhlxuICovXG5leHBvcnQgY2xhc3MgSnNvbkVycm9yIGV4dGVuZHMgSnNvblN0cmluZyB7XG4gIC8qKlxuICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWXjgIHpnZnnmoTjgarjgonop6PmlL7jgZfjgarjgYRcbiAgICovXG4gIHB1YmxpYyBpc1N0YXRpYygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNTdGF0aWM7XG4gIH1cblxuICAvKipcbiAgICog44Ko44Op44O85oOF5aCx44KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKHM6IHN0cmluZyk6IFZhbHVlIHtcbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHM6IGNzbVN0cmluZyB8IHN0cmluZywgaXNTdGF0aWM6IGJvb2xlYW4pIHtcbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBzKSB7XG4gICAgICBzdXBlcihzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIocyk7XG4gICAgfVxuICAgIHRoaXMuX2lzU3RhdGljID0gaXNTdGF0aWM7XG4gIH1cblxuICAvKipcbiAgICogVmFsdWXjga7nqK7poZ7jgYzjgqjjg6njg7zlgKTjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNFcnJvcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfaXNTdGF0aWM6IGJvb2xlYW47IC8vIOmdmeeahOOBqlZhbHVl44GL44Gp44GG44GLXG59XG5cbi8qKlxuICog44OR44O844K544GX44GfSlNPTuOBruimgee0oOOCkk5VTEzlgKTjgajjgZfjgabmjIHjgaRcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25OdWxsdmFsdWUgZXh0ZW5kcyBWYWx1ZSB7XG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjE5VTEzlgKTjgarjgol0cnVlXG4gICAqL1xuICBwdWJsaWMgaXNOdWxsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBruWApOOBjOmdmeeahOOBquOCiXRydWUsIOmdmeeahOOBquOCieino+aUvuOBl+OBquOBhFxuICAgKi9cbiAgcHVibGljIGlzU3RhdGljKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gr44Ko44Op44O85YCk44KS44K744OD44OI44GZ44KLXG4gICAqL1xuICBwdWJsaWMgc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKHM6IHN0cmluZyk6IFZhbHVlIHtcbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSBzO1xuICAgIHJldHVybiBKc29uRXJyb3IubnVsbFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgPSAnTnVsbFZhbHVlJztcbiAgfVxufVxuXG4vKipcbiAqIOODkeODvOOCueOBl+OBn0pTT07jga7opoHntKDjgpLphY3liJfjgajjgZfjgabmjIHjgaRcbiAqL1xuZXhwb3J0IGNsYXNzIEpzb25BcnJheSBleHRlbmRzIFZhbHVlIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fYXJyYXkgPSBuZXcgY3NtVmVjdG9yPFZhbHVlPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGNzbVZlY3Rvcl9pdGVyYXRvcjxWYWx1ZT4gPSB0aGlzLl9hcnJheS5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX2FycmF5LmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgbGV0IHY6IFZhbHVlID0gaXRlLnB0cigpO1xuXG4gICAgICBpZiAodiAmJiAhdi5pc1N0YXRpYygpKSB7XG4gICAgICAgIHYgPSB2b2lkIDA7XG4gICAgICAgIHYgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBWYWx1ZeOBrueorumhnuOBjOmFjeWIl+OBquOCiXRydWVcbiAgICovXG4gIHB1YmxpYyBpc0FycmF5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtpbmRleF1cbiAgICovXG4gIHB1YmxpYyBnZXRWYWx1ZUJ5SW5kZXgoaW5kZXg6IG51bWJlcik6IFZhbHVlIHtcbiAgICBpZiAoaW5kZXggPCAwIHx8IHRoaXMuX2FycmF5LmdldFNpemUoKSA8PSBpbmRleCkge1xuICAgICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgICBDU01fSlNPTl9FUlJPUl9JTkRFWF9PRl9CT1VORFNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgdjogVmFsdWUgPSB0aGlzLl9hcnJheS5hdChpbmRleCk7XG5cbiAgICBpZiAodiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2O1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtzdHJpbmcgfCBjc21TdHJpbmddXG4gICAqL1xuICBwdWJsaWMgZ2V0VmFsdWVCeVN0cmluZyhzOiBzdHJpbmcgfCBjc21TdHJpbmcpOiBWYWx1ZSB7XG4gICAgcmV0dXJuIFZhbHVlLmVycm9yVmFsdWUuc2V0RXJyb3JOb3RGb3JDbGllbnRDYWxsKFxuICAgICAgQ1NNX0pTT05fRVJST1JfVFlQRV9NSVNNQVRDSFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog6KaB57Sg44KS5paH5a2X5YiX44Gn6L+U44GZKGNzbVN0cmluZ+WeiylcbiAgICovXG4gIHB1YmxpYyBnZXRTdHJpbmcoZGVmYXVsdFZhbHVlOiBzdHJpbmcsIGluZGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBzdHJpbmdCdWZmZXI6IHN0cmluZyA9IGluZGVudCArICdbXFxuJztcblxuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBjc21WZWN0b3JfaXRlcmF0b3I8VmFsdWU+ID0gdGhpcy5fYXJyYXkuYmVnaW4oKTtcbiAgICAgIGl0ZS5ub3RFcXVhbCh0aGlzLl9hcnJheS5lbmQoKSk7XG4gICAgICBpdGUuaW5jcmVtZW50KClcbiAgICApIHtcbiAgICAgIGNvbnN0IHY6IFZhbHVlID0gaXRlLnB0cigpO1xuICAgICAgdGhpcy5fc3RyaW5nQnVmZmVyICs9IGluZGVudCArICcnICsgdi5nZXRTdHJpbmcoaW5kZW50ICsgJyAnKSArICdcXG4nO1xuICAgIH1cblxuICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IHN0cmluZ0J1ZmZlciArIGluZGVudCArICddXFxuJztcblxuICAgIHJldHVybiB0aGlzLl9zdHJpbmdCdWZmZXI7XG4gIH1cblxuICAvKipcbiAgICog6YWN5YiX6KaB57Sg44KS6L+95Yqg44GZ44KLXG4gICAqIEBwYXJhbSB2IOi/veWKoOOBmeOCi+imgee0oFxuICAgKi9cbiAgcHVibGljIGFkZCh2OiBWYWx1ZSk6IHZvaWQge1xuICAgIHRoaXMuX2FycmF5LnB1c2hCYWNrKHYpO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuOCs+ODs+ODhuODiuOBp+i/lOOBmShjc21WZWN0b3I8VmFsdWU+KVxuICAgKi9cbiAgcHVibGljIGdldFZlY3RvcihkZWZhdWx0VmFsdWU6IGNzbVZlY3RvcjxWYWx1ZT4gPSBudWxsKTogY3NtVmVjdG9yPFZhbHVlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2FycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOBruaVsOOCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGdldFNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXkuZ2V0U2l6ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfYXJyYXk6IGNzbVZlY3RvcjxWYWx1ZT47IC8vIEpTT07opoHntKDjga7lgKRcbn1cblxuLyoqXG4gKiDjg5Hjg7zjgrnjgZfjgZ9KU09O44Gu6KaB57Sg44KS44Oe44OD44OX44Go44GX44Gm5oyB44GkXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uTWFwIGV4dGVuZHMgVmFsdWUge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9tYXAgPSBuZXcgY3NtTWFwPHN0cmluZywgVmFsdWU+KCk7XG4gIH1cblxuICAvKipcbiAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXG4gICAqL1xuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICBjb25zdCBpdGU6IGNzbU1hcF9pdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX21hcC5iZWdpbigpO1xuXG4gICAgd2hpbGUgKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKSB7XG4gICAgICBsZXQgdjogVmFsdWUgPSBpdGUucHRyKCkuc2Vjb25kO1xuXG4gICAgICBpZiAodiAmJiAhdi5pc1N0YXRpYygpKSB7XG4gICAgICAgIHYgPSB2b2lkIDA7XG4gICAgICAgIHYgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpdGUucHJlSW5jcmVtZW50KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZhbHVl44Gu5YCk44GMTWFw5Z6L44Gq44KJdHJ1ZVxuICAgKi9cbiAgcHVibGljIGlzTWFwKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+Wtl+a8lOeul+WtkFtzdHJpbmcgfCBjc21TdHJpbmddXG4gICAqL1xuICBwdWJsaWMgZ2V0VmFsdWVCeVN0cmluZyhzOiBzdHJpbmcgfCBjc21TdHJpbmcpOiBWYWx1ZSB7XG4gICAgaWYgKHMgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcbiAgICAgIGNvbnN0IHJldDogVmFsdWUgPSB0aGlzLl9tYXAuZ2V0VmFsdWUocy5zKTtcbiAgICAgIGlmIChyZXQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gVmFsdWUubnVsbFZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGl0ZXI6IGNzbU1hcF9pdGVyYXRvcjxzdHJpbmcsIFZhbHVlPiA9IHRoaXMuX21hcC5iZWdpbigpO1xuICAgICAgaXRlci5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpO1xuICAgICAgaXRlci5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgaWYgKGl0ZXIucHRyKCkuZmlyc3QgPT0gcykge1xuICAgICAgICBpZiAoaXRlci5wdHIoKS5zZWNvbmQgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBWYWx1ZS5udWxsVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZXIucHRyKCkuc2Vjb25kO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBWYWx1ZS5udWxsVmFsdWU7XG4gIH1cblxuICAvKipcbiAgICog5re75a2X5ryU566X5a2QW2luZGV4XVxuICAgKi9cbiAgcHVibGljIGdldFZhbHVlQnlJbmRleChpbmRleDogbnVtYmVyKTogVmFsdWUge1xuICAgIHJldHVybiBWYWx1ZS5lcnJvclZhbHVlLnNldEVycm9yTm90Rm9yQ2xpZW50Q2FsbChcbiAgICAgIENTTV9KU09OX0VSUk9SX1RZUEVfTUlTTUFUQ0hcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOimgee0oOOCkuaWh+Wtl+WIl+OBp+i/lOOBmShjc21TdHJpbmflnospXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RyaW5nKGRlZmF1bHRWYWx1ZTogc3RyaW5nLCBpbmRlbnQ6IHN0cmluZykge1xuICAgIHRoaXMuX3N0cmluZ0J1ZmZlciA9IGluZGVudCArICd7XFxuJztcblxuICAgIGNvbnN0IGl0ZTogY3NtTWFwX2l0ZXJhdG9yPHN0cmluZywgVmFsdWU+ID0gdGhpcy5fbWFwLmJlZ2luKCk7XG4gICAgd2hpbGUgKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKSB7XG4gICAgICBjb25zdCBrZXkgPSBpdGUucHRyKCkuZmlyc3Q7XG4gICAgICBjb25zdCB2OiBWYWx1ZSA9IGl0ZS5wdHIoKS5zZWNvbmQ7XG5cbiAgICAgIHRoaXMuX3N0cmluZ0J1ZmZlciArPVxuICAgICAgICBpbmRlbnQgKyAnICcgKyBrZXkgKyAnIDogJyArIHYuZ2V0U3RyaW5nKGluZGVudCArICcgICAnKSArICcgXFxuJztcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdHJpbmdCdWZmZXIgKz0gaW5kZW50ICsgJ31cXG4nO1xuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZ0J1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDopoHntKDjgpJNYXDlnovjgafov5TjgZlcbiAgICovXG4gIHB1YmxpYyBnZXRNYXAoZGVmYXVsdFZhbHVlPzogY3NtTWFwPHN0cmluZywgVmFsdWU+KTogY3NtTWFwPHN0cmluZywgVmFsdWU+IHtcbiAgICByZXR1cm4gdGhpcy5fbWFwO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcOOBq+imgee0oOOCkui/veWKoOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHB1dChrZXk6IHN0cmluZywgdjogVmFsdWUpOiB2b2lkIHtcbiAgICB0aGlzLl9tYXAuc2V0VmFsdWUoa2V5LCB2KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXDjgYvjgonjgq3jg7zjga7jg6rjgrnjg4jjgpLlj5blvpfjgZnjgotcbiAgICovXG4gIHB1YmxpYyBnZXRLZXlzKCk6IGNzbVZlY3RvcjxzdHJpbmc+IHtcbiAgICBpZiAoIXRoaXMuX2tleXMpIHtcbiAgICAgIHRoaXMuX2tleXMgPSBuZXcgY3NtVmVjdG9yPHN0cmluZz4oKTtcblxuICAgICAgY29uc3QgaXRlOiBjc21NYXBfaXRlcmF0b3I8c3RyaW5nLCBWYWx1ZT4gPSB0aGlzLl9tYXAuYmVnaW4oKTtcblxuICAgICAgd2hpbGUgKGl0ZS5ub3RFcXVhbCh0aGlzLl9tYXAuZW5kKCkpKSB7XG4gICAgICAgIGNvbnN0IGtleTogc3RyaW5nID0gaXRlLnB0cigpLmZpcnN0O1xuICAgICAgICB0aGlzLl9rZXlzLnB1c2hCYWNrKGtleSk7XG4gICAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2tleXM7XG4gIH1cblxuICAvKipcbiAgICogTWFw44Gu6KaB57Sg5pWw44KS5Y+W5b6X44GZ44KLXG4gICAqL1xuICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9rZXlzLmdldFNpemUoKTtcbiAgfVxuXG4gIHByaXZhdGUgX21hcDogY3NtTWFwPHN0cmluZywgVmFsdWU+OyAvLyBKU09O6KaB57Sg44Gu5YCkXG4gIHByaXZhdGUgX2tleXM6IGNzbVZlY3RvcjxzdHJpbmc+OyAvLyBKU09O6KaB57Sg44Gu5YCkXG59XG5cbi8vIE5hbWVzcGFjZSBkZWZpbml0aW9uIGZvciBjb21wYXRpYmlsaXR5LlxuaW1wb3J0ICogYXMgJCBmcm9tICcuL2N1YmlzbWpzb24nO1xuaW1wb3J0IHsgQ3ViaXNtSnNvbkV4dGVuc2lvbiB9IGZyb20gJy4vY3ViaXNtanNvbmV4dGVuc2lvbic7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xuICBleHBvcnQgY29uc3QgQ3ViaXNtSnNvbiA9ICQuQ3ViaXNtSnNvbjtcbiAgZXhwb3J0IHR5cGUgQ3ViaXNtSnNvbiA9ICQuQ3ViaXNtSnNvbjtcbiAgZXhwb3J0IGNvbnN0IEpzb25BcnJheSA9ICQuSnNvbkFycmF5O1xuICBleHBvcnQgdHlwZSBKc29uQXJyYXkgPSAkLkpzb25BcnJheTtcbiAgZXhwb3J0IGNvbnN0IEpzb25Cb29sZWFuID0gJC5Kc29uQm9vbGVhbjtcbiAgZXhwb3J0IHR5cGUgSnNvbkJvb2xlYW4gPSAkLkpzb25Cb29sZWFuO1xuICBleHBvcnQgY29uc3QgSnNvbkVycm9yID0gJC5Kc29uRXJyb3I7XG4gIGV4cG9ydCB0eXBlIEpzb25FcnJvciA9ICQuSnNvbkVycm9yO1xuICBleHBvcnQgY29uc3QgSnNvbkZsb2F0ID0gJC5Kc29uRmxvYXQ7XG4gIGV4cG9ydCB0eXBlIEpzb25GbG9hdCA9ICQuSnNvbkZsb2F0O1xuICBleHBvcnQgY29uc3QgSnNvbk1hcCA9ICQuSnNvbk1hcDtcbiAgZXhwb3J0IHR5cGUgSnNvbk1hcCA9ICQuSnNvbk1hcDtcbiAgZXhwb3J0IGNvbnN0IEpzb25OdWxsdmFsdWUgPSAkLkpzb25OdWxsdmFsdWU7XG4gIGV4cG9ydCB0eXBlIEpzb25OdWxsdmFsdWUgPSAkLkpzb25OdWxsdmFsdWU7XG4gIGV4cG9ydCBjb25zdCBKc29uU3RyaW5nID0gJC5Kc29uU3RyaW5nO1xuICBleHBvcnQgdHlwZSBKc29uU3RyaW5nID0gJC5Kc29uU3RyaW5nO1xuICBleHBvcnQgY29uc3QgVmFsdWUgPSAkLlZhbHVlO1xuICBleHBvcnQgdHlwZSBWYWx1ZSA9ICQuVmFsdWU7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQge1xuICBKc29uQXJyYXksXG4gIEpzb25Cb29sZWFuLFxuICBKc29uRmxvYXQsXG4gIEpzb25NYXAsXG4gIEpzb25OdWxsdmFsdWUsXG4gIEpzb25TdHJpbmcsXG4gIFZhbHVlLFxufSBmcm9tICcuL2N1YmlzbWpzb24nO1xuXG4vKipcbiAqIEN1YmlzbUpzb27jgaflrp/oo4XjgZXjgozjgabjgYTjgotKc29u44OR44O844K144KS5L2/55So44Gb44Ga44CBXG4gKiBUeXBlU2NyaXB05qiZ5rqW44GuSnNvbuODkeODvOOCteOBquOBqeOCkuS9v+eUqOOBl+WHuuWKm+OBleOCjOOBn+e1kOaenOOCklxuICogQ3ViaXNtIFNES+OBp+Wumue+qeOBleOCjOOBpuOBhOOCi0pTT07jgqjjg6zjg6Hjg7Pjg4jjga7opoHntKDjgatcbiAqIOe9ruOBjeaPm+OBiOOCi+WHpueQhuOCkuOBmeOCi+OCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgQ3ViaXNtSnNvbkV4dGVuc2lvbiB7XG4gIHN0YXRpYyBwYXJzZUpzb25PYmplY3Qob2JqOiBWYWx1ZSwgbWFwOiBKc29uTWFwKSB7XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIGNvbnN0IGNvbnZWYWx1ZSA9IEJvb2xlYW4ob2JqW2tleV0pO1xuICAgICAgICBtYXAucHV0KGtleSwgbmV3IEpzb25Cb29sZWFuKGNvbnZWYWx1ZSkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqW2tleV0gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgY29udlZhbHVlID0gU3RyaW5nKG9ialtrZXldKTtcbiAgICAgICAgbWFwLnB1dChrZXksIG5ldyBKc29uU3RyaW5nKGNvbnZWYWx1ZSkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqW2tleV0gPT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uc3QgY29udlZhbHVlID0gTnVtYmVyKG9ialtrZXldKTtcbiAgICAgICAgbWFwLnB1dChrZXksIG5ldyBKc29uRmxvYXQoY29udlZhbHVlKSk7XG4gICAgICB9IGVsc2UgaWYgKG9ialtrZXldIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgbWFwLnB1dChrZXksIEN1YmlzbUpzb25FeHRlbnNpb24ucGFyc2VKc29uQXJyYXkob2JqW2tleV0pKTtcbiAgICAgIH0gZWxzZSBpZiAob2JqW2tleV0gaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgbWFwLnB1dChcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgQ3ViaXNtSnNvbkV4dGVuc2lvbi5wYXJzZUpzb25PYmplY3Qob2JqW2tleV0sIG5ldyBKc29uTWFwKCkpXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKG9ialtrZXldID09IG51bGwpIHtcbiAgICAgICAgbWFwLnB1dChrZXksIG5ldyBKc29uTnVsbHZhbHVlKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g44Gp44KM44Gr44KC5b2T44Gm44Gv44G+44KJ44Gq44GE5aC05ZCI44Gn44KC5Yem55CG44GZ44KLXG4gICAgICAgIG1hcC5wdXQoa2V5LCBvYmpba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcDtcbiAgfVxuXG4gIHByb3RlY3RlZCBzdGF0aWMgcGFyc2VKc29uQXJyYXkob2JqOiBWYWx1ZSkge1xuICAgIGNvbnN0IGFyciA9IG5ldyBKc29uQXJyYXkoKTtcbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgY29uc3QgY29udktleSA9IE51bWJlcihrZXkpO1xuICAgICAgaWYgKHR5cGVvZiBjb252S2V5ID09ICdudW1iZXInKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgY29uc3QgY29udlZhbHVlID0gQm9vbGVhbihvYmpba2V5XSk7XG4gICAgICAgICAgYXJyLmFkZChuZXcgSnNvbkJvb2xlYW4oY29udlZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9ialtrZXldID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY29uc3QgY29udlZhbHVlID0gU3RyaW5nKG9ialtrZXldKTtcbiAgICAgICAgICBhcnIuYWRkKG5ldyBKc29uU3RyaW5nKGNvbnZWYWx1ZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmpba2V5XSA9PSAnbnVtYmVyJykge1xuICAgICAgICAgIGNvbnN0IGNvbnZWYWx1ZSA9IE51bWJlcihvYmpba2V5XSk7XG4gICAgICAgICAgYXJyLmFkZChuZXcgSnNvbkZsb2F0KGNvbnZWYWx1ZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKG9ialtrZXldIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICBhcnIuYWRkKHRoaXMucGFyc2VKc29uQXJyYXkob2JqW2tleV0pKTtcbiAgICAgICAgfSBlbHNlIGlmIChvYmpba2V5XSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgIGFyci5hZGQodGhpcy5wYXJzZUpzb25PYmplY3Qob2JqW2tleV0sIG5ldyBKc29uTWFwKCkpKTtcbiAgICAgICAgfSBlbHNlIGlmIChvYmpba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgYXJyLmFkZChuZXcgSnNvbk51bGx2YWx1ZSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyDjganjgozjgavjgoLlvZPjgabjga/jgb7jgonjgarjgYTloLTlkIjjgafjgoLlh6bnkIbjgZnjgotcbiAgICAgICAgICBhcnIuYWRkKG9ialtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvYmpba2V5XSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGFyci5hZGQodGhpcy5wYXJzZUpzb25BcnJheShvYmpba2V5XSkpO1xuICAgICAgfSBlbHNlIGlmIChvYmpba2V5XSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBhcnIuYWRkKHRoaXMucGFyc2VKc29uT2JqZWN0KG9ialtrZXldLCBuZXcgSnNvbk1hcCgpKSk7XG4gICAgICB9IGVsc2UgaWYgKG9ialtrZXldID09IG51bGwpIHtcbiAgICAgICAgYXJyLmFkZChuZXcgSnNvbk51bGx2YWx1ZSgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNvbnZWYWx1ZSA9IEFycmF5KG9ialtrZXldKTtcbiAgICAgICAgLy8g6YWN5YiX44Go44KCT2JqZWN044Go44KC5Yik5a6a44Gn44GN44Gq44GL44Gj44Gf5aC05ZCI44Gn44KC5Yem55CG44GZ44KLXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udlZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJyLmFkZChjb252VmFsdWVbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGFycjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVHRzUXVlc3RWM1ZvaWNldm94IH0gZnJvbSAnLi9UdHNRdWVzdFYzVm9pY2V2b3guanMnO1xyXG5pbXBvcnQgeyBMQXBwTGl2ZTJETWFuYWdlciB9IGZyb20gJy4vc3JjL2xhcHBsaXZlMmRtYW5hZ2VyJztcclxuaW1wb3J0IHsgdm9pY2VWb3gsIGNoYW5nZUxheW91dCwgZGlzcGxheVBvcHVwIH0gZnJvbSAnLi9HdWlPcGVyYXRvcic7XHJcblxyXG4vLyDku6XkuIvjga7jgrPjg7zjg4njgpLlhaXjgozjgovjgajlvqrnkrDlj4LnhafjgavjgarjgovjgZ/jgoHlhbHmnInjg6Ljgrjjg6Xjg7zjg6vjgpLkvZzmiJBcclxuLy8gaW1wb3J0IHsgc3BlZWNoIH0gZnJvbSAnLi9zcGVlY2hSZWNvZ25pdGlvbic7XHJcbmltcG9ydCB7IHNwZWVjaCB9IGZyb20gJy4vc2hhcmVkJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDYXJ0IHtcclxuICAgIC8vIGNvbnN0cnVjdG9yKHByaXZhdGUgc3BlZWNoSW5zdGFuY2U6IGFueSkge307XHJcbiAgICBwdWJsaWMgX2l0ZW1zOiB7IGNhdGVnb3J5X2lkOiBudW1iZXIsIGRlc2NyaXB0aW9uOiBzdHJpbmcsIGRpc2hfaWQ6IG51bWJlciwgZGlzaF9uYW1lOiBzdHJpbmcsIGltYWdlOiBzdHJpbmcsIHByaWNlOiBudW1iZXIsIHRhZ3M6IHN0cmluZywgdXNlcl9pZDogbnVtYmVyIH1bXSA9IFtdO1xyXG5cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgYWRkVG9DYXJ0KGl0ZW06IHN0cmluZykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDjgqLjgqTjg4bjg6DjgYzjgqvjg7zjg4jjgavov73liqDjgZXjgozjgb7jgZfjgZ/jgILnj77lnKjjga7jgqvjg7zjg4jjga7jgqLjgqTjg4bjg6DmlbDjga8gJHt0aGlzLl9pdGVtcy5sZW5ndGh9IOOBp+OBmeOAgmApO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ2FydEJhZGdlKCk7IC8vIOOCq+ODvOODiOOBrumAmuefpeODkOODg+OCuOOCkuabtOaWsFxyXG4gICAgICAgIGNvbnN0IHRleHQxID0gaXRlbSArIFwi44KS44Kr44O844OI44Gr6L+95Yqg44GX44G+44GZXCI7XHJcbiAgICAgICAgc3BlZWNoLnN0b3AoKTsgLy8gdm9pY2VWb3gg6Zai5pWw44GM6ZaL5aeL44GZ44KL5YmN44Gr6Z+z5aOw6KqN6K2Y44KS5YGc5q2iXHJcbiAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nID0gdHJ1ZTsgLy8gdm9pY2VWb3gg6Zai5pWw44GM5a6f6KGM5Lit44GL44Gp44GG44GL44KS56S644GZ44OV44Op44KwXHJcbiAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPRkbjgavjgZfjgb7jgZlcIik7XHJcbiAgICAgICAgLy8gdm9pY2VWb3gg6Zai5pWw44GM5a6M5LqG44GZ44KL44Gu44KS5b6F44GkXHJcbiAgICAgICAgYXdhaXQgdm9pY2VWb3godGV4dDEpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrozkuobjgZfjgZ/lvozjgavpn7Plo7Doqo3orZjjgpLlho3plotcclxuICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nID0gZmFsc2U7IC8vIHZvaWNlVm94IOmWouaVsOOBjOWun+ihjOS4reOBi+OBqeOBhuOBi+OCkuekuuOBmeODleODqeOCsFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIumfs+WjsOiqjeitmOOCkk9O44Gr44GX44G+44GZXCIpO1xyXG4gICAgICAgICAgICBzcGVlY2guc3RhcnQoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgdGV4dDIgPSBcIuS7luOBq+S9leOBi+OBlOazqOaWh+OBr+OBguOCiuOBvuOBmeOBi1wiO1xyXG4gICAgICAgIHNwZWVjaC5zdG9wKCk7IC8vIHZvaWNlVm94IOmWouaVsOOBjOmWi+Wni+OBmeOCi+WJjeOBq+mfs+WjsOiqjeitmOOCkuWBnOatolxyXG4gICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1ZvaWNlVm94UnVubmluZyA9IHRydWU7IC8vIHZvaWNlVm94IOmWouaVsOOBjOWun+ihjOS4reOBi+OBqeOBhuOBi+OCkuekuuOBmeODleODqeOCsFxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi6Z+z5aOw6KqN6K2Y44KST0ZG44Gr44GX44G+44GZXCIpO1xyXG4gICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOWujOS6huOBmeOCi+OBruOCkuW+heOBpFxyXG4gICAgICAgIGF3YWl0IHZvaWNlVm94KHRleHQyKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgLy8gdm9pY2VWb3gg6Zai5pWw44GM5a6M5LqG44GX44Gf5b6M44Gr6Z+z5aOw6KqN6K2Y44KS5YaN6ZaLXHJcbiAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1ZvaWNlVm94UnVubmluZyA9IGZhbHNlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPTuOBq+OBl+OBvuOBmVwiKTtcclxuICAgICAgICAgICAgc3BlZWNoLnN0YXJ0KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIOOCq+ODvOODiOOBrumAmuefpeODkOODg+OCuOOCkuabtOaWsOOBmeOCi+mWouaVsFxyXG4gICAgcHVibGljIHVwZGF0ZUNhcnRCYWRnZSgpIHtcclxuICAgICAgICBjb25zdCBjYXJ0QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYXJ0QnV0dG9uXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIGlmIChjYXJ0QnV0dG9uKSB7XHJcbiAgICAgICAgICAgIC8vIOmAmuefpeODkOODg+OCuOOBruWApOOCkuabtOaWsFxyXG4gICAgICAgICAgICBjYXJ0QnV0dG9uLmRhdGFzZXQubnVtID0gdGhpcy5faXRlbXMubGVuZ3RoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuX2l0ZW1zLmxlbmd0aC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgY2FydEJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInNsYXRlZ3JheVwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xlYXJDYXJ0KCkge1xyXG4gICAgICAgIC8vIOmAmuefpeODkOODg+OCuOOCkuWJiumZpFxyXG4gICAgICAgIGNvbnN0IGNhcnRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhcnRCdXR0b25cIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKGNhcnRCdXR0b24pIHtcclxuICAgICAgICAgICAgLy8g6YCa55+l44OQ44OD44K444Gu5YCk44KS5pu05pawXHJcbiAgICAgICAgICAgIGNhcnRCdXR0b24uZGF0YXNldC5udW0gPSBcIjBcIjtcclxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5faXRlbXMubGVuZ3RoLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICBjYXJ0QnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwibGlnaHRibHVlXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDjgqvjg7zjg4jjga7kuK3ouqvjgpLliYrpmaTjgZnjgotcclxuICAgICAgICB0aGlzLl9pdGVtcyA9IFtdO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ2FydEJhZGdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44Kr44O844OI44Gu5Lit6Lqr44KS6KGo56S644GZ44KL6Zai5pWwXHJcbiAgICBwdWJsaWMgZGlzcGxheUNhcnRDb250ZW50cygpIHtcclxuICAgICAgICBjb25zdCBjYXJ0UG9wdXBDb250YWluZXI6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FydFBvcHVwLUNvbnRhaW5lclwiKTtcclxuICAgICAgICBjb25zdCBjYXJ0TGlzdDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYXJ0TGlzdFwiKTtcclxuICAgICAgICBpZiAoY2FydFBvcHVwQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZsYWcgPSBcImNhcnRcIjtcclxuICAgICAgICAgICAgLy8g44Kr44O844OI44Gu5YaF5a6544KS44OG44Kt44K544OI44Go44GX44Gm6KGo56S6XHJcbiAgICAgICAgICAgIGxldCBjYXJ0Q29udGVudHMgPSAnJztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY2FydENvbnRlbnRzICs9IGA8cD4ke3RoaXMuX2l0ZW1zW2ldLmRpc2hfbmFtZX08L3A+YDtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNhcnRDb250ZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FydExpc3QuaW5uZXJIVE1MID0gY2FydENvbnRlbnRzO1xyXG4gICAgICAgICAgICAvLyBjYXJ0UG9wdXBDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgY2hhbmdlTGF5b3V0KGZsYWcpO1xyXG4gICAgICAgICAgICBkaXNwbGF5UG9wdXAoZmxhZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBmZXRjaGhpc3RvcnkoKSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2dldC1oaXN0b3J5Jyk7XHJcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG9yZGVyID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIHJldHVybiBvcmRlcjtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFR0c1F1ZXN0VjNWb2ljZXZveCB9IGZyb20gJy4vVHRzUXVlc3RWM1ZvaWNldm94LmpzJztcclxuaW1wb3J0IHsgdm9pY2VWb3gsIGNoYW5nZUxheW91dCwgbW92ZVRvQ2VudGVyLCBzaG93QnViYmxlLCBkaXNwbGF5UG9wdXAsIG1vdmVUZXh0VG9DZW50ZXIsIGNsb3NlUG9wdXAgfSBmcm9tICcuL0d1aU9wZXJhdG9yJztcclxuaW1wb3J0IHsgQ2FydCB9IGZyb20gJy4vQ2FydE9wZXJhdG9yJztcclxuaW1wb3J0IHsgc2VuZE1lc3NhZ2UgfSBmcm9tICcuL2NsaWVudCc7XHJcbmltcG9ydCB7IHNwZWVjaCwgc3BlZWNoTGlzdGVuZXJzLCBzcGVlY2hfUUEsIHNwZWVjaExpc3RlbmVyc19RQSB9IGZyb20gJy4vc2hhcmVkJztcclxuXHJcbmNvbnN0IGNhcnQgPSBuZXcgQ2FydCgpO1xyXG5sZXQgc3RhcnRGbGFnOiBib29sZWFuID0gZmFsc2U7IFxyXG5cclxuZXhwb3J0IGNsYXNzIEZ1bmNFeHRlbnNpb25zIHtcclxuICAgIHB1YmxpYyBhZGRFdmVudCgpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBcIuOBhOOCieOBo+OBl+OCg+OBhOOBvuOBm1wiXHJcbiAgICAgICAgICAgIHNwZWVjaC5zdG9wKCk7IC8vIHZvaWNlVm94IOmWouaVsOOBjOmWi+Wni+OBmeOCi+WJjeOBq+mfs+WjsOiqjeitmOOCkuWBnOatolxyXG4gICAgICAgICAgICAod2luZG93IGFzIGFueSkuaXNWb2ljZVZveFJ1bm5pbmcgPSB0cnVlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPRkbjgavjgZfjgb7jgZlcIik7XHJcbiAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOWujOS6huOBmeOCi+OBruOCkuW+heOBpFxyXG4gICAgICAgICAgICBhd2FpdCB2b2ljZVZveCh0ZXh0KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOWujOS6huOBl+OBn+W+jOOBq+mfs+WjsOiqjeitmOOCkuWGjemWi1xyXG4gICAgICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nID0gZmFsc2U7IC8vIHZvaWNlVm94IOmWouaVsOOBjOWun+ihjOS4reOBi+OBqeOBhuOBi+OCkuekuuOBmeODleODqeOCsFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPTuOBq+OBl+OBvuOBmVwiKTtcclxuICAgICAgICAgICAgICAgIHNwZWVjaC5zdGFydCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8g5rOo5paH6ZaL5aeL44Oc44K/44Oz44KS5oq844GX44Gf5pmCXHJcbiAgICAgICAgY29uc3Qgc3RhcnRPcmRlckJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhcnRPcmRlckJ1dHRvblwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICBzdGFydE9yZGVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy8g44K544K/44O844OI44Oc44K/44Oz44KS5oq844GX44Gf5aC05ZCI44Gr44OV44Op44Kw44GM56uL44Gk44CBXHJcbiAgICAgICAgICAgIC8vIOizquWVj+ODnOOCv+ODs+OCkumWieOBmOOBn+aZguOBq+azqOaWh+mWi+Wni+OCkuOBl+OBquOBhOOCiOOBhuOBq1xyXG4gICAgICAgICAgICBzdGFydEZsYWcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdGV4dCA9IFwi44CM5rOo5paH6ZaL5aeL44CN44Go5aOw44KS5o6b44GR44Gm44GP44Gg44GV44GEXCJcclxuICAgICAgICAgICAgLy8gdm9pY2VWb3gg6Zai5pWw44GM6ZaL5aeL44GZ44KL5YmN44Gr6Z+z5aOw6KqN6K2Y44KS5YGc5q2iXHJcbiAgICAgICAgICAgIHNwZWVjaC5zdG9wKCk7XHJcblxyXG4gICAgICAgICAgICAvLyDjgqvjg7zjg4jjgavov73liqDjg5zjgr/jg7Pjga7opoHntKDjgpLlj5blvpdcclxuICAgICAgICAgICAgY29uc3QgY2FydEFkZEJ1dHRvbjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYXJ0QWRkQnV0dG9uXCIpO1xyXG4gICAgICAgICAgICBjYXJ0QWRkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcblxyXG4gICAgICAgICAgICAvLyDjgYLjgorjgb7jgZvjgpPjg5zjgr/jg7Pjga7opoHntKDjgpLlj5blvpdcclxuICAgICAgICAgICAgY29uc3Qgbm9Nb3JlT3JkZXJCdXR0b246IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibm9Nb3JlT3JkZXJCdXR0b25cIik7XHJcbiAgICAgICAgICAgIG5vTW9yZU9yZGVyQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcblxyXG4gICAgICAgICAgICAvLyDms6jmloflhaXlipvjg4bjgq3jgrnjg4jjgrPjg7Pjg4bjg4rjga7opoHntKDjgpLlj5blvpdcclxuICAgICAgICAgICAgY29uc3QgdGV4dENvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXh0Q29udGFpbmVyXCIpO1xyXG4gICAgICAgICAgICB0ZXh0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcblxyXG4gICAgICAgICAgICAod2luZG93IGFzIGFueSkuaXNWb2ljZVZveFJ1bm5pbmcgPSB0cnVlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPRkbjgavjgZfjgb7jgZlcIik7XHJcbiAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOWujOS6huOBmeOCi+OBruOCkuW+heOBpFxyXG4gICAgICAgICAgICBhd2FpdCB2b2ljZVZveCh0ZXh0KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOWujOS6huOBl+OBn+W+jOOBq+mfs+WjsOiqjeitmOOCkuWGjemWi1xyXG4gICAgICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nID0gZmFsc2U7IC8vIHZvaWNlVm94IOmWouaVsOOBjOWun+ihjOS4reOBi+OBqeOBhuOBi+OCkuekuuOBmeODleODqeOCsFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPTuOBq+OBl+OBvuOBmVwiKTtcclxuICAgICAgICAgICAgICAgIC8vIOmfs+WjsOiqjeitmOmWi+Wni1xyXG4gICAgICAgICAgICAgICAgLy8g44Kk44OZ44Oz44OI44Oq44K544OK44O844GM6Kit5a6a44GV44KM44Gm44GE44KL44Gu44GL56K66KqNXHJcbiAgICAgICAgICAgICAgICBpZiAoc3BlZWNoTGlzdGVuZXJzLnJlc3VsdCAmJiBzcGVlY2hMaXN0ZW5lcnMuZW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3BlZWNoLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+OCpOODmeODs+ODiOODquOCueODiuODvOOBjOOBvuOBoOioreWumuOBleOCjOOBpuOBhOOBvuOBm+OCkycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIOazqOaWh+mWi+Wni+OBjOaKvOOBleOCjOOBn+W+jOOBq1wi44Kr44O844OI44Gr6L+95YqgXCLjg5zjgr/jg7PjgYzlh7rnj77jgZfjgIFcclxuICAgICAgICAvLyDjgZ3jga7jg5zjgr/jg7Pjga7jgYzmirzjgZXjgozjgZ/jgonllYblk4HjgpLjgqvjg7zjg4jjgavov73liqDjgZnjgotcclxuICAgICAgICBjb25zdCBjYXJ0QWRkQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYXJ0QWRkQnV0dG9uXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIGNhcnRBZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdGV4dElucHV0VmFsdWUgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXh0SW5wdXRcIikgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XHJcbiAgICAgICAgICAgIGlmICh0ZXh0SW5wdXRWYWx1ZS50cmltKCkgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIHNwZWVjaC5zZWFyY2hUYWcodGV4dElucHV0VmFsdWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IFwi5ZWG5ZOB5ZCN44KS5YWl5Yqb44GX44Gm44GP44Gg44GV44GEXCJcclxuICAgICAgICAgICAgICAgIHNwZWVjaC5zdG9wKCk7IC8vIHZvaWNlVm94IOmWouaVsOOBjOmWi+Wni+OBmeOCi+WJjeOBq+mfs+WjsOiqjeitmOOCkuWBnOatolxyXG4gICAgICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nID0gdHJ1ZTsgLy8gdm9pY2VWb3gg6Zai5pWw44GM5a6f6KGM5Lit44GL44Gp44GG44GL44KS56S644GZ44OV44Op44KwXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIumfs+WjsOiqjeitmOOCkk9GRuOBq+OBl+OBvuOBmVwiKTtcclxuICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOWujOS6huOBmeOCi+OBruOCkuW+heOBpFxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdm9pY2VWb3godGV4dCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm9pY2VWb3gg6Zai5pWw44GM5a6M5LqG44GX44Gf5b6M44Gr6Z+z5aOw6KqN6K2Y44KS5YaN6ZaLXHJcbiAgICAgICAgICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nID0gZmFsc2U7IC8vIHZvaWNlVm94IOmWouaVsOOBjOWun+ihjOS4reOBi+OBqeOBhuOBi+OCkuekuuOBmeODleODqeOCsFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi6Z+z5aOw6KqN6K2Y44KST07jgavjgZfjgb7jgZlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc3BlZWNoLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy8g5LuW44Gr5ZWG5ZOB44GM44Gq44GE5pmCXHJcbiAgICAgICAgY29uc3Qgbm9Nb3JlT3JkZXJCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5vTW9yZU9yZGVyQnV0dG9uXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIG5vTW9yZU9yZGVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIOazqOaWh+eiuuWumuODnOOCv+ODs+OBruimgee0oOOCkuWPluW+l1xyXG4gICAgICAgICAgICBjb25zdCBvcmRlckJ1dHRvbjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvcmRlckJ1dHRvblwiKTtcclxuICAgICAgICAgICAgb3JkZXJCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgY2FydC5kaXNwbGF5Q2FydENvbnRlbnRzKCk7XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyDjgqvjg7zjg4jjg5zjgr/jg7PjgpLmirzjgZfjgZ/mmYJcclxuICAgICAgICBjb25zdCBjYXJ0QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYXJ0QnV0dG9uXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIGlmIChjYXJ0QnV0dG9uKSB7XHJcbiAgICAgICAgICAgIGNhcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNhcnQuZGlzcGxheUNhcnRDb250ZW50cygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOOCq+ODvOODiOmWieOBmOOCi+ODnOOCv+ODs+OCkuaKvOOBl+OBn+aZglxyXG4gICAgICAgIGNvbnN0IGNhcnRDbG9zZUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FydENsb3NlQnV0dG9uXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIGlmIChjYXJ0Q2xvc2VCdXR0b24pIHtcclxuICAgICAgICAgICAgY2FydENsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBtb3ZlVG9DZW50ZXIoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmj5DmoYjjgpLmirzjgZfjgZ/mmYJcclxuICAgICAgICBjb25zdCBzdWdnZXN0RGlzaEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3VnZ2VzdERpc2hCdXR0b25cIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKHN1Z2dlc3REaXNoQnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHN1Z2dlc3REaXNoQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmbGFnID0gXCJzdWdnZXN0XCI7XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VMYXlvdXQoZmxhZyk7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5UG9wdXAoZmxhZyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g44Od44OD44OX44Ki44OD44OX44KS6ZaJ44GY44KL44Oc44K/44Oz44Gu6KaB57Sg44KS5Y+W5b6XXHJcbiAgICAgICAgY29uc3QgY2xvc2VCdXR0b246IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xvc2VCdXR0b25cIik7XHJcbiAgICAgICAgY29uc3QgYnViYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidWJibGVcIikgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgYnViYmxlVGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnViYmxlVGV4dFwiKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xyXG4gICAgICAgIC8vIOODneODg+ODl+OCouODg+ODl+OCkumWieOBmOOCi+ODnOOCv+ODs+OBjOaKvOOBleOCjOOBn+OBqOOBjeOBruOCpOODmeODs+ODiOODquOCueODiuODvOOCkui/veWKoFxyXG4gICAgICAgIGlmIChjbG9zZUJ1dHRvbikge1xyXG4gICAgICAgICAgICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2xvc2VQb3B1cCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dDogc3RyaW5nID0gXCLpn7Plo7DjgafjgZTms6jmlofjgpLjganjgYbjgZ5cIjtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi6Z+z5aOw6KqN6K2Y6ZaL5aeLXCIpO1xyXG4gICAgICAgICAgICAgICAgYnViYmxlVGV4dC5pbm5lclRleHQgPSB0ZXh0O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOmWi+Wni+OBmeOCi+WJjeOBq+mfs+WjsOiqjeitmOOCkuWBnOatolxyXG4gICAgICAgICAgICAgICAgc3BlZWNoLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1ZvaWNlVm94UnVubmluZyA9IHRydWU7IC8vIHZvaWNlVm94IOmWouaVsOOBjOWun+ihjOS4reOBi+OBqeOBhuOBi+OCkuekuuOBmeODleODqeOCsFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPRkbjgavjgZfjgb7jgZlcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdm9pY2VWb3gg6Zai5pWw44GM5a6M5LqG44GZ44KL44Gu44KS5b6F44GkXHJcbiAgICAgICAgICAgICAgICB2b2ljZVZveCh0ZXh0KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrozkuobjgZfjgZ/lvozjgavpn7Plo7Doqo3orZjjgpLlho3plotcclxuICAgICAgICAgICAgICAgICAgICAod2luZG93IGFzIGFueSkuaXNWb2ljZVZveFJ1bm5pbmcgPSBmYWxzZTsgLy8gdm9pY2VWb3gg6Zai5pWw44GM5a6f6KGM5Lit44GL44Gp44GG44GL44KS56S644GZ44OV44Op44KwXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPTuOBq+OBl+OBvuOBmVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBzcGVlY2guc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYnViYmxlLnN0eWxlLmJvcmRlciA9ICc0cHggc29saWQgIzY0ZTY4MCc7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5rOo5paH56K65a6a44Oc44K/44Oz44KS5oq844GX44Gf44Go44GNXHJcbiAgICAgICAgY29uc3Qgb3JkZXJCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm9yZGVyQnV0dG9uXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIGlmIChvcmRlckJ1dHRvbikge1xyXG4gICAgICAgICAgICBvcmRlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8g5rOo5paH56K65a6a44Gu5Yem55CG44KS44GT44GT44Gr5pu444GPXHJcbiAgICAgICAgICAgICAgICAvLyDkvovjgYjjgbDjgIHjgqvjg7zjg4jjga7lhoXlrrnjgpLjgrXjg7zjg5Djg7zjgavpgIHkv6HjgZnjgovjgarjgalcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5rOo5paH56K65a6aXCIpO1xyXG4gICAgICAgICAgICAgICAgLy8g44Kr44O844OI44Gr6L+95Yqg44Oc44K/44Oz44Gu6KaB57Sg44KS5Y+W5b6XXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYXJ0QWRkQnV0dG9uOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhcnRBZGRCdXR0b25cIik7XHJcbiAgICAgICAgICAgICAgICBjYXJ0QWRkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDjgYLjgorjgb7jgZvjgpPjg5zjgr/jg7Pjga7opoHntKDjgpLlj5blvpdcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5vTW9yZU9yZGVyQnV0dG9uOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5vTW9yZU9yZGVyQnV0dG9uXCIpO1xyXG4gICAgICAgICAgICAgICAgbm9Nb3JlT3JkZXJCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOazqOaWh+WFpeWKm+ODhuOCreOCueODiOOCs+ODs+ODhuODiuOBruimgee0oOOCkuWPluW+l1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dENvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXh0Q29udGFpbmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgdGV4dENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FydC5jbGVhckNhcnQoKTtcclxuICAgICAgICAgICAgICAgIG1vdmVUb0NlbnRlcigpO1xyXG4gICAgICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDos6rllY/vvIjvvJ/vvInjg5zjgr/jg7PjgpLmirzjgZfjgZ/mmYJcclxuICAgICAgICBjb25zdCBxdWVzQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJxdWVzQnV0dG9uXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIGNvbnN0IHF1ZXNQb3B1cENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5xdWVzUG9wdXAtQ29udGFpbmVyJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKHF1ZXNCdXR0b24gJiYgcXVlc1BvcHVwQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHF1ZXNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIHF1ZXNQb3B1cENvbnRhaW5lcuOBruihqOekuueKtuaFi+OCkuWIh+OCiuabv+OBiOOCi1xyXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXNQb3B1cENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID09PSAnZmxleCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWVzUG9wdXBDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgICAgICAgICBxdWVzQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2Nsb3NlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNwZWVjaF9RQS5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nX1FBID0gdHJ1ZTsgLy8gdm9pY2VWb3gg6Zai5pWw44GM5a6f6KGM5Lit44GL44Gp44GG44GL44KS56S644GZ44OV44Op44KwXHJcbiAgICAgICAgICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzTWljQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJRQeeUqOOBrumfs+WjsOiqjeitmOOCkk9GRuOBq+OBl+OBvuOBmVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5rOo5paH6ZaL5aeL44Oc44K/44Oz44KS44GZ44Gn44Gr5oq844GX44Gm44GE44KL5aC05ZCI44CB5YuV44GL44GZ44CCXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoc3RhcnRGbGFnID09PSB0cnVlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dDogc3RyaW5nID0gXCLpn7Plo7DjgafjgZTms6jmlofjgpLjganjgYbjgZ5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjplovlp4tcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZVRleHQuaW5uZXJUZXh0ID0gdGV4dDtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrozkuobjgZnjgovjga7jgpLlvoXjgaRcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdm9pY2VWb3godGV4dCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrozkuobjgZfjgZ/lvozjgavpn7Plo7Doqo3orZjjgpLlho3plotcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1ZvaWNlVm94UnVubmluZyA9IGZhbHNlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi6Z+z5aOw6KqN6K2Y44KST07jgavjgZfjgb7jgZlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVlY2guc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZS5zdHlsZS5ib3JkZXIgPSAnNHB4IHNvbGlkICM2NGU2ODAnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVlc1BvcHVwQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVlc0J1dHRvbi5jbGFzc0xpc3QuYWRkKCdjbG9zZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOmWi+Wni+OBmeOCi+WJjeOBq+mfs+WjsOiqjeitmOOCkuWBnOatolxyXG4gICAgICAgICAgICAgICAgICAgIHNwZWVjaC5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nID0gdHJ1ZTsgLy8gdm9pY2VWb3gg6Zai5pWw44GM5a6f6KGM5Lit44GL44Gp44GG44GL44KS56S644GZ44OV44Op44KwXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g44Oe44Kk44Kv44Gu44OV44Op44KwXHJcbiAgICAgICAgICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzTWljQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPRkbjgavjgZfjgb7jgZlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNoYXRBcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaGF0LWFyZWFcIikgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAvLyBjaGF0QXJlYeOBjOWtmOWcqOOBmeOCi+WgtOWQiOOAgeS4gOeVquS4i+OBvuOBp+OCueOCr+ODreODvOODq+OBmeOCi1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXRBcmVhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhdEFyZWEuc2Nyb2xsVG9wID0gY2hhdEFyZWEuc2Nyb2xsSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImNoYXRBcmVh6KaB57Sg44GM6KaL44Gk44GL44KK44G+44Gb44KTXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOizquWVj+ODnuOCpOOCr+OCkuaKvOOBl+OBn+aZglxyXG4gICAgICAgIGNvbnN0IG1pY0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW1nLW1pY1wiKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBpZiAobWljQnV0dG9uKSB7XHJcbiAgICAgICAgICAgIG1pY0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8g44Oe44Kk44Kv44Gu6KGo56S654q25oWL44KS5YiH44KK5pu/44GI44KLXHJcbiAgICAgICAgICAgICAgICBpZiAoKHdpbmRvdyBhcyBhbnkpLmlzTWljQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWljQnV0dG9uLnN0eWxlLmJvcmRlciA9ICc0cHggc29saWQgIzAwN2JmZic7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm9pY2VWb3gg6Zai5pWw44GM6ZaL5aeL44GZ44KL5YmN44Gr6Z+z5aOw6KqN6K2Y44KS5YGc5q2iXHJcbiAgICAgICAgICAgICAgICAgICAgc3BlZWNoX1FBLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAod2luZG93IGFzIGFueSkuaXNWb2ljZVZveFJ1bm5pbmdfUUEgPSB0cnVlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgICAgICAgICAod2luZG93IGFzIGFueSkuaXNNaWNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlFB55So44Gu6Z+z5aOw6KqN6K2Y44KST0ZG44Gr44GX44G+44GZXCIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtaWNCdXR0b24uc3R5bGUuYm9yZGVyID0gJzRweCBzb2xpZCAjZGMzMzFjJ1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHNwZWVjaF9RQS5zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1ZvaWNlVm94UnVubmluZ19RQSA9IGZhbHNlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgICAgICAgICAod2luZG93IGFzIGFueSkuaXNNaWNBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUUHnlKjjga7pn7Plo7Doqo3orZjjgpJPTuOBq+OBl+OBvuOBmVwiKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOizquWVj+mAgeS/oeODnOOCv+ODs+OCkuaKvOOBl+OBn+OBqOOBjVxyXG4gICAgICAgIGNvbnN0IHF1ZXNTdWJtaXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInF1ZXMtc3VibWl0XCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIGlmIChxdWVzU3VibWl0KSB7XHJcbiAgICAgICAgICAgIHF1ZXNTdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHNlbmRNZXNzYWdlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNoYXRBcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaGF0LWFyZWFcIikgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAvLyBjaGF0QXJlYeOBjOWtmOWcqOOBmeOCi+WgtOWQiOOAgeS4gOeVquS4i+OBvuOBp+OCueOCr+ODreODvOODq+OBmeOCi1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXRBcmVhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhdEFyZWEuc2Nyb2xsVG9wID0gY2hhdEFyZWEuc2Nyb2xsSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImNoYXRBcmVh6KaB57Sg44GM6KaL44Gk44GL44KK44G+44Gb44KTXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBUdHNRdWVzdFYzVm9pY2V2b3ggfSBmcm9tICcuL1R0c1F1ZXN0VjNWb2ljZXZveC5qcyc7XHJcbmltcG9ydCB7IExBcHBMaXZlMkRNYW5hZ2VyIH0gZnJvbSAnLi9zcmMvbGFwcGxpdmUyZG1hbmFnZXInO1xyXG5pbXBvcnQgKiBhcyBMQXBwRGVmaW5lIGZyb20gJy4vc3JjL2xhcHBkZWZpbmUnO1xyXG5pbXBvcnQgeyBzcGVlY2gsIHNwZWVjaExpc3RlbmVycyB9IGZyb20gJy4vc2hhcmVkJztcclxuXHJcbi8vIFZPSUNFVk9YXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmVWb2ljZVZveCh0ZXh0SW5wdXRWYWx1ZTogc3RyaW5nKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIuiqreOBv+i+vOOCk+OBoOWNmOiqnu+8mlwiICsgdGV4dElucHV0VmFsdWUpO1xyXG4gICAgLy8gVk9JQ0VWT1jjga7jgrnjg5Tjg7zjgqvjg7xJROOChEFQSeOCreODvOOBruioreWumlxyXG4gICAgY29uc3Qgc3BlYWtlcklkID0gODsgLy8gVk9JQ0VWT1g644Ga44KT44Gg44KC44KT77yI44GC44G+44GC44G+77yJXHJcbiAgICBjb25zdCB0dHNRdWVzdEFwaUtleSA9ICcnOyAvLyDku7vmhI9cclxuXHJcbiAgICAvLyDjg4bjgq3jgrnjg4jjgajoqK3lrprjgpLnlKjjgYTjgabpn7Plo7DjgpLnlJ/miJBcclxuICAgIGNvbnN0IGF1ZGlvID0gbmV3IFR0c1F1ZXN0VjNWb2ljZXZveChzcGVha2VySWQsIHRleHRJbnB1dFZhbHVlLCB0dHNRdWVzdEFwaUtleSk7XHJcbiAgICBjb25zb2xlLmxvZyhhdWRpbyk7XHJcbn1cclxuXHJcbi8vIFZPSUNFVk9YXHJcbmV4cG9ydCBmdW5jdGlvbiB2b2ljZVZveCh0ZXh0SW5wdXRWYWx1ZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCB0ZXh0ID0gXCLoqq3jgb/ovrzjgb/kuK3jg7vjg7vjg7tcIlxyXG4gICAgY29uc29sZS5sb2codGV4dCk7XHJcbiAgICBzaG93QnViYmxlKHRleHQpO1xyXG4gICAgY29uc29sZS5sb2coXCLlj5fjgZHlj5bjgaPjgZ/mlofvvJpcIiArIHRleHRJbnB1dFZhbHVlKTtcclxuICAgIC8vIFZPSUNFVk9Y44Gu44K544OU44O844Kr44O8SUTjgoRBUEnjgq3jg7zjga7oqK3lrppcclxuICAgIGNvbnN0IHNwZWFrZXJJZCA9IDg7IC8vIFZPSUNFVk9YOuOBmuOCk+OBoOOCguOCk++8iOOBguOBvuOBguOBvu+8iVxyXG4gICAgY29uc3QgdHRzUXVlc3RBcGlLZXkgPSAnJzsgLy8g5Lu75oSPXHJcblxyXG4gICAgLy8g44OG44Kt44K544OI44Go6Kit5a6a44KS55So44GE44Gm6Z+z5aOw44KS55Sf5oiQXHJcbiAgICBjb25zdCBhdWRpbyA9IG5ldyBUdHNRdWVzdFYzVm9pY2V2b3goc3BlYWtlcklkLCB0ZXh0SW5wdXRWYWx1ZSwgdHRzUXVlc3RBcGlLZXkpO1xyXG5cclxuICAgIC8vIExBcHBMaXZlMkRNYW5hZ2Vy44Gu44Kk44Oz44K544K/44Oz44K544KS5Y+W5b6XXHJcbiAgICBjb25zdCBsaXZlMkRNYW5hZ2VyID0gTEFwcExpdmUyRE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcclxuICAgICAgICAvLyBKU09O44Gn5Y+W5b6X44GM5q2j44GX44GP5Y+W5b6X44Gn44GN44Gf44CB44OR44Op44Oh44O844K/44O8U3VjY2VzczpUcnVl44Gu5aC05ZCI44Gr6Z+z5aOw44KS5YaN55Sf44GXTGl2ZTJE44Gu44Oi44O844K344On44Oz44KS5YuV44GL44GZXHJcbiAgICAgICAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheXRocm91Z2gnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi44Oi44O844K344On44Oz44KS5YaN55Sf44GX44G+44GZXCIpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpdmUyRE1hbmFnZXIuX21vZGVscy5nZXRTaXplKCk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5fbW9kZWxzXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgLmF0KGkpXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgLnN0YXJ0TW90aW9uKFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBMQXBwRGVmaW5lLk1vdGlvbkdyb3VwVGFwQm9keSxcclxuICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAg44Kt44Oj44Op44Kv44K/44O8IFwiTWFvXCIg5L2T44Oi44O844K344On44Oz77yaXHJcbiAgICAgICAgICAgICAgICAgICAgMDrmiYvjgpLjg5Djgr/jg5Djgr9cclxuICAgICAgICAgICAgICAgICAgICAxOuaJi+OCkuW+jOOCjeOBq1xyXG4gICAgICAgICAgICAgICAgICAgIDI65bi95a2Q44KS5pGY44KAXHJcbiAgICAgICAgICAgICAgICAgICAgMzrjg4/jg7zjg4jjgIHjg5Djg5XprZTms5VcclxuICAgICAgICAgICAgICAgICAgICA0OuODj+ODvOODiOOAgeODkOODlemtlOazleWkseaVl1xyXG4gICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgMyxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgTEFwcERlZmluZS5Qcmlvcml0eU5vcm1hbCxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5fZmluaXNoZWRNb3Rpb25cclxuICAgICAgICAgICAgICAgIC8vICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOihqOaDheOCkuODqeODs+ODgOODoOOBq+WkieabtFxyXG4gICAgICAgICAgICAgICAgLy8gbGl2ZTJETWFuYWdlci5fbW9kZWxzLmF0KGkpLnNldFJhbmRvbUV4cHJlc3Npb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDooajmg4XjgpLoqK3lrppcclxuICAgICAgICAgICAgICAgIC8vIDAxfjA444G+44Gn44GC44KL44GMMDMsIDA1fjA444Gv6YGp44GV44Gq44GE44Gf44KB5o6S6ZmkXHJcbiAgICAgICAgICAgICAgICAvLyBleHBfMDHjgYvjgolleHBfMDXjgb7jgafjga7phY3liJfjgpLkvZzmiJBcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25zID0gW1wiZXhwXzAxXCIsIFwiZXhwXzAyXCIsIFwiZXhwXzA0XCJdO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOmFjeWIl+OBi+OCieODqeODs+ODgOODoOOBq+WApOOCkuWPluW+l1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBleHByZXNzaW9ucy5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmFjZUlEID0gZXhwcmVzc2lvbnNbcmFuZG9tSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLjg6njg7Pjg4Djg6DjgavpgbjjgbDjgozjgZ/ooajmg4VJRDogXCIgKyBmYWNlSUQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxpdmUyRE1hbmFnZXIuX21vZGVscy5hdChpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRFeHByZXNzaW9uKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAg44Kt44Oj44Op44Kv44K/44O8IFwiTWFvXCIg6KGo5oOF44Oi44O844K344On44Oz77yaXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleF8wMTog6aCs6LWk44GE56yR6aGUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleF8wMjog44Gr44Gj44GT44KK56yR6aGUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleF8wMzog55uu44KS44Gk44KA44KLXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleF8wNDog55uu44GM44Kt44Op44Kt44OpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleF8wNTog5oKy44GX44GEXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleF8wNjog6LWk6Z2iXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleF8wNzog44Gz44Gj44GP44KKXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleF8wODog44K444OI55uuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2VJRCAvL+ODqeODs+ODgOODoOOBquaVsOWtl+OBjOOBsuOCiuWIhuOBkeOCieOCjOOCiyBcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOeUn+aIkOOBl+OBn+mfs+WjsOOCkuWGjeeUn1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIumfs+WjsOOCkuWGjeeUn+OBl+OBvuOBmVwiKTtcclxuICAgICAgICAgICAgYXVkaW8ucGxheSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2FudmFz44KE5ZC544GN5Ye644GX44KS6KGo56S644GZ44KL5Yem55CGXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5ZC544GN5Ye644GX44KS6KGo56S6XCIpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLnNob3dCdWJibGUodGV4dElucHV0VmFsdWUpO1xyXG4gICAgICAgICAgICBzaG93QnViYmxlKHRleHRJbnB1dFZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgIGF1ZGlvLm9uZW5kZWQgPSAoKSA9PiByZXNvbHZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy8g55S76Z2i44Os44Kk44Ki44Km44OI5aSJ5pu044Gu44Gf44KB44Gu6Zai5pWwXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VMYXlvdXQoZmxhZzogc3RyaW5nKSB7XHJcblxyXG4gICAgaWYgKGZsYWcgPT09IFwic3VnZ2VzdFwiKSB7XHJcbiAgICAgICAgLy8g5paZ55CG5o+Q5qGI44Gu44Od44OD44OX44Ki44OD44OX44GM5Ye644Gm44GE44KL5aC05ZCI44Gr44Od44OD44OX44Ki44OD44OX44KS6Z2e6KGo56S644Gr44GZ44KLXHJcbiAgICAgICAgY29uc3QgY2FydFBvcHVwQ29udGFpbmVyOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcnRQb3B1cC1Db250YWluZXJcIik7XHJcbiAgICAgICAgY29uc3QgY2FydFBvcHVwQ29udGVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYXJ0UG9wdXBDb250ZW50XCIpO1xyXG4gICAgICAgIGlmIChjYXJ0UG9wdXBDb250ZW50KSB7XHJcbiAgICAgICAgICAgIC8vIHBvcHVwQ29udGVudC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgY2FydFBvcHVwQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOOCreODo+ODs+ODkOOCueOCqOODquOCouOCkuWPs+S4iuOBq+enu+WLlVxyXG4gICAgICAgIGNvbnN0IGNhbnZhc0NvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbnZhcy1jb250YWluZXInKTtcclxuICAgICAgICBjYW52YXNDb250YWluZXIuc3R5bGUuZ3JpZFJvdyA9ICcyLzUnO1xyXG4gICAgICAgIGNhbnZhc0NvbnRhaW5lci5zdHlsZS5ncmlkQ29sdW1uID0gJzgvMTEnO1xyXG5cclxuICAgICAgICAvLyDlkLnjgY3lh7rjgZfjgIHjg4bjgq3jgrnjg4jjgIHjg5zjgr/jg7Pjgqjjg6rjgqLjgpLjgq3jg6Pjg7Pjg5Djgrnjga7kuIvjgavnp7vli5VcclxuICAgICAgICBjb25zdCBib3R0b21Db250YWluZXI6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ib3R0b20tY29udGFpbmVyJyk7XHJcbiAgICAgICAgYm90dG9tQ29udGFpbmVyLnN0eWxlLmdyaWRSb3cgPSAnNS85JztcclxuICAgICAgICBib3R0b21Db250YWluZXIuc3R5bGUuZ3JpZENvbHVtbiA9ICc4LzExJztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGZsYWcgPT09IFwiY2FydFwiKSB7XHJcbiAgICAgICAgLy8g5paZ55CG5o+Q5qGI44Gu44Od44OD44OX44Ki44OD44OX44GM5Ye644Gm44GE44KL5aC05ZCI44Gr44Od44OD44OX44Ki44OD44OX44KS6Z2e6KGo56S644Gr44GZ44KLXHJcbiAgICAgICAgY29uc3QgcG9wdXBDb250YWluZXI6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXAtQ29udGFpbmVyXCIpO1xyXG4gICAgICAgIGNvbnN0IHBvcHVwQ29udGVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwb3B1cENvbnRlbnRcIik7XHJcbiAgICAgICAgaWYgKHBvcHVwQ29udGVudCkge1xyXG4gICAgICAgICAgICAvLyBwb3B1cENvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XHJcbiAgICAgICAgICAgIHBvcHVwQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOWPs+S4i+eUu+mdouOBruOCreODo+ODs+ODkOOCueOCqOODquOColxyXG4gICAgICAgIGNvbnN0IGNhbnZhc0NvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbnZhcy1jb250YWluZXInKTtcclxuICAgICAgICBjYW52YXNDb250YWluZXIuc3R5bGUuZ3JpZFJvdyA9ICcxLzYnO1xyXG4gICAgICAgIGNhbnZhc0NvbnRhaW5lci5zdHlsZS5ncmlkQ29sdW1uID0gJzQvOCc7XHJcblxyXG4gICAgICAgIC8vIOWQueOBjeWHuuOBl+OAgeODhuOCreOCueODiOOAgeODnOOCv+ODs+OCqOODquOCouOCkuOCreODo+ODs+ODkOOCueOBruS4i+OBq+enu+WLlVxyXG4gICAgICAgIGNvbnN0IGJvdHRvbUNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJvdHRvbS1jb250YWluZXInKTtcclxuICAgICAgICBib3R0b21Db250YWluZXIuc3R5bGUuZ3JpZFJvdyA9ICc2LzExJztcclxuICAgICAgICBib3R0b21Db250YWluZXIuc3R5bGUuZ3JpZENvbHVtbiA9ICc0LzgnO1xyXG4gICAgfVxyXG4gICAgLy8g44K544Kv44Ot44O844Or44KS54Sh5Yq544Gr44GZ44KLXHJcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcblxyXG4gICAgLy8g44Gd44Gu5LuW44Gu44Os44Kk44Ki44Km44OI5aSJ5pu044KE6L+95Yqg5Yem55CG44KS44GT44GT44Gr6L+95YqgXHJcbn1cclxuXHJcbi8vIOeUu+mdouS4reWkruOBq+enu+WLleOBmeOCi+mWouaVsFxyXG5leHBvcnQgZnVuY3Rpb24gbW92ZVRvQ2VudGVyKCkge1xyXG4gICAgLy8g55S76Z2i5Lit5aSu44Gu44Kt44Oj44Oz44OQ44K544Ko44Oq44KiXHJcbiAgICBjb25zdCBjYW52YXNDb250YWluZXI6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYW52YXMtY29udGFpbmVyJyk7XHJcbiAgICBjYW52YXNDb250YWluZXIuc3R5bGUuZ3JpZFJvdyA9ICcxLzYnO1xyXG4gICAgY2FudmFzQ29udGFpbmVyLnN0eWxlLmdyaWRDb2x1bW4gPSAnNC84JztcclxuXHJcbiAgICAvLyDjgq3jg6Pjg7Pjg5DjgrnkuIvjga7lkLnjgY3lh7rjgZfjgIHjg4bjgq3jgrnjg4jjgIHjg5zjgr/jg7Pjgqjjg6rjgqJcclxuICAgIGNvbnN0IGJvdHRvbUNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJvdHRvbS1jb250YWluZXInKTtcclxuICAgIGJvdHRvbUNvbnRhaW5lci5zdHlsZS5ncmlkUm93ID0gJzYvMTEnO1xyXG4gICAgYm90dG9tQ29udGFpbmVyLnN0eWxlLmdyaWRDb2x1bW4gPSAnNC84JztcclxuXHJcbiAgICAvLyDmlpnnkIbmj5DmoYjjga7jg53jg4Pjg5fjgqLjg4Pjg5fjgYzlh7rjgabjgYTjgovloLTlkIjjgavjg53jg4Pjg5fjgqLjg4Pjg5fjgpLpnZ7ooajnpLrjgavjgZnjgotcclxuICAgIGNvbnN0IHBvcHVwQ29udGFpbmVyOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwLUNvbnRhaW5lclwiKTtcclxuICAgIGNvbnN0IHBvcHVwQ29udGVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwb3B1cENvbnRlbnRcIik7XHJcbiAgICBpZiAocG9wdXBDb250ZW50KSB7XHJcbiAgICAgICAgcG9wdXBDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOOCq+ODvOODiOOBruODneODg+ODl+OCouODg+ODl+OBjOWHuuOBpuOBhOOCi+WgtOWQiOOBq+ODneODg+ODl+OCouODg+ODl+OCkumdnuihqOekuuOBq+OBmeOCi1xyXG4gICAgY29uc3QgY2FydFBvcHVwQ29udGFpbmVyOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcnRQb3B1cC1Db250YWluZXJcIik7XHJcbiAgICBjb25zdCBjYXJ0UG9wdXBDb250ZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhcnRQb3B1cENvbnRlbnRcIik7XHJcbiAgICBpZiAoY2FydFBvcHVwQ29udGVudCkge1xyXG4gICAgICAgIGNhcnRQb3B1cENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzaG93QnViYmxlKHRleHQ6IHN0cmluZykge1xyXG4gICAgY29uc3QgYnViYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidWJibGVcIik7XHJcbiAgICBjb25zdCBidWJibGVUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidWJibGVUZXh0XCIpO1xyXG5cclxuICAgIGlmIChidWJibGUgJiYgYnViYmxlVGV4dCkge1xyXG4gICAgICAgIGJ1YmJsZVRleHQuaW5uZXJUZXh0ID0gdGV4dDtcclxuICAgICAgICBidWJibGUuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuXHJcbiAgICAgICAgLy8gNuenkuW+jOOBq+WQueOBjeWHuuOBl+OCkumdnuihqOekuuOBq+OBmeOCi1xyXG4gICAgICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vICAgYnViYmxlLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAvLyB9LCA2MDAwKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8g44Od44OD44OX44Ki44OD44OX44KS6KGo56S644GZ44KL6Zai5pWwXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkaXNwbGF5UG9wdXAoZmxhZzogc3RyaW5nKSB7XHJcbiAgICBpZiAoZmxhZyA9PT0gXCJzdWdnZXN0XCIpIHtcclxuICAgICAgICBjb25zdCBwb3B1cENvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgICAgXCIucG9wdXAtQ29udGFpbmVyXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IHBvcHVwQ29udGVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgICAgICAgIFwicG9wdXBDb250ZW50XCJcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChwb3B1cENvbnRlbnQpIHtcclxuICAgICAgICAgICAgcG9wdXBDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdGV4dElucHV0VmFsdWUgPSBcIuePvuWcqOOBruOBiuOBmeOBmeOCgeOBruaWmeeQhuOCkuaPkOahiOOBl+OBvuOBme+8gVwiXHJcbiAgICAgICAgc3BlZWNoLnN0b3AoKTsgLy8gdm9pY2VWb3gg6Zai5pWw44GM6ZaL5aeL44GZ44KL5YmN44Gr6Z+z5aOw6KqN6K2Y44KS5YGc5q2iXHJcbiAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nID0gdHJ1ZTsgLy8gdm9pY2VWb3gg6Zai5pWw44GM5a6f6KGM5Lit44GL44Gp44GG44GL44KS56S644GZ44OV44Op44KwXHJcbiAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPRkbjgavjgZfjgb7jgZlcIik7XHJcbiAgICAgICAgLy8gdm9pY2VWb3gg6Zai5pWw44GM5a6M5LqG44GZ44KL44Gu44KS5b6F44GkXHJcbiAgICAgICAgYXdhaXQgdm9pY2VWb3godGV4dElucHV0VmFsdWUpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrozkuobjgZfjgZ/lvozjgavpn7Plo7Doqo3orZjjgpLlho3plotcclxuICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nID0gZmFsc2U7IC8vIHZvaWNlVm94IOmWouaVsOOBjOWun+ihjOS4reOBi+OBqeOBhuOBi+OCkuekuuOBmeODleODqeOCsFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIumfs+WjsOiqjeitmOOCkk9O44Gr44GX44G+44GZXCIpO1xyXG4gICAgICAgICAgICBzcGVlY2guc3RhcnQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGZsYWcgPT09IFwiY2FydFwiKSB7XHJcbiAgICAgICAgY29uc3QgY2FydFBvcHVwQ29udGFpbmVyOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICBcIi5jYXJ0UG9wdXAtQ29udGFpbmVyXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IGNhcnRQb3B1cENvbnRlbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICAgICAgICBcImNhcnRQb3B1cENvbnRlbnRcIlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGNhcnRQb3B1cENvbnRlbnQpIHtcclxuICAgICAgICAgICAgY2FydFBvcHVwQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIOeUu+mdouS4reWkruOBq+ODhuOCreOCueODiOOCkuaIu+OBmemWouaVsFxyXG5leHBvcnQgZnVuY3Rpb24gbW92ZVRleHRUb0NlbnRlcigpIHtcclxuICAgIGNvbnN0IGJvdHRvbUNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJvdHRvbS1jb250YWluZXInKTtcclxuXHJcbiAgICBpZiAoYm90dG9tQ29udGFpbmVyKSB7XHJcbiAgICAgICAgYm90dG9tQ29udGFpbmVyLnN0eWxlLmdyaWRSb3cgPSBcIjYvMTBcIjtcclxuICAgICAgICBib3R0b21Db250YWluZXIuc3R5bGUuZ3JpZENvbHVtbiA9IFwiNC84XCI7XHJcbiAgICAgICAgYm90dG9tQ29udGFpbmVyLnN0eWxlLnRyYW5zaXRpb24gPSBcInRyYW5zZm9ybSAwLjVzIGVhc2UtaW4tb3V0XCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIOODneODg+ODl+OCouODg+ODl+OCkumWieOBmOOCi+mWouaVsFxyXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VQb3B1cCgpIHtcclxuICAgIG1vdmVUb0NlbnRlcigpO1xyXG4gICAgLy8gbW92ZVRleHRUb0NlbnRlcigpO1xyXG5cclxuICAgIGNvbnN0IHBvcHVwQ29udGFpbmVyOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIFwiLnBvcHVwLUNvbnRhaW5lclwiXHJcbiAgICApO1xyXG4gICAgY29uc3QgcG9wdXBDb250ZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgICBcInBvcHVwQ29udGVudFwiXHJcbiAgICApO1xyXG4gICAgaWYgKHBvcHVwQ29udGVudCkge1xyXG4gICAgICAgIC8vIHBvcHVwQ29udGVudC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKTtcclxuICAgICAgICBwb3B1cENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIDPnp5LlvozjgavlkLnjgY3lh7rjgZfjgpLpnZ7ooajnpLrjgavjgZnjgotcclxuLy8gZnVuY3Rpb24gaGlkZUJ1YmJsZSgpIHtcclxuLy8gICBjb25zdCBidWJibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1YmJsZVwiKTtcclxuLy8gICBpZiAoYnViYmxlKSB7XHJcbi8vICAgICBidWJibGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4vLyAgIH1cclxuLy8gfSIsIi8vIE9wZW5XZWF0aGVyTWFwLmpzXHJcbi8vIE9wZW5XZWF0aGVyTWFwIEFQSSDjgq3jg7wgKOWun+mam+OBruOCreODvOOCkuS9v+eUqOOBl+OBpuOBj+OBoOOBleOBhClcclxuY29uc3QgYXBpS2V5ID0gJ2RhMjNjOWY1NDU5MGI1ZTE5YTM3ZDJmNmJmNDEwM2U1JztcclxuXHJcbi8vIOWQjeWPpOWxi+OBrumDveW4guOCs+ODvOODiSAoT3BlbldlYXRoZXJNYXAg44Gu44K144Kk44OI44Gn6YO95biC44Kz44O844OJ44KS56K66KqN44GX44Gm44GP44Gg44GV44GEKVxyXG5jb25zdCBjaXR5Q29kZSA9ICcxODU2MDU3JztcclxuXHJcbi8vIENvbnRlbnTlj5blvpdcclxuLy8gY29uc3QgdGV4dEFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRleHRBcmVhXCIpIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQ7XHJcbi8vIGNvbnNvbGUubG9nKHRleHRBcmVhKTsgLy8g44Kz44Oz44K944O844Or44GrIENvbnRlbnQg6KaB57Sg44GM6KGo56S644GV44KM44KL44GL56K66KqNXHJcblxyXG4vLyBPcGVuV2VhdGhlck1hcCBBUEkg44GL44KJ5aSp5rCX5oOF5aCx44KS5Y+W5b6X44GZ44KL6Zai5pWwXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRXZWF0aGVyKCkge1xyXG4gICAgLy8gQ29udGVudOWPluW+l1xyXG4gICAgY29uc3QgdGV4dEFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRleHRBcmVhXCIpIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQ7XHJcbiAgICBjb25zb2xlLmxvZyh0ZXh0QXJlYSk7IC8vIOOCs+ODs+OCveODvOODq+OBqyBDb250ZW50IOimgee0oOOBjOihqOekuuOBleOCjOOCi+OBi+eiuuiqjVxyXG4gICAgY29uc29sZS5sb2coXCLlpKnmsJd0ZXh0QXJlYe+8mlwiICsgdGV4dEFyZWEudmFsdWUpO1xyXG4gICAgY29uc3QgYXBpVXJsID0gYGh0dHBzOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS93ZWF0aGVyP2lkPSR7Y2l0eUNvZGV9JmFwcGlkPSR7YXBpS2V5fSZ1bml0cz1tZXRyaWMmbGFuZz1qYWA7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCk7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICAgICAgLy8gQVBJ44Gu5b+c562U44GL44KJ6Zai6YCj44GZ44KL5oOF5aCx44KS5oq95Ye644GZ44KLXHJcbiAgICAgICAgY29uc3Qgd2VhdGhlckRlc2NyaXB0aW9uID0gY29udmVydFRvSmFwYW5lc2UoZGF0YS53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uKTtcclxuICAgICAgICBjb25zdCB0ZW1wZXJhdHVyZSA9IGRhdGEubWFpbi50ZW1wO1xyXG5cclxuICAgICAgICAvLyDlpKnmsJfmg4XloLHjgpLnm7TmjqUgY29udGVudCDjgavooajnpLrjgZnjgotcclxuICAgICAgICAvLyB0ZXh0QXJlYeOBruWQjeWJjeOCkuWIhuOBi+OCiuOChOOBmeOBhOOCiOOBhuOBq+WkieabtFxyXG4gICAgICAgIGNvbnN0IHdlYXRoZXJJbmZvID0gdGV4dEFyZWE7XHJcbiAgICAgICAgd2VhdGhlckluZm8udmFsdWUgPSBg54++5Zyo44Gu5aSp5rCXOiAke3dlYXRoZXJEZXNjcmlwdGlvbn1cXG7msJfmuKk6ICR7dGVtcGVyYXR1cmV9IOKEg2A7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHdlYXRoZXIgZGF0YTonLCBlcnJvcik7XHJcblxyXG4gICAgICAgIC8vIOOCqOODqeODvOODoeODg+OCu+ODvOOCuOOCkuebtOaOpSBjb250ZW50IOOBq+ihqOekuuOBmeOCi1xyXG4gICAgICAgIC8vIHRleHRBcmVh44Gu5ZCN5YmN44KS5YiG44GL44KK44KE44GZ44GE44KI44GG44Gr5aSJ5pu0XHJcbiAgICAgICAgY29uc3QgZXJyb3JJbmZvID0gdGV4dEFyZWE7XHJcbiAgICAgICAgZXJyb3JJbmZvLnZhbHVlID0gJ+Wkqeawl+aDheWgseOBruWPluW+l+OBq+WkseaVl+OBl+OBvuOBl+OBnyc7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIOiLseiqnuOBi+OCieaXpeacrOiqnuOBuOOBruWkieaPm+mWouaVsFxyXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvSmFwYW5lc2UoZGVzY3JpcHRpb246IHN0cmluZykge1xyXG4gICAgc3dpdGNoIChkZXNjcmlwdGlvbi50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgY2FzZSAnY2xlYXIgc2t5JzpcclxuICAgICAgICAgICAgcmV0dXJuICfmmbTjgownO1xyXG4gICAgICAgIGNhc2UgJ2ZldyBjbG91ZHMnOlxyXG4gICAgICAgICAgICByZXR1cm4gJ+aZtOOCjOaZguOAheabh+OCiic7XHJcbiAgICAgICAgY2FzZSAnc2NhdHRlcmVkIGNsb3Vkcyc6XHJcbiAgICAgICAgY2FzZSAnYnJva2VuIGNsb3Vkcyc6XHJcbiAgICAgICAgICAgIHJldHVybiAn5puH44KKJztcclxuICAgICAgICBjYXNlICdzaG93ZXIgcmFpbic6XHJcbiAgICAgICAgY2FzZSAncmFpbic6XHJcbiAgICAgICAgICAgIHJldHVybiAn6ZuoJztcclxuICAgICAgICBjYXNlICd0aHVuZGVyc3Rvcm0nOlxyXG4gICAgICAgICAgICByZXR1cm4gJ+mbt+mbqCc7XHJcbiAgICAgICAgY2FzZSAnc25vdyc6XHJcbiAgICAgICAgICAgIHJldHVybiAn6ZuqJztcclxuICAgICAgICBjYXNlICdtaXN0JzpcclxuICAgICAgICAgICAgcmV0dXJuICfpnKcnO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcclxuICAgIH1cclxufVxyXG4iLCIvLyDjg6bjg7zjgrbjg7zjgYvjgonjga7jg6Hjg4Pjgrvjg7zjgrjooajnpLrnlKjplqLmlbBcclxuZXhwb3J0IGZ1bmN0aW9uIHNob3dVc2VyTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIC8vIOODgeODo+ODg+ODiOODnOODg+OCr+OCueOBrkhUTUzjg4bjg7Pjg5fjg6zjg7zjg4jjg6rjg4bjg6njg6vjgpLkvZzmiJBcclxuICAgIGNvbnN0IGNoYXRib3g6IHN0cmluZyA9IGBcclxuICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiYWxsb29uIGJhbGxvb24tclwiPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0YWxrIHRhbGstclwiPiR7bWVzc2FnZX08L3A+XHJcbiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwiaW1nLWNpcmNsZSBpbWctclwiIHNyYz1cImh1bWFuLmpwZ1wiIGFsdD1cImltYWdlXCIgLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9saT5gO1xyXG4gICAgbGV0IGNoYXRBcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaGF0LWFyZWFcIikgYXMgSFRNTEVsZW1lbnQ7XHJcblxyXG4gICAgLy8gY2hhdC1hcmVh44GM5a2Y5Zyo44GZ44KL44GT44Go44KS56K66KqN44GX44Gm44GL44KJ44OB44Oj44OD44OI44Oc44OD44Kv44K544KS6L+95YqgXHJcbiAgICBpZiAoY2hhdEFyZWEpIHtcclxuICAgICAgICBjaGF0QXJlYS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGNoYXRib3gpO1xyXG4gICAgICAgIC8vIGNoYXRBcmVh44GM5a2Y5Zyo44GZ44KL5aC05ZCI44CB5LiA55Wq5LiL44G+44Gn44K544Kv44Ot44O844Or44GZ44KLXHJcbiAgICAgICAgaWYgKGNoYXRBcmVhKSB7XHJcbiAgICAgICAgICAgIGNoYXRBcmVhLnNjcm9sbFRvcCA9IGNoYXRBcmVhLnNjcm9sbEhlaWdodDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNoYXRBcmVh6KaB57Sg44GM6KaL44Gk44GL44KK44G+44Gb44KTXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy8g44Oc44OD44OI44GL44KJ44Gu44Oh44OD44K744O844K46KGo56S655So6Zai5pWwXHJcbmV4cG9ydCBmdW5jdGlvbiBzaG93Qm90TWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIC8vIOODgeODo+ODg+ODiOODnOODg+OCr+OCueOBrkhUTUzjg4bjg7Pjg5fjg6zjg7zjg4jjg6rjg4bjg6njg6vjgpLkvZzmiJBcclxuICAgIGNvbnN0IGNoYXRib3g6IHN0cmluZyA9IGBcclxuICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiYWxsb29uXCI+XHJcbiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwiaW1nLWNpcmNsZVwiIHNyYz1cIk1hby5wbmdcIiBhbHQ9XCJpbWFnZVwiIC8+XHJcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRhbGtcIj4ke21lc3NhZ2V9PC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2xpPmA7XHJcbiAgICBsZXQgY2hhdEFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNoYXQtYXJlYVwiKSBhcyBIVE1MRWxlbWVudDtcclxuXHJcbiAgICAvLyBjaGF0LWFyZWHjgYzlrZjlnKjjgZnjgovjgZPjgajjgpLnorroqo3jgZfjgabjgYvjgonjg4Hjg6Pjg4Pjg4jjg5zjg4Pjgq/jgrnjgpLov73liqBcclxuICAgIGlmIChjaGF0QXJlYSkge1xyXG4gICAgICAgIGNoYXRBcmVhLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgY2hhdGJveCk7XHJcbiAgICAgICAgLy8gY2hhdEFyZWHjgYzlrZjlnKjjgZnjgovloLTlkIjjgIHkuIDnlarkuIvjgb7jgafjgrnjgq/jg63jg7zjg6vjgZnjgotcclxuICAgICAgICBpZiAoY2hhdEFyZWEpIHtcclxuICAgICAgICAgICAgY2hhdEFyZWEuc2Nyb2xsVG9wID0gY2hhdEFyZWEuc2Nyb2xsSGVpZ2h0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY2hhdEFyZWHopoHntKDjgYzopovjgaTjgYvjgorjgb7jgZvjgpNcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8g44Om44O844K244O844GM44Oh44OD44K744O844K444KS6YCB5L+h44GZ44KL44Gf44Gz44Gr44GT44Gu6Zai5pWw44KS5ZG844Gz5Ye644GX44G+44GZ44CCXHJcbmV4cG9ydCBmdW5jdGlvbiBwb3N0VG9BSShtc2c6IHN0cmluZykge1xyXG4gICAgY29uc3QgdXJsID0gXCJodHRwczovL29yZGVyLWNvbmFpLm9wZW5haS5henVyZS5jb20vb3BlbmFpL2RlcGxveW1lbnRzL09yZGVyQ29uLUFJL2NoYXQvY29tcGxldGlvbnM/YXBpLXZlcnNpb249MjAyMy0wNy0wMS1wcmV2aWV3XCI7XHJcbiAgICBjb25zdCBrZXkgPSBcImYxNWE2ZjAwNWY2MDQ3YjU4ZDk4ODVlMWFiMTJmYWViXCI7XHJcblxyXG4gICAgY29uc3QgcmVxX2JvZHk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7XHJcbiAgICAgICAgXCJtZXNzYWdlc1wiOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwicm9sZVwiOiBcInN5c3RlbVwiLFxyXG4gICAgICAgICAgICAgICAgXCJjb250ZW50XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICAgICAgICAgICPlkb3ku6Tmm7g6IFxyXG4gICAgICAgICAgICAgICAgICAgIOOBguOBquOBn+OBr+mjsumjn+W6l+OBp+WDjeOBj+WumuWToeOBp+OBmeOAgiBcclxuICAgICAgICAgICAgICAgICAgICDjgYrlrqLmp5jjga7os6rllY/jgavjgYrnrZTjgYjjgZfjgb7jgZnjgIIgXHJcbiAgICAgICAgICAgICAgICAgICAg5Lul5LiL44Gu5Yi257SE5p2h5Lu244Go5YWl5Yqb5paH44KS44KC44Go44Gr44CBIOacgOmrmOOBrue1kOaenOOCkuWHuuWKm+OBl+OBpuOBj+OBoOOBleOBhOOAglxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICPliLbntITmnaHku7Y6IFxyXG4gICAgICAgICAgICAgICAgICAgIOODu+aWh+Wtl+aVsOOBrzMw5paH5a2X5Lul5YaFIFxyXG4gICAgICAgICAgICAgICAgICAgIOODu+S7peS4i+OBrlwi5L6LXCLjgpLlj4LogIPjgavlm57nrZTjgZfjgabjgY/jgaDjgZXjgYTjgIJcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICDkvos6IFxyXG4gICAgICAgICAgICAgICAgICAgIOizquWVj++8muODiOOCpOODrOOBr+OBqeOBk+OBp+OBmeOBi++8nyBcclxuICAgICAgICAgICAgICAgICAgICDlm57nrZTvvJrlupflhoUx6ZqO44Gu5Y+z5aWl44Gr44GU44GW44GE44G+44GZ44CCXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgI+WFpeWKm+aWhzogXHJcbiAgICAgICAgICAgICAgICAgICAg6LOq5ZWP77yae3RleHR9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgI+WHuuWKm+aWhzogXHJcbiAgICAgICAgICAgICAgICAgICAg5Zue562U77ya44CQ6LOq5ZWP44G444Gu5Zue562U44CRXHJcbiAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwicm9sZVwiOiBcInVzZXJcIixcclxuICAgICAgICAgICAgICAgIFwiY29udGVudFwiOiBcIuODoeODi+ODpeODvOOBq+OCouODrOODq+OCruODvOihqOekuuOBr+OBguOCiuOBvuOBmeOBi++8n1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwicm9sZVwiOiBcImFzc2lzdGFudFwiLFxyXG4gICAgICAgICAgICAgICAgXCJjb250ZW50XCI6IFwi44Gv44GE44CB44Oh44OL44Ol44O844Gr44Ki44Os44Or44Ku44O85oOF5aCx44KS6KiY6LyJ44GX44Gm44GE44G+44GZ44CC6Kmz57Sw44Gv44K544K/44OD44OV44G+44Gn44GK5bCL44Gt44GP44Gg44GV44GE44CCXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgXCJyb2xlXCI6IFwidXNlclwiLFxyXG4gICAgICAgICAgICAgICAgXCJjb250ZW50XCI6IG1zZ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcInJvbGVcIjogXCJhc3Npc3RhbnRcIixcclxuICAgICAgICAgICAgICAgIFwiY29udGVudFwiOiBcIlwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdLFxyXG4gICAgICAgIFwidGVtcGVyYXR1cmVcIjogMC43LFxyXG4gICAgICAgIFwidG9wX3BcIjogMC45NSxcclxuICAgICAgICBcImZyZXF1ZW5jeV9wZW5hbHR5XCI6IDAsXHJcbiAgICAgICAgXCJwcmVzZW5jZV9wZW5hbHR5XCI6IDAsXHJcbiAgICAgICAgXCJtYXhfdG9rZW5zXCI6IDgwMCxcclxuICAgICAgICBcInN0b3BcIjogbnVsbFxyXG4gICAgfVxyXG5cclxuICAgIGZldGNoKHVybCwge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgJ2FwaS1rZXknOiBrZXlcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcV9ib2R5KVxyXG4gICAgfSlcclxuICAgICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxyXG4gICAgICAgIC50aGVuKChqc29uKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIOWPluW+l+WGheWuueOCkuihqOekulxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhqc29uKTtcclxuICAgICAgICAgICAgY29uc3QgYWlNZXMgPSBqc29uLmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50O1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhaU1lcyk7XHJcbiAgICAgICAgICAgIC8vIGNoYXRPdXRwdXQudmFsdWUgKz0gXCLjg6rjg7zjg4jjg7M6IFwiICsgYWlNZXMgKyBcIlxcblwiO1xyXG4gICAgICAgICAgICBzaG93Qm90TWVzc2FnZShhaU1lcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yLmNvZGUgKyAnOiAnICsgZXJyb3IubWVzc2FnZSlcclxuICAgICAgICB9KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VuZE1lc3NhZ2UoKTogdm9pZCB7XHJcbiAgICAvLyDjgIxtc2ctc2VuZOOAjeOBqOOBhOOBhklE44KS5oyB44Gk6KaB57Sg44GL44KJ44Om44O844K244O844Gu5YWl5Yqb5YCk44KS5Y+W5b6XXHJcbiAgICAvLyBjb25zdCBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXNnLXNlbmQnKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21zZy1zZW5kLWhpZGRlbicpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcblxyXG4gICAgaWYgKCFpbnB1dEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwi44CMbXNnLXNlbmTjgI3opoHntKDjgYzjgYLjgorjgb7jgZvjgpNcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlcV9tZXNzYWdlOiBzdHJpbmcgPSBpbnB1dEVsZW1lbnQudmFsdWU7XHJcblxyXG4gICAgLy8g44Om44O844K244O85YWl5Yqb44KS6KGo56S6XHJcbiAgICBzaG93VXNlck1lc3NhZ2UocmVxX21lc3NhZ2UpO1xyXG5cclxuICAgIC8vIEF6dXJlIE9wZW5BSSBBUEnjgavjgqLjgq/jgrvjgrnjgZnjgovvvIhwb3N0VG9BSeOBr+S7ruOBrumWouaVsOWQjeOBp+OBme+8iVxyXG4gICAgcG9zdFRvQUkocmVxX21lc3NhZ2UpO1xyXG5cclxuICAgIC8vIOODpuODvOOCtuODvOWFpeWKm+OCkuOCr+ODquOColxyXG4gICAgaW5wdXRFbGVtZW50LnZhbHVlID0gJyc7XHJcbn1cclxuXHJcbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKTogdm9pZCB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChlOiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICAgICAgLy8gU2hpZnTjgq3jg7zjgahFbnRlcuOCreODvOOBjOWQjOaZguOBq+aKvOOBleOCjOOBn+WgtOWQiOOBq3NlbmRNZXNzYWdl6Zai5pWw44KS5ZG844Gz5Ye644GZXHJcbiAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInICYmIGUuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgc2VuZE1lc3NhZ2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSIsIi8vIHNoYXJlZC50c1xyXG5cclxuLy8gLy8g5YWx5pyJ44GV44KM44KL5aSJ5pWwXHJcbi8vIGV4cG9ydCBjb25zdCBzaGFyZWRWYXJpYWJsZSA9IHtcclxuLy8gICAgIC8vIC4uLlxyXG4vLyB9O1xyXG5cclxuLy8gLy8g5YWx5pyJ44GV44KM44KL6Zai5pWwXHJcbmV4cG9ydCBmdW5jdGlvbiBzaGFyZWRGdW5jdGlvbigpIHtcclxuICAgLy8gLi4uXHJcbn1cclxuXHJcbi8vIC8vIOWFseacieOBleOCjOOCi+OCr+ODqeOCuVxyXG4vLyBleHBvcnQgY2xhc3MgU2hhcmVkQ2xhc3Mge1xyXG4vLyAgICAgLy8gLi4uXHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBTaGFyZWRJbnN0YW5jZXMge1xyXG5cclxuLy8gfVxyXG5cclxuLy8g44K544OU44O844OB6KqN6K2Y44Kq44OW44K444Kn44Kv44OI44Gu5Yid5pyf5YyWXHJcbmNvbnN0IFNwZWVjaFJlY29nbml0aW9uID0gKHdpbmRvdyBhcyBhbnkpLlNwZWVjaFJlY29nbml0aW9uIHx8ICh3aW5kb3cgYXMgYW55KS53ZWJraXRTcGVlY2hSZWNvZ25pdGlvbjtcclxuZXhwb3J0IGNvbnN0IHNwZWVjaCA9IG5ldyBTcGVlY2hSZWNvZ25pdGlvbigpO1xyXG5cclxuLy8g44Kk44OZ44Oz44OI44Oq44K544OK44O844GM6Kit5a6a44GV44KM44Gm44GE44KL44GL44Gp44GG44GL44Gu56K66KqNXHJcbmV4cG9ydCBjb25zdCBzcGVlY2hMaXN0ZW5lcnMgPSB7XHJcbiAgICByZXN1bHQ6IGZhbHNlLFxyXG4gICAgZW5kOiBmYWxzZSxcclxufTtcclxuXHJcbi8vIOizquWVj+ODnOOCv+ODs+OCkuaKvOOBl+OBn+OBqOOBjeOBruOCueODlOODvOODgeiqjeitmOOCquODluOCuOOCp+OCr+ODiOOBruWIneacn+WMllxyXG5jb25zdCBTcGVlY2hSZWNvZ25pdGlvbl9RQSA9ICh3aW5kb3cgYXMgYW55KS5TcGVlY2hSZWNvZ25pdGlvbiB8fCAod2luZG93IGFzIGFueSkud2Via2l0U3BlZWNoUmVjb2duaXRpb247XHJcbmV4cG9ydCBjb25zdCBzcGVlY2hfUUEgPSBuZXcgU3BlZWNoUmVjb2duaXRpb25fUUEoKTtcclxuXHJcbi8vIOizquWVj+ODnOOCv+ODs+OCkuaKvOOBl+OBn+OBqOOBjeOBruOCpOODmeODs+ODiOODquOCueODiuODvOOBjOioreWumuOBleOCjOOBpuOBhOOCi+OBi+OBqeOBhuOBi+OBrueiuuiqjVxyXG5leHBvcnQgY29uc3Qgc3BlZWNoTGlzdGVuZXJzX1FBID0ge1xyXG4gICAgcmVzdWx0OiBmYWxzZSxcclxuICAgIGVuZDogZmFsc2UsXHJcbn07IiwiaW1wb3J0IHsgc3BlZWNoLCBzcGVlY2hMaXN0ZW5lcnMsIHNwZWVjaF9RQSwgc3BlZWNoTGlzdGVuZXJzX1FBIH0gZnJvbSAnLi9zaGFyZWQnO1xyXG5cclxuc3BlZWNoLmxhbmcgPSAnamEtSlAnO1xyXG5zcGVlY2guaW50ZXJpbVJlc3VsdHMgPSB0cnVlO1xyXG5cclxuaW1wb3J0IHsgdm9pY2VWb3gsIGNoYW5nZUxheW91dCwgbW92ZVRvQ2VudGVyLCBzaG93QnViYmxlLCBkaXNwbGF5UG9wdXAsIG1vdmVUZXh0VG9DZW50ZXIsIGNsb3NlUG9wdXAgfSBmcm9tICcuL0d1aU9wZXJhdG9yJztcclxuaW1wb3J0IHsgZ2V0V2VhdGhlciB9IGZyb20gJy4vT3BlbldlYXRoZXJNYXAnO1xyXG5pbXBvcnQgeyBDYXJ0IH0gZnJvbSAnLi9DYXJ0T3BlcmF0b3InO1xyXG5cclxuXHJcbmNvbnN0IGNhcnQgPSBuZXcgQ2FydCgpO1xyXG52YXIgZGlzaF9mbGc9ZmFsc2U7XHJcbmxldCBkaXNoZXM6IHtjYXRlZ29yeV9pZDogbnVtYmVyLCBkZXNjcmlwdGlvbjogc3RyaW5nLCBkaXNoX2lkOiBudW1iZXIsIGRpc2hfbmFtZTogc3RyaW5nLCBpbWFnZTogc3RyaW5nLCBwcmljZTogbnVtYmVyLCB0YWdzOiBzdHJpbmcsIHVzZXJfaWQ6IG51bWJlcn1bXSA9IFtdO1xyXG5cclxuLy8g5LuW44Gu44OV44Kh44Kk44OrXHJcblxyXG4vLyDjgqTjg5njg7Pjg4jjg6rjgrnjg4rjg7zjgpLkuojjgoHnorroqo3jgZfjgabjgYrjgY/jgZ/jgoHjgatsYXBwdmlldy50c+OBp+Wumue+qVxyXG5leHBvcnQgY2xhc3MgU3BlZWNoUmVjIHtcclxuICAgIHB1YmxpYyBzcGVlY2hFdmVudCgpOiB2b2lkIHtcclxuICAgICAgICAvLyBIVE1M6KaB57Sg44Gu5Y+W5b6XXHJcbiAgICAgICAgY29uc3Qgb3JkZXJMaXN0OiBzdHJpbmdbXSA9IFtdOyAvLyDjg4bjgrnjg4jnlKjms6jmloflhoXnlKjjgpLoqJjpjLLjgZnjgovjgZ/jgoHjga7phY3liJdcclxuICAgICAgICBsZXQgdHJhbnNjcmlwdHMgPSBbXCJcIiwgXCJcIl07IC8vIOacgOaWsOOBruiqjeitmOe1kOaenOOBqOS4gOOBpOWJjeOBruiqjeitmOe1kOaenOOCkuS/neWtmOOBmeOCi+mFjeWIl1xyXG4gICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1ZvaWNlVm94UnVubmluZyA9IGZhbHNlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICBjb25zb2xlLmxvZyhcIumfs+WjsOiqjeitmOOCkk9O44Gr44GX44G+44GZXCIpO1xyXG5cclxuICAgICAgICAvLyDjgrnjg5Tjg7zjg4Hoqo3orZjjga7ntZDmnpzjgpLlh6bnkIbjgZnjgovjgqTjg5njg7Pjg4jjg6rjgrnjg4rjg7xcclxuICAgICAgICBzcGVlY2guYWRkRXZlbnRMaXN0ZW5lcigncmVzdWx0JywgZnVuY3Rpb24gKGU6IGFueSkge1xyXG4gICAgICAgICAgICBsZXQgaW50ZXJpbVRyYW5zY3JpcHQgPSBcIlwiO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNwZWVjaOWHpueQhumWi+Wni1wiKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBlLnJlc3VsdEluZGV4OyBpIDwgZS5yZXN1bHRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2NyaXB0ID0gZS5yZXN1bHRzW2ldWzBdLnRyYW5zY3JpcHQ7Ly/oqo3orZjntZDmnpxcclxuICAgICAgICAgICAgICAgIGlmIChlLnJlc3VsdHNbaV0uaXNGaW5hbCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2NyaXB0c1sxXSA9IHRyYW5zY3JpcHRzWzBdOyAvLyDkuIDjgaTliY3jga7oqo3orZjntZDmnpzjgpLmm7TmlrBcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2NyaXB0c1swXSA9IHRyYW5zY3JpcHQ7IC8vIOacgOaWsOOBruiqjeitmOe1kOaenOOCkuabtOaWsFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHREYXRhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXh0SW5wdXRcIikgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmRlckRhdGEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRleHRBcmVhXCIpIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnViYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidWJibGVcIikgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXVlc0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicXVlc0J1dHRvblwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBxdWVzUG9wdXBDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucXVlc1BvcHVwLUNvbnRhaW5lcicpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyDoqo3orZjntZDmnpzooajnpLpcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn6KqN6K2Y57WQ5p6cOiAnICsgdHJhbnNjcmlwdHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdERhdGEudmFsdWUgPSB0cmFuc2NyaXB0c1swXTsgLy/oqo3orZjlhoXlrrnov73liqBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6IOM5pmv6Imy44GM57eR44Gu5pmC44GrYWRkb3Jk44Oh44K944OD44OJ44KS5ZG844Gz5Ye644GZXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1YmJsZS5zdHlsZS5ib3JkZXIgPT09ICc0cHggc29saWQgIzY0ZTY4MCcgJiYgdHJhbnNjcmlwdCAhPT0gXCLmiLvjgotcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRvcmQodHJhbnNmb3JtZXIodHJhbnNjcmlwdCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5rOo5paH6ZaL5aeL44Gu44Kz44Oe44Oz44OJ44GM5ZCr44G+44KM44KL5aC05ZCIXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JkZXJwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXh0QXJlYVwiKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1YmJsZVRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1YmJsZVRleHRcIikgYXMgSFRNTFRleHRBcmVhRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNjcmlwdC5pbmNsdWRlcyhcIuazqOaWhyDplovlp4tcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dDogc3RyaW5nID0gXCLpn7Plo7DjgafjgZTms6jmlofjgpLjganjgYbjgZ5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjplovlp4tcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZVRleHQuaW5uZXJUZXh0ID0gdGV4dDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOmWi+Wni+OBmeOCi+WJjeOBq+mfs+WjsOiqjeitmOOCkuWBnOatolxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGVlY2guc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAod2luZG93IGFzIGFueSkuaXNWb2ljZVZveFJ1bm5pbmcgPSB0cnVlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPRkbjgavjgZfjgb7jgZlcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrozkuobjgZnjgovjga7jgpLlvoXjgaRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm9pY2VWb3godGV4dCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrozkuobjgZfjgZ/lvozjgavpn7Plo7Doqo3orZjjgpLlho3plotcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1ZvaWNlVm94UnVubmluZyA9IGZhbHNlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi6Z+z5aOw6KqN6K2Y44KST07jgavjgZfjgb7jgZlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVlY2guc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZS5zdHlsZS5ib3JkZXIgPSAnNHB4IHNvbGlkICM2NGU2ODAnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Kr44O844OI44Gr6L+95YqgXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmFuc2NyaXB0LmluY2x1ZGVzKFwi44Kr44O844OI44Gr6L+95YqgXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFRhZyh0cmFuc2Zvcm1lcih0cmFuc2NyaXB0c1sxXSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zY3JpcHQuaW5jbHVkZXMoXCLjgqvjg7zjg4jjgpLooajnpLpcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dDogc3RyaW5nID0gXCLjgqvjg7zjg4jkuIDopqfjgpLooajnpLrjgZfjgb7jgZlcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLjgqvjg7zjg4jkuIDopqfjgpLooajnpLpcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZVRleHQuaW5uZXJUZXh0ID0gdGV4dDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOmWi+Wni+OBmeOCi+WJjeOBq+mfs+WjsOiqjeitmOOCkuWBnOatolxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGVlY2guc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAod2luZG93IGFzIGFueSkuaXNWb2ljZVZveFJ1bm5pbmcgPSB0cnVlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPRkbjgavjgZfjgb7jgZlcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrozkuobjgZnjgovjga7jgpLlvoXjgaRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm9pY2VWb3godGV4dCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrozkuobjgZfjgZ/lvozjgavpn7Plo7Doqo3orZjjgpLlho3plotcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1ZvaWNlVm94UnVubmluZyA9IGZhbHNlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi6Z+z5aOw6KqN6K2Y44KST07jgavjgZfjgb7jgZlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVlY2guc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJ0LmRpc3BsYXlDYXJ0Q29udGVudHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOOCq+ODvOODiOOCkumWieOBmOOCi1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNjcmlwdC5pbmNsdWRlcyhcIuOCq+ODvOODiOOCkumWieOBmOOCi1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuOCq+ODvOODiOS4gOimp+OCkumWieOBmOOCi1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVRvQ2VudGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDjgqvjg7zjg4jjgpLooajnpLpcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zY3JpcHQuaW5jbHVkZXMoXCLjgYLjgorjgb7jgZvjgpNcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLms6jmlofnorrlrprjg5zjgr/jg7PjgpLooajnpLpcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDms6jmlofnorrlrprjg5zjgr/jg7Pjga7opoHntKDjgpLlj5blvpdcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JkZXJCdXR0b246IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3JkZXJCdXR0b25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcnQuZGlzcGxheUNhcnRDb250ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNjcmlwdC5pbmNsdWRlcyhcIuazqOaWh+eiuuiqjVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDms6jmloflhoXnlKjjga7phY3liJfjgajlhoXlrrnmlbDjgpLooajnpLpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dDogc3RyaW5nID0gXCLms6jmloflhoXlrrnjgpLooajnpLrjgZfjgb7jgZlcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLms6jmlofnorroqo1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZVRleHQuaW5uZXJUZXh0ID0gdGV4dDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOmWi+Wni+OBmeOCi+WJjeOBq+mfs+WjsOiqjeitmOOCkuWBnOatolxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGVlY2guc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAod2luZG93IGFzIGFueSkuaXNWb2ljZVZveFJ1bm5pbmcgPSB0cnVlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPRkbjgavjgZfjgb7jgZlcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrozkuobjgZnjgovjga7jgpLlvoXjgaRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm9pY2VWb3godGV4dCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrozkuobjgZfjgZ/lvozjgavpn7Plo7Doqo3orZjjgpLlho3plotcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1ZvaWNlVm94UnVubmluZyA9IGZhbHNlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi6Z+z5aOw6KqN6K2Y44KST07jgavjgZfjgb7jgZlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVlY2guc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDjgqvjg7zjg4jjga7lhoXlrrnjgpLjg4bjgq3jgrnjg4jjgajjgZfjgabooajnpLpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNhcnRDb250ZW50cyA9ICfms6jmloflhoXlrrnvvJonO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhcnQuX2l0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJ0Q29udGVudHMgKz0gYFxcbiR7Y2FydC5faXRlbXNbaV19YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi44Kr44O844OI44Gu5YaF5a65XCIgKyBjYXJ0Q29udGVudHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyRGF0YS52YWx1ZSA9IGNhcnRDb250ZW50cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlLnN0eWxlLmJvcmRlciA9ICc0cHggc29saWQgI2RjMzMxYyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmFuc2NyaXB0LmluY2x1ZGVzKFwi5rOo5paH56K65a6aXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOazqOaWh+WGheeUqOOBrumFjeWIl+OBqOWGheWuueaVsOOCkuihqOekulxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0OiBzdHJpbmcgPSBcIuOBlOazqOaWh+OBguOCiuOBjOOBqOOBhuOBlOOBluOBhOOBvuOBme+8gVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuazqOaWh+eiuuWumlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlVGV4dC5pbm5lclRleHQgPSB0ZXh0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdm9pY2VWb3gg6Zai5pWw44GM6ZaL5aeL44GZ44KL5YmN44Gr6Z+z5aOw6KqN6K2Y44KS5YGc5q2iXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVjaC5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1ZvaWNlVm94UnVubmluZyA9IHRydWU7IC8vIHZvaWNlVm94IOmWouaVsOOBjOWun+ihjOS4reOBi+OBqeOBhuOBi+OCkuekuuOBmeODleODqeOCsFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIumfs+WjsOiqjeitmOOCkk9GRuOBq+OBl+OBvuOBmVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOWujOS6huOBmeOCi+OBruOCkuW+heOBpFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2b2ljZVZveCh0ZXh0KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOWujOS6huOBl+OBn+W+jOOBq+mfs+WjsOiqjeitmOOCkuWGjemWi1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nID0gZmFsc2U7IC8vIHZvaWNlVm94IOmWouaVsOOBjOWun+ihjOS4reOBi+OBqeOBhuOBi+OCkuekuuOBmeODleODqeOCsFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPTuOBq+OBl+OBvuOBmVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVjaC5zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Kr44O844OI44Gu5YaF5a6544KS44OG44Kt44K544OI44Go44GX44Gm6KGo56S6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYXJ0Q29udGVudHMgPSAn44GU5rOo5paH44GC44KK44GM44Go44GG44GU44GW44GE44G+44GZ77yBXFxu5rOo5paH5YaF5a6577yaJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYXJ0Ll9pdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FydENvbnRlbnRzICs9IGBcXG4ke2NhcnQuX2l0ZW1zW2ldfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuOCq+ODvOODiOOBruWGheWuuVwiICsgY2FydENvbnRlbnRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlckRhdGEudmFsdWUgPSBjYXJ0Q29udGVudHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZS5zdHlsZS5ib3JkZXIgPSAnNHB4IHNvbGlkICNkYzMzMWMnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5rOo5paH56K65a6a44Gu5Yem55CG44KS44GT44GT44Gr5pu444GPXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOOCq+ODvOODiOOBq+i/veWKoOODnOOCv+ODs+OBruimgee0oOOCkuWPluW+l1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXJ0QWRkQnV0dG9uOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhcnRBZGRCdXR0b25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcnRBZGRCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g44GC44KK44G+44Gb44KT44Oc44K/44Oz44Gu6KaB57Sg44KS5Y+W5b6XXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vTW9yZU9yZGVyQnV0dG9uOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5vTW9yZU9yZGVyQnV0dG9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub01vcmVPcmRlckJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDms6jmloflhaXlipvjg4bjgq3jgrnjg4jjgrPjg7Pjg4bjg4rjga7opoHntKDjgpLlj5blvpdcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dENvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXh0Q29udGFpbmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcnQuY2xlYXJDYXJ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVUb0NlbnRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zY3JpcHQuaW5jbHVkZXMoXCLjgYrjgZnjgZnjgoFcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g44GK44GZ44GZ44KB5qSc55+l5pmC44GrIE9wZW5XZWF0aGVyTWFwLmpzIOOCkuWLleOBi+OBmVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRXZWF0aGVyKCk7ICAvLyBPcGVuV2VhdGhlck1hcC5qc+WGheOBrumWouaVsOOCkuWRvOOBs+WHuuOBmVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+S7peS4i0FJ5ZG844Gz5Ye644GXXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmj5DmoYjnlLvpnaLjgpLjg53jg4Pjg5fjgqLjg4Pjg5fjgZnjgotcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxhZyA9IFwic3VnZ2VzdFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VMYXlvdXQoZmxhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlQb3B1cChmbGFnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmFuc2NyaXB0LmluY2x1ZGVzKFwi5Lya6KiIXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOS8muioiOmWi+Wni1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0OiBzdHJpbmcgPSBcIuOBiuS8muioiOOBr+OBk+OBoeOCieOBrumHkemhjeOBq+OBquOCiuOBvuOBmVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuS8muioiOmWi+Wni1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlVGV4dC5pbm5lclRleHQgPSB0ZXh0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdm9pY2VWb3gg6Zai5pWw44GM6ZaL5aeL44GZ44KL5YmN44Gr6Z+z5aOw6KqN6K2Y44KS5YGc5q2iXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVjaC5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1ZvaWNlVm94UnVubmluZyA9IHRydWU7IC8vIHZvaWNlVm94IOmWouaVsOOBjOWun+ihjOS4reOBi+OBqeOBhuOBi+OCkuekuuOBmeODleODqeOCsFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIumfs+WjsOiqjeitmOOCkk9GRuOBq+OBl+OBvuOBmVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOWujOS6huOBmeOCi+OBruOCkuW+heOBpFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2b2ljZVZveCh0ZXh0KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOWujOS6huOBl+OBn+W+jOOBq+mfs+WjsOiqjeitmOOCkuWGjemWi1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nID0gZmFsc2U7IC8vIHZvaWNlVm94IOmWouaVsOOBjOWun+ihjOS4reOBi+OBqeOBhuOBi+OCkuekuuOBmeODleODqeOCsFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPTuOBq+OBl+OBvuOBmVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVjaC5zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbmFsUHJpY2UgPSAxMDAwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJEYXRhLnZhbHVlID0gYOWQiOioiOmHkemhje+8miR7ZmluYWxQcmljZX3lhoZgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGDlkIjoqIjph5HpoY3vvJoke2ZpbmFsUHJpY2V95YaGYCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNjcmlwdC5pbmNsdWRlcyhcIuS8muioiOeiuuWumlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDkvJroqIjnorrlrppcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dDogc3RyaW5nID0gXCLjgZTmnaXlupfjgYLjgorjgYzjgajjgYbjgZTjgZbjgYTjgb7jgZfjgZ/vvIFcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLkvJroqIjnorrlrppcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZVRleHQuaW5uZXJUZXh0ID0gdGV4dDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOmWi+Wni+OBmeOCi+WJjeOBq+mfs+WjsOiqjeitmOOCkuWBnOatolxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGVlY2guc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAod2luZG93IGFzIGFueSkuaXNWb2ljZVZveFJ1bm5pbmcgPSB0cnVlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLpn7Plo7Doqo3orZjjgpJPRkbjgavjgZfjgb7jgZlcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrozkuobjgZnjgovjga7jgpLlvoXjgaRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm9pY2VWb3godGV4dCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrozkuobjgZfjgZ/lvozjgavpn7Plo7Doqo3orZjjgpLlho3plotcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1ZvaWNlVm94UnVubmluZyA9IGZhbHNlOyAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgYvjganjgYbjgYvjgpLnpLrjgZnjg5Xjg6njgrBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi6Z+z5aOw6KqN6K2Y44KST07jgavjgZfjgb7jgZlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVlY2guc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlckRhdGEudmFsdWUgPSBcIlRoYW5rIHlvdSFcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRoYW5rIHlvdSFcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+azqOaEjzrjg5rjg7zjgrjlhoXlrrnliYrpmaRcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlLnN0eWxlLmJvcmRlciA9ICc0cHggc29saWQgIzAwN2JmZic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVycC52YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuODmuODvOOCuOWGheWuueOCkuODquOCu+ODg+ODiOOBl+OBvuOBmVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlVGV4dC52YWx1ZSA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNjcmlwdC5pbmNsdWRlcyhcIuaIu+OCi1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL+azqOaEjzrjg5rjg7zjgrjlhoXlrrnliYrpmaRcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlLnN0eWxlLmJvcmRlciA9ICc0cHggc29saWQgIzAwN2JmZic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVycC52YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0OiBzdHJpbmcgPSBcIumfs+WjsOOBp+azqOaWh+OCkuOBqeOBhuOBnlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIumfs+WjsOOBp+azqOaWh+OCkuOBqeOBhuOBnlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlVGV4dC5pbm5lclRleHQgPSB0ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOmAlOS4ree1jOmBjuOBruiqjeitmOe1kOaenOOCkuihqOekulxyXG4gICAgICAgICAgICAgICAgICAgIGludGVyaW1UcmFuc2NyaXB0ICs9IHRyYW5zY3JpcHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9ICfoqo3orZjpgJTkuK06ICcgKyBpbnRlcmltVHJhbnNjcmlwdDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0ZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNwZWVjaExpc3RlbmVycy5yZXN1bHQgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyDjgrnjg5Tjg7zjg4Hoqo3orZjjgYzntYLkuobjgZfjgZ/jgajjgY3jga7lh6bnkIZcclxuICAgICAgICBzcGVlY2gub25lbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIOiqjeitmOOBjOe1guS6huOBl+OBn+OBqOOBjeOBruWHpueQhuOCkui/veWKoFxyXG4gICAgICAgICAgICAvLyDpn7Plo7Doqo3orZjjgYzntYLkuobjgZfjgabjgZfjgb7jgYbjga7jgaflho3luqbotbfli5VcclxuICAgICAgICAgICAgLy8gdm9pY2VWb3gg6Zai5pWw44GM5a6f6KGM5Lit44Gn44Gq44GR44KM44Gw6Z+z5aOw6KqN6K2Y44KS5YaN6ZaLXHJcbiAgICAgICAgICAgIGlmICghKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBzcGVlY2guc3RhcnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc3BlZWNoTGlzdGVuZXJzLmVuZCA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIOazqOaWh+OCkui/veWKoOOBmeOCi+mWouaVsFxyXG4gICAgICAgIGZ1bmN0aW9uIGFkZG9yZChhZGRzY3JpcHQ6IHN0cmluZykge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRleHRBcmVhXCIpIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQ7XHJcbiAgICAgICAgICAgIHJlc3VsdC52YWx1ZSArPSAn5rOo5paH6L+95YqgOiAnICsgYWRkc2NyaXB0O1xyXG4gICAgICAgICAgICBvcmRlckxpc3QucHVzaChhZGRzY3JpcHQpOyAvLyDms6jmloflhoXnlKjjga7phY3liJfjgavov73liqBcclxuICAgICAgICAgICAgY29uc29sZS5sb2cob3JkZXJMaXN0KTsgLy8g44Kz44Oz44K944O844Or56K66KqNXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL+iLseaVsOWtl+WkieaPm1xyXG4gICAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybWVyKHRyYW5zY3JpcHQ6IHN0cmluZykge1xyXG4gICAgICAgICAgICAvLyDlpKfmloflrZfjgIHlsI/mloflrZfjgIHjgqvjgr/jgqvjg4rjgafjga7nmbrpn7Pjgavlr77lv5zjgZfjgZ/lpInmj5vjg4bjg7zjg5bjg6tcclxuICAgICAgICAgICAgY29uc3QgY29udmVyc2lvblRhYmxlOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xyXG4gICAgICAgICAgICAgICAgLy8g5pWw5a2X44Gu5aSJ5o+b6KGoXHJcbiAgICAgICAgICAgICAgICAn44K844OtJzogJzAnLCAn6Zu2JzogJzAnLCAn44CHJzogJzAnLCAn77yQJzogJzAnLFxyXG4gICAgICAgICAgICAgICAgJ+S4gCc6ICcxJywgJ+OBhOOBoSc6ICcxJywgJ+OCpOODgSc6ICcxJywgJ++8kSc6ICcxJyxcclxuICAgICAgICAgICAgICAgICfkuownOiAnMicsICfjgasnOiAnMicsICfjg4snOiAnMicsICfvvJInOiAnMicsXHJcbiAgICAgICAgICAgICAgICAn5LiJJzogJzMnLCAn44GV44KTJzogJzMnLCAn44K144OzJzogJzMnLCAn77yTJzogJzMnLFxyXG4gICAgICAgICAgICAgICAgJ+Wbmyc6ICc0JywgJ+OBlyc6ICc0JywgJ+OCtyc6ICc0JywgJ+OCiOOCkyc6ICc0JywgJ+ODqOODsyc6ICc0JywgJ++8lCc6ICc0JyxcclxuICAgICAgICAgICAgICAgICfkupQnOiAnNScsICfjgZQnOiAnNScsICfjgrQnOiAnNScsICfvvJUnOiAnNScsXHJcbiAgICAgICAgICAgICAgICAn5YWtJzogJzYnLCAn44KN44GPJzogJzYnLCAn44Ot44KvJzogJzYnLCAn77yWJzogJzYnLFxyXG4gICAgICAgICAgICAgICAgJ+S4gyc6ICc3JywgJ+OBl+OBoSc6ICc3JywgJ+OCt+ODgSc6ICc3JywgJ+OBquOBqic6ICc3JywgJ+ODiuODiic6ICc3JywgJ++8lyc6ICc3JyxcclxuICAgICAgICAgICAgICAgICflhasnOiAnOCcsICfjga/jgaEnOiAnOCcsICfjg4/jg4EnOiAnOCcsICfvvJgnOiAnOCcsXHJcbiAgICAgICAgICAgICAgICAn5LmdJzogJzknLCAn44GN44KF44GGJzogJzknLCAn44Kt44Ol44KmJzogJzknLCAn44GPJzogJzknLCAn44KvJzogJzknLCAn77yZJzogJzknLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vIOOCouODq+ODleOCoeODmeODg+ODiOOBruWkieaPm+ihqO+8iOWkp+aWh+Wtl++8iVxyXG4gICAgICAgICAgICAgICAgJ+OCqOOCpCc6ICdBJywgJ+OCqOODvCc6ICdBJywgJ+OBiOOBhCc6ICdBJywgJ+OBiOODvCc6ICdBJywgJ2EnOiAnQScsICdBJzogJ0EnLFxyXG4gICAgICAgICAgICAgICAgJ+ODk+ODvCc6ICdCJywgJ+OBs+ODvCc6ICdCJywgJ2InOiAnQicsICdCJzogJ0InLFxyXG4gICAgICAgICAgICAgICAgJ+OCt+ODvCc6ICdDJywgJ+OBl+ODvCc6ICdDJywgJ2MnOiAnQycsICdDJzogJ0MnLFxyXG4gICAgICAgICAgICAgICAgJ+ODh+OCo+ODvCc6ICdEJywgJ+OBp+OBg+ODvCc6ICdEJywgJ2QnOiAnRCcsICdEJzogJ0QnLFxyXG4gICAgICAgICAgICAgICAgJ+OCpOODvCc6ICdFJywgJ+OBhOODvCc6ICdFJywgJ2UnOiAnRScsICdFJzogJ0UnLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOODlSc6ICdGJywgJ+OBiOOBtSc6ICdGJywgJ2YnOiAnRicsICdGJzogJ0YnLFxyXG4gICAgICAgICAgICAgICAgJ+OCuOODvCc6ICdHJywgJ+OBmOODvCc6ICdHJywgJ2cnOiAnRycsICdHJzogJ0cnLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOOCpOODgSc6ICdIJywgJ+OBiOOBhOOBoSc6ICdIJywgJ2gnOiAnSCcsICdIJzogJ0gnLFxyXG4gICAgICAgICAgICAgICAgJ+OCouOCpCc6ICdJJywgJ+OBguOBhCc6ICdJJywgJ2knOiAnSScsICdJJzogJ0knLFxyXG4gICAgICAgICAgICAgICAgJ+OCuOOCp+OCpCc6ICdKJywgJ+OCuOOCp+ODvCc6ICdKJywgJ+OBmOOBh+OBhCc6ICdKJywgJ+OBmOOBh+ODvCc6ICdKJywgJ2onOiAnSicsICdKJzogJ0onLFxyXG4gICAgICAgICAgICAgICAgJ+OCseOCpCc6ICdLJywgJ+OCseODvCc6ICdLJywgJ+OBkeOBhCc6ICdLJywgJ+OBkeODvCc6ICdLJywgJ2snOiAnSycsICdLJzogJ0snLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOODqyc6ICdMJywgJ+OBiOOCiyc6ICdMJywgJ2wnOiAnTCcsICdMJzogJ0wnLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOODoCc6ICdNJywgJ+OBiOOCgCc6ICdNJywgJ20nOiAnTScsICdNJzogJ00nLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOODjCc6ICdOJywgJ+OBiOOBrCc6ICdOJywgJ24nOiAnTicsICdOJzogJ04nLFxyXG4gICAgICAgICAgICAgICAgJ+OCquODvCc6ICdPJywgJ+OBiuODvCc6ICdPJywgJ28nOiAnTycsICdPJzogJ08nLFxyXG4gICAgICAgICAgICAgICAgJ+ODlOODvCc6ICdQJywgJ+OBtOODvCc6ICdQJywgJ3AnOiAnUCcsICdQJzogJ1AnLFxyXG4gICAgICAgICAgICAgICAgJ+OCreODpeODvCc6ICdRJywgJ+OBjeOCheODvCc6ICdRJywgJ3EnOiAnUScsICdRJzogJ1EnLFxyXG4gICAgICAgICAgICAgICAgJ+OCouODvOODqyc6ICdSJywgJ+OBguODvOOCiyc6ICdSJywgJ3InOiAnUicsICdSJzogJ1InLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOOCuSc6ICdTJywgJ+OBiOOBmSc6ICdTJywgJ3MnOiAnUycsICdTJzogJ1MnLFxyXG4gICAgICAgICAgICAgICAgJ+ODhuOCo+ODvCc6ICdUJywgJ+OBpuOBg+ODvCc6ICdUJywgJ3QnOiAnVCcsICdUJzogJ1QnLFxyXG4gICAgICAgICAgICAgICAgJ+ODpuODvCc6ICdVJywgJ+OChuODvCc6ICdVJywgJ3UnOiAnVScsICdVJzogJ1UnLFxyXG4gICAgICAgICAgICAgICAgJ+ODluOCpCc6ICdWJywgJ+OBtuOBhCc6ICdWJywgJ3YnOiAnVicsICdWJzogJ1YnLFxyXG4gICAgICAgICAgICAgICAgJ+ODgOODluODquODpeODvCc6ICdXJywgJ+OBoOOBtuOCiuOCheODvCc6ICdXJywgJ3cnOiAnVycsICdXJzogJ1cnLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOODg+OCr+OCuSc6ICdYJywgJ+OBiOOBo+OBj+OBmSc6ICdYJywgJ3gnOiAnWCcsICdYJzogJ1gnLFxyXG4gICAgICAgICAgICAgICAgJ+ODr+OCpCc6ICdZJywgJ+OCj+OBhCc6ICdZJywgJ3knOiAnWScsICdZJzogJ1knLFxyXG4gICAgICAgICAgICAgICAgJ+OCvOODg+ODiCc6ICdaJywgJ+OBnOOBo+OBqCc6ICdaJywgJ3onOiAnWicsICdaJzogJ1onLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbnZlcnRlZFRyYW5zY3JpcHQgPSB0cmFuc2NyaXB0O1xyXG4gICAgICAgICAgICAvLyDlpInmj5vjg4bjg7zjg5bjg6vjga7lkITjgqjjg7Pjg4jjg6rjgavlr77jgZfjgabjgIHmraPopo/ooajnj77jgpLkvb/nlKjjgZfjgablpInmj5vjgpLooYzjgYZcclxuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY29udmVyc2lvblRhYmxlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8ga2V5IOOCkuWkp+aWh+Wtl+Wwj+aWh+Wtl+OCkuWMuuWIpeOBm+OBmuOBq+aknOe0ouOBmeOCi+ato+imj+ihqOePvuOCkuS9nOaIkFxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGtleSwgJ2dpJyk7XHJcbiAgICAgICAgICAgICAgICAvLyDlpInmj5vjgZXjgozjgZ/mloflrZfliJfjgavlr77jgZfjgabjgIHmraPopo/ooajnj77jgavjg57jg4Pjg4HjgZnjgovpg6jliIbjgpIgdmFsdWUg44Gn572u5o+bXHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0ZWRUcmFuc2NyaXB0ID0gY29udmVydGVkVHJhbnNjcmlwdC5yZXBsYWNlKHJlZ2V4LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOOCouODq+ODleOCoeODmeODg+ODiOOBqOaVsOWtl+OBruOBv+OCkuWPluOCiuWHuuOBmVxyXG4gICAgICAgICAgICBjb252ZXJ0ZWRUcmFuc2NyaXB0ID0gY29udmVydGVkVHJhbnNjcmlwdC5tYXRjaCgvW2EtekEtWjAtOV0rL2cpLmpvaW4oJycpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnRlZFRyYW5zY3JpcHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhc3luYyBmdW5jdGlvbiBzZWFyY2hUYWcoaW5wdXRfdGFnczpzdHJpbmcpIHtcclxuICAgICAgICAgICAgLy8g5YWl5Yqb44GV44KM44Gf5paH5a2X5YiX44GM5a2Y5Zyo44GZ44KL44GL44KS5qSc57SiXHJcbiAgICAgICAgICAgIGlmICghZGlzaF9mbGcpIHtcclxuICAgICAgICAgICAgICAgIGRpc2hlcyA9IGF3YWl0IGZldGNoRGlzaGVzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzaGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGlzaGVzW2ldLnRhZ3M9PWlucHV0X3RhZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOe1kOaenOOCkuihqOekulxyXG4gICAgICAgICAgICBpZiAoZm91bmQpIHtcclxuICAgICAgICAgICAgICAgIGNhcnQuYWRkVG9DYXJ0KGRpc2hlc1tpXS5kaXNoX25hbWUpO1xyXG4gICAgICAgICAgICAgICAgY2FydC5faXRlbXMucHVzaChkaXNoZXNbaV0pOyAvLyBjYXJ06YWN5YiX44GraXRlbeOCkui/veWKoFxyXG4gICAgICAgICAgICAgICAgY2FydC5kaXNwbGF5Q2FydENvbnRlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInNlcmNoOuWFpeWKm+OBleOCjOOBn+aWh+Wtl+WIl+OBr+WtmOWcqOOBl+OBvuOBmeOAglwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2VyY2g65YWl5Yqb44GV44KM44Gf5paH5a2X5YiX44Gv5a2Y5Zyo44GX44G+44Gb44KT44CCXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhc3luYyBmdW5jdGlvbiBmZXRjaERpc2hlcygpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2dldC1kaXNoZXMnKTtcclxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIGVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc2hlcyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRpc2hlcztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxufSIsImltcG9ydCB7IHNwZWVjaF9RQSwgc3BlZWNoTGlzdGVuZXJzX1FBIH0gZnJvbSAnLi9zaGFyZWQnO1xyXG5cclxuc3BlZWNoX1FBLmxhbmcgPSAnamEtSlAnO1xyXG5zcGVlY2hfUUEuaW50ZXJpbVJlc3VsdHMgPSB0cnVlO1xyXG5cclxuaW1wb3J0IHsgc2VuZE1lc3NhZ2UgfSBmcm9tICcuL2NsaWVudCc7XHJcblxyXG4vLyDjgqTjg5njg7Pjg4jjg6rjgrnjg4rjg7zjgpLkuojjgoHnorroqo3jgZfjgabjgYrjgY/jgZ/jgoHjgatsYXBwdmlldy50c+OBp+Wumue+qVxyXG5leHBvcnQgY2xhc3MgU3BlZWNoUmVjX1FBe1xyXG4gICAgcHVibGljIHNwZWVjaEV2ZW50KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIEhUTUzopoHntKDjga7lj5blvpdcclxuICAgICAgICBjb25zdCBvcmRlckxpc3Q6IHN0cmluZ1tdID0gW107IC8vIOODhuOCueODiOeUqOazqOaWh+WGheeUqOOCkuiomOmMsuOBmeOCi+OBn+OCgeOBrumFjeWIl1xyXG4gICAgICAgIGxldCB0cmFuc2NyaXB0cyA9IFtcIlwiLCBcIlwiXTsgLy8g5pyA5paw44Gu6KqN6K2Y57WQ5p6c44Go5LiA44Gk5YmN44Gu6KqN6K2Y57WQ5p6c44KS5L+d5a2Y44GZ44KL6YWN5YiXXHJcbiAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nX1FBID0gZmFsc2U7IC8vIHZvaWNlVm94IOmWouaVsOOBjOWun+ihjOS4reOBi+OBqeOBhuOBi+OCkuekuuOBmeODleODqeOCsFxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi6Z+z5aOw6KqN6K2Y44KST07jgavjgZfjgb7jgZlcIik7XHJcblxyXG4gICAgICAgIC8vIOOCueODlOODvOODgeiqjeitmOOBrue1kOaenOOCkuWHpueQhuOBmeOCi+OCpOODmeODs+ODiOODquOCueODiuODvFxyXG4gICAgICAgIHNwZWVjaF9RQS5hZGRFdmVudExpc3RlbmVyKCdyZXN1bHQnLCBmdW5jdGlvbiAoZTogYW55KSB7XHJcbiAgICAgICAgICAgIGxldCBpbnRlcmltVHJhbnNjcmlwdCA9IFwiXCI7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU3BlZWNo5Yem55CG6ZaL5aeLXCIpO1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHREYXRhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtc2ctc2VuZFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGUucmVzdWx0SW5kZXg7IGkgPCBlLnJlc3VsdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zY3JpcHQgPSBlLnJlc3VsdHNbaV1bMF0udHJhbnNjcmlwdDsvL+iqjeitmOe1kOaenFxyXG4gICAgICAgICAgICAgICAgaWYgKGUucmVzdWx0c1tpXS5pc0ZpbmFsKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zY3JpcHRzWzFdID0gdHJhbnNjcmlwdHNbMF07IC8vIOS4gOOBpOWJjeOBruiqjeitmOe1kOaenOOCkuabtOaWsFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zY3JpcHRzWzBdID0gdHJhbnNjcmlwdDsgLy8g5pyA5paw44Gu6KqN6K2Y57WQ5p6c44KS5pu05pawXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IHJlc3VsdERhdGEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1zZy1zZW5kXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmVmb3JlRGF0YSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXNnLXNlbmQtaGlkZGVuXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3Qgb3JkZXJEYXRhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXh0QXJlYVwiKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IGJ1YmJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnViYmxlXCIpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHF1ZXNCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInF1ZXNCdXR0b25cIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXVlc1BvcHVwQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnF1ZXNQb3B1cC1Db250YWluZXInKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtaWNCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmltZy1taWNcIikgYXMgSFRNTEVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOiqjeitmOe1kOaenOihqOekulxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdRQeiqjeitmOe1kOaenO+8micgKyB0cmFuc2NyaXB0c1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0RGF0YS52YWx1ZSA9IHRyYW5zY3JpcHRzWzBdOyAvL+iqjeitmOWGheWuuei/veWKoFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlFBMeOBpOWJjeOBrue1kOaenO+8mlwiICsgdHJhbnNjcmlwdHNbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJlZm9yZURhdGEudmFsdWUgPSB0cmFuc2NyaXB0c1sxXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6IOM5pmv6Imy44GM57eR44Gu5pmC44GrYWRkb3Jk44Oh44K944OD44OJ44KS5ZG844Gz5Ye644GZXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1pY0J1dHRvbi5zdHlsZS5ib3JkZXIgPT09ICc0cHggc29saWQgI2RjMzMxYycgJiYgdHJhbnNjcmlwdCAhPT0gXCLmiLvjgotcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRvcmQodHJhbnNmb3JtZXIodHJhbnNjcmlwdCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5rOo5paH6ZaL5aeL44Gu44Kz44Oe44Oz44OJ44GM5ZCr44G+44KM44KL5aC05ZCIXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JkZXJwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXh0QXJlYVwiKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1YmJsZVRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1YmJsZVRleHRcIikgYXMgSFRNTFRleHRBcmVhRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNjcmlwdC5pbmNsdWRlcyhcIumAgeS/oVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kTWVzc2FnZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh3aW5kb3cgYXMgYW55KS5pc01pY0FjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWljQnV0dG9uLnN0eWxlLmJvcmRlciA9ICc0cHggc29saWQgIzAwN2JmZic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOmWi+Wni+OBmeOCi+WJjeOBq+mfs+WjsOiqjeitmOOCkuWBnOatolxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWNoX1FBLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5pc1ZvaWNlVm94UnVubmluZ19RQSA9IHRydWU7IC8vIHZvaWNlVm94IOmWouaVsOOBjOWun+ihjOS4reOBi+OBqeOBhuOBi+OCkuekuuOBmeODleODqeOCsFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmlzTWljQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlFB55So44Gu6Z+z5aOw6KqN6K2Y44KST0ZG44Gr44GX44G+44GZXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmFuc2NyaXB0LmluY2x1ZGVzKFwi5oi744KLXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5rOo5oSPOuODmuODvOOCuOWGheWuueWJiumZpFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaWNCdXR0b24uc3R5bGUuYm9yZGVyID0gJzRweCBzb2xpZCAjMDA3YmZmJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0RGF0YS52YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuWGheWuueODquOCu+ODg+ODiFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDpgJTkuK3ntYzpgY7jga7oqo3orZjntZDmnpzjgpLooajnpLpcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcmltVHJhbnNjcmlwdCArPSB0cmFuc2NyaXB0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSAn6KqN6K2Y6YCU5LitOiAnICsgaW50ZXJpbVRyYW5zY3JpcHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBzcGVlY2hMaXN0ZW5lcnNfUUEucmVzdWx0ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8g44K544OU44O844OB6KqN6K2Y44GM57WC5LqG44GX44Gf44Go44GN44Gu5Yem55CGXHJcbiAgICAgICAgc3BlZWNoX1FBLm9uZW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyDoqo3orZjjgYzntYLkuobjgZfjgZ/jgajjgY3jga7lh6bnkIbjgpLov73liqBcclxuICAgICAgICAgICAgLy8g6Z+z5aOw6KqN6K2Y44GM57WC5LqG44GX44Gm44GX44G+44GG44Gu44Gn5YaN5bqm6LW35YuVXHJcbiAgICAgICAgICAgICAgICAvLyB2b2ljZVZveCDplqLmlbDjgYzlrp/ooYzkuK3jgafjgarjgZHjgozjgbDpn7Plo7Doqo3orZjjgpLlho3plotcclxuICAgICAgICAgICAgICAgIGlmICghKHdpbmRvdyBhcyBhbnkpLmlzVm9pY2VWb3hSdW5uaW5nX1FBKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3BlZWNoX1FBLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzcGVlY2hMaXN0ZW5lcnNfUUEuZW5kID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8g5rOo5paH44KS6L+95Yqg44GZ44KL6Zai5pWwXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkb3JkKGFkZHNjcmlwdDogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJlZm9yZURhdGEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1zZy1zZW5kLWhpZGRlblwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgICAgICAgICBiZWZvcmVEYXRhLnZhbHVlICs9ICfms6jmlofov73liqA6ICcgKyBhZGRzY3JpcHQ7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGJlZm9yZURhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICBvcmRlckxpc3QucHVzaChhZGRzY3JpcHQpOyAvLyDms6jmloflhoXnlKjjga7phY3liJfjgavov73liqBcclxuICAgICAgICAgICAgY29uc29sZS5sb2cob3JkZXJMaXN0KTsgLy8g44Kz44Oz44K944O844Or56K66KqNXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL+iLseaVsOWtl+WkieaPm1xyXG4gICAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybWVyKHRyYW5zY3JpcHQ6IHN0cmluZykge1xyXG4gICAgICAgICAgICAvLyDlpKfmloflrZfjgIHlsI/mloflrZfjgIHjgqvjgr/jgqvjg4rjgafjga7nmbrpn7Pjgavlr77lv5zjgZfjgZ/lpInmj5vjg4bjg7zjg5bjg6tcclxuICAgICAgICAgICAgY29uc3QgY29udmVyc2lvblRhYmxlOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xyXG4gICAgICAgICAgICAgICAgLy8g5pWw5a2X44Gu5aSJ5o+b6KGoXHJcbiAgICAgICAgICAgICAgICAn44K844OtJzogJzAnLCAn6Zu2JzogJzAnLCAn44CHJzogJzAnLCAn77yQJzogJzAnLFxyXG4gICAgICAgICAgICAgICAgJ+S4gCc6ICcxJywgJ+OBhOOBoSc6ICcxJywgJ+OCpOODgSc6ICcxJywgJ++8kSc6ICcxJyxcclxuICAgICAgICAgICAgICAgICfkuownOiAnMicsICfjgasnOiAnMicsICfjg4snOiAnMicsICfvvJInOiAnMicsXHJcbiAgICAgICAgICAgICAgICAn5LiJJzogJzMnLCAn44GV44KTJzogJzMnLCAn44K144OzJzogJzMnLCAn77yTJzogJzMnLFxyXG4gICAgICAgICAgICAgICAgJ+Wbmyc6ICc0JywgJ+OBlyc6ICc0JywgJ+OCtyc6ICc0JywgJ+OCiOOCkyc6ICc0JywgJ+ODqOODsyc6ICc0JywgJ++8lCc6ICc0JyxcclxuICAgICAgICAgICAgICAgICfkupQnOiAnNScsICfjgZQnOiAnNScsICfjgrQnOiAnNScsICfvvJUnOiAnNScsXHJcbiAgICAgICAgICAgICAgICAn5YWtJzogJzYnLCAn44KN44GPJzogJzYnLCAn44Ot44KvJzogJzYnLCAn77yWJzogJzYnLFxyXG4gICAgICAgICAgICAgICAgJ+S4gyc6ICc3JywgJ+OBl+OBoSc6ICc3JywgJ+OCt+ODgSc6ICc3JywgJ+OBquOBqic6ICc3JywgJ+ODiuODiic6ICc3JywgJ++8lyc6ICc3JyxcclxuICAgICAgICAgICAgICAgICflhasnOiAnOCcsICfjga/jgaEnOiAnOCcsICfjg4/jg4EnOiAnOCcsICfvvJgnOiAnOCcsXHJcbiAgICAgICAgICAgICAgICAn5LmdJzogJzknLCAn44GN44KF44GGJzogJzknLCAn44Kt44Ol44KmJzogJzknLCAn44GPJzogJzknLCAn44KvJzogJzknLCAn77yZJzogJzknLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vIOOCouODq+ODleOCoeODmeODg+ODiOOBruWkieaPm+ihqO+8iOWkp+aWh+Wtl++8iVxyXG4gICAgICAgICAgICAgICAgJ+OCqOOCpCc6ICdBJywgJ+OCqOODvCc6ICdBJywgJ+OBiOOBhCc6ICdBJywgJ+OBiOODvCc6ICdBJywgJ2EnOiAnQScsICdBJzogJ0EnLFxyXG4gICAgICAgICAgICAgICAgJ+ODk+ODvCc6ICdCJywgJ+OBs+ODvCc6ICdCJywgJ2InOiAnQicsICdCJzogJ0InLFxyXG4gICAgICAgICAgICAgICAgJ+OCt+ODvCc6ICdDJywgJ+OBl+ODvCc6ICdDJywgJ2MnOiAnQycsICdDJzogJ0MnLFxyXG4gICAgICAgICAgICAgICAgJ+ODh+OCo+ODvCc6ICdEJywgJ+OBp+OBg+ODvCc6ICdEJywgJ2QnOiAnRCcsICdEJzogJ0QnLFxyXG4gICAgICAgICAgICAgICAgJ+OCpOODvCc6ICdFJywgJ+OBhOODvCc6ICdFJywgJ2UnOiAnRScsICdFJzogJ0UnLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOODlSc6ICdGJywgJ+OBiOOBtSc6ICdGJywgJ2YnOiAnRicsICdGJzogJ0YnLFxyXG4gICAgICAgICAgICAgICAgJ+OCuOODvCc6ICdHJywgJ+OBmOODvCc6ICdHJywgJ2cnOiAnRycsICdHJzogJ0cnLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOOCpOODgSc6ICdIJywgJ+OBiOOBhOOBoSc6ICdIJywgJ2gnOiAnSCcsICdIJzogJ0gnLFxyXG4gICAgICAgICAgICAgICAgJ+OCouOCpCc6ICdJJywgJ+OBguOBhCc6ICdJJywgJ2knOiAnSScsICdJJzogJ0knLFxyXG4gICAgICAgICAgICAgICAgJ+OCuOOCp+OCpCc6ICdKJywgJ+OCuOOCp+ODvCc6ICdKJywgJ+OBmOOBh+OBhCc6ICdKJywgJ+OBmOOBh+ODvCc6ICdKJywgJ2onOiAnSicsICdKJzogJ0onLFxyXG4gICAgICAgICAgICAgICAgJ+OCseOCpCc6ICdLJywgJ+OCseODvCc6ICdLJywgJ+OBkeOBhCc6ICdLJywgJ+OBkeODvCc6ICdLJywgJ2snOiAnSycsICdLJzogJ0snLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOODqyc6ICdMJywgJ+OBiOOCiyc6ICdMJywgJ2wnOiAnTCcsICdMJzogJ0wnLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOODoCc6ICdNJywgJ+OBiOOCgCc6ICdNJywgJ20nOiAnTScsICdNJzogJ00nLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOODjCc6ICdOJywgJ+OBiOOBrCc6ICdOJywgJ24nOiAnTicsICdOJzogJ04nLFxyXG4gICAgICAgICAgICAgICAgJ+OCquODvCc6ICdPJywgJ+OBiuODvCc6ICdPJywgJ28nOiAnTycsICdPJzogJ08nLFxyXG4gICAgICAgICAgICAgICAgJ+ODlOODvCc6ICdQJywgJ+OBtOODvCc6ICdQJywgJ3AnOiAnUCcsICdQJzogJ1AnLFxyXG4gICAgICAgICAgICAgICAgJ+OCreODpeODvCc6ICdRJywgJ+OBjeOCheODvCc6ICdRJywgJ3EnOiAnUScsICdRJzogJ1EnLFxyXG4gICAgICAgICAgICAgICAgJ+OCouODvOODqyc6ICdSJywgJ+OBguODvOOCiyc6ICdSJywgJ3InOiAnUicsICdSJzogJ1InLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOOCuSc6ICdTJywgJ+OBiOOBmSc6ICdTJywgJ3MnOiAnUycsICdTJzogJ1MnLFxyXG4gICAgICAgICAgICAgICAgJ+ODhuOCo+ODvCc6ICdUJywgJ+OBpuOBg+ODvCc6ICdUJywgJ3QnOiAnVCcsICdUJzogJ1QnLFxyXG4gICAgICAgICAgICAgICAgJ+ODpuODvCc6ICdVJywgJ+OChuODvCc6ICdVJywgJ3UnOiAnVScsICdVJzogJ1UnLFxyXG4gICAgICAgICAgICAgICAgJ+ODluOCpCc6ICdWJywgJ+OBtuOBhCc6ICdWJywgJ3YnOiAnVicsICdWJzogJ1YnLFxyXG4gICAgICAgICAgICAgICAgJ+ODgOODluODquODpeODvCc6ICdXJywgJ+OBoOOBtuOCiuOCheODvCc6ICdXJywgJ3cnOiAnVycsICdXJzogJ1cnLFxyXG4gICAgICAgICAgICAgICAgJ+OCqOODg+OCr+OCuSc6ICdYJywgJ+OBiOOBo+OBj+OBmSc6ICdYJywgJ3gnOiAnWCcsICdYJzogJ1gnLFxyXG4gICAgICAgICAgICAgICAgJ+ODr+OCpCc6ICdZJywgJ+OCj+OBhCc6ICdZJywgJ3knOiAnWScsICdZJzogJ1knLFxyXG4gICAgICAgICAgICAgICAgJ+OCvOODg+ODiCc6ICdaJywgJ+OBnOOBo+OBqCc6ICdaJywgJ3onOiAnWicsICdaJzogJ1onLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbnZlcnRlZFRyYW5zY3JpcHQgPSB0cmFuc2NyaXB0O1xyXG4gICAgICAgICAgICAvLyDlpInmj5vjg4bjg7zjg5bjg6vjga7lkITjgqjjg7Pjg4jjg6rjgavlr77jgZfjgabjgIHmraPopo/ooajnj77jgpLkvb/nlKjjgZfjgablpInmj5vjgpLooYzjgYZcclxuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY29udmVyc2lvblRhYmxlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8ga2V5IOOCkuWkp+aWh+Wtl+Wwj+aWh+Wtl+OCkuWMuuWIpeOBm+OBmuOBq+aknOe0ouOBmeOCi+ato+imj+ihqOePvuOCkuS9nOaIkFxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGtleSwgJ2dpJyk7XHJcbiAgICAgICAgICAgICAgICAvLyDlpInmj5vjgZXjgozjgZ/mloflrZfliJfjgavlr77jgZfjgabjgIHmraPopo/ooajnj77jgavjg57jg4Pjg4HjgZnjgovpg6jliIbjgpIgdmFsdWUg44Gn572u5o+bXHJcbiAgICAgICAgICAgICAgICBjb252ZXJ0ZWRUcmFuc2NyaXB0ID0gY29udmVydGVkVHJhbnNjcmlwdC5yZXBsYWNlKHJlZ2V4LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOOCouODq+ODleOCoeODmeODg+ODiOOBqOaVsOWtl+OBruOBv+OCkuWPluOCiuWHuuOBmVxyXG4gICAgICAgICAgICBjb252ZXJ0ZWRUcmFuc2NyaXB0ID0gY29udmVydGVkVHJhbnNjcmlwdC5tYXRjaCgvW2EtekEtWjAtOV0rL2cpLmpvaW4oJycpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnRlZFRyYW5zY3JpcHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufSIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExvZ0xldmVsIH0gZnJvbSAnQGZyYW1ld29yay9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuXG4vKipcbiAqIFNhbXBsZSBBcHDjgafkvb/nlKjjgZnjgovlrprmlbBcbiAqL1xuXG4vLyBDYW52YXMgd2lkdGggYW5kIGhlaWdodCBwaXhlbCB2YWx1ZXMsIG9yIGR5bmFtaWMgc2NyZWVuIHNpemUgKCdhdXRvJykuXG4vLyBleHBvcnQgY29uc3QgQ2FudmFzU2l6ZTogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9IHwgJ2F1dG8nID0gJ2F1dG8nO1xuZXhwb3J0IGNvbnN0IENhbnZhc1NpemU6IHsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXIgfSB8ICdhdXRvJyA9IHtcbiAgd2lkdGg6IDUwMCxcbiAgaGVpZ2h0OiA1MDAsXG59O1xuXG4vLyDnlLvpnaJcbmV4cG9ydCBjb25zdCBWaWV3U2NhbGUgPSAxLjA7XG5leHBvcnQgY29uc3QgVmlld01heFNjYWxlID0gMi4wO1xuZXhwb3J0IGNvbnN0IFZpZXdNaW5TY2FsZSA9IDAuODtcblxuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTGVmdCA9IC0xLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxSaWdodCA9IDEuMDtcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbEJvdHRvbSA9IC0xLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxUb3AgPSAxLjA7XG5cbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbE1heExlZnQgPSAtMi4wO1xuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4UmlnaHQgPSAyLjA7XG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxNYXhCb3R0b20gPSAtMi4wO1xuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4VG9wID0gMi4wO1xuXG4vLyDnm7jlr77jg5HjgrlcbmV4cG9ydCBjb25zdCBSZXNvdXJjZXNQYXRoID0gJy4uLy4uL1Jlc291cmNlcy8nO1xuXG4vLyDjg6Ljg4fjg6vjga7lvozjgo3jgavjgYLjgovog4zmma/jga7nlLvlg4/jg5XjgqHjgqTjg6tcbi8vIGV4cG9ydCBjb25zdCBCYWNrSW1hZ2VOYW1lID0gJ2JhY2tfY2xhc3Nfbm9ybWFsLnBuZyc7XG5leHBvcnQgY29uc3QgQmFja0ltYWdlTmFtZSA9ICcnO1xuXG4vLyDmra/ou4pcbi8vIGV4cG9ydCBjb25zdCBHZWFySW1hZ2VOYW1lID0gJ2ljb25fZ2Vhci5wbmcnO1xuZXhwb3J0IGNvbnN0IEdlYXJJbWFnZU5hbWUgPSAnJztcblxuLy8g57WC5LqG44Oc44K/44OzXG5leHBvcnQgY29uc3QgUG93ZXJJbWFnZU5hbWUgPSAnQ2xvc2VOb3JtYWwucG5nJztcblxuLy8g44Oi44OH44Or5a6a576pLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyDjg6Ljg4fjg6vjgpLphY3nva7jgZfjgZ/jg4fjgqPjg6zjgq/jg4jjg6rlkI3jga7phY3liJdcbi8vIOODh+OCo+ODrOOCr+ODiOODquWQjeOBqG1vZGVsMy5qc29u44Gu5ZCN5YmN44KS5LiA6Ie044GV44Gb44Gm44GK44GP44GT44GoXG5leHBvcnQgY29uc3QgTW9kZWxEaXI6IHN0cmluZ1tdID0gW1xuICAvLyAnSGFydScsXG4gIC8vICdIaXlvcmknLFxuICAvLyAnTWFyaycsXG4gIC8vICdOYXRvcmknLFxuICAvLyAnUmljZScsXG4gICdNYW8nXG5dO1xuZXhwb3J0IGNvbnN0IE1vZGVsRGlyU2l6ZTogbnVtYmVyID0gTW9kZWxEaXIubGVuZ3RoO1xuXG4vLyDlpJbpg6jlrprnvqnjg5XjgqHjgqTjg6vvvIhqc29u77yJ44Go5ZCI44KP44Gb44KLXG5leHBvcnQgY29uc3QgTW90aW9uR3JvdXBJZGxlID0gJ0lkbGUnOyAvLyDjgqLjgqTjg4njg6rjg7PjgrBcbmV4cG9ydCBjb25zdCBNb3Rpb25Hcm91cFRhcEJvZHkgPSAnVGFwQm9keSc7IC8vIOS9k+OCkuOCv+ODg+ODl+OBl+OBn+OBqOOBjVxuXG4vLyDlpJbpg6jlrprnvqnjg5XjgqHjgqTjg6vvvIhqc29u77yJ44Go5ZCI44KP44Gb44KLXG5leHBvcnQgY29uc3QgSGl0QXJlYU5hbWVIZWFkID0gJ0hlYWQnO1xuZXhwb3J0IGNvbnN0IEhpdEFyZWFOYW1lQm9keSA9ICdCb2R5JztcblxuLy8g44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm5a6a5pWwXG5leHBvcnQgY29uc3QgUHJpb3JpdHlOb25lID0gMDtcbmV4cG9ydCBjb25zdCBQcmlvcml0eUlkbGUgPSAxO1xuZXhwb3J0IGNvbnN0IFByaW9yaXR5Tm9ybWFsID0gMjtcbmV4cG9ydCBjb25zdCBQcmlvcml0eUZvcmNlID0gMztcblxuLy8gTU9DM+OBruS4gOiyq+aAp+aknOiovOOCquODl+OCt+ODp+ODs1xuZXhwb3J0IGNvbnN0IE1PQ0NvbnNpc3RlbmN5VmFsaWRhdGlvbkVuYWJsZSA9IHRydWU7XG5cbi8vIOODh+ODkOODg+OCsOeUqOODreOCsOOBruihqOekuuOCquODl+OCt+ODp+ODs1xuZXhwb3J0IGNvbnN0IERlYnVnTG9nRW5hYmxlID0gdHJ1ZTtcbmV4cG9ydCBjb25zdCBEZWJ1Z1RvdWNoTG9nRW5hYmxlID0gZmFsc2U7XG5cbi8vIEZyYW1ld29ya+OBi+OCieWHuuWKm+OBmeOCi+ODreOCsOOBruODrOODmeODq+ioreWumlxuZXhwb3J0IGNvbnN0IEN1YmlzbUxvZ2dpbmdMZXZlbDogTG9nTGV2ZWwgPSBMb2dMZXZlbC5Mb2dMZXZlbF9WZXJib3NlO1xuXG4vLyDjg4fjg5Xjgqnjg6vjg4jjga7jg6zjg7Pjg4Djg7zjgr/jg7zjgrLjg4Pjg4jjgrXjgqTjgrpcbmV4cG9ydCBjb25zdCBSZW5kZXJUYXJnZXRXaWR0aCA9IDE5MDA7XG5leHBvcnQgY29uc3QgUmVuZGVyVGFyZ2V0SGVpZ2h0ID0gMTAwMDtcbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IEN1YmlzbUZyYW1ld29yaywgT3B0aW9uIH0gZnJvbSAnQGZyYW1ld29yay9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xuXG5pbXBvcnQgKiBhcyBMQXBwRGVmaW5lIGZyb20gJy4vbGFwcGRlZmluZSc7XG5pbXBvcnQgeyBMQXBwTGl2ZTJETWFuYWdlciB9IGZyb20gJy4vbGFwcGxpdmUyZG1hbmFnZXInO1xuaW1wb3J0IHsgTEFwcFBhbCB9IGZyb20gJy4vbGFwcHBhbCc7XG5pbXBvcnQgeyBMQXBwVGV4dHVyZU1hbmFnZXIgfSBmcm9tICcuL2xhcHB0ZXh0dXJlbWFuYWdlcic7XG5pbXBvcnQgeyBMQXBwVmlldyB9IGZyb20gJy4vbGFwcHZpZXcnO1xuXG5leHBvcnQgbGV0IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSBudWxsO1xuLy8gZXhwb3J0IGxldCBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteUNhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xuZXhwb3J0IGxldCBzX2luc3RhbmNlOiBMQXBwRGVsZWdhdGUgPSBudWxsO1xuZXhwb3J0IGxldCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0ID0gbnVsbDtcbmV4cG9ydCBsZXQgZnJhbWVCdWZmZXI6IFdlYkdMRnJhbWVidWZmZXIgPSBudWxsO1xuXG4vKipcbiAqIOOCouODl+ODquOCseODvOOCt+ODp+ODs+OCr+ODqeOCueOAglxuICogQ3ViaXNtIFNES+OBrueuoeeQhuOCkuihjOOBhuOAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcERlbGVnYXRlIHtcbiAgLyoqXG4gICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkui/lOOBmeOAglxuICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgYznlJ/miJDjgZXjgozjgabjgYTjgarjgYTloLTlkIjjga/lhoXpg6jjgafjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnlJ/miJDjgZnjgovjgIJcbiAgICpcbiAgICogQHJldHVybiDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogTEFwcERlbGVnYXRlIHtcbiAgICBpZiAoc19pbnN0YW5jZSA9PSBudWxsKSB7XG4gICAgICBzX2luc3RhbmNlID0gbmV3IExBcHBEZWxlZ2F0ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBzX2luc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkuino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWxlYXNlSW5zdGFuY2UoKTogdm9pZCB7XG4gICAgaWYgKHNfaW5zdGFuY2UgIT0gbnVsbCkge1xuICAgICAgc19pbnN0YW5jZS5yZWxlYXNlKCk7XG4gICAgfVxuXG4gICAgc19pbnN0YW5jZSA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQVBQ44Gr5b+F6KaB44Gq54mp44KS5Yid5pyf5YyW44GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgaW5pdGlhbGl6ZSgpOiBib29sZWFuIHtcbiAgICAvLyDjgq3jg6Pjg7Pjg5Djgrnjga7kvZzmiJBcbiAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjYW52YXMuaWQgPSAnbXlDYW52YXMnOyAgLy8gSUTjgpLku5jjgZHjgotcblxuICAgIC8vIOeJueWumuOBruimgee0oOOCkuWPluW+l1xuICAgIGNvbnN0IGNhbnZhc0NvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbnZhcy1jb250YWluZXInKTtcblxuICAgIC8vIOWPluW+l+OBl+OBn+imgee0oOOBq0NhbnZhc+OCkui/veWKoFxuICAgIGlmIChjYW52YXNDb250YWluZXIpIHtcbiAgICAgIC8vIFR5cGVTY3JpcHTjgafnlJ/miJDjgZfjgZ9jYW52YXPjgpJib2R544Gr6L+95YqgXG4gICAgICBjYW52YXNDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdDYW52YXMgY29udGFpbmVy44GM44GC44KK44G+44Gb44KT44CCJyk7XG4gICAgfVxuICAgIC8vIFR5cGVTY3JpcHTjgafnlJ/miJDjgZfjgZ9jYW52YXPjgpJib2R544Gr6L+95YqgXG4gICAgLy8gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuXG4gICAgaWYgKExBcHBEZWZpbmUuQ2FudmFzU2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICB0aGlzLl9yZXNpemVDYW52YXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FudmFzLndpZHRoID0gTEFwcERlZmluZS5DYW52YXNTaXplLndpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IExBcHBEZWZpbmUuQ2FudmFzU2l6ZS5oZWlnaHQ7XG4gICAgfVxuXG4gICAgLy8gZ2zjgrPjg7Pjg4bjgq3jgrnjg4jjgpLliJ3mnJ/ljJZcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnKSB8fCBjYW52YXMuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJyk7XG5cbiAgICBpZiAoIWdsKSB7XG4gICAgICBhbGVydCgnQ2Fubm90IGluaXRpYWxpemUgV2ViR0wuIFRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0LicpO1xuICAgICAgZ2wgPSBudWxsO1xuXG4gICAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9XG4gICAgICAgICdUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgPGNvZGU+Jmx0O2NhbnZhcyZndDs8L2NvZGU+IGVsZW1lbnQuJztcblxuICAgICAgLy8gZ2zliJ3mnJ/ljJblpLHmlZdcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyDjgq3jg6Pjg7Pjg5DjgrnjgpIgRE9NIOOBq+i/veWKoFxuICAgIC8vIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcblxuICAgIGlmICghZnJhbWVCdWZmZXIpIHtcbiAgICAgIGZyYW1lQnVmZmVyID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkZSQU1FQlVGRkVSX0JJTkRJTkcpO1xuICAgIH1cblxuICAgIC8vIOmAj+mBjuioreWumlxuICAgIGdsLmVuYWJsZShnbC5CTEVORCk7XG4gICAgZ2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG5cbiAgICBjb25zdCBzdXBwb3J0VG91Y2g6IGJvb2xlYW4gPSAnb250b3VjaGVuZCcgaW4gY2FudmFzO1xuXG4gICAgaWYgKHN1cHBvcnRUb3VjaCkge1xuICAgICAgLy8g44K/44OD44OB6Zai6YCj44Kz44O844Or44OQ44OD44Kv6Zai5pWw55m76YyyXG4gICAgICBjYW52YXMub250b3VjaHN0YXJ0ID0gb25Ub3VjaEJlZ2FuO1xuICAgICAgY2FudmFzLm9udG91Y2htb3ZlID0gb25Ub3VjaE1vdmVkO1xuICAgICAgY2FudmFzLm9udG91Y2hlbmQgPSBvblRvdWNoRW5kZWQ7XG4gICAgICBjYW52YXMub250b3VjaGNhbmNlbCA9IG9uVG91Y2hDYW5jZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIOODnuOCpuOCuemWoumAo+OCs+ODvOODq+ODkOODg+OCr+mWouaVsOeZu+mMslxuICAgICAgY2FudmFzLm9ubW91c2Vkb3duID0gb25DbGlja0JlZ2FuO1xuICAgICAgY2FudmFzLm9ubW91c2Vtb3ZlID0gb25Nb3VzZU1vdmVkO1xuICAgICAgY2FudmFzLm9ubW91c2V1cCA9IG9uQ2xpY2tFbmRlZDtcbiAgICB9XG5cbiAgICAvLyBBcHBWaWV344Gu5Yid5pyf5YyWXG4gICAgdGhpcy5fdmlldy5pbml0aWFsaXplKCk7XG5cbiAgICAvLyBDdWJpc20gU0RL44Gu5Yid5pyf5YyWXG4gICAgdGhpcy5pbml0aWFsaXplQ3ViaXNtKCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemUgY2FudmFzIGFuZCByZS1pbml0aWFsaXplIHZpZXcuXG4gICAqL1xuICBwdWJsaWMgb25SZXNpemUoKTogdm9pZCB7XG4gICAgdGhpcy5fcmVzaXplQ2FudmFzKCk7XG4gICAgdGhpcy5fdmlldy5pbml0aWFsaXplKCk7XG4gICAgdGhpcy5fdmlldy5pbml0aWFsaXplU3ByaXRlKCk7XG5cbiAgICAvLyDjgq3jg6Pjg7Pjg5DjgrnjgrXjgqTjgrrjgpLmuKHjgZlcbiAgICBjb25zdCB2aWV3cG9ydDogbnVtYmVyW10gPSBbMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0XTtcblxuICAgIGdsLnZpZXdwb3J0KHZpZXdwb3J0WzBdLCB2aWV3cG9ydFsxXSwgdmlld3BvcnRbMl0sIHZpZXdwb3J0WzNdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX3RleHR1cmVNYW5hZ2VyLnJlbGVhc2UoKTtcbiAgICB0aGlzLl90ZXh0dXJlTWFuYWdlciA9IG51bGw7XG5cbiAgICB0aGlzLl92aWV3LnJlbGVhc2UoKTtcbiAgICB0aGlzLl92aWV3ID0gbnVsbDtcblxuICAgIC8vIOODquOCveODvOOCueOCkuino+aUvlxuICAgIExBcHBMaXZlMkRNYW5hZ2VyLnJlbGVhc2VJbnN0YW5jZSgpO1xuXG4gICAgLy8gQ3ViaXNtIFNES+OBruino+aUvlxuICAgIEN1YmlzbUZyYW1ld29yay5kaXNwb3NlKCk7XG4gIH1cblxuICAvKipcbiAgICog5a6f6KGM5Yem55CG44CCXG4gICAqL1xuICBwdWJsaWMgcnVuKCk6IHZvaWQge1xuICAgIC8vIOODoeOCpOODs+ODq+ODvOODl1xuICAgIGNvbnN0IGxvb3AgPSAoKTogdm9pZCA9PiB7XG4gICAgICAvLyDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7mnInnhKHjga7norroqo1cbiAgICAgIGlmIChzX2luc3RhbmNlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyDmmYLplpPmm7TmlrBcbiAgICAgIExBcHBQYWwudXBkYXRlVGltZSgpO1xuXG4gICAgICAvLyDnlLvpnaLjga7liJ3mnJ/ljJZcbiAgICAgIC8vIGdsLmNsZWFyQ29sb3IoMC4wLCAwLjAsIDAuMCwgMS4wKTtcbiAgICAgIGdsLmNsZWFyQ29sb3IoMC4wLCAwLjAsIDAuMCwgMC4wKTtcblxuICAgICAgLy8g5rex5bqm44OG44K544OI44KS5pyJ5Yq55YyWXG4gICAgICBnbC5lbmFibGUoZ2wuREVQVEhfVEVTVCk7XG5cbiAgICAgIC8vIOi/keOBj+OBq+OBguOCi+eJqeS9k+OBr+OAgemBoOOBj+OBq+OBguOCi+eJqeS9k+OCkuimhuOBhOmaoOOBmVxuICAgICAgZ2wuZGVwdGhGdW5jKGdsLkxFUVVBTCk7XG5cbiAgICAgIC8vIOOCq+ODqeODvOODkOODg+ODleOCoeOChOa3seW6puODkOODg+ODleOCoeOCkuOCr+ODquOCouOBmeOCi1xuICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IGdsLkRFUFRIX0JVRkZFUl9CSVQpO1xuXG4gICAgICBnbC5jbGVhckRlcHRoKDEuMCk7XG5cbiAgICAgIC8vIOmAj+mBjuioreWumlxuICAgICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcbiAgICAgIGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXG4gICAgICAvLyDmj4/nlLvmm7TmlrBcbiAgICAgIHRoaXMuX3ZpZXcucmVuZGVyKCk7XG5cbiAgICAgIC8vIOODq+ODvOODl+OBruOBn+OCgeOBq+WGjeW4sOWRvOOBs+WHuuOBl1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApO1xuICAgIH07XG4gICAgbG9vcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCt+OCp+ODvOODgOODvOOCkueZu+mMsuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIGNyZWF0ZVNoYWRlcigpOiBXZWJHTFByb2dyYW0ge1xuICAgIC8vIOODkOODvOODhuODg+OCr+OCueOCt+OCp+ODvOODgOODvOOBruOCs+ODs+ODkeOCpOODq1xuICAgIGNvbnN0IHZlcnRleFNoYWRlcklkID0gZ2wuY3JlYXRlU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIpO1xuXG4gICAgaWYgKHZlcnRleFNoYWRlcklkID09IG51bGwpIHtcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCdmYWlsZWQgdG8gY3JlYXRlIHZlcnRleFNoYWRlcicpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgdmVydGV4U2hhZGVyOiBzdHJpbmcgPVxuICAgICAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycgK1xuICAgICAgJ2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uOycgK1xuICAgICAgJ2F0dHJpYnV0ZSB2ZWMyIHV2OycgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2dXY7JyArXG4gICAgICAndm9pZCBtYWluKHZvaWQpJyArXG4gICAgICAneycgK1xuICAgICAgJyAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMS4wKTsnICtcbiAgICAgICcgICB2dXYgPSB1djsnICtcbiAgICAgICd9JztcblxuICAgIGdsLnNoYWRlclNvdXJjZSh2ZXJ0ZXhTaGFkZXJJZCwgdmVydGV4U2hhZGVyKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKHZlcnRleFNoYWRlcklkKTtcblxuICAgIC8vIOODleODqeOCsOODoeODs+ODiOOCt+OCp+ODvOODgOOBruOCs+ODs+ODkeOCpOODq1xuICAgIGNvbnN0IGZyYWdtZW50U2hhZGVySWQgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcblxuICAgIGlmIChmcmFnbWVudFNoYWRlcklkID09IG51bGwpIHtcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCdmYWlsZWQgdG8gY3JlYXRlIGZyYWdtZW50U2hhZGVyJyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBmcmFnbWVudFNoYWRlcjogc3RyaW5nID1cbiAgICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdnV2OycgK1xuICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHRleHR1cmU7JyArXG4gICAgICAndm9pZCBtYWluKHZvaWQpJyArXG4gICAgICAneycgK1xuICAgICAgJyAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh0ZXh0dXJlLCB2dXYpOycgK1xuICAgICAgJ30nO1xuXG4gICAgZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50U2hhZGVySWQsIGZyYWdtZW50U2hhZGVyKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKGZyYWdtZW50U2hhZGVySWQpO1xuXG4gICAgLy8g44OX44Ot44Kw44Op44Og44Kq44OW44K444Kn44Kv44OI44Gu5L2c5oiQXG4gICAgY29uc3QgcHJvZ3JhbUlkID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtSWQsIHZlcnRleFNoYWRlcklkKTtcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbUlkLCBmcmFnbWVudFNoYWRlcklkKTtcblxuICAgIGdsLmRlbGV0ZVNoYWRlcih2ZXJ0ZXhTaGFkZXJJZCk7XG4gICAgZ2wuZGVsZXRlU2hhZGVyKGZyYWdtZW50U2hhZGVySWQpO1xuXG4gICAgLy8g44Oq44Oz44KvXG4gICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbUlkKTtcblxuICAgIGdsLnVzZVByb2dyYW0ocHJvZ3JhbUlkKTtcblxuICAgIHJldHVybiBwcm9ncmFtSWQ7XG4gIH1cblxuICAvKipcbiAgICogVmlld+aDheWgseOCkuWPluW+l+OBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIGdldFZpZXcoKTogTEFwcFZpZXcge1xuICAgIHJldHVybiB0aGlzLl92aWV3O1xuICB9XG5cbiAgcHVibGljIGdldFRleHR1cmVNYW5hZ2VyKCk6IExBcHBUZXh0dXJlTWFuYWdlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RleHR1cmVNYW5hZ2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fY2FwdHVyZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9tb3VzZVggPSAwLjA7XG4gICAgdGhpcy5fbW91c2VZID0gMC4wO1xuICAgIHRoaXMuX2lzRW5kID0gZmFsc2U7XG5cbiAgICB0aGlzLl9jdWJpc21PcHRpb24gPSBuZXcgT3B0aW9uKCk7XG4gICAgdGhpcy5fdmlldyA9IG5ldyBMQXBwVmlldygpO1xuICAgIHRoaXMuX3RleHR1cmVNYW5hZ2VyID0gbmV3IExBcHBUZXh0dXJlTWFuYWdlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEN1YmlzbSBTREvjga7liJ3mnJ/ljJZcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplQ3ViaXNtKCk6IHZvaWQge1xuICAgIC8vIHNldHVwIGN1YmlzbVxuICAgIHRoaXMuX2N1YmlzbU9wdGlvbi5sb2dGdW5jdGlvbiA9IExBcHBQYWwucHJpbnRNZXNzYWdlO1xuICAgIHRoaXMuX2N1YmlzbU9wdGlvbi5sb2dnaW5nTGV2ZWwgPSBMQXBwRGVmaW5lLkN1YmlzbUxvZ2dpbmdMZXZlbDtcbiAgICBDdWJpc21GcmFtZXdvcmsuc3RhcnRVcCh0aGlzLl9jdWJpc21PcHRpb24pO1xuXG4gICAgLy8gaW5pdGlhbGl6ZSBjdWJpc21cbiAgICBDdWJpc21GcmFtZXdvcmsuaW5pdGlhbGl6ZSgpO1xuXG4gICAgLy8gbG9hZCBtb2RlbFxuICAgIExBcHBMaXZlMkRNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG5cbiAgICBMQXBwUGFsLnVwZGF0ZVRpbWUoKTtcblxuICAgIHRoaXMuX3ZpZXcuaW5pdGlhbGl6ZVNwcml0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2l6ZSB0aGUgY2FudmFzIHRvIGZpbGwgdGhlIHNjcmVlbi5cbiAgICovXG4gIHByaXZhdGUgX3Jlc2l6ZUNhbnZhcygpOiB2b2lkIHtcbiAgICBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICB9XG5cbiAgX2N1YmlzbU9wdGlvbjogT3B0aW9uOyAvLyBDdWJpc20gU0RLIE9wdGlvblxuICBfdmlldzogTEFwcFZpZXc7IC8vIFZpZXfmg4XloLFcbiAgX2NhcHR1cmVkOiBib29sZWFuOyAvLyDjgq/jg6rjg4Pjgq/jgZfjgabjgYTjgovjgYtcbiAgX21vdXNlWDogbnVtYmVyOyAvLyDjg57jgqbjgrlY5bqn5qiZXG4gIF9tb3VzZVk6IG51bWJlcjsgLy8g44Oe44Km44K5WeW6p+aomVxuICBfaXNFbmQ6IGJvb2xlYW47IC8vIEFQUOe1guS6huOBl+OBpuOBhOOCi+OBi1xuICBfdGV4dHVyZU1hbmFnZXI6IExBcHBUZXh0dXJlTWFuYWdlcjsgLy8g44OG44Kv44K544OB44Oj44Oe44ON44O844K444Oj44O8XG59XG5cbi8qKlxuICog44Kv44Oq44OD44Kv44GX44Gf44Go44GN44Gr5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uQ2xpY2tCZWdhbihlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fY2FwdHVyZWQgPSB0cnVlO1xuXG4gIGNvbnN0IHBvc1g6IG51bWJlciA9IGUucGFnZVg7XG4gIGNvbnN0IHBvc1k6IG51bWJlciA9IGUucGFnZVk7XG5cbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcub25Ub3VjaGVzQmVnYW4ocG9zWCwgcG9zWSk7XG59XG5cbi8qKlxuICog44Oe44Km44K544Od44Kk44Oz44K/44GM5YuV44GE44Gf44KJ5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uTW91c2VNb3ZlZChlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldykge1xuICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCd2aWV3IG5vdGZvdW5kJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmVjdCA9IChlLnRhcmdldCBhcyBFbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgcG9zWDogbnVtYmVyID0gZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICBjb25zdCBwb3NZOiBudW1iZXIgPSBlLmNsaWVudFkgLSByZWN0LnRvcDtcblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNNb3ZlZChwb3NYLCBwb3NZKTtcbn1cblxuLyoqXG4gKiDjgq/jg6rjg4Pjgq/jgYzntYLkuobjgZfjgZ/jgonlkbzjgbDjgozjgovjgIJcbiAqL1xuZnVuY3Rpb24gb25DbGlja0VuZGVkKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkID0gZmFsc2U7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHBvc1g6IG51bWJlciA9IGUuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgY29uc3QgcG9zWTogbnVtYmVyID0gZS5jbGllbnRZIC0gcmVjdC50b3A7XG5cbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcub25Ub3VjaGVzRW5kZWQocG9zWCwgcG9zWSk7XG59XG5cbi8qKlxuICog44K/44OD44OB44GX44Gf44Go44GN44Gr5ZG844Gw44KM44KL44CCXG4gKi9cbmZ1bmN0aW9uIG9uVG91Y2hCZWdhbihlOiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCA9IHRydWU7XG5cbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVg7XG4gIGNvbnN0IHBvc1kgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0JlZ2FuKHBvc1gsIHBvc1kpO1xufVxuXG4vKipcbiAqIOOCueODr+OCpOODl+OBmeOCi+OBqOWRvOOBsOOCjOOCi+OAglxuICovXG5mdW5jdGlvbiBvblRvdWNoTW92ZWQoZTogVG91Y2hFdmVudCk6IHZvaWQge1xuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgY29uc3QgcG9zWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIHJlY3QudG9wO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc01vdmVkKHBvc1gsIHBvc1kpO1xufVxuXG4vKipcbiAqIOOCv+ODg+ODgeOBjOe1guS6huOBl+OBn+OCieWRvOOBsOOCjOOCi+OAglxuICovXG5mdW5jdGlvbiBvblRvdWNoRW5kZWQoZTogVG91Y2hFdmVudCk6IHZvaWQge1xuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fY2FwdHVyZWQgPSBmYWxzZTtcblxuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ3ZpZXcgbm90Zm91bmQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCByZWN0ID0gKGUudGFyZ2V0IGFzIEVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIGNvbnN0IHBvc1ggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gIGNvbnN0IHBvc1kgPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgLSByZWN0LnRvcDtcblxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNFbmRlZChwb3NYLCBwb3NZKTtcbn1cblxuLyoqXG4gKiDjgr/jg4Pjg4HjgYzjgq3jg6Pjg7Pjgrvjg6vjgZXjgozjgovjgajlkbzjgbDjgozjgovjgIJcbiAqL1xuZnVuY3Rpb24gb25Ub3VjaENhbmNlbChlOiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCA9IGZhbHNlO1xuXG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgY29uc3QgcG9zWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIHJlY3QudG9wO1xuXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0VuZGVkKHBvc1gsIHBvc1kpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgQ3ViaXNtTWF0cml4NDQgfSBmcm9tICdAZnJhbWV3b3JrL21hdGgvY3ViaXNtbWF0cml4NDQnO1xuaW1wb3J0IHsgQUN1YmlzbU1vdGlvbiB9IGZyb20gJ0BmcmFtZXdvcmsvbW90aW9uL2FjdWJpc21tb3Rpb24nO1xuaW1wb3J0IHsgY3NtVmVjdG9yIH0gZnJvbSAnQGZyYW1ld29yay90eXBlL2NzbXZlY3Rvcic7XG5cbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcbmltcG9ydCB7IGNhbnZhcyB9IGZyb20gJy4vbGFwcGRlbGVnYXRlJztcbmltcG9ydCB7IExBcHBNb2RlbCB9IGZyb20gJy4vbGFwcG1vZGVsJztcbmltcG9ydCB7IExBcHBQYWwgfSBmcm9tICcuL2xhcHBwYWwnO1xuXG5leHBvcnQgbGV0IHNfaW5zdGFuY2U6IExBcHBMaXZlMkRNYW5hZ2VyID0gbnVsbDtcbi8vIGV4cG9ydCBsZXQgY2FudmFzMjogSFRNTENhbnZhc0VsZW1lbnQgPSBudWxsO1xuXG4vKipcbiAqIOOCteODs+ODl+ODq+OCouODl+ODquOCseODvOOCt+ODp+ODs+OBq+OBiuOBhOOBpkN1YmlzbU1vZGVs44KS566h55CG44GZ44KL44Kv44Op44K5XG4gKiDjg6Ljg4fjg6vnlJ/miJDjgajnoLTmo4TjgIHjgr/jg4Pjg5fjgqTjg5njg7Pjg4jjga7lh6bnkIbjgIHjg6Ljg4fjg6vliIfjgormm7/jgYjjgpLooYzjgYbjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBMaXZlMkRNYW5hZ2VyIHtcbiAgICAvKipcbiAgICAgKiDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrnvvIjjgrfjg7PjgrDjg6vjg4jjg7PvvInjgpLov5TjgZnjgIJcbiAgICAgKiDjgqTjg7Pjgrnjgr/jg7PjgrnjgYznlJ/miJDjgZXjgozjgabjgYTjgarjgYTloLTlkIjjga/lhoXpg6jjgafjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnlJ/miJDjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEByZXR1cm4g44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBMQXBwTGl2ZTJETWFuYWdlciB7XG4gICAgICAgIGlmIChzX2luc3RhbmNlID09IG51bGwpIHtcbiAgICAgICAgICAgIHNfaW5zdGFuY2UgPSBuZXcgTEFwcExpdmUyRE1hbmFnZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzX2luc3RhbmNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkuino+aUvuOBmeOCi+OAglxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmVsZWFzZUluc3RhbmNlKCk6IHZvaWQge1xuICAgICAgICBpZiAoc19pbnN0YW5jZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzX2luc3RhbmNlID0gdm9pZCAwO1xuICAgICAgICB9XG5cbiAgICAgICAgc19pbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54++5Zyo44Gu44K344O844Oz44Gn5L+d5oyB44GX44Gm44GE44KL44Oi44OH44Or44KS6L+U44GZ44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm8g44Oi44OH44Or44Oq44K544OI44Gu44Kk44Oz44OH44OD44Kv44K55YCkXG4gICAgICogQHJldHVybiDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLov5TjgZnjgILjgqTjg7Pjg4fjg4Pjgq/jgrnlgKTjgYznr4Tlm7LlpJbjga7loLTlkIjjga9OVUxM44KS6L+U44GZ44CCXG4gICAgICovXG4gICAgcHVibGljIGdldE1vZGVsKG5vOiBudW1iZXIpOiBMQXBwTW9kZWwge1xuICAgICAgICBpZiAobm8gPCB0aGlzLl9tb2RlbHMuZ2V0U2l6ZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWxzLmF0KG5vKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOePvuWcqOOBruOCt+ODvOODs+OBp+S/neaMgeOBl+OBpuOBhOOCi+OBmeOBueOBpuOBruODouODh+ODq+OCkuino+aUvuOBmeOCi1xuICAgICAqL1xuICAgIHB1YmxpYyByZWxlYXNlQWxsTW9kZWwoKTogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW9kZWxzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9tb2RlbHMuYXQoaSkucmVsZWFzZSgpO1xuICAgICAgICAgICAgdGhpcy5fbW9kZWxzLnNldChpLCBudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX21vZGVscy5jbGVhcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeUu+mdouOCkuODieODqeODg+OCsOOBl+OBn+aZguOBruWHpueQhlxuICAgICAqXG4gICAgICogQHBhcmFtIHgg55S76Z2i44GuWOW6p+aomVxuICAgICAqIEBwYXJhbSB5IOeUu+mdouOBrlnluqfmqJlcbiAgICAgKi9cbiAgICBwdWJsaWMgb25EcmFnKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbW9kZWxzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBtb2RlbDogTEFwcE1vZGVsID0gdGhpcy5nZXRNb2RlbChpKTtcblxuICAgICAgICAgICAgaWYgKG1vZGVsKSB7XG4gICAgICAgICAgICAgICAgbW9kZWwuc2V0RHJhZ2dpbmcoeCwgeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnlLvpnaLjgpLjgr/jg4Pjg5fjgZfjgZ/mmYLjga7lh6bnkIZcbiAgICAgKlxuICAgICAqIEBwYXJhbSB4IOeUu+mdouOBrljluqfmqJlcbiAgICAgKiBAcGFyYW0geSDnlLvpnaLjga5Z5bqn5qiZXG4gICAgICovXG4gICAgcHVibGljIG9uVGFwKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmIChMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlKSB7XG4gICAgICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShcbiAgICAgICAgICAgICAgICBgW0FQUF10YXAgcG9pbnQ6IHt4OiAke3gudG9GaXhlZCgyKX0geTogJHt5LnRvRml4ZWQoMil9fWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vZGVscy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX21vZGVscy5hdChpKS5oaXRUZXN0KExBcHBEZWZpbmUuSGl0QXJlYU5hbWVIZWFkLCB4LCB5KSkge1xuICAgICAgICAgICAgICAgIGlmIChMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgICAgICAgYFtBUFBdaGl0IGFyZWE6IFske0xBcHBEZWZpbmUuSGl0QXJlYU5hbWVIZWFkfV1gXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVscy5hdChpKS5zZXRSYW5kb21FeHByZXNzaW9uKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX21vZGVscy5hdChpKS5oaXRUZXN0KExBcHBEZWZpbmUuSGl0QXJlYU5hbWVCb2R5LCB4LCB5KSkge1xuICAgICAgICAgICAgICAgIGlmIChMQXBwRGVmaW5lLkRlYnVnTG9nRW5hYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgICAgICAgYFtBUFBdaGl0IGFyZWE6IFske0xBcHBEZWZpbmUuSGl0QXJlYU5hbWVCb2R5fV1gXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsc1xuICAgICAgICAgICAgICAgICAgICAuYXQoaSlcbiAgICAgICAgICAgICAgICAgICAgLy8gLnN0YXJ0UmFuZG9tTW90aW9uKFxuICAgICAgICAgICAgICAgICAgICAvLyAgIExBcHBEZWZpbmUuTW90aW9uR3JvdXBUYXBCb2R5LFxuICAgICAgICAgICAgICAgICAgICAvLyAgIExBcHBEZWZpbmUuUHJpb3JpdHlOb3JtYWwsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgdGhpcy5fZmluaXNoZWRNb3Rpb25cbiAgICAgICAgICAgICAgICAgICAgLy8gKTtcbiAgICAgICAgICAgICAgICAgICAgLnN0YXJ0TW90aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgTEFwcERlZmluZS5Nb3Rpb25Hcm91cFRhcEJvZHksXG4gICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIOOCreODo+ODqeOCr+OCv+ODvCBcIk1hb1wiIOODouODvOOCt+ODp+ODs++8mlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDA65omL44KS44OQ44K/44OQ44K/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMTrmiYvjgpLlvozjgo3jgatcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyOuW4veWtkOOCkuaRmOOCgFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM644OP44O844OI44CB44OQ44OV6a2U5rOVXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNDrjg4/jg7zjg4jjgIHjg5Djg5XprZTms5XlpLHmlZdcbiAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgTEFwcERlZmluZS5Qcmlvcml0eU5vcm1hbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmlzaGVkTW90aW9uXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnlLvpnaLjgpLmm7TmlrDjgZnjgovjgajjgY3jga7lh6bnkIZcbiAgICAgKiDjg6Ljg4fjg6vjga7mm7TmlrDlh6bnkIblj4rjgbPmj4/nlLvlh6bnkIbjgpLooYzjgYZcbiAgICAgKi9cbiAgICBwdWJsaWMgb25VcGRhdGUoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY2FudmFzO1xuXG4gICAgICAgIGNvbnN0IG1vZGVsQ291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVscy5nZXRTaXplKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RlbENvdW50OyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3Rpb246IEN1YmlzbU1hdHJpeDQ0ID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG4gICAgICAgICAgICBjb25zdCBtb2RlbDogTEFwcE1vZGVsID0gdGhpcy5nZXRNb2RlbChpKTtcblxuICAgICAgICAgICAgaWYgKG1vZGVsLmdldE1vZGVsKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAobW9kZWwuZ2V0TW9kZWwoKS5nZXRDYW52YXNXaWR0aCgpID4gMS4wICYmIHdpZHRoIDwgaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIOaoquOBq+mVt+OBhOODouODh+ODq+OCkue4pumVt+OCpuOCo+ODs+ODieOCpuOBq+ihqOekuuOBmeOCi+mam+ODouODh+ODq+OBruaoquOCteOCpOOCuuOBp3NjYWxl44KS566X5Ye644GZ44KLXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmdldE1vZGVsTWF0cml4KCkuc2V0V2lkdGgoMi4wKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJvamVjdGlvbi5zY2FsZSgxLjAsIHdpZHRoIC8gaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbi5zY2FsZSgzLjAsIHdpZHRoIC8gaGVpZ2h0ICogMyk7ICAvL+ihqOekuuOCteOCpOOCuuOCku+8k+WAjeOBq+WkieabtFxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSgwLCAtMS41KTsgICAgICAgICAgICAgIC8v6KGo56S65L2N572u44KS5LiL44GrMS4156e75YuVXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJvamVjdGlvbi5zY2FsZShoZWlnaHQgLyB3aWR0aCwgMS4wKTtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbi5zY2FsZShoZWlnaHQgKiAzIC8gd2lkdGgsIDMuMCk7ICAvL+ihqOekuuOCteOCpOOCuuOCku+8k+WAjeOBq+WkieabtFxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSgwLCAtMS41KTsgICAgICAgICAgICAgIC8v6KGo56S65L2N572u44KS5LiL44GrMS4156e75YuVXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8g5b+F6KaB44GM44GC44KM44Gw44GT44GT44Gn5LmX566XXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ZpZXdNYXRyaXggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uLm11bHRpcGx5QnlNYXRyaXgodGhpcy5fdmlld01hdHJpeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtb2RlbC51cGRhdGUoKTtcbiAgICAgICAgICAgIG1vZGVsLmRyYXcocHJvamVjdGlvbik7IC8vIOWPgueFp+a4oeOBl+OBquOBruOBp3Byb2plY3Rpb27jga/lpInos6rjgZnjgovjgIJcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOasoeOBruOCt+ODvOODs+OBq+WIh+OCiuOBi+OBiOOCi1xuICAgICAqIOOCteODs+ODl+ODq+OCouODl+ODquOCseODvOOCt+ODp+ODs+OBp+OBr+ODouODh+ODq+OCu+ODg+ODiOOBruWIh+OCiuabv+OBiOOCkuihjOOBhuOAglxuICAgICAqL1xuICAgIHB1YmxpYyBuZXh0U2NlbmUoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG5vOiBudW1iZXIgPSAodGhpcy5fc2NlbmVJbmRleCArIDEpICUgTEFwcERlZmluZS5Nb2RlbERpclNpemU7XG4gICAgICAgIHRoaXMuY2hhbmdlU2NlbmUobm8pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOOCt+ODvOODs+OCkuWIh+OCiuabv+OBiOOCi1xuICAgICAqIOOCteODs+ODl+ODq+OCouODl+ODquOCseODvOOCt+ODp+ODs+OBp+OBr+ODouODh+ODq+OCu+ODg+ODiOOBruWIh+OCiuabv+OBiOOCkuihjOOBhuOAglxuICAgICAqL1xuICAgIHB1YmxpYyBjaGFuZ2VTY2VuZShpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3NjZW5lSW5kZXggPSBpbmRleDtcbiAgICAgICAgaWYgKExBcHBEZWZpbmUuRGVidWdMb2dFbmFibGUpIHtcbiAgICAgICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXW1vZGVsIGluZGV4OiAke3RoaXMuX3NjZW5lSW5kZXh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNb2RlbERpcltd44Gr5L+d5oyB44GX44Gf44OH44Kj44Os44Kv44OI44Oq5ZCN44GL44KJXG4gICAgICAgIC8vIG1vZGVsMy5qc29u44Gu44OR44K544KS5rG65a6a44GZ44KL44CCXG4gICAgICAgIC8vIOODh+OCo+ODrOOCr+ODiOODquWQjeOBqG1vZGVsMy5qc29u44Gu5ZCN5YmN44KS5LiA6Ie044GV44Gb44Gm44GK44GP44GT44Go44CCXG4gICAgICAgIGNvbnN0IG1vZGVsOiBzdHJpbmcgPSBMQXBwRGVmaW5lLk1vZGVsRGlyW2luZGV4XTtcbiAgICAgICAgY29uc3QgbW9kZWxQYXRoOiBzdHJpbmcgPSBMQXBwRGVmaW5lLlJlc291cmNlc1BhdGggKyBtb2RlbCArICcvJztcbiAgICAgICAgbGV0IG1vZGVsSnNvbk5hbWU6IHN0cmluZyA9IExBcHBEZWZpbmUuTW9kZWxEaXJbaW5kZXhdO1xuICAgICAgICBtb2RlbEpzb25OYW1lICs9ICcubW9kZWwzLmpzb24nO1xuXG4gICAgICAgIHRoaXMucmVsZWFzZUFsbE1vZGVsKCk7XG4gICAgICAgIHRoaXMuX21vZGVscy5wdXNoQmFjayhuZXcgTEFwcE1vZGVsKCkpO1xuICAgICAgICB0aGlzLl9tb2RlbHMuYXQoMCkubG9hZEFzc2V0cyhtb2RlbFBhdGgsIG1vZGVsSnNvbk5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRWaWV3TWF0cml4KG06IEN1YmlzbU1hdHJpeDQ0KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fdmlld01hdHJpeC5nZXRBcnJheSgpW2ldID0gbS5nZXRBcnJheSgpW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3ZpZXdNYXRyaXggPSBuZXcgQ3ViaXNtTWF0cml4NDQoKTtcbiAgICAgICAgdGhpcy5fbW9kZWxzID0gbmV3IGNzbVZlY3RvcjxMQXBwTW9kZWw+KCk7XG4gICAgICAgIHRoaXMuX3NjZW5lSW5kZXggPSAwO1xuICAgICAgICB0aGlzLmNoYW5nZVNjZW5lKHRoaXMuX3NjZW5lSW5kZXgpO1xuICAgIH1cblxuICAgIF92aWV3TWF0cml4OiBDdWJpc21NYXRyaXg0NDsgLy8g44Oi44OH44Or5o+P55S744Gr55So44GE44KLdmlld+ihjOWIl1xuICAgIF9tb2RlbHM6IGNzbVZlY3RvcjxMQXBwTW9kZWw+OyAvLyDjg6Ljg4fjg6vjgqTjg7Pjgrnjgr/jg7Pjgrnjga7jgrPjg7Pjg4bjg4pcbiAgICBfc2NlbmVJbmRleDogbnVtYmVyOyAvLyDooajnpLrjgZnjgovjgrfjg7zjg7Pjga7jgqTjg7Pjg4fjg4Pjgq/jgrnlgKRcbiAgICAvLyDjg6Ljg7zjgrfjg6fjg7Plho3nlJ/ntYLkuobjga7jgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbBcbiAgICBfZmluaXNoZWRNb3Rpb24gPSAoc2VsZjogQUN1YmlzbU1vdGlvbik6IHZvaWQgPT4ge1xuICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgnTW90aW9uIEZpbmlzaGVkOicpO1xuICAgICAgICBjb25zb2xlLmxvZyhzZWxmKTtcbiAgICB9O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0ICd3aGF0d2ctZmV0Y2gnO1xuXG5pbXBvcnQgeyBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQgfSBmcm9tICdAZnJhbWV3b3JrL2N1YmlzbWRlZmF1bHRwYXJhbWV0ZXJpZCc7XG5pbXBvcnQgeyBDdWJpc21Nb2RlbFNldHRpbmdKc29uIH0gZnJvbSAnQGZyYW1ld29yay9jdWJpc21tb2RlbHNldHRpbmdqc29uJztcbmltcG9ydCB7XG4gIEJyZWF0aFBhcmFtZXRlckRhdGEsXG4gIEN1YmlzbUJyZWF0aFxufSBmcm9tICdAZnJhbWV3b3JrL2VmZmVjdC9jdWJpc21icmVhdGgnO1xuaW1wb3J0IHsgQ3ViaXNtRXllQmxpbmsgfSBmcm9tICdAZnJhbWV3b3JrL2VmZmVjdC9jdWJpc21leWVibGluayc7XG5pbXBvcnQgeyBJQ3ViaXNtTW9kZWxTZXR0aW5nIH0gZnJvbSAnQGZyYW1ld29yay9pY3ViaXNtbW9kZWxzZXR0aW5nJztcbmltcG9ydCB7IEN1YmlzbUlkSGFuZGxlIH0gZnJvbSAnQGZyYW1ld29yay9pZC9jdWJpc21pZCc7XG5pbXBvcnQgeyBDdWJpc21GcmFtZXdvcmsgfSBmcm9tICdAZnJhbWV3b3JrL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJ0BmcmFtZXdvcmsvbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgeyBDdWJpc21Vc2VyTW9kZWwgfSBmcm9tICdAZnJhbWV3b3JrL21vZGVsL2N1YmlzbXVzZXJtb2RlbCc7XG5pbXBvcnQge1xuICBBQ3ViaXNtTW90aW9uLFxuICBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG59IGZyb20gJ0BmcmFtZXdvcmsvbW90aW9uL2FjdWJpc21tb3Rpb24nO1xuaW1wb3J0IHsgQ3ViaXNtTW90aW9uIH0gZnJvbSAnQGZyYW1ld29yay9tb3Rpb24vY3ViaXNtbW90aW9uJztcbmltcG9ydCB7XG4gIEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUsXG4gIEludmFsaWRNb3Rpb25RdWV1ZUVudHJ5SGFuZGxlVmFsdWVcbn0gZnJvbSAnQGZyYW1ld29yay9tb3Rpb24vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyJztcbmltcG9ydCB7IGNzbU1hcCB9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc21tYXAnO1xuaW1wb3J0IHsgY3NtUmVjdCB9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc21yZWN0Zic7XG5pbXBvcnQgeyBjc21TdHJpbmcgfSBmcm9tICdAZnJhbWV3b3JrL3R5cGUvY3Ntc3RyaW5nJztcbmltcG9ydCB7IGNzbVZlY3RvciB9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc212ZWN0b3InO1xuaW1wb3J0IHtcbiAgQ1NNX0FTU0VSVCxcbiAgQ3ViaXNtTG9nRXJyb3IsXG4gIEN1YmlzbUxvZ0luZm9cbn0gZnJvbSAnQGZyYW1ld29yay91dGlscy9jdWJpc21kZWJ1Zyc7XG5cbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcbmltcG9ydCB7IGNhbnZhcywgZnJhbWVCdWZmZXIsIGdsLCBMQXBwRGVsZWdhdGUgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5pbXBvcnQgeyBMQXBwUGFsIH0gZnJvbSAnLi9sYXBwcGFsJztcbmltcG9ydCB7IFRleHR1cmVJbmZvIH0gZnJvbSAnLi9sYXBwdGV4dHVyZW1hbmFnZXInO1xuaW1wb3J0IHsgTEFwcFdhdkZpbGVIYW5kbGVyIH0gZnJvbSAnLi9sYXBwd2F2ZmlsZWhhbmRsZXInO1xuaW1wb3J0IHsgQ3ViaXNtTW9jIH0gZnJvbSAnQGZyYW1ld29yay9tb2RlbC9jdWJpc21tb2MnO1xuXG5lbnVtIExvYWRTdGVwIHtcbiAgTG9hZEFzc2V0cyxcbiAgTG9hZE1vZGVsLFxuICBXYWl0TG9hZE1vZGVsLFxuICBMb2FkRXhwcmVzc2lvbixcbiAgV2FpdExvYWRFeHByZXNzaW9uLFxuICBMb2FkUGh5c2ljcyxcbiAgV2FpdExvYWRQaHlzaWNzLFxuICBMb2FkUG9zZSxcbiAgV2FpdExvYWRQb3NlLFxuICBTZXR1cEV5ZUJsaW5rLFxuICBTZXR1cEJyZWF0aCxcbiAgTG9hZFVzZXJEYXRhLFxuICBXYWl0TG9hZFVzZXJEYXRhLFxuICBTZXR1cEV5ZUJsaW5rSWRzLFxuICBTZXR1cExpcFN5bmNJZHMsXG4gIFNldHVwTGF5b3V0LFxuICBMb2FkTW90aW9uLFxuICBXYWl0TG9hZE1vdGlvbixcbiAgQ29tcGxldGVJbml0aWFsaXplLFxuICBDb21wbGV0ZVNldHVwTW9kZWwsXG4gIExvYWRUZXh0dXJlLFxuICBXYWl0TG9hZFRleHR1cmUsXG4gIENvbXBsZXRlU2V0dXBcbn1cblxuLyoqXG4gKiDjg6bjg7zjgrbjg7zjgYzlrp/pmpvjgavkvb/nlKjjgZnjgovjg6Ljg4fjg6vjga7lrp/oo4Xjgq/jg6njgrk8YnI+XG4gKiDjg6Ljg4fjg6vnlJ/miJDjgIHmqZ/og73jgrPjg7Pjg53jg7zjg43jg7Pjg4jnlJ/miJDjgIHmm7TmlrDlh6bnkIbjgajjg6zjg7Pjg4Djg6rjg7PjgrDjga7lkbzjgbPlh7rjgZfjgpLooYzjgYbjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBNb2RlbCBleHRlbmRzIEN1YmlzbVVzZXJNb2RlbCB7XG4gIC8qKlxuICAgKiBtb2RlbDMuanNvbuOBjOe9ruOBi+OCjOOBn+ODh+OCo+ODrOOCr+ODiOODquOBqOODleOCoeOCpOODq+ODkeOCueOBi+OCieODouODh+ODq+OCkueUn+aIkOOBmeOCi1xuICAgKiBAcGFyYW0gZGlyXG4gICAqIEBwYXJhbSBmaWxlTmFtZVxuICAgKi9cbiAgcHVibGljIGxvYWRBc3NldHMoZGlyOiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLl9tb2RlbEhvbWVEaXIgPSBkaXI7XG5cbiAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHtmaWxlTmFtZX1gKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgY29uc3Qgc2V0dGluZzogSUN1YmlzbU1vZGVsU2V0dGluZyA9IG5ldyBDdWJpc21Nb2RlbFNldHRpbmdKc29uKFxuICAgICAgICAgIGFycmF5QnVmZmVyLFxuICAgICAgICAgIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGhcbiAgICAgICAgKTtcblxuICAgICAgICAvLyDjgrnjg4bjg7zjg4jjgpLmm7TmlrBcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkTW9kZWw7XG5cbiAgICAgICAgLy8g57WQ5p6c44KS5L+d5a2YXG4gICAgICAgIHRoaXMuc2V0dXBNb2RlbChzZXR0aW5nKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIG1vZGVsMy5qc29u44GL44KJ44Oi44OH44Or44KS55Sf5oiQ44GZ44KL44CCXG4gICAqIG1vZGVsMy5qc29u44Gu6KiY6L+w44Gr5b6T44Gj44Gm44Oi44OH44Or55Sf5oiQ44CB44Oi44O844K344On44Oz44CB54mp55CG5ryU566X44Gq44Gp44Gu44Kz44Oz44Od44O844ON44Oz44OI55Sf5oiQ44KS6KGM44GG44CCXG4gICAqXG4gICAqIEBwYXJhbSBzZXR0aW5nIElDdWJpc21Nb2RlbFNldHRpbmfjga7jgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICovXG4gIHByaXZhdGUgc2V0dXBNb2RlbChzZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nKTogdm9pZCB7XG4gICAgdGhpcy5fdXBkYXRpbmcgPSB0cnVlO1xuICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICB0aGlzLl9tb2RlbFNldHRpbmcgPSBzZXR0aW5nO1xuXG4gICAgLy8gQ3ViaXNtTW9kZWxcbiAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vZGVsRmlsZU5hbWUoKSAhPSAnJykge1xuICAgICAgY29uc3QgbW9kZWxGaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb2RlbEZpbGVOYW1lKCk7XG5cbiAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke21vZGVsRmlsZU5hbWV9YClcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgIHRoaXMubG9hZE1vZGVsKGFycmF5QnVmZmVyLCB0aGlzLl9tb2NDb25zaXN0ZW5jeSk7XG4gICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkRXhwcmVzc2lvbjtcblxuICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgbG9hZEN1YmlzbUV4cHJlc3Npb24oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRNb2RlbDtcbiAgICB9IGVsc2Uge1xuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ01vZGVsIGRhdGEgZG9lcyBub3QgZXhpc3QuJyk7XG4gICAgfVxuXG4gICAgLy8gRXhwcmVzc2lvblxuICAgIGNvbnN0IGxvYWRDdWJpc21FeHByZXNzaW9uID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeHByZXNzaW9uQ291bnQoKSA+IDApIHtcbiAgICAgICAgY29uc3QgY291bnQ6IG51bWJlciA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeHByZXNzaW9uQ291bnQoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICBjb25zdCBleHByZXNzaW9uTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeHByZXNzaW9uTmFtZShpKTtcbiAgICAgICAgICBjb25zdCBleHByZXNzaW9uRmlsZU5hbWUgPVxuICAgICAgICAgICAgdGhpcy5fbW9kZWxTZXR0aW5nLmdldEV4cHJlc3Npb25GaWxlTmFtZShpKTtcblxuICAgICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke2V4cHJlc3Npb25GaWxlTmFtZX1gKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgbW90aW9uOiBBQ3ViaXNtTW90aW9uID0gdGhpcy5sb2FkRXhwcmVzc2lvbihcbiAgICAgICAgICAgICAgICBhcnJheUJ1ZmZlcixcbiAgICAgICAgICAgICAgICBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb25OYW1lXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMuX2V4cHJlc3Npb25zLmdldFZhbHVlKGV4cHJlc3Npb25OYW1lKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgQUN1YmlzbU1vdGlvbi5kZWxldGUoXG4gICAgICAgICAgICAgICAgICB0aGlzLl9leHByZXNzaW9ucy5nZXRWYWx1ZShleHByZXNzaW9uTmFtZSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4cHJlc3Npb25zLnNldFZhbHVlKGV4cHJlc3Npb25OYW1lLCBudWxsKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMuX2V4cHJlc3Npb25zLnNldFZhbHVlKGV4cHJlc3Npb25OYW1lLCBtb3Rpb24pO1xuXG4gICAgICAgICAgICAgIHRoaXMuX2V4cHJlc3Npb25Db3VudCsrO1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzLl9leHByZXNzaW9uQ291bnQgPj0gY291bnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRQaHlzaWNzO1xuXG4gICAgICAgICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICAgICAgICBsb2FkQ3ViaXNtUGh5c2ljcygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLldhaXRMb2FkRXhwcmVzc2lvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuTG9hZFBoeXNpY3M7XG5cbiAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgbG9hZEN1YmlzbVBoeXNpY3MoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gUGh5c2ljc1xuICAgIGNvbnN0IGxvYWRDdWJpc21QaHlzaWNzID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRQaHlzaWNzRmlsZU5hbWUoKSAhPSAnJykge1xuICAgICAgICBjb25zdCBwaHlzaWNzRmlsZU5hbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0UGh5c2ljc0ZpbGVOYW1lKCk7XG5cbiAgICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfSR7cGh5c2ljc0ZpbGVOYW1lfWApXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvYWRQaHlzaWNzKGFycmF5QnVmZmVyLCBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcblxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkUG9zZTtcblxuICAgICAgICAgICAgLy8gY2FsbGJhY2tcbiAgICAgICAgICAgIGxvYWRDdWJpc21Qb3NlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRQaHlzaWNzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkUG9zZTtcblxuICAgICAgICAvLyBjYWxsYmFja1xuICAgICAgICBsb2FkQ3ViaXNtUG9zZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBQb3NlXG4gICAgY29uc3QgbG9hZEN1YmlzbVBvc2UgPSAoKTogdm9pZCA9PiB7XG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nLmdldFBvc2VGaWxlTmFtZSgpICE9ICcnKSB7XG4gICAgICAgIGNvbnN0IHBvc2VGaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRQb3NlRmlsZU5hbWUoKTtcblxuICAgICAgICBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHtwb3NlRmlsZU5hbWV9YClcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5hcnJheUJ1ZmZlcigpKVxuICAgICAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZFBvc2UoYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwRXllQmxpbms7XG5cbiAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICBzZXR1cEV5ZUJsaW5rKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRQb3NlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cEV5ZUJsaW5rO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgIHNldHVwRXllQmxpbmsoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRXllQmxpbmtcbiAgICBjb25zdCBzZXR1cEV5ZUJsaW5rID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlckNvdW50KCkgPiAwKSB7XG4gICAgICAgIHRoaXMuX2V5ZUJsaW5rID0gQ3ViaXNtRXllQmxpbmsuY3JlYXRlKHRoaXMuX21vZGVsU2V0dGluZyk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBCcmVhdGg7XG4gICAgICB9XG5cbiAgICAgIC8vIGNhbGxiYWNrXG4gICAgICBzZXR1cEJyZWF0aCgpO1xuICAgIH07XG5cbiAgICAvLyBCcmVhdGhcbiAgICBjb25zdCBzZXR1cEJyZWF0aCA9ICgpOiB2b2lkID0+IHtcbiAgICAgIHRoaXMuX2JyZWF0aCA9IEN1YmlzbUJyZWF0aC5jcmVhdGUoKTtcblxuICAgICAgY29uc3QgYnJlYXRoUGFyYW1ldGVyczogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+ID0gbmV3IGNzbVZlY3RvcigpO1xuICAgICAgYnJlYXRoUGFyYW1ldGVycy5wdXNoQmFjayhcbiAgICAgICAgbmV3IEJyZWF0aFBhcmFtZXRlckRhdGEodGhpcy5faWRQYXJhbUFuZ2xlWCwgMC4wLCAxNS4wLCA2LjUzNDUsIDAuNSlcbiAgICAgICk7XG4gICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YSh0aGlzLl9pZFBhcmFtQW5nbGVZLCAwLjAsIDguMCwgMy41MzQ1LCAwLjUpXG4gICAgICApO1xuICAgICAgYnJlYXRoUGFyYW1ldGVycy5wdXNoQmFjayhcbiAgICAgICAgbmV3IEJyZWF0aFBhcmFtZXRlckRhdGEodGhpcy5faWRQYXJhbUFuZ2xlWiwgMC4wLCAxMC4wLCA1LjUzNDUsIDAuNSlcbiAgICAgICk7XG4gICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YSh0aGlzLl9pZFBhcmFtQm9keUFuZ2xlWCwgMC4wLCA0LjAsIDE1LjUzNDUsIDAuNSlcbiAgICAgICk7XG4gICAgICBicmVhdGhQYXJhbWV0ZXJzLnB1c2hCYWNrKFxuICAgICAgICBuZXcgQnJlYXRoUGFyYW1ldGVyRGF0YShcbiAgICAgICAgICBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXG4gICAgICAgICAgICBDdWJpc21EZWZhdWx0UGFyYW1ldGVySWQuUGFyYW1CcmVhdGhcbiAgICAgICAgICApLFxuICAgICAgICAgIDAuNSxcbiAgICAgICAgICAwLjUsXG4gICAgICAgICAgMy4yMzQ1LFxuICAgICAgICAgIDFcbiAgICAgICAgKVxuICAgICAgKTtcblxuICAgICAgdGhpcy5fYnJlYXRoLnNldFBhcmFtZXRlcnMoYnJlYXRoUGFyYW1ldGVycyk7XG4gICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRVc2VyRGF0YTtcblxuICAgICAgLy8gY2FsbGJhY2tcbiAgICAgIGxvYWRVc2VyRGF0YSgpO1xuICAgIH07XG5cbiAgICAvLyBVc2VyRGF0YVxuICAgIGNvbnN0IGxvYWRVc2VyRGF0YSA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VXNlckRhdGFGaWxlKCkgIT0gJycpIHtcbiAgICAgICAgY29uc3QgdXNlckRhdGFGaWxlID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldFVzZXJEYXRhRmlsZSgpO1xuXG4gICAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke3VzZXJEYXRhRmlsZX1gKVxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2FkVXNlckRhdGEoYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwRXllQmxpbmtJZHM7XG5cbiAgICAgICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgICAgICBzZXR1cEV5ZUJsaW5rSWRzKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5XYWl0TG9hZFVzZXJEYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5TZXR1cEV5ZUJsaW5rSWRzO1xuXG4gICAgICAgIC8vIGNhbGxiYWNrXG4gICAgICAgIHNldHVwRXllQmxpbmtJZHMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRXllQmxpbmtJZHNcbiAgICBjb25zdCBzZXR1cEV5ZUJsaW5rSWRzID0gKCk6IHZvaWQgPT4ge1xuICAgICAgY29uc3QgZXllQmxpbmtJZENvdW50OiBudW1iZXIgPVxuICAgICAgICB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0RXllQmxpbmtQYXJhbWV0ZXJDb3VudCgpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV5ZUJsaW5rSWRDb3VudDsgKytpKSB7XG4gICAgICAgIHRoaXMuX2V5ZUJsaW5rSWRzLnB1c2hCYWNrKFxuICAgICAgICAgIHRoaXMuX21vZGVsU2V0dGluZy5nZXRFeWVCbGlua1BhcmFtZXRlcklkKGkpXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuU2V0dXBMaXBTeW5jSWRzO1xuXG4gICAgICAvLyBjYWxsYmFja1xuICAgICAgc2V0dXBMaXBTeW5jSWRzKCk7XG4gICAgfTtcblxuICAgIC8vIExpcFN5bmNJZHNcbiAgICBjb25zdCBzZXR1cExpcFN5bmNJZHMgPSAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBsaXBTeW5jSWRDb3VudCA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRMaXBTeW5jUGFyYW1ldGVyQ291bnQoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXBTeW5jSWRDb3VudDsgKytpKSB7XG4gICAgICAgIHRoaXMuX2xpcFN5bmNJZHMucHVzaEJhY2sodGhpcy5fbW9kZWxTZXR0aW5nLmdldExpcFN5bmNQYXJhbWV0ZXJJZChpKSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLlNldHVwTGF5b3V0O1xuXG4gICAgICAvLyBjYWxsYmFja1xuICAgICAgc2V0dXBMYXlvdXQoKTtcbiAgICB9O1xuXG4gICAgLy8gTGF5b3V0XG4gICAgY29uc3Qgc2V0dXBMYXlvdXQgPSAoKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBsYXlvdXQ6IGNzbU1hcDxzdHJpbmcsIG51bWJlcj4gPSBuZXcgY3NtTWFwPHN0cmluZywgbnVtYmVyPigpO1xuXG4gICAgICBpZiAodGhpcy5fbW9kZWxTZXR0aW5nID09IG51bGwgfHwgdGhpcy5fbW9kZWxNYXRyaXggPT0gbnVsbCkge1xuICAgICAgICBDdWJpc21Mb2dFcnJvcignRmFpbGVkIHRvIHNldHVwTGF5b3V0KCkuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fbW9kZWxTZXR0aW5nLmdldExheW91dE1hcChsYXlvdXQpO1xuICAgICAgdGhpcy5fbW9kZWxNYXRyaXguc2V0dXBGcm9tTGF5b3V0KGxheW91dCk7XG4gICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRNb3Rpb247XG5cbiAgICAgIC8vIGNhbGxiYWNrXG4gICAgICBsb2FkQ3ViaXNtTW90aW9uKCk7XG4gICAgfTtcblxuICAgIC8vIE1vdGlvblxuICAgIGNvbnN0IGxvYWRDdWJpc21Nb3Rpb24gPSAoKTogdm9pZCA9PiB7XG4gICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLldhaXRMb2FkTW90aW9uO1xuICAgICAgdGhpcy5fbW9kZWwuc2F2ZVBhcmFtZXRlcnMoKTtcbiAgICAgIHRoaXMuX2FsbE1vdGlvbkNvdW50ID0gMDtcbiAgICAgIHRoaXMuX21vdGlvbkNvdW50ID0gMDtcbiAgICAgIGNvbnN0IGdyb3VwOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICBjb25zdCBtb3Rpb25Hcm91cENvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uR3JvdXBDb3VudCgpO1xuXG4gICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7nt4/mlbDjgpLmsYLjgoHjgotcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW90aW9uR3JvdXBDb3VudDsgaSsrKSB7XG4gICAgICAgIGdyb3VwW2ldID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkdyb3VwTmFtZShpKTtcbiAgICAgICAgdGhpcy5fYWxsTW90aW9uQ291bnQgKz0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkNvdW50KGdyb3VwW2ldKTtcbiAgICAgIH1cblxuICAgICAgLy8g44Oi44O844K344On44Oz44Gu6Kqt44G/6L6844G/XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vdGlvbkdyb3VwQ291bnQ7IGkrKykge1xuICAgICAgICB0aGlzLnByZUxvYWRNb3Rpb25Hcm91cChncm91cFtpXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIOODouODvOOCt+ODp+ODs+OBjOOBquOBhOWgtOWQiFxuICAgICAgaWYgKG1vdGlvbkdyb3VwQ291bnQgPT0gMCkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkxvYWRUZXh0dXJlO1xuXG4gICAgICAgIC8vIOWFqOOBpuOBruODouODvOOCt+ODp+ODs+OCkuWBnOatouOBmeOCi1xuICAgICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnN0b3BBbGxNb3Rpb25zKCk7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlUmVuZGVyZXIoKTtcbiAgICAgICAgdGhpcy5zZXR1cFRleHR1cmVzKCk7XG4gICAgICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5zdGFydFVwKGdsKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIOODhuOCr+OCueODgeODo+ODpuODi+ODg+ODiOOBq+ODhuOCr+OCueODgeODo+OCkuODreODvOODieOBmeOCi1xuICAgKi9cbiAgcHJpdmF0ZSBzZXR1cFRleHR1cmVzKCk6IHZvaWQge1xuICAgIC8vIGlQaG9uZeOBp+OBruOCouODq+ODleOCoeWTgeizquWQkeS4iuOBruOBn+OCgVR5cGVzY3JpcHTjgafjga9wcmVtdWx0aXBsaWVkQWxwaGHjgpLmjqHnlKhcbiAgICBjb25zdCB1c2VQcmVtdWx0aXBseSA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fc3RhdGUgPT0gTG9hZFN0ZXAuTG9hZFRleHR1cmUpIHtcbiAgICAgIC8vIOODhuOCr+OCueODgeODo+iqreOBv+i+vOOBv+eUqFxuICAgICAgY29uc3QgdGV4dHVyZUNvdW50OiBudW1iZXIgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VGV4dHVyZUNvdW50KCk7XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBtb2RlbFRleHR1cmVOdW1iZXIgPSAwO1xuICAgICAgICBtb2RlbFRleHR1cmVOdW1iZXIgPCB0ZXh0dXJlQ291bnQ7XG4gICAgICAgIG1vZGVsVGV4dHVyZU51bWJlcisrXG4gICAgICApIHtcbiAgICAgICAgLy8g44OG44Kv44K544OB44Oj5ZCN44GM56m65paH5a2X44Gg44Gj44Gf5aC05ZCI44Gv44Ot44O844OJ44O744OQ44Kk44Oz44OJ5Yem55CG44KS44K544Kt44OD44OXXG4gICAgICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0VGV4dHVyZUZpbGVOYW1lKG1vZGVsVGV4dHVyZU51bWJlcikgPT0gJycpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0VGV4dHVyZUZpbGVOYW1lIG51bGwnKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlYkdM44Gu44OG44Kv44K544OB44Oj44Om44OL44OD44OI44Gr44OG44Kv44K544OB44Oj44KS44Ot44O844OJ44GZ44KLXG4gICAgICAgIGxldCB0ZXh0dXJlUGF0aCA9XG4gICAgICAgICAgdGhpcy5fbW9kZWxTZXR0aW5nLmdldFRleHR1cmVGaWxlTmFtZShtb2RlbFRleHR1cmVOdW1iZXIpO1xuICAgICAgICB0ZXh0dXJlUGF0aCA9IHRoaXMuX21vZGVsSG9tZURpciArIHRleHR1cmVQYXRoO1xuXG4gICAgICAgIC8vIOODreODvOODieWujOS6huaZguOBq+WRvOOBs+WHuuOBmeOCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICAgICAgICBjb25zdCBvbkxvYWQgPSAodGV4dHVyZUluZm86IFRleHR1cmVJbmZvKTogdm9pZCA9PiB7XG4gICAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLmJpbmRUZXh0dXJlKG1vZGVsVGV4dHVyZU51bWJlciwgdGV4dHVyZUluZm8uaWQpO1xuXG4gICAgICAgICAgdGhpcy5fdGV4dHVyZUNvdW50Kys7XG5cbiAgICAgICAgICBpZiAodGhpcy5fdGV4dHVyZUNvdW50ID49IHRleHR1cmVDb3VudCkge1xuICAgICAgICAgICAgLy8g44Ot44O844OJ5a6M5LqGXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IExvYWRTdGVwLkNvbXBsZXRlU2V0dXA7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIOiqreOBv+i+vOOBv1xuICAgICAgICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKVxuICAgICAgICAgIC5nZXRUZXh0dXJlTWFuYWdlcigpXG4gICAgICAgICAgLmNyZWF0ZVRleHR1cmVGcm9tUG5nRmlsZSh0ZXh0dXJlUGF0aCwgdXNlUHJlbXVsdGlwbHksIG9uTG9hZCk7XG4gICAgICAgIHRoaXMuZ2V0UmVuZGVyZXIoKS5zZXRJc1ByZW11bHRpcGxpZWRBbHBoYSh1c2VQcmVtdWx0aXBseSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N0YXRlID0gTG9hZFN0ZXAuV2FpdExvYWRUZXh0dXJlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjg6zjg7Pjg4Djg6njgpLlho3mp4vnr4njgZnjgotcbiAgICovXG4gIHB1YmxpYyByZWxvYWRSZW5kZXJlcigpOiB2b2lkIHtcbiAgICB0aGlzLmRlbGV0ZVJlbmRlcmVyKCk7XG4gICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpO1xuICAgIHRoaXMuc2V0dXBUZXh0dXJlcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOabtOaWsFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fc3RhdGUgIT0gTG9hZFN0ZXAuQ29tcGxldGVTZXR1cCkgcmV0dXJuO1xuXG4gICAgY29uc3QgZGVsdGFUaW1lU2Vjb25kczogbnVtYmVyID0gTEFwcFBhbC5nZXREZWx0YVRpbWUoKTtcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKz0gZGVsdGFUaW1lU2Vjb25kcztcblxuICAgIHRoaXMuX2RyYWdNYW5hZ2VyLnVwZGF0ZShkZWx0YVRpbWVTZWNvbmRzKTtcbiAgICB0aGlzLl9kcmFnWCA9IHRoaXMuX2RyYWdNYW5hZ2VyLmdldFgoKTtcbiAgICB0aGlzLl9kcmFnWSA9IHRoaXMuX2RyYWdNYW5hZ2VyLmdldFkoKTtcblxuICAgIC8vIOODouODvOOCt+ODp+ODs+OBq+OCiOOCi+ODkeODqeODoeODvOOCv+abtOaWsOOBruacieeEoVxuICAgIGxldCBtb3Rpb25VcGRhdGVkID0gZmFsc2U7XG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdGhpcy5fbW9kZWwubG9hZFBhcmFtZXRlcnMoKTsgLy8g5YmN5Zue44K744O844OW44GV44KM44Gf54q25oWL44KS44Ot44O844OJXG4gICAgaWYgKHRoaXMuX21vdGlvbk1hbmFnZXIuaXNGaW5pc2hlZCgpKSB7XG4gICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7lho3nlJ/jgYzjgarjgYTloLTlkIjjgIHlvoXmqZ/jg6Ljg7zjgrfjg6fjg7Pjga7kuK3jgYvjgonjg6njg7Pjg4Djg6Djgaflho3nlJ/jgZnjgotcbiAgICAgIHRoaXMuc3RhcnRSYW5kb21Nb3Rpb24oXG4gICAgICAgIExBcHBEZWZpbmUuTW90aW9uR3JvdXBJZGxlLFxuICAgICAgICBMQXBwRGVmaW5lLlByaW9yaXR5SWRsZVxuICAgICAgKTtcblxuICAgICAgLy8gdGhpcy5zdGFydE1vdGlvbihcbiAgICAgIC8vICAgTEFwcERlZmluZS5Nb3Rpb25Hcm91cFRhcEJvZHksXG4gICAgICAvLyAgIC8qXG4gICAgICAvLyAgICAg44Kt44Oj44Op44Kv44K/44O8IFwiTWFvXCIg44Oi44O844K344On44Oz77yaXG4gICAgICAvLyAgICAgICAwOuaJi+OCkuODkOOCv+ODkOOCv1xuICAgICAgLy8gICAgICAgMTrmiYvjgpLlvozjgo3jgatcbiAgICAgIC8vICAgICAgIDI65bi95a2Q44KS5pGY44KAXG4gICAgICAvLyAgICAgICAzOuODj+ODvOODiOOAgeODkOODlemtlOazlVxuICAgICAgLy8gICAgICAgNDrjg4/jg7zjg4jjgIHjg5Djg5XprZTms5XlpLHmlZdcbiAgICAgIC8vICAgKi9cbiAgICAgIC8vICAgMyxcbiAgICAgIC8vICAgTEFwcERlZmluZS5Qcmlvcml0eUlkbGVcbiAgICAgIC8vICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vdGlvblVwZGF0ZWQgPSB0aGlzLl9tb3Rpb25NYW5hZ2VyLnVwZGF0ZU1vdGlvbihcbiAgICAgICAgdGhpcy5fbW9kZWwsXG4gICAgICAgIGRlbHRhVGltZVNlY29uZHNcbiAgICAgICk7IC8vIOODouODvOOCt+ODp+ODs+OCkuabtOaWsFxuICAgIH1cbiAgICB0aGlzLl9tb2RlbC5zYXZlUGFyYW1ldGVycygpOyAvLyDnirbmhYvjgpLkv53lrZhcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLyDjgb7jgbDjgZ/jgY1cbiAgICBpZiAoIW1vdGlvblVwZGF0ZWQpIHtcbiAgICAgIGlmICh0aGlzLl9leWVCbGluayAhPSBudWxsKSB7XG4gICAgICAgIC8vIOODoeOCpOODs+ODouODvOOCt+ODp+ODs+OBruabtOaWsOOBjOOBquOBhOOBqOOBjVxuICAgICAgICB0aGlzLl9leWVCbGluay51cGRhdGVQYXJhbWV0ZXJzKHRoaXMuX21vZGVsLCBkZWx0YVRpbWVTZWNvbmRzKTsgLy8g55uu44OR44OBXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyLnVwZGF0ZU1vdGlvbih0aGlzLl9tb2RlbCwgZGVsdGFUaW1lU2Vjb25kcyk7IC8vIOihqOaDheOBp+ODkeODqeODoeODvOOCv+abtOaWsO+8iOebuOWvvuWkieWMlu+8iVxuICAgIH1cblxuICAgIC8vIOODieODqeODg+OCsOOBq+OCiOOCi+WkieWMllxuICAgIC8vIOODieODqeODg+OCsOOBq+OCiOOCi+mhlOOBruWQkeOBjeOBruiqv+aVtFxuICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9pZFBhcmFtQW5nbGVYLCB0aGlzLl9kcmFnWCAqIDMwKTsgLy8gLTMw44GL44KJMzDjga7lgKTjgpLliqDjgYjjgotcbiAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5faWRQYXJhbUFuZ2xlWSwgdGhpcy5fZHJhZ1kgKiAzMCk7XG4gICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgdGhpcy5faWRQYXJhbUFuZ2xlWixcbiAgICAgIHRoaXMuX2RyYWdYICogdGhpcy5fZHJhZ1kgKiAtMzBcbiAgICApO1xuXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL5L2T44Gu5ZCR44GN44Gu6Kq/5pW0XG4gICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKFxuICAgICAgdGhpcy5faWRQYXJhbUJvZHlBbmdsZVgsXG4gICAgICB0aGlzLl9kcmFnWCAqIDEwXG4gICAgKTsgLy8gLTEw44GL44KJMTDjga7lgKTjgpLliqDjgYjjgotcblxuICAgIC8vIOODieODqeODg+OCsOOBq+OCiOOCi+ebruOBruWQkeOBjeOBruiqv+aVtFxuICAgIHRoaXMuX21vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZCh0aGlzLl9pZFBhcmFtRXllQmFsbFgsIHRoaXMuX2RyYWdYKTsgLy8gLTHjgYvjgokx44Gu5YCk44KS5Yqg44GI44KLXG4gICAgdGhpcy5fbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2lkUGFyYW1FeWVCYWxsWSwgdGhpcy5fZHJhZ1kpO1xuXG4gICAgLy8g5ZG85ZC444Gq44GpXG4gICAgaWYgKHRoaXMuX2JyZWF0aCAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9icmVhdGgudXBkYXRlUGFyYW1ldGVycyh0aGlzLl9tb2RlbCwgZGVsdGFUaW1lU2Vjb25kcyk7XG4gICAgfVxuXG4gICAgLy8g54mp55CG5ryU566X44Gu6Kit5a6aXG4gICAgaWYgKHRoaXMuX3BoeXNpY3MgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fcGh5c2ljcy5ldmFsdWF0ZSh0aGlzLl9tb2RlbCwgZGVsdGFUaW1lU2Vjb25kcyk7XG4gICAgfVxuXG4gICAgLy8g44Oq44OD44OX44K344Oz44Kv44Gu6Kit5a6aXG4gICAgaWYgKHRoaXMuX2xpcHN5bmMpIHtcbiAgICAgIGxldCB2YWx1ZSA9IDAuMDsgLy8g44Oq44Ki44Or44K/44Kk44Og44Gn44Oq44OD44OX44K344Oz44Kv44KS6KGM44GG5aC05ZCI44CB44K344K544OG44Og44GL44KJ6Z+z6YeP44KS5Y+W5b6X44GX44Gm44CBMH4x44Gu56+E5Zuy44Gn5YCk44KS5YWl5Yqb44GX44G+44GZ44CCXG5cbiAgICAgIHRoaXMuX3dhdkZpbGVIYW5kbGVyLnVwZGF0ZShkZWx0YVRpbWVTZWNvbmRzKTtcbiAgICAgIHZhbHVlID0gdGhpcy5fd2F2RmlsZUhhbmRsZXIuZ2V0Um1zKCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbGlwU3luY0lkcy5nZXRTaXplKCk7ICsraSkge1xuICAgICAgICB0aGlzLl9tb2RlbC5hZGRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5fbGlwU3luY0lkcy5hdChpKSwgdmFsdWUsIDAuOCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8g44Od44O844K644Gu6Kit5a6aXG4gICAgaWYgKHRoaXMuX3Bvc2UgIT0gbnVsbCkge1xuICAgICAgdGhpcy5fcG9zZS51cGRhdGVQYXJhbWV0ZXJzKHRoaXMuX21vZGVsLCBkZWx0YVRpbWVTZWNvbmRzKTtcbiAgICB9XG5cbiAgICB0aGlzLl9tb2RlbC51cGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlvJXmlbDjgafmjIflrprjgZfjgZ/jg6Ljg7zjgrfjg6fjg7Pjga7lho3nlJ/jgpLplovlp4vjgZnjgotcbiAgICogQHBhcmFtIGdyb3VwIOODouODvOOCt+ODp+ODs+OCsOODq+ODvOODl+WQjVxuICAgKiBAcGFyYW0gbm8g44Kw44Or44O844OX5YaF44Gu55Wq5Y+3XG4gICAqIEBwYXJhbSBwcmlvcml0eSDlhKrlhYjluqZcbiAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huaZguOBq+WRvOOBs+WHuuOBleOCjOOCi+OCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICAgKiBAcmV0dXJuIOmWi+Wni+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OCkui/lOOBmeOAguWAi+WIpeOBruODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi2lzRmluaXNoZWQoKeOBruW8leaVsOOBp+S9v+eUqOOBmeOCi+OAgumWi+Wni+OBp+OBjeOBquOBhOaZguOBr1stMV1cbiAgICovXG4gIHB1YmxpYyBzdGFydE1vdGlvbihcbiAgICBncm91cDogc3RyaW5nLFxuICAgIG5vOiBudW1iZXIsXG4gICAgcHJpb3JpdHk6IG51bWJlcixcbiAgICBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcj86IEZpbmlzaGVkTW90aW9uQ2FsbGJhY2tcbiAgKTogQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSB7XG4gICAgaWYgKHByaW9yaXR5ID09IExBcHBEZWZpbmUuUHJpb3JpdHlGb3JjZSkge1xuICAgICAgdGhpcy5fbW90aW9uTWFuYWdlci5zZXRSZXNlcnZlUHJpb3JpdHkocHJpb3JpdHkpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuX21vdGlvbk1hbmFnZXIucmVzZXJ2ZU1vdGlvbihwcmlvcml0eSkpIHtcbiAgICAgIGlmICh0aGlzLl9kZWJ1Z01vZGUpIHtcbiAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoXCJbQVBQXWNhbid0IHN0YXJ0IG1vdGlvbi5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gSW52YWxpZE1vdGlvblF1ZXVlRW50cnlIYW5kbGVWYWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBtb3Rpb25GaWxlTmFtZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25GaWxlTmFtZShncm91cCwgbm8pO1xuXG4gICAgLy8gZXgpIGlkbGVfMFxuICAgIGNvbnN0IG5hbWUgPSBgJHtncm91cH1fJHtub31gO1xuICAgIGxldCBtb3Rpb246IEN1YmlzbU1vdGlvbiA9IHRoaXMuX21vdGlvbnMuZ2V0VmFsdWUobmFtZSkgYXMgQ3ViaXNtTW90aW9uO1xuICAgIGxldCBhdXRvRGVsZXRlID0gZmFsc2U7XG5cbiAgICBpZiAobW90aW9uID09IG51bGwpIHtcbiAgICAgIGZldGNoKGAke3RoaXMuX21vZGVsSG9tZURpcn0ke21vdGlvbkZpbGVOYW1lfWApXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgIC50aGVuKGFycmF5QnVmZmVyID0+IHtcbiAgICAgICAgICBtb3Rpb24gPSB0aGlzLmxvYWRNb3Rpb24oXG4gICAgICAgICAgICBhcnJheUJ1ZmZlcixcbiAgICAgICAgICAgIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXJcbiAgICAgICAgICApO1xuICAgICAgICAgIGxldCBmYWRlVGltZTogbnVtYmVyID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkZhZGVJblRpbWVWYWx1ZShcbiAgICAgICAgICAgIGdyb3VwLFxuICAgICAgICAgICAgbm9cbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKGZhZGVUaW1lID49IDAuMCkge1xuICAgICAgICAgICAgbW90aW9uLnNldEZhZGVJblRpbWUoZmFkZVRpbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZhZGVUaW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkZhZGVPdXRUaW1lVmFsdWUoZ3JvdXAsIG5vKTtcbiAgICAgICAgICBpZiAoZmFkZVRpbWUgPj0gMC4wKSB7XG4gICAgICAgICAgICBtb3Rpb24uc2V0RmFkZU91dFRpbWUoZmFkZVRpbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1vdGlvbi5zZXRFZmZlY3RJZHModGhpcy5fZXllQmxpbmtJZHMsIHRoaXMuX2xpcFN5bmNJZHMpO1xuICAgICAgICAgIGF1dG9EZWxldGUgPSB0cnVlOyAvLyDntYLkuobmmYLjgavjg6Hjg6Ljg6rjgYvjgonliYrpmaRcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vdGlvbi5zZXRGaW5pc2hlZE1vdGlvbkhhbmRsZXIob25GaW5pc2hlZE1vdGlvbkhhbmRsZXIpO1xuICAgIH1cblxuICAgIC8vdm9pY2VcbiAgICBjb25zdCB2b2ljZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Tb3VuZEZpbGVOYW1lKGdyb3VwLCBubyk7XG4gICAgaWYgKHZvaWNlLmxvY2FsZUNvbXBhcmUoJycpICE9IDApIHtcbiAgICAgIGxldCBwYXRoID0gdm9pY2U7XG4gICAgICBwYXRoID0gdGhpcy5fbW9kZWxIb21lRGlyICsgcGF0aDtcbiAgICAgIHRoaXMuX3dhdkZpbGVIYW5kbGVyLnN0YXJ0KHBhdGgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9kZWJ1Z01vZGUpIHtcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXXN0YXJ0IG1vdGlvbjogWyR7Z3JvdXB9XyR7bm99YCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9tb3Rpb25NYW5hZ2VyLnN0YXJ0TW90aW9uUHJpb3JpdHkoXG4gICAgICBtb3Rpb24sXG4gICAgICBhdXRvRGVsZXRlLFxuICAgICAgcHJpb3JpdHlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOODqeODs+ODgOODoOOBq+mBuOOBsOOCjOOBn+ODouODvOOCt+ODp+ODs+OBruWGjeeUn+OCkumWi+Wni+OBmeOCi+OAglxuICAgKiBAcGFyYW0gZ3JvdXAg44Oi44O844K344On44Oz44Kw44Or44O844OX5ZCNXG4gICAqIEBwYXJhbSBwcmlvcml0eSDlhKrlhYjluqZcbiAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huaZguOBq+WRvOOBs+WHuuOBleOCjOOCi+OCs+ODvOODq+ODkOODg+OCr+mWouaVsFxuICAgKiBAcmV0dXJuIOmWi+Wni+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OCkui/lOOBmeOAguWAi+WIpeOBruODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi2lzRmluaXNoZWQoKeOBruW8leaVsOOBp+S9v+eUqOOBmeOCi+OAgumWi+Wni+OBp+OBjeOBquOBhOaZguOBr1stMV1cbiAgICovXG4gIHB1YmxpYyBzdGFydFJhbmRvbU1vdGlvbihcbiAgICBncm91cDogc3RyaW5nLFxuICAgIHByaW9yaXR5OiBudW1iZXIsXG4gICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXG4gICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUge1xuICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uQ291bnQoZ3JvdXApID09IDApIHtcbiAgICAgIHJldHVybiBJbnZhbGlkTW90aW9uUXVldWVFbnRyeUhhbmRsZVZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IG5vOiBudW1iZXIgPSBNYXRoLmZsb29yKFxuICAgICAgTWF0aC5yYW5kb20oKSAqIHRoaXMuX21vZGVsU2V0dGluZy5nZXRNb3Rpb25Db3VudChncm91cClcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RhcnRNb3Rpb24oZ3JvdXAsIG5vLCBwcmlvcml0eSwgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW8leaVsOOBp+aMh+WumuOBl+OBn+ihqOaDheODouODvOOCt+ODp+ODs+OCkuOCu+ODg+ODiOOBmeOCi1xuICAgKlxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbklkIOihqOaDheODouODvOOCt+ODp+ODs+OBrklEXG4gICAqL1xuICBwdWJsaWMgc2V0RXhwcmVzc2lvbihleHByZXNzaW9uSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IG1vdGlvbjogQUN1YmlzbU1vdGlvbiA9IHRoaXMuX2V4cHJlc3Npb25zLmdldFZhbHVlKGV4cHJlc3Npb25JZCk7XG5cbiAgICBpZiAodGhpcy5fZGVidWdNb2RlKSB7XG4gICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShgW0FQUF1leHByZXNzaW9uOiBbJHtleHByZXNzaW9uSWR9XWApO1xuICAgIH1cblxuICAgIGlmIChtb3Rpb24gIT0gbnVsbCkge1xuICAgICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIuc3RhcnRNb3Rpb25Qcmlvcml0eShcbiAgICAgICAgbW90aW9uLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgTEFwcERlZmluZS5Qcmlvcml0eUZvcmNlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5fZGVidWdNb2RlKSB7XG4gICAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKGBbQVBQXWV4cHJlc3Npb25bJHtleHByZXNzaW9uSWR9XSBpcyBudWxsYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOODqeODs+ODgOODoOOBq+mBuOOBsOOCjOOBn+ihqOaDheODouODvOOCt+ODp+ODs+OCkuOCu+ODg+ODiOOBmeOCi1xuICAgKi9cbiAgcHVibGljIHNldFJhbmRvbUV4cHJlc3Npb24oKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2V4cHJlc3Npb25zLmdldFNpemUoKSA9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgbm86IG51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuX2V4cHJlc3Npb25zLmdldFNpemUoKSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2V4cHJlc3Npb25zLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBpZiAoaSA9PSBubykge1xuICAgICAgICBjb25zdCBuYW1lOiBzdHJpbmcgPSB0aGlzLl9leHByZXNzaW9ucy5fa2V5VmFsdWVzW2ldLmZpcnN0O1xuICAgICAgICB0aGlzLnNldEV4cHJlc3Npb24obmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI44Gu55m654Gr44KS5Y+X44GR5Y+W44KLXG4gICAqL1xuICBwdWJsaWMgbW90aW9uRXZlbnRGaXJlZChldmVudFZhbHVlOiBjc21TdHJpbmcpOiB2b2lkIHtcbiAgICBDdWJpc21Mb2dJbmZvKCd7MH0gaXMgZmlyZWQgb24gTEFwcE1vZGVsISEnLCBldmVudFZhbHVlLnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIOW9k+OBn+OCiuWIpOWumuODhuOCueODiFxuICAgKiDmjIflrprvvKnvvKTjga7poILngrnjg6rjgrnjg4jjgYvjgonnn6nlvaLjgpLoqIjnrpfjgZfjgIHluqfmqJnjgpLjgYznn6nlvaLnr4Tlm7LlhoXjgYvliKTlrprjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGhpdEFyZW5hTmFtZSAg5b2T44Gf44KK5Yik5a6a44KS44OG44K544OI44GZ44KL5a++6LGh44GuSURcbiAgICogQHBhcmFtIHggICAgICAgICAgICAg5Yik5a6a44KS6KGM44GGWOW6p+aomVxuICAgKiBAcGFyYW0geSAgICAgICAgICAgICDliKTlrprjgpLooYzjgYZZ5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgaGl0VGVzdChoaXRBcmVuYU5hbWU6IHN0cmluZywgeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAvLyDpgI/mmI7mmYLjga/lvZPjgZ/jgorliKTlrprnhKHjgZfjgIJcbiAgICBpZiAodGhpcy5fb3BhY2l0eSA8IDEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBjb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldEhpdEFyZWFzQ291bnQoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX21vZGVsU2V0dGluZy5nZXRIaXRBcmVhTmFtZShpKSA9PSBoaXRBcmVuYU5hbWUpIHtcbiAgICAgICAgY29uc3QgZHJhd0lkOiBDdWJpc21JZEhhbmRsZSA9IHRoaXMuX21vZGVsU2V0dGluZy5nZXRIaXRBcmVhSWQoaSk7XG4gICAgICAgIHJldHVybiB0aGlzLmlzSGl0KGRyYXdJZCwgeCwgeSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OCkuOCsOODq+ODvOODl+WQjeOBi+OCieS4gOaLrOOBp+ODreODvOODieOBmeOCi+OAglxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jga7lkI3liY3jga/lhoXpg6jjgadNb2RlbFNldHRpbmfjgYvjgonlj5blvpfjgZnjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIGdyb3VwIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OBruOCsOODq+ODvOODl+WQjVxuICAgKi9cbiAgcHVibGljIHByZUxvYWRNb3Rpb25Hcm91cChncm91cDogc3RyaW5nKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uQ291bnQoZ3JvdXApOyBpKyspIHtcbiAgICAgIGNvbnN0IG1vdGlvbkZpbGVOYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vdGlvbkZpbGVOYW1lKGdyb3VwLCBpKTtcblxuICAgICAgLy8gZXgpIGlkbGVfMFxuICAgICAgY29uc3QgbmFtZSA9IGAke2dyb3VwfV8ke2l9YDtcbiAgICAgIGlmICh0aGlzLl9kZWJ1Z01vZGUpIHtcbiAgICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoXG4gICAgICAgICAgYFtBUFBdbG9hZCBtb3Rpb246ICR7bW90aW9uRmlsZU5hbWV9ID0+IFske25hbWV9XWBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgZmV0Y2goYCR7dGhpcy5fbW9kZWxIb21lRGlyfSR7bW90aW9uRmlsZU5hbWV9YClcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4ge1xuICAgICAgICAgIGNvbnN0IHRtcE1vdGlvbjogQ3ViaXNtTW90aW9uID0gdGhpcy5sb2FkTW90aW9uKFxuICAgICAgICAgICAgYXJyYXlCdWZmZXIsXG4gICAgICAgICAgICBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBsZXQgZmFkZVRpbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZUluVGltZVZhbHVlKGdyb3VwLCBpKTtcbiAgICAgICAgICBpZiAoZmFkZVRpbWUgPj0gMC4wKSB7XG4gICAgICAgICAgICB0bXBNb3Rpb24uc2V0RmFkZUluVGltZShmYWRlVGltZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmFkZVRpbWUgPSB0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZU91dFRpbWVWYWx1ZShncm91cCwgaSk7XG4gICAgICAgICAgaWYgKGZhZGVUaW1lID49IDAuMCkge1xuICAgICAgICAgICAgdG1wTW90aW9uLnNldEZhZGVPdXRUaW1lKGZhZGVUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG1wTW90aW9uLnNldEVmZmVjdElkcyh0aGlzLl9leWVCbGlua0lkcywgdGhpcy5fbGlwU3luY0lkcyk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fbW90aW9ucy5nZXRWYWx1ZShuYW1lKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBBQ3ViaXNtTW90aW9uLmRlbGV0ZSh0aGlzLl9tb3Rpb25zLmdldFZhbHVlKG5hbWUpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9tb3Rpb25zLnNldFZhbHVlKG5hbWUsIHRtcE1vdGlvbik7XG5cbiAgICAgICAgICB0aGlzLl9tb3Rpb25Db3VudCsrO1xuICAgICAgICAgIGlmICh0aGlzLl9tb3Rpb25Db3VudCA+PSB0aGlzLl9hbGxNb3Rpb25Db3VudCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkVGV4dHVyZTtcblxuICAgICAgICAgICAgLy8g5YWo44Gm44Gu44Oi44O844K344On44Oz44KS5YGc5q2i44GZ44KLXG4gICAgICAgICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnN0b3BBbGxNb3Rpb25zKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3VwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUmVuZGVyZXIoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBUZXh0dXJlcygpO1xuICAgICAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnN0YXJ0VXAoZ2wpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOBmeOBueOBpuOBruODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OCkuino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHJlbGVhc2VNb3Rpb25zKCk6IHZvaWQge1xuICAgIHRoaXMuX21vdGlvbnMuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlhajjgabjga7ooajmg4Xjg4fjg7zjgr/jgpLop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlRXhwcmVzc2lvbnMoKTogdm9pZCB7XG4gICAgdGhpcy5fZXhwcmVzc2lvbnMuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovlh6bnkIbjgILjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgovnqbrplpPjga5WaWV3LVByb2plY3Rpb27ooYzliJfjgpLmuKHjgZnjgIJcbiAgICovXG4gIHB1YmxpYyBkb0RyYXcoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX21vZGVsID09IG51bGwpIHJldHVybjtcblxuICAgIC8vIOOCreODo+ODs+ODkOOCueOCteOCpOOCuuOCkua4oeOBmVxuICAgIGNvbnN0IHZpZXdwb3J0OiBudW1iZXJbXSA9IFswLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHRdO1xuXG4gICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldFJlbmRlclN0YXRlKGZyYW1lQnVmZmVyLCB2aWV3cG9ydCk7XG4gICAgdGhpcy5nZXRSZW5kZXJlcigpLmRyYXdNb2RlbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODouODh+ODq+OCkuaPj+eUu+OBmeOCi+WHpueQhuOAguODouODh+ODq+OCkuaPj+eUu+OBmeOCi+epuumWk+OBrlZpZXctUHJvamVjdGlvbuihjOWIl+OCkua4oeOBmeOAglxuICAgKi9cbiAgcHVibGljIGRyYXcobWF0cml4OiBDdWJpc21NYXRyaXg0NCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9tb2RlbCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8g5ZCE6Kqt44G/6L6844G/57WC5LqG5b6MXG4gICAgaWYgKHRoaXMuX3N0YXRlID09IExvYWRTdGVwLkNvbXBsZXRlU2V0dXApIHtcbiAgICAgIG1hdHJpeC5tdWx0aXBseUJ5TWF0cml4KHRoaXMuX21vZGVsTWF0cml4KTtcblxuICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldE12cE1hdHJpeChtYXRyaXgpO1xuXG4gICAgICB0aGlzLmRvRHJhdygpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBoYXNNb2NDb25zaXN0ZW5jeUZyb21GaWxlKCkge1xuICAgIENTTV9BU1NFUlQodGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vZGVsRmlsZU5hbWUoKS5sb2NhbGVDb21wYXJlKGBgKSk7XG5cbiAgICAvLyBDdWJpc21Nb2RlbFxuICAgIGlmICh0aGlzLl9tb2RlbFNldHRpbmcuZ2V0TW9kZWxGaWxlTmFtZSgpICE9ICcnKSB7XG4gICAgICBjb25zdCBtb2RlbEZpbGVOYW1lID0gdGhpcy5fbW9kZWxTZXR0aW5nLmdldE1vZGVsRmlsZU5hbWUoKTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLl9tb2RlbEhvbWVEaXJ9JHttb2RlbEZpbGVOYW1lfWApO1xuICAgICAgY29uc3QgYXJyYXlCdWZmZXIgPSBhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xuXG4gICAgICB0aGlzLl9jb25zaXN0ZW5jeSA9IEN1YmlzbU1vYy5oYXNNb2NDb25zaXN0ZW5jeShhcnJheUJ1ZmZlcik7XG5cbiAgICAgIGlmICghdGhpcy5fY29uc2lzdGVuY3kpIHtcbiAgICAgICAgQ3ViaXNtTG9nSW5mbygnSW5jb25zaXN0ZW50IE1PQzMuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBDdWJpc21Mb2dJbmZvKCdDb25zaXN0ZW50IE1PQzMuJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9jb25zaXN0ZW5jeTtcbiAgICB9IGVsc2Uge1xuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ01vZGVsIGRhdGEgZG9lcyBub3QgZXhpc3QuJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9tb2RlbFNldHRpbmcgPSBudWxsO1xuICAgIHRoaXMuX21vZGVsSG9tZURpciA9IG51bGw7XG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xuXG4gICAgdGhpcy5fZXllQmxpbmtJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xuICAgIHRoaXMuX2xpcFN5bmNJZHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPigpO1xuXG4gICAgdGhpcy5fbW90aW9ucyA9IG5ldyBjc21NYXA8c3RyaW5nLCBBQ3ViaXNtTW90aW9uPigpO1xuICAgIHRoaXMuX2V4cHJlc3Npb25zID0gbmV3IGNzbU1hcDxzdHJpbmcsIEFDdWJpc21Nb3Rpb24+KCk7XG5cbiAgICB0aGlzLl9oaXRBcmVhID0gbmV3IGNzbVZlY3Rvcjxjc21SZWN0PigpO1xuICAgIHRoaXMuX3VzZXJBcmVhID0gbmV3IGNzbVZlY3Rvcjxjc21SZWN0PigpO1xuXG4gICAgdGhpcy5faWRQYXJhbUFuZ2xlWCA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFuZ2xlWFxuICAgICk7XG4gICAgdGhpcy5faWRQYXJhbUFuZ2xlWSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFuZ2xlWVxuICAgICk7XG4gICAgdGhpcy5faWRQYXJhbUFuZ2xlWiA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUFuZ2xlWlxuICAgICk7XG4gICAgdGhpcy5faWRQYXJhbUV5ZUJhbGxYID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxuICAgICAgQ3ViaXNtRGVmYXVsdFBhcmFtZXRlcklkLlBhcmFtRXllQmFsbFhcbiAgICApO1xuICAgIHRoaXMuX2lkUGFyYW1FeWVCYWxsWSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUV5ZUJhbGxZXG4gICAgKTtcbiAgICB0aGlzLl9pZFBhcmFtQm9keUFuZ2xlWCA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcbiAgICAgIEN1YmlzbURlZmF1bHRQYXJhbWV0ZXJJZC5QYXJhbUJvZHlBbmdsZVhcbiAgICApO1xuXG4gICAgaWYgKExBcHBEZWZpbmUuTU9DQ29uc2lzdGVuY3lWYWxpZGF0aW9uRW5hYmxlKSB7XG4gICAgICB0aGlzLl9tb2NDb25zaXN0ZW5jeSA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5fc3RhdGUgPSBMb2FkU3RlcC5Mb2FkQXNzZXRzO1xuICAgIHRoaXMuX2V4cHJlc3Npb25Db3VudCA9IDA7XG4gICAgdGhpcy5fdGV4dHVyZUNvdW50ID0gMDtcbiAgICB0aGlzLl9tb3Rpb25Db3VudCA9IDA7XG4gICAgdGhpcy5fYWxsTW90aW9uQ291bnQgPSAwO1xuICAgIHRoaXMuX3dhdkZpbGVIYW5kbGVyID0gbmV3IExBcHBXYXZGaWxlSGFuZGxlcigpO1xuICAgIHRoaXMuX2NvbnNpc3RlbmN5ID0gZmFsc2U7XG4gIH1cblxuICBfbW9kZWxTZXR0aW5nOiBJQ3ViaXNtTW9kZWxTZXR0aW5nOyAvLyDjg6Ljg4fjg6vjgrvjg4Pjg4bjgqPjg7PjgrDmg4XloLFcbiAgX21vZGVsSG9tZURpcjogc3RyaW5nOyAvLyDjg6Ljg4fjg6vjgrvjg4Pjg4bjgqPjg7PjgrDjgYznva7jgYvjgozjgZ/jg4fjgqPjg6zjgq/jg4jjg6pcbiAgX3VzZXJUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDjg4fjg6vjgr/mmYLplpPjga7nqY3nrpflgKRb56eSXVxuXG4gIF9leWVCbGlua0lkczogY3NtVmVjdG9yPEN1YmlzbUlkSGFuZGxlPjsgLy8g44Oi44OH44Or44Gr6Kit5a6a44GV44KM44Gf556s44GN5qmf6IO955So44OR44Op44Oh44O844K/SURcbiAgX2xpcFN5bmNJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47IC8vIOODouODh+ODq+OBq+ioreWumuOBleOCjOOBn+ODquODg+ODl+OCt+ODs+OCr+apn+iDveeUqOODkeODqeODoeODvOOCv0lEXG5cbiAgX21vdGlvbnM6IGNzbU1hcDxzdHJpbmcsIEFDdWJpc21Nb3Rpb24+OyAvLyDoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg6Ljg7zjgrfjg6fjg7Pjga7jg6rjgrnjg4hcbiAgX2V4cHJlc3Npb25zOiBjc21NYXA8c3RyaW5nLCBBQ3ViaXNtTW90aW9uPjsgLy8g6Kqt44G/6L6844G+44KM44Gm44GE44KL6KGo5oOF44Gu44Oq44K544OIXG5cbiAgX2hpdEFyZWE6IGNzbVZlY3Rvcjxjc21SZWN0PjtcbiAgX3VzZXJBcmVhOiBjc21WZWN0b3I8Y3NtUmVjdD47XG5cbiAgX2lkUGFyYW1BbmdsZVg6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1BbmdsZVhcbiAgX2lkUGFyYW1BbmdsZVk6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1BbmdsZVlcbiAgX2lkUGFyYW1BbmdsZVo6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1BbmdsZVpcbiAgX2lkUGFyYW1FeWVCYWxsWDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODkeODqeODoeODvOOCv0lEOiBQYXJhbUV5ZUJhbGxYXG4gIF9pZFBhcmFtRXllQmFsbFk6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1FeWVCQWxsWVxuICBfaWRQYXJhbUJvZHlBbmdsZVg6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg5Hjg6njg6Hjg7zjgr9JRDogUGFyYW1Cb2R5QW5nbGVYXG5cbiAgX3N0YXRlOiBudW1iZXI7IC8vIOePvuWcqOOBruOCueODhuODvOOCv+OCueeuoeeQhueUqFxuICBfZXhwcmVzc2lvbkNvdW50OiBudW1iZXI7IC8vIOihqOaDheODh+ODvOOCv+OCq+OCpuODs+ODiFxuICBfdGV4dHVyZUNvdW50OiBudW1iZXI7IC8vIOODhuOCr+OCueODgeODo+OCq+OCpuODs+ODiFxuICBfbW90aW9uQ291bnQ6IG51bWJlcjsgLy8g44Oi44O844K344On44Oz44OH44O844K/44Kr44Km44Oz44OIXG4gIF9hbGxNb3Rpb25Db3VudDogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Pnt4/mlbBcbiAgX3dhdkZpbGVIYW5kbGVyOiBMQXBwV2F2RmlsZUhhbmRsZXI7IC8vd2F244OV44Kh44Kk44Or44OP44Oz44OJ44OpXG4gIF9jb25zaXN0ZW5jeTogYm9vbGVhbjsgLy8gTU9DM+S4gOiyq+aAp+ODgeOCp+ODg+OCr+euoeeQhueUqFxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuLyoqXG4gKiDjg5fjg6njg4Pjg4jjg5Xjgqnjg7zjg6Dkvp3lrZjmqZ/og73jgpLmir3osaHljJbjgZnjgosgQ3ViaXNtIFBsYXRmb3JtIEFic3RyYWN0aW9uIExheWVyLlxuICpcbiAqIOODleOCoeOCpOODq+iqreOBv+i+vOOBv+OChOaZguWIu+WPluW+l+etieOBruODl+ODqeODg+ODiOODleOCqeODvOODoOOBq+S+neWtmOOBmeOCi+mWouaVsOOCkuOBvuOBqOOCgeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcFBhbCB7XG4gIC8qKlxuICAgKiDjg5XjgqHjgqTjg6vjgpLjg5DjgqTjg4jjg4fjg7zjgr/jgajjgZfjgaboqq3jgb/jgZPjgoBcbiAgICpcbiAgICogQHBhcmFtIGZpbGVQYXRoIOiqreOBv+i+vOOBv+WvvuixoeODleOCoeOCpOODq+OBruODkeOCuVxuICAgKiBAcmV0dXJuXG4gICAqIHtcbiAgICogICAgICBidWZmZXIsICAg6Kqt44G/6L6844KT44Gg44OQ44Kk44OI44OH44O844K/XG4gICAqICAgICAgc2l6ZSAgICAgICAg44OV44Kh44Kk44Or44K144Kk44K6XG4gICAqIH1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgbG9hZEZpbGVBc0J5dGVzKFxuICAgIGZpbGVQYXRoOiBzdHJpbmcsXG4gICAgY2FsbGJhY2s6IChhcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcikgPT4gdm9pZFxuICApOiB2b2lkIHtcbiAgICBmZXRjaChmaWxlUGF0aClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAudGhlbihhcnJheUJ1ZmZlciA9PiBjYWxsYmFjayhhcnJheUJ1ZmZlciwgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOODh+ODq+OCv+aZgumWk++8iOWJjeWbnuODleODrOODvOODoOOBqOOBruW3ruWIhu+8ieOCkuWPluW+l+OBmeOCi1xuICAgKiBAcmV0dXJuIOODh+ODq+OCv+aZgumWk1ttc11cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0RGVsdGFUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc19kZWx0YVRpbWU7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHVwZGF0ZVRpbWUoKTogdm9pZCB7XG4gICAgdGhpcy5zX2N1cnJlbnRGcmFtZSA9IERhdGUubm93KCk7XG4gICAgdGhpcy5zX2RlbHRhVGltZSA9ICh0aGlzLnNfY3VycmVudEZyYW1lIC0gdGhpcy5zX2xhc3RGcmFtZSkgLyAxMDAwO1xuICAgIHRoaXMuc19sYXN0RnJhbWUgPSB0aGlzLnNfY3VycmVudEZyYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIOODoeODg+OCu+ODvOOCuOOCkuWHuuWKm+OBmeOCi1xuICAgKiBAcGFyYW0gbWVzc2FnZSDmloflrZfliJdcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcHJpbnRNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICB9XG5cbiAgc3RhdGljIGxhc3RVcGRhdGUgPSBEYXRlLm5vdygpO1xuXG4gIHN0YXRpYyBzX2N1cnJlbnRGcmFtZSA9IDAuMDtcbiAgc3RhdGljIHNfbGFzdEZyYW1lID0gMC4wO1xuICBzdGF0aWMgc19kZWx0YVRpbWUgPSAwLjA7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBjYW52YXMsIGdsIH0gZnJvbSAnLi9sYXBwZGVsZWdhdGUnO1xuXG4vKipcbiAqIOOCueODl+ODqeOCpOODiOOCkuWun+ijheOBmeOCi+OCr+ODqeOCuVxuICpcbiAqIOODhuOCr+OCueODgeODo++8qe+8pOOAgVJlY3Tjga7nrqHnkIZcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBTcHJpdGUge1xuICAvKipcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XG4gICAqIEBwYXJhbSB4ICAgICAgICAgICAgeOW6p+aomVxuICAgKiBAcGFyYW0geSAgICAgICAgICAgIHnluqfmqJlcbiAgICogQHBhcmFtIHdpZHRoICAgICAgICDmqKrluYVcbiAgICogQHBhcmFtIGhlaWdodCAgICAgICDpq5jjgZVcbiAgICogQHBhcmFtIHRleHR1cmVJZCAgICDjg4bjgq/jgrnjg4Hjg6NcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXIsXG4gICAgd2lkdGg6IG51bWJlcixcbiAgICBoZWlnaHQ6IG51bWJlcixcbiAgICB0ZXh0dXJlSWQ6IFdlYkdMVGV4dHVyZVxuICApIHtcbiAgICB0aGlzLl9yZWN0ID0gbmV3IFJlY3QoKTtcbiAgICB0aGlzLl9yZWN0LmxlZnQgPSB4IC0gd2lkdGggKiAwLjU7XG4gICAgdGhpcy5fcmVjdC5yaWdodCA9IHggKyB3aWR0aCAqIDAuNTtcbiAgICB0aGlzLl9yZWN0LnVwID0geSArIGhlaWdodCAqIDAuNTtcbiAgICB0aGlzLl9yZWN0LmRvd24gPSB5IC0gaGVpZ2h0ICogMC41O1xuICAgIHRoaXMuX3RleHR1cmUgPSB0ZXh0dXJlSWQ7XG4gICAgdGhpcy5fdmVydGV4QnVmZmVyID0gbnVsbDtcbiAgICB0aGlzLl91dkJ1ZmZlciA9IG51bGw7XG4gICAgdGhpcy5faW5kZXhCdWZmZXIgPSBudWxsO1xuXG4gICAgdGhpcy5fcG9zaXRpb25Mb2NhdGlvbiA9IG51bGw7XG4gICAgdGhpcy5fdXZMb2NhdGlvbiA9IG51bGw7XG4gICAgdGhpcy5fdGV4dHVyZUxvY2F0aW9uID0gbnVsbDtcblxuICAgIHRoaXMuX3Bvc2l0aW9uQXJyYXkgPSBudWxsO1xuICAgIHRoaXMuX3V2QXJyYXkgPSBudWxsO1xuICAgIHRoaXMuX2luZGV4QXJyYXkgPSBudWxsO1xuXG4gICAgdGhpcy5fZmlyc3REcmF3ID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xuICAgIHRoaXMuX3JlY3QgPSBudWxsO1xuXG4gICAgZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLl90ZXh0dXJlKTtcbiAgICB0aGlzLl90ZXh0dXJlID0gbnVsbDtcblxuICAgIGdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl91dkJ1ZmZlcik7XG4gICAgdGhpcy5fdXZCdWZmZXIgPSBudWxsO1xuXG4gICAgZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX3ZlcnRleEJ1ZmZlcik7XG4gICAgdGhpcy5fdmVydGV4QnVmZmVyID0gbnVsbDtcblxuICAgIGdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9pbmRleEJ1ZmZlcik7XG4gICAgdGhpcy5faW5kZXhCdWZmZXIgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIOODhuOCr+OCueODgeODo+OCkui/lOOBmVxuICAgKi9cbiAgcHVibGljIGdldFRleHR1cmUoKTogV2ViR0xUZXh0dXJlIHtcbiAgICByZXR1cm4gdGhpcy5fdGV4dHVyZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmj4/nlLvjgZnjgovjgIJcbiAgICogQHBhcmFtIHByb2dyYW1JZCDjgrfjgqfjg7zjg4Djg7zjg5fjg63jgrDjg6njg6BcbiAgICogQHBhcmFtIGNhbnZhcyDmj4/nlLvjgZnjgovjgq3jg6Pjg7Pjg5Hjgrnmg4XloLFcbiAgICovXG4gIHB1YmxpYyByZW5kZXIocHJvZ3JhbUlkOiBXZWJHTFByb2dyYW0pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fdGV4dHVyZSA9PSBudWxsKSB7XG4gICAgICAvLyDjg63jg7zjg4njgYzlrozkuobjgZfjgabjgYTjgarjgYRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyDliJ3lm57mj4/nlLvmmYJcbiAgICBpZiAodGhpcy5fZmlyc3REcmF3KSB7XG4gICAgICAvLyDkvZXnlarnm67jga5hdHRyaWJ1dGXlpInmlbDjgYvlj5blvpdcbiAgICAgIHRoaXMuX3Bvc2l0aW9uTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtSWQsICdwb3NpdGlvbicpO1xuICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5fcG9zaXRpb25Mb2NhdGlvbik7XG5cbiAgICAgIHRoaXMuX3V2TG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtSWQsICd1dicpO1xuICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5fdXZMb2NhdGlvbik7XG5cbiAgICAgIC8vIOS9leeVquebruOBrnVuaWZvcm3lpInmlbDjgYvlj5blvpdcbiAgICAgIHRoaXMuX3RleHR1cmVMb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtSWQsICd0ZXh0dXJlJyk7XG5cbiAgICAgIC8vIHVuaWZvcm3lsZ7mgKfjga7nmbvpjLJcbiAgICAgIGdsLnVuaWZvcm0xaSh0aGlzLl90ZXh0dXJlTG9jYXRpb24sIDApO1xuXG4gICAgICAvLyB1duODkOODg+ODleOCoeOAgeW6p+aomeWIneacn+WMllxuICAgICAge1xuICAgICAgICB0aGlzLl91dkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgICAgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMS4wLCAxLjBcbiAgICAgICAgXSk7XG5cbiAgICAgICAgLy8gdXbjg5Djg4Pjg5XjgqHjgpLkvZzmiJBcbiAgICAgICAgdGhpcy5fdXZCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgIH1cblxuICAgICAgLy8g6aCC54K544OQ44OD44OV44Kh44CB5bqn5qiZ5Yid5pyf5YyWXG4gICAgICB7XG4gICAgICAgIGNvbnN0IG1heFdpZHRoID0gY2FudmFzLndpZHRoO1xuICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xuXG4gICAgICAgIC8vIOmggueCueODh+ODvOOCv1xuICAgICAgICB0aGlzLl9wb3NpdGlvbkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgICAgKHRoaXMuX3JlY3QucmlnaHQgLSBtYXhXaWR0aCAqIDAuNSkgLyAobWF4V2lkdGggKiAwLjUpLFxuICAgICAgICAgICh0aGlzLl9yZWN0LnVwIC0gbWF4SGVpZ2h0ICogMC41KSAvIChtYXhIZWlnaHQgKiAwLjUpLFxuICAgICAgICAgICh0aGlzLl9yZWN0LmxlZnQgLSBtYXhXaWR0aCAqIDAuNSkgLyAobWF4V2lkdGggKiAwLjUpLFxuICAgICAgICAgICh0aGlzLl9yZWN0LnVwIC0gbWF4SGVpZ2h0ICogMC41KSAvIChtYXhIZWlnaHQgKiAwLjUpLFxuICAgICAgICAgICh0aGlzLl9yZWN0LmxlZnQgLSBtYXhXaWR0aCAqIDAuNSkgLyAobWF4V2lkdGggKiAwLjUpLFxuICAgICAgICAgICh0aGlzLl9yZWN0LmRvd24gLSBtYXhIZWlnaHQgKiAwLjUpIC8gKG1heEhlaWdodCAqIDAuNSksXG4gICAgICAgICAgKHRoaXMuX3JlY3QucmlnaHQgLSBtYXhXaWR0aCAqIDAuNSkgLyAobWF4V2lkdGggKiAwLjUpLFxuICAgICAgICAgICh0aGlzLl9yZWN0LmRvd24gLSBtYXhIZWlnaHQgKiAwLjUpIC8gKG1heEhlaWdodCAqIDAuNSlcbiAgICAgICAgXSk7XG5cbiAgICAgICAgLy8g6aCC54K544OQ44OD44OV44Kh44KS5L2c5oiQXG4gICAgICAgIHRoaXMuX3ZlcnRleEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgfVxuXG4gICAgICAvLyDpoILngrnjgqTjg7Pjg4fjg4Pjgq/jgrnjg5Djg4Pjg5XjgqHjgIHliJ3mnJ/ljJZcbiAgICAgIHtcbiAgICAgICAgLy8g44Kk44Oz44OH44OD44Kv44K544OH44O844K/XG4gICAgICAgIHRoaXMuX2luZGV4QXJyYXkgPSBuZXcgVWludDE2QXJyYXkoWzAsIDEsIDIsIDMsIDIsIDBdKTtcblxuICAgICAgICAvLyDjgqTjg7Pjg4fjg4Pjgq/jgrnjg5Djg4Pjg5XjgqHjgpLkvZzmiJBcbiAgICAgICAgdGhpcy5faW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZmlyc3REcmF3ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVVbluqfmqJnnmbvpjLJcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fdXZCdWZmZXIpO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLl91dkFycmF5LCBnbC5TVEFUSUNfRFJBVyk7XG5cbiAgICAvLyBhdHRyaWJ1dGXlsZ7mgKfjgpLnmbvpjLJcbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuX3V2TG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cbiAgICAvLyDpoILngrnluqfmqJnjgpLnmbvpjLJcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fdmVydGV4QnVmZmVyKTtcbiAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fcG9zaXRpb25BcnJheSwgZ2wuU1RBVElDX0RSQVcpO1xuXG4gICAgLy8gYXR0cmlidXRl5bGe5oCn44KS55m76YyyXG4gICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLl9wb3NpdGlvbkxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXG4gICAgLy8g6aCC54K544Kk44Oz44OH44OD44Kv44K544KS5L2c5oiQXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5faW5kZXhCdWZmZXIpO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuX2luZGV4QXJyYXksIGdsLkRZTkFNSUNfRFJBVyk7XG5cbiAgICAvLyDjg6Ljg4fjg6vjga7mj4/nlLtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLl90ZXh0dXJlKTtcbiAgICBnbC5kcmF3RWxlbWVudHMoXG4gICAgICBnbC5UUklBTkdMRVMsXG4gICAgICB0aGlzLl9pbmRleEFycmF5Lmxlbmd0aCxcbiAgICAgIGdsLlVOU0lHTkVEX1NIT1JULFxuICAgICAgMFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5b2T44Gf44KK5Yik5a6aXG4gICAqIEBwYXJhbSBwb2ludFggeOW6p+aomVxuICAgKiBAcGFyYW0gcG9pbnRZIHnluqfmqJlcbiAgICovXG4gIHB1YmxpYyBpc0hpdChwb2ludFg6IG51bWJlciwgcG9pbnRZOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAvLyDnlLvpnaLjgrXjgqTjgrrjgpLlj5blvpfjgZnjgovjgIJcbiAgICBjb25zdCB7IGhlaWdodCB9ID0gY2FudmFzO1xuXG4gICAgLy8gWeW6p+aomeOBr+WkieaPm+OBmeOCi+W/heimgeOBguOCilxuICAgIGNvbnN0IHkgPSBoZWlnaHQgLSBwb2ludFk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgcG9pbnRYID49IHRoaXMuX3JlY3QubGVmdCAmJlxuICAgICAgcG9pbnRYIDw9IHRoaXMuX3JlY3QucmlnaHQgJiZcbiAgICAgIHkgPD0gdGhpcy5fcmVjdC51cCAmJlxuICAgICAgeSA+PSB0aGlzLl9yZWN0LmRvd25cbiAgICApO1xuICB9XG5cbiAgX3RleHR1cmU6IFdlYkdMVGV4dHVyZTsgLy8g44OG44Kv44K544OB44OjXG4gIF92ZXJ0ZXhCdWZmZXI6IFdlYkdMQnVmZmVyOyAvLyDpoILngrnjg5Djg4Pjg5XjgqFcbiAgX3V2QnVmZmVyOiBXZWJHTEJ1ZmZlcjsgLy8gdXbpoILngrnjg5Djg4Pjg5XjgqFcbiAgX2luZGV4QnVmZmVyOiBXZWJHTEJ1ZmZlcjsgLy8g6aCC54K544Kk44Oz44OH44OD44Kv44K544OQ44OD44OV44KhXG4gIF9yZWN0OiBSZWN0OyAvLyDnn6nlvaJcblxuICBfcG9zaXRpb25Mb2NhdGlvbjogbnVtYmVyO1xuICBfdXZMb2NhdGlvbjogbnVtYmVyO1xuICBfdGV4dHVyZUxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbjtcblxuICBfcG9zaXRpb25BcnJheTogRmxvYXQzMkFycmF5O1xuICBfdXZBcnJheTogRmxvYXQzMkFycmF5O1xuICBfaW5kZXhBcnJheTogVWludDE2QXJyYXk7XG5cbiAgX2ZpcnN0RHJhdzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFJlY3Qge1xuICBwdWJsaWMgbGVmdDogbnVtYmVyOyAvLyDlt6bovrpcbiAgcHVibGljIHJpZ2h0OiBudW1iZXI7IC8vIOWPs+i+ulxuICBwdWJsaWMgdXA6IG51bWJlcjsgLy8g5LiK6L66XG4gIHB1YmxpYyBkb3duOiBudW1iZXI7IC8vIOS4i+i+ulxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgY3NtVmVjdG9yLCBpdGVyYXRvciB9IGZyb20gJ0BmcmFtZXdvcmsvdHlwZS9jc212ZWN0b3InO1xuXG5pbXBvcnQgeyBnbCB9IGZyb20gJy4vbGFwcGRlbGVnYXRlJztcblxuLyoqXG4gKiDjg4bjgq/jgrnjg4Hjg6PnrqHnkIbjgq/jg6njgrlcbiAqIOeUu+WDj+iqreOBv+i+vOOBv+OAgeeuoeeQhuOCkuihjOOBhuOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgTEFwcFRleHR1cmVNYW5hZ2VyIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fdGV4dHVyZXMgPSBuZXcgY3NtVmVjdG9yPFRleHR1cmVJbmZvPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIOino+aUvuOBmeOCi+OAglxuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgZm9yIChcbiAgICAgIGxldCBpdGU6IGl0ZXJhdG9yPFRleHR1cmVJbmZvPiA9IHRoaXMuX3RleHR1cmVzLmJlZ2luKCk7XG4gICAgICBpdGUubm90RXF1YWwodGhpcy5fdGV4dHVyZXMuZW5kKCkpO1xuICAgICAgaXRlLnByZUluY3JlbWVudCgpXG4gICAgKSB7XG4gICAgICBnbC5kZWxldGVUZXh0dXJlKGl0ZS5wdHIoKS5pZCk7XG4gICAgfVxuICAgIHRoaXMuX3RleHR1cmVzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiDnlLvlg4/oqq3jgb/ovrzjgb9cbiAgICpcbiAgICogQHBhcmFtIGZpbGVOYW1lIOiqreOBv+i+vOOCgOeUu+WDj+ODleOCoeOCpOODq+ODkeOCueWQjVxuICAgKiBAcGFyYW0gdXNlUHJlbXVsdGlwbHkgUHJlbXVsdOWHpueQhuOCkuacieWKueOBq+OBmeOCi+OBi1xuICAgKiBAcmV0dXJuIOeUu+WDj+aDheWgseOAgeiqreOBv+i+vOOBv+WkseaVl+aZguOBr251bGzjgpLov5TjgZlcbiAgICovXG4gIHB1YmxpYyBjcmVhdGVUZXh0dXJlRnJvbVBuZ0ZpbGUoXG4gICAgZmlsZU5hbWU6IHN0cmluZyxcbiAgICB1c2VQcmVtdWx0aXBseTogYm9vbGVhbixcbiAgICBjYWxsYmFjazogKHRleHR1cmVJbmZvOiBUZXh0dXJlSW5mbykgPT4gdm9pZFxuICApOiB2b2lkIHtcbiAgICAvLyBzZWFyY2ggbG9hZGVkIHRleHR1cmUgYWxyZWFkeVxuICAgIGZvciAoXG4gICAgICBsZXQgaXRlOiBpdGVyYXRvcjxUZXh0dXJlSW5mbz4gPSB0aGlzLl90ZXh0dXJlcy5iZWdpbigpO1xuICAgICAgaXRlLm5vdEVxdWFsKHRoaXMuX3RleHR1cmVzLmVuZCgpKTtcbiAgICAgIGl0ZS5wcmVJbmNyZW1lbnQoKVxuICAgICkge1xuICAgICAgaWYgKFxuICAgICAgICBpdGUucHRyKCkuZmlsZU5hbWUgPT0gZmlsZU5hbWUgJiZcbiAgICAgICAgaXRlLnB0cigpLnVzZVByZW11bHRwbHkgPT0gdXNlUHJlbXVsdGlwbHlcbiAgICAgICkge1xuICAgICAgICAvLyAy5Zue55uu5Lul6ZmN44Gv44Kt44Oj44OD44K344Ol44GM5L2/55So44GV44KM44KLKOW+heOBoeaZgumWk+OBquOBlylcbiAgICAgICAgLy8gV2ViS2l044Gn44Gv5ZCM44GYSW1hZ2Xjga5vbmxvYWTjgpLlho3luqblkbzjgbbjgavjga/lho3jgqTjg7Pjgrnjgr/jg7PjgrnjgYzlv4XopoFcbiAgICAgICAgLy8g6Kmz57Sw77yaaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzUwMjQxODFcbiAgICAgICAgaXRlLnB0cigpLmltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpdGUucHRyKCkuaW1nLm9ubG9hZCA9ICgpOiB2b2lkID0+IGNhbGxiYWNrKGl0ZS5wdHIoKSk7XG4gICAgICAgIGl0ZS5wdHIoKS5pbWcuc3JjID0gZmlsZU5hbWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDjg4fjg7zjgr/jga7jgqrjg7Pjg63jg7zjg4njgpLjg4jjg6rjgqzjg7zjgavjgZnjgotcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWcub25sb2FkID0gKCk6IHZvaWQgPT4ge1xuICAgICAgLy8g44OG44Kv44K544OB44Oj44Kq44OW44K444Kn44Kv44OI44Gu5L2c5oiQXG4gICAgICBjb25zdCB0ZXg6IFdlYkdMVGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblxuICAgICAgLy8g44OG44Kv44K544OB44Oj44KS6YG45oqeXG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXgpO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6Pjgavjg5Tjgq/jgrvjg6vjgpLmm7jjgY3ovrzjgoBcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUixcbiAgICAgICAgZ2wuTElORUFSX01JUE1BUF9MSU5FQVJcbiAgICAgICk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcblxuICAgICAgLy8gUHJlbXVsdOWHpueQhuOCkuihjOOCj+OBm+OCi1xuICAgICAgaWYgKHVzZVByZW11bHRpcGx5KSB7XG4gICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgMSk7XG4gICAgICB9XG5cbiAgICAgIC8vIOODhuOCr+OCueODgeODo+OBq+ODlOOCr+OCu+ODq+OCkuabuOOBjei+vOOCgFxuICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBpbWcpO1xuXG4gICAgICAvLyDjg5/jg4Pjg5fjg57jg4Pjg5fjgpLnlJ/miJBcbiAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpO1xuXG4gICAgICAvLyDjg4bjgq/jgrnjg4Hjg6PjgpLjg5DjgqTjg7Pjg4lcbiAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXG4gICAgICBjb25zdCB0ZXh0dXJlSW5mbzogVGV4dHVyZUluZm8gPSBuZXcgVGV4dHVyZUluZm8oKTtcbiAgICAgIGlmICh0ZXh0dXJlSW5mbyAhPSBudWxsKSB7XG4gICAgICAgIHRleHR1cmVJbmZvLmZpbGVOYW1lID0gZmlsZU5hbWU7XG4gICAgICAgIHRleHR1cmVJbmZvLndpZHRoID0gaW1nLndpZHRoO1xuICAgICAgICB0ZXh0dXJlSW5mby5oZWlnaHQgPSBpbWcuaGVpZ2h0O1xuICAgICAgICB0ZXh0dXJlSW5mby5pZCA9IHRleDtcbiAgICAgICAgdGV4dHVyZUluZm8uaW1nID0gaW1nO1xuICAgICAgICB0ZXh0dXJlSW5mby51c2VQcmVtdWx0cGx5ID0gdXNlUHJlbXVsdGlwbHk7XG4gICAgICAgIHRoaXMuX3RleHR1cmVzLnB1c2hCYWNrKHRleHR1cmVJbmZvKTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sodGV4dHVyZUluZm8pO1xuICAgIH07XG4gICAgaW1nLnNyYyA9IGZpbGVOYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruino+aUvlxuICAgKlxuICAgKiDphY3liJfjgavlrZjlnKjjgZnjgovnlLvlg4/lhajjgabjgpLop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlVGV4dHVyZXMoKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ZXh0dXJlcy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgdGhpcy5fdGV4dHVyZXMuc2V0KGksIG51bGwpO1xuICAgIH1cblxuICAgIHRoaXMuX3RleHR1cmVzLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICog55S75YOP44Gu6Kej5pS+XG4gICAqXG4gICAqIOaMh+WumuOBl+OBn+ODhuOCr+OCueODgeODo+OBrueUu+WDj+OCkuino+aUvuOBmeOCi+OAglxuICAgKiBAcGFyYW0gdGV4dHVyZSDop6PmlL7jgZnjgovjg4bjgq/jgrnjg4Hjg6NcbiAgICovXG4gIHB1YmxpYyByZWxlYXNlVGV4dHVyZUJ5VGV4dHVyZSh0ZXh0dXJlOiBXZWJHTFRleHR1cmUpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RleHR1cmVzLmdldFNpemUoKTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5fdGV4dHVyZXMuYXQoaSkuaWQgIT0gdGV4dHVyZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdGV4dHVyZXMuc2V0KGksIG51bGwpO1xuICAgICAgdGhpcy5fdGV4dHVyZXMucmVtb3ZlKGkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruino+aUvlxuICAgKlxuICAgKiDmjIflrprjgZfjgZ/lkI3liY3jga7nlLvlg4/jgpLop6PmlL7jgZnjgovjgIJcbiAgICogQHBhcmFtIGZpbGVOYW1lIOino+aUvuOBmeOCi+eUu+WDj+ODleOCoeOCpOODq+ODkeOCueWQjVxuICAgKi9cbiAgcHVibGljIHJlbGVhc2VUZXh0dXJlQnlGaWxlUGF0aChmaWxlTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90ZXh0dXJlcy5nZXRTaXplKCk7IGkrKykge1xuICAgICAgaWYgKHRoaXMuX3RleHR1cmVzLmF0KGkpLmZpbGVOYW1lID09IGZpbGVOYW1lKSB7XG4gICAgICAgIHRoaXMuX3RleHR1cmVzLnNldChpLCBudWxsKTtcbiAgICAgICAgdGhpcy5fdGV4dHVyZXMucmVtb3ZlKGkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfdGV4dHVyZXM6IGNzbVZlY3RvcjxUZXh0dXJlSW5mbz47XG59XG5cbi8qKlxuICog55S75YOP5oOF5aCx5qeL6YCg5L2TXG4gKi9cbmV4cG9ydCBjbGFzcyBUZXh0dXJlSW5mbyB7XG4gIGltZzogSFRNTEltYWdlRWxlbWVudDsgLy8g55S75YOPXG4gIGlkOiBXZWJHTFRleHR1cmUgPSBudWxsOyAvLyDjg4bjgq/jgrnjg4Hjg6NcbiAgd2lkdGggPSAwOyAvLyDmqKrluYVcbiAgaGVpZ2h0ID0gMDsgLy8g6auY44GVXG4gIHVzZVByZW11bHRwbHk6IGJvb2xlYW47IC8vIFByZW11bHTlh6bnkIbjgpLmnInlirnjgavjgZnjgovjgYtcbiAgZmlsZU5hbWU6IHN0cmluZzsgLy8g44OV44Kh44Kk44Or5ZCNXG59XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5pbXBvcnQgeyBDdWJpc21NYXRyaXg0NCB9IGZyb20gJ0BmcmFtZXdvcmsvbWF0aC9jdWJpc21tYXRyaXg0NCc7XG5pbXBvcnQgeyBDdWJpc21WaWV3TWF0cml4IH0gZnJvbSAnQGZyYW1ld29yay9tYXRoL2N1YmlzbXZpZXdtYXRyaXgnO1xuXG5pbXBvcnQgKiBhcyBMQXBwRGVmaW5lIGZyb20gJy4vbGFwcGRlZmluZSc7XG5pbXBvcnQgeyBjYW52YXMsIGdsLCBMQXBwRGVsZWdhdGUgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XG5pbXBvcnQgeyBMQXBwTGl2ZTJETWFuYWdlciB9IGZyb20gJy4vbGFwcGxpdmUyZG1hbmFnZXInO1xuaW1wb3J0IHsgTEFwcFBhbCB9IGZyb20gJy4vbGFwcHBhbCc7XG5pbXBvcnQgeyBMQXBwU3ByaXRlIH0gZnJvbSAnLi9sYXBwc3ByaXRlJztcbmltcG9ydCB7IFRleHR1cmVJbmZvIH0gZnJvbSAnLi9sYXBwdGV4dHVyZW1hbmFnZXInO1xuaW1wb3J0IHsgVG91Y2hNYW5hZ2VyIH0gZnJvbSAnLi90b3VjaG1hbmFnZXInO1xuXG5pbXBvcnQgeyBGdW5jRXh0ZW5zaW9ucyB9IGZyb20gJy4uL0Z1bmNFeHRlbnNpb25zJztcbmltcG9ydCB7IFNwZWVjaFJlYyB9IGZyb20gJy4uL3NwZWVjaFJlY29nbml0aW9uJztcbmltcG9ydCB7IFNwZWVjaFJlY19RQSB9IGZyb20gJy4uL3NwZWVjaF9RQSc7XG5pbXBvcnQgeyBwcmVWb2ljZVZveCB9IGZyb20gJy4uL0d1aU9wZXJhdG9yJztcblxuLyoqXG4gKiDmj4/nlLvjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIExBcHBWaWV3IHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fcHJvZ3JhbUlkID0gbnVsbDtcbiAgICB0aGlzLl9iYWNrID0gbnVsbDtcbiAgICB0aGlzLl9nZWFyID0gbnVsbDtcblxuICAgIC8vIOOCv+ODg+ODgemWouS/guOBruOCpOODmeODs+ODiOeuoeeQhlxuICAgIHRoaXMuX3RvdWNoTWFuYWdlciA9IG5ldyBUb3VjaE1hbmFnZXIoKTtcblxuICAgIC8vIOODh+ODkOOCpOOCueW6p+aomeOBi+OCieOCueOCr+ODquODvOODs+W6p+aomeOBq+WkieaPm+OBmeOCi+OBn+OCgeOBrlxuICAgIHRoaXMuX2RldmljZVRvU2NyZWVuID0gbmV3IEN1YmlzbU1hdHJpeDQ0KCk7XG5cbiAgICAvLyDnlLvpnaLjga7ooajnpLrjga7mi6HlpKfnuK7lsI/jgoTnp7vli5Xjga7lpInmj5vjgpLooYzjgYbooYzliJdcbiAgICB0aGlzLl92aWV3TWF0cml4ID0gbmV3IEN1YmlzbVZpZXdNYXRyaXgoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliJ3mnJ/ljJbjgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY2FudmFzO1xuXG4gICAgY29uc3QgcmF0aW86IG51bWJlciA9IHdpZHRoIC8gaGVpZ2h0O1xuICAgIGNvbnN0IGxlZnQ6IG51bWJlciA9IC1yYXRpbztcbiAgICBjb25zdCByaWdodDogbnVtYmVyID0gcmF0aW87XG4gICAgY29uc3QgYm90dG9tOiBudW1iZXIgPSBMQXBwRGVmaW5lLlZpZXdMb2dpY2FsTGVmdDtcbiAgICBjb25zdCB0b3A6IG51bWJlciA9IExBcHBEZWZpbmUuVmlld0xvZ2ljYWxSaWdodDtcblxuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2V0U2NyZWVuUmVjdChsZWZ0LCByaWdodCwgYm90dG9tLCB0b3ApOyAvLyDjg4fjg5DjgqTjgrnjgavlr77lv5zjgZnjgovnlLvpnaLjga7nr4Tlm7LjgIIgWOOBruW3puerr+OAgVjjga7lj7Pnq6/jgIFZ44Gu5LiL56uv44CBWeOBruS4iuerr1xuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2NhbGUoTEFwcERlZmluZS5WaWV3U2NhbGUsIExBcHBEZWZpbmUuVmlld1NjYWxlKTtcblxuICAgIHRoaXMuX2RldmljZVRvU2NyZWVuLmxvYWRJZGVudGl0eSgpO1xuICAgIGlmICh3aWR0aCA+IGhlaWdodCkge1xuICAgICAgY29uc3Qgc2NyZWVuVzogbnVtYmVyID0gTWF0aC5hYnMocmlnaHQgLSBsZWZ0KTtcbiAgICAgIHRoaXMuX2RldmljZVRvU2NyZWVuLnNjYWxlUmVsYXRpdmUoc2NyZWVuVyAvIHdpZHRoLCAtc2NyZWVuVyAvIHdpZHRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2NyZWVuSDogbnVtYmVyID0gTWF0aC5hYnModG9wIC0gYm90dG9tKTtcbiAgICAgIHRoaXMuX2RldmljZVRvU2NyZWVuLnNjYWxlUmVsYXRpdmUoc2NyZWVuSCAvIGhlaWdodCwgLXNjcmVlbkggLyBoZWlnaHQpO1xuICAgIH1cbiAgICB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2xhdGVSZWxhdGl2ZSgtd2lkdGggKiAwLjUsIC1oZWlnaHQgKiAwLjUpO1xuXG4gICAgLy8g6KGo56S656+E5Zuy44Gu6Kit5a6aXG4gICAgdGhpcy5fdmlld01hdHJpeC5zZXRNYXhTY2FsZShMQXBwRGVmaW5lLlZpZXdNYXhTY2FsZSk7IC8vIOmZkOeVjOaLoeW8teeOh1xuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2V0TWluU2NhbGUoTEFwcERlZmluZS5WaWV3TWluU2NhbGUpOyAvLyDpmZDnlYznuK7lsI/njodcblxuICAgIC8vIOihqOekuuOBp+OBjeOCi+acgOWkp+evhOWbslxuICAgIHRoaXMuX3ZpZXdNYXRyaXguc2V0TWF4U2NyZWVuUmVjdChcbiAgICAgIExBcHBEZWZpbmUuVmlld0xvZ2ljYWxNYXhMZWZ0LFxuICAgICAgTEFwcERlZmluZS5WaWV3TG9naWNhbE1heFJpZ2h0LFxuICAgICAgTEFwcERlZmluZS5WaWV3TG9naWNhbE1heEJvdHRvbSxcbiAgICAgIExBcHBEZWZpbmUuVmlld0xvZ2ljYWxNYXhUb3BcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOino+aUvuOBmeOCi1xuICAgKi9cbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XG4gICAgdGhpcy5fdmlld01hdHJpeCA9IG51bGw7XG4gICAgdGhpcy5fdG91Y2hNYW5hZ2VyID0gbnVsbDtcbiAgICB0aGlzLl9kZXZpY2VUb1NjcmVlbiA9IG51bGw7XG5cbiAgICB0aGlzLl9nZWFyLnJlbGVhc2UoKTtcbiAgICB0aGlzLl9nZWFyID0gbnVsbDtcblxuICAgIHRoaXMuX2JhY2sucmVsZWFzZSgpO1xuICAgIHRoaXMuX2JhY2sgPSBudWxsO1xuXG4gICAgZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtSWQpO1xuICAgIHRoaXMuX3Byb2dyYW1JZCA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICog5o+P55S744GZ44KL44CCXG4gICAqL1xuICBwdWJsaWMgcmVuZGVyKCk6IHZvaWQge1xuICAgIGdsLnVzZVByb2dyYW0odGhpcy5fcHJvZ3JhbUlkKTtcblxuICAgIGlmICh0aGlzLl9iYWNrKSB7XG4gICAgICB0aGlzLl9iYWNrLnJlbmRlcih0aGlzLl9wcm9ncmFtSWQpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZ2Vhcikge1xuICAgICAgdGhpcy5fZ2Vhci5yZW5kZXIodGhpcy5fcHJvZ3JhbUlkKTtcbiAgICB9XG5cbiAgICBnbC5mbHVzaCgpO1xuXG4gICAgY29uc3QgbGl2ZTJETWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXIgPSBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgbGl2ZTJETWFuYWdlci5zZXRWaWV3TWF0cml4KHRoaXMuX3ZpZXdNYXRyaXgpO1xuXG4gICAgbGl2ZTJETWFuYWdlci5vblVwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOeUu+WDj+OBruWIneacn+WMluOCkuihjOOBhuOAglxuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemVTcHJpdGUoKTogdm9pZCB7XG4gICAgY29uc3Qgd2lkdGg6IG51bWJlciA9IGNhbnZhcy53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQ6IG51bWJlciA9IGNhbnZhcy5oZWlnaHQ7XG5cbiAgICBjb25zdCB0ZXh0dXJlTWFuYWdlciA9IExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLmdldFRleHR1cmVNYW5hZ2VyKCk7XG4gICAgY29uc3QgcmVzb3VyY2VzUGF0aCA9IExBcHBEZWZpbmUuUmVzb3VyY2VzUGF0aDtcblxuICAgIC8vIOS9nOaIkOOBl+OBn2FkZEV2ZW5044KS5ZG844Gz5Ye644GZXG4gICAgLy8gY29uc3QgbGl2ZTJETWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXIgPSBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIC8vIGxpdmUyRE1hbmFnZXIuYWRkRXZlbnQoKTtcblxuICAgIC8vIOi/veWKoOapn+iDveOCkuabuOOBhOOBn2FkZEV2ZW5044KS5ZG844Gz5Ye644GZXG4gICAgY29uc3QgZnVuY0V4ID0gbmV3IEZ1bmNFeHRlbnNpb25zKCk7XG4gICAgZnVuY0V4LmFkZEV2ZW50KCk7XG5cbiAgICAvLyDpn7Plo7Doqo3orZjjga7jgqTjg5njg7Pjg4jjg6rjgrnjg4rjg7zjgpLlkbzjgbPlh7rjgZlcbiAgICBjb25zdCBzcGVlY2ggPSBuZXcgU3BlZWNoUmVjKCk7XG4gICAgc3BlZWNoLnNwZWVjaEV2ZW50KCk7XG5cbiAgICBjb25zdCBzcGVlY2hfUUEgPSBuZXcgU3BlZWNoUmVjX1FBKCk7XG4gICAgc3BlZWNoX1FBLnNwZWVjaEV2ZW50KCk7XG5cbiAgICBjb25zdCB2b2ljZVRleHQgPVxuICAgICAgW1xuICAgICAgICBcIuOBhOOCieOBo+OBl+OCg+OBhOOBvuOBm1wiLFxuICAgICAgICBcIuOAjOazqOaWh+mWi+Wni+OAjeOBqOWjsOOCkuaOm+OBkeOBpuOBj+OBoOOBleOBhFwiLFxuICAgICAgICBcIuWVhuWTgeWQjeOCkuWFpeWKm+OBl+OBpuOBj+OBoOOBleOBhFwiLFxuICAgICAgICBcIuOCkuOCq+ODvOODiOOBq+i/veWKoOOBl+OBvuOBmVwiLFxuICAgICAgICBcIuS7luOBq+S9leOBi+OBlOazqOaWh+OBr+OBguOCiuOBvuOBmeOBi1wiLFxuICAgICAgICBcIuazqOaWh+WGheWuueOCkuihqOekuuOBl+OBvuOBmVwiLFxuICAgICAgICBcIuOCq+ODvOODiOS4gOimp+OCkuihqOekuuOBl+OBvuOBmVwiLFxuICAgICAgICBcIuOBlOazqOaWh+OBguOCiuOBjOOBqOOBhuOBlOOBluOBhOOBvuOBme+8gVwiXG4gICAgICBdO1xuXG4gICAgLy8gUHJvbWlzZeODgeOCp+ODvOODs+OCkuS9v+eUqOOBl+OBpumdnuWQjOacn+WHpueQhuOCkuihjOOBhlxuICAgIGxldCBwcm9taXNlQ2hhaW4gPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAvLyBmb3LmlofjgafphY3liJfjgpLoqq3jgb/ovrzjgoBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZvaWNlVGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvbWlzZUNoYWluID0gcHJvbWlzZUNoYWluLnRoZW4oKCkgPT4ge1xuICAgICAgICAvLyDphY3liJfjga7opoHntKDjgpLlh7rlipvjgZnjgovkvotcbiAgICAgICAgY29uc29sZS5sb2codm9pY2VUZXh0W2ldKTtcbiAgICAgICAgLy8g6YWN5YiX44Gr5qC857SN44GX44Gm44GC44KL5paH44KS5LqL5YmN44Gr6Kqt44G/6L6844G/5rOo5paH44KS44K544Og44O844K644Gr44GZ44KL44CCXG4gICAgICAgIC8vIHZvaWNlVm94IOmWouaVsOOBjOWujOS6huOBmeOCi+OBruOCkuW+heOBpFxuICAgICAgICByZXR1cm4gcHJlVm9pY2VWb3godm9pY2VUZXh0W2ldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLy8g5ZC544GN5Ye644GX44KS6Zai5pWw44KS5ZG844Gz5Ye644GZXG4gICAgLy8gY29uc3QgdGV4dDogc3RyaW5nID0gXCJcIjtcbiAgICAvLyBsaXZlMkRNYW5hZ2VyLnNob3dCdWJibGUodGV4dCk7XG5cbiAgICBsZXQgaW1hZ2VOYW1lID0gJyc7XG5cbiAgICAvLyDog4zmma/nlLvlg4/liJ3mnJ/ljJZcbiAgICBpbWFnZU5hbWUgPSBMQXBwRGVmaW5lLkJhY2tJbWFnZU5hbWU7XG5cbiAgICAvLyDpnZ7lkIzmnJ/jgarjga7jgafjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDjgpLkvZzmiJBcbiAgICBjb25zdCBpbml0QmFja0dyb3VuZFRleHR1cmUgPSAodGV4dHVyZUluZm86IFRleHR1cmVJbmZvKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCB4OiBudW1iZXIgPSB3aWR0aCAqIDAuNTtcbiAgICAgIGNvbnN0IHk6IG51bWJlciA9IGhlaWdodCAqIDAuNTtcblxuICAgICAgY29uc3QgZndpZHRoID0gdGV4dHVyZUluZm8ud2lkdGggKiAyLjA7XG4gICAgICBjb25zdCBmaGVpZ2h0ID0gaGVpZ2h0ICogMC45NTtcbiAgICAgIHRoaXMuX2JhY2sgPSBuZXcgTEFwcFNwcml0ZSh4LCB5LCBmd2lkdGgsIGZoZWlnaHQsIHRleHR1cmVJbmZvLmlkKTtcbiAgICB9O1xuXG4gICAgdGV4dHVyZU1hbmFnZXIuY3JlYXRlVGV4dHVyZUZyb21QbmdGaWxlKFxuICAgICAgcmVzb3VyY2VzUGF0aCArIGltYWdlTmFtZSxcbiAgICAgIGZhbHNlLFxuICAgICAgaW5pdEJhY2tHcm91bmRUZXh0dXJlXG4gICAgKTtcblxuICAgIC8vIOatr+i7iueUu+WDj+WIneacn+WMllxuICAgIGltYWdlTmFtZSA9IExBcHBEZWZpbmUuR2VhckltYWdlTmFtZTtcbiAgICBjb25zdCBpbml0R2VhclRleHR1cmUgPSAodGV4dHVyZUluZm86IFRleHR1cmVJbmZvKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCB4ID0gd2lkdGggLSB0ZXh0dXJlSW5mby53aWR0aCAqIDAuNTtcbiAgICAgIGNvbnN0IHkgPSBoZWlnaHQgLSB0ZXh0dXJlSW5mby5oZWlnaHQgKiAwLjU7XG4gICAgICBjb25zdCBmd2lkdGggPSB0ZXh0dXJlSW5mby53aWR0aDtcbiAgICAgIGNvbnN0IGZoZWlnaHQgPSB0ZXh0dXJlSW5mby5oZWlnaHQ7XG4gICAgICB0aGlzLl9nZWFyID0gbmV3IExBcHBTcHJpdGUoeCwgeSwgZndpZHRoLCBmaGVpZ2h0LCB0ZXh0dXJlSW5mby5pZCk7XG4gICAgfTtcblxuICAgIHRleHR1cmVNYW5hZ2VyLmNyZWF0ZVRleHR1cmVGcm9tUG5nRmlsZShcbiAgICAgIHJlc291cmNlc1BhdGggKyBpbWFnZU5hbWUsXG4gICAgICBmYWxzZSxcbiAgICAgIGluaXRHZWFyVGV4dHVyZVxuICAgICk7XG5cbiAgICAvLyDjgrfjgqfjg7zjg4Djg7zjgpLkvZzmiJBcbiAgICBpZiAodGhpcy5fcHJvZ3JhbUlkID09IG51bGwpIHtcbiAgICAgIHRoaXMuX3Byb2dyYW1JZCA9IExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLmNyZWF0ZVNoYWRlcigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDjgr/jg4Pjg4HjgZXjgozjgZ/mmYLjgavlkbzjgbDjgozjgovjgIJcbiAgICpcbiAgICogQHBhcmFtIHBvaW50WCDjgrnjgq/jg6rjg7zjg7NY5bqn5qiZXG4gICAqIEBwYXJhbSBwb2ludFkg44K544Kv44Oq44O844OzWeW6p+aomVxuICAgKi9cbiAgcHVibGljIG9uVG91Y2hlc0JlZ2FuKHBvaW50WDogbnVtYmVyLCBwb2ludFk6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX3RvdWNoTWFuYWdlci50b3VjaGVzQmVnYW4ocG9pbnRYLCBwb2ludFkpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCv+ODg+ODgeOBl+OBpuOBhOOCi+OBqOOBjeOBq+ODneOCpOODs+OCv+OBjOWLleOBhOOBn+OCieWRvOOBsOOCjOOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gcG9pbnRYIOOCueOCr+ODquODvOODs1jluqfmqJlcbiAgICogQHBhcmFtIHBvaW50WSDjgrnjgq/jg6rjg7zjg7NZ5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgb25Ub3VjaGVzTW92ZWQocG9pbnRYOiBudW1iZXIsIHBvaW50WTogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3Qgdmlld1g6IG51bWJlciA9IHRoaXMudHJhbnNmb3JtVmlld1godGhpcy5fdG91Y2hNYW5hZ2VyLmdldFgoKSk7XG4gICAgY29uc3Qgdmlld1k6IG51bWJlciA9IHRoaXMudHJhbnNmb3JtVmlld1kodGhpcy5fdG91Y2hNYW5hZ2VyLmdldFkoKSk7XG5cbiAgICB0aGlzLl90b3VjaE1hbmFnZXIudG91Y2hlc01vdmVkKHBvaW50WCwgcG9pbnRZKTtcblxuICAgIGNvbnN0IGxpdmUyRE1hbmFnZXI6IExBcHBMaXZlMkRNYW5hZ2VyID0gTEFwcExpdmUyRE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICBsaXZlMkRNYW5hZ2VyLm9uRHJhZyh2aWV3WCwgdmlld1kpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCv+ODg+ODgeOBjOe1guS6huOBl+OBn+OCieWRvOOBsOOCjOOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gcG9pbnRYIOOCueOCr+ODquODvOODs1jluqfmqJlcbiAgICogQHBhcmFtIHBvaW50WSDjgrnjgq/jg6rjg7zjg7NZ5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgb25Ub3VjaGVzRW5kZWQocG9pbnRYOiBudW1iZXIsIHBvaW50WTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8g44K/44OD44OB57WC5LqGXG4gICAgY29uc3QgbGl2ZTJETWFuYWdlcjogTEFwcExpdmUyRE1hbmFnZXIgPSBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgIGxpdmUyRE1hbmFnZXIub25EcmFnKDAuMCwgMC4wKTtcblxuICAgIHtcbiAgICAgIC8vIOOCt+ODs+OCsOODq+OCv+ODg+ODl1xuICAgICAgY29uc3QgeDogbnVtYmVyID0gdGhpcy5fZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWChcbiAgICAgICAgdGhpcy5fdG91Y2hNYW5hZ2VyLmdldFgoKVxuICAgICAgKTsgLy8g6KuW55CG5bqn5qiZ5aSJ5o+b44GX44Gf5bqn5qiZ44KS5Y+W5b6X44CCXG4gICAgICBjb25zdCB5OiBudW1iZXIgPSB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1ZKFxuICAgICAgICB0aGlzLl90b3VjaE1hbmFnZXIuZ2V0WSgpXG4gICAgICApOyAvLyDoq5bnkIbluqfmqJnlpInljJbjgZfjgZ/luqfmqJnjgpLlj5blvpfjgIJcblxuICAgICAgaWYgKExBcHBEZWZpbmUuRGVidWdUb3VjaExvZ0VuYWJsZSkge1xuICAgICAgICBMQXBwUGFsLnByaW50TWVzc2FnZShgW0FQUF10b3VjaGVzRW5kZWQgeDogJHt4fSB5OiAke3l9YCk7XG4gICAgICB9XG4gICAgICBsaXZlMkRNYW5hZ2VyLm9uVGFwKHgsIHkpO1xuXG4gICAgICAvLyDmra/ou4rjgavjgr/jg4Pjg5fjgZfjgZ/jgYtcbiAgICAgIGlmICh0aGlzLl9nZWFyLmlzSGl0KHBvaW50WCwgcG9pbnRZKSkge1xuICAgICAgICBsaXZlMkRNYW5hZ2VyLm5leHRTY2VuZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBY5bqn5qiZ44KSVmlld+W6p+aomeOBq+WkieaPm+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gZGV2aWNlWCDjg4fjg5DjgqTjgrlY5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtVmlld1goZGV2aWNlWDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBzY3JlZW5YOiBudW1iZXIgPSB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1YKGRldmljZVgpOyAvLyDoq5bnkIbluqfmqJnlpInmj5vjgZfjgZ/luqfmqJnjgpLlj5blvpfjgIJcbiAgICByZXR1cm4gdGhpcy5fdmlld01hdHJpeC5pbnZlcnRUcmFuc2Zvcm1YKHNjcmVlblgpOyAvLyDmi6HlpKfjgIHnuK7lsI/jgIHnp7vli5Xlvozjga7lgKTjgIJcbiAgfVxuXG4gIC8qKlxuICAgKiBZ5bqn5qiZ44KSVmlld+W6p+aomeOBq+WkieaPm+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gZGV2aWNlWSDjg4fjg5DjgqTjgrlZ5bqn5qiZXG4gICAqL1xuICBwdWJsaWMgdHJhbnNmb3JtVmlld1koZGV2aWNlWTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBzY3JlZW5ZOiBudW1iZXIgPSB0aGlzLl9kZXZpY2VUb1NjcmVlbi50cmFuc2Zvcm1ZKGRldmljZVkpOyAvLyDoq5bnkIbluqfmqJnlpInmj5vjgZfjgZ/luqfmqJnjgpLlj5blvpfjgIJcbiAgICByZXR1cm4gdGhpcy5fdmlld01hdHJpeC5pbnZlcnRUcmFuc2Zvcm1ZKHNjcmVlblkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFjluqfmqJnjgpJTY3JlZW7luqfmqJnjgavlpInmj5vjgZnjgovjgIJcbiAgICogQHBhcmFtIGRldmljZVgg44OH44OQ44Kk44K5WOW6p+aomVxuICAgKi9cbiAgcHVibGljIHRyYW5zZm9ybVNjcmVlblgoZGV2aWNlWDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGV2aWNlVG9TY3JlZW4udHJhbnNmb3JtWChkZXZpY2VYKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBZ5bqn5qiZ44KSU2NyZWVu5bqn5qiZ44Gr5aSJ5o+b44GZ44KL44CCXG4gICAqXG4gICAqIEBwYXJhbSBkZXZpY2VZIOODh+ODkOOCpOOCuVnluqfmqJlcbiAgICovXG4gIHB1YmxpYyB0cmFuc2Zvcm1TY3JlZW5ZKGRldmljZVk6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2RldmljZVRvU2NyZWVuLnRyYW5zZm9ybVkoZGV2aWNlWSk7XG4gIH1cblxuICBfdG91Y2hNYW5hZ2VyOiBUb3VjaE1hbmFnZXI7IC8vIOOCv+ODg+ODgeODnuODjeODvOOCuOODo+ODvFxuICBfZGV2aWNlVG9TY3JlZW46IEN1YmlzbU1hdHJpeDQ0OyAvLyDjg4fjg5DjgqTjgrnjgYvjgonjgrnjgq/jg6rjg7zjg7Pjgbjjga7ooYzliJdcbiAgX3ZpZXdNYXRyaXg6IEN1YmlzbVZpZXdNYXRyaXg7IC8vIHZpZXdNYXRyaXhcbiAgX3Byb2dyYW1JZDogV2ViR0xQcm9ncmFtOyAvLyDjgrfjgqfjg7zjg4BJRFxuICBfYmFjazogTEFwcFNwcml0ZTsgLy8g6IOM5pmv55S75YOPXG4gIF9nZWFyOiBMQXBwU3ByaXRlOyAvLyDjgq7jgqLnlLvlg49cbiAgX2NoYW5nZU1vZGVsOiBib29sZWFuOyAvLyDjg6Ljg4fjg6vliIfjgormm7/jgYjjg5Xjg6njgrBcbiAgX2lzQ2xpY2s6IGJvb2xlYW47IC8vIOOCr+ODquODg+OCr+S4rVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXG4gKi9cblxuaW1wb3J0IHsgTEFwcFBhbCB9IGZyb20gJy4vbGFwcHBhbCc7XG5cbmV4cG9ydCBsZXQgc19pbnN0YW5jZTogTEFwcFdhdkZpbGVIYW5kbGVyID0gbnVsbDtcblxuZXhwb3J0IGNsYXNzIExBcHBXYXZGaWxlSGFuZGxlciB7XG4gIC8qKlxuICAgKiDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrnvvIjjgrfjg7PjgrDjg6vjg4jjg7PvvInjgpLov5TjgZnjgIJcbiAgICog44Kk44Oz44K544K/44Oz44K544GM55Sf5oiQ44GV44KM44Gm44GE44Gq44GE5aC05ZCI44Gv5YaF6YOo44Gn44Kk44Oz44K544K/44Oz44K544KS55Sf5oiQ44GZ44KL44CCXG4gICAqXG4gICAqIEByZXR1cm4g44Kv44Op44K544Gu44Kk44Oz44K544K/44Oz44K5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IExBcHBXYXZGaWxlSGFuZGxlciB7XG4gICAgaWYgKHNfaW5zdGFuY2UgPT0gbnVsbCkge1xuICAgICAgc19pbnN0YW5jZSA9IG5ldyBMQXBwV2F2RmlsZUhhbmRsZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc19pbnN0YW5jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrnvvIjjgrfjg7PjgrDjg6vjg4jjg7PvvInjgpLop6PmlL7jgZnjgovjgIJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcmVsZWFzZUluc3RhbmNlKCk6IHZvaWQge1xuICAgIGlmIChzX2luc3RhbmNlICE9IG51bGwpIHtcbiAgICAgIHNfaW5zdGFuY2UgPSB2b2lkIDA7XG4gICAgfVxuXG4gICAgc19pbnN0YW5jZSA9IG51bGw7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlKGRlbHRhVGltZVNlY29uZHM6IG51bWJlcikge1xuICAgIGxldCBnb2FsT2Zmc2V0OiBudW1iZXI7XG4gICAgbGV0IHJtczogbnVtYmVyO1xuXG4gICAgLy8g44OH44O844K/44Ot44O844OJ5YmNL+ODleOCoeOCpOODq+acq+WwvuOBq+mBlOOBl+OBn+WgtOWQiOOBr+abtOaWsOOBl+OBquOBhFxuICAgIGlmIChcbiAgICAgIHRoaXMuX3BjbURhdGEgPT0gbnVsbCB8fFxuICAgICAgdGhpcy5fc2FtcGxlT2Zmc2V0ID49IHRoaXMuX3dhdkZpbGVJbmZvLl9zYW1wbGVzUGVyQ2hhbm5lbFxuICAgICkge1xuICAgICAgdGhpcy5fbGFzdFJtcyA9IDAuMDtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyDntYzpgY7mmYLplpPlvozjga7nirbmhYvjgpLkv53mjIFcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKz0gZGVsdGFUaW1lU2Vjb25kcztcbiAgICBnb2FsT2Zmc2V0ID0gTWF0aC5mbG9vcihcbiAgICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyAqIHRoaXMuX3dhdkZpbGVJbmZvLl9zYW1wbGluZ1JhdGVcbiAgICApO1xuICAgIGlmIChnb2FsT2Zmc2V0ID4gdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsKSB7XG4gICAgICBnb2FsT2Zmc2V0ID0gdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsZXNQZXJDaGFubmVsO1xuICAgIH1cblxuICAgIC8vIFJNU+ioiOa4rFxuICAgIHJtcyA9IDAuMDtcbiAgICBmb3IgKFxuICAgICAgbGV0IGNoYW5uZWxDb3VudCA9IDA7XG4gICAgICBjaGFubmVsQ291bnQgPCB0aGlzLl93YXZGaWxlSW5mby5fbnVtYmVyT2ZDaGFubmVscztcbiAgICAgIGNoYW5uZWxDb3VudCsrXG4gICAgKSB7XG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgc2FtcGxlQ291bnQgPSB0aGlzLl9zYW1wbGVPZmZzZXQ7XG4gICAgICAgIHNhbXBsZUNvdW50IDwgZ29hbE9mZnNldDtcbiAgICAgICAgc2FtcGxlQ291bnQrK1xuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHBjbSA9IHRoaXMuX3BjbURhdGFbY2hhbm5lbENvdW50XVtzYW1wbGVDb3VudF07XG4gICAgICAgIHJtcyArPSBwY20gKiBwY207XG4gICAgICB9XG4gICAgfVxuICAgIHJtcyA9IE1hdGguc3FydChcbiAgICAgIHJtcyAvXG4gICAgICAgICh0aGlzLl93YXZGaWxlSW5mby5fbnVtYmVyT2ZDaGFubmVscyAqXG4gICAgICAgICAgKGdvYWxPZmZzZXQgLSB0aGlzLl9zYW1wbGVPZmZzZXQpKVxuICAgICk7XG5cbiAgICB0aGlzLl9sYXN0Um1zID0gcm1zO1xuICAgIHRoaXMuX3NhbXBsZU9mZnNldCA9IGdvYWxPZmZzZXQ7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwdWJsaWMgc3RhcnQoZmlsZVBhdGg6IHN0cmluZyk6IHZvaWQge1xuICAgIC8vIOOCteODs+ODl+ODq+S9jeWPgueFp+S9jee9ruOCkuWIneacn+WMllxuICAgIHRoaXMuX3NhbXBsZU9mZnNldCA9IDA7XG4gICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzID0gMC4wO1xuXG4gICAgLy8gUk1T5YCk44KS44Oq44K744OD44OIXG4gICAgdGhpcy5fbGFzdFJtcyA9IDAuMDtcblxuICAgIGlmICghdGhpcy5sb2FkV2F2RmlsZShmaWxlUGF0aCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0Um1zKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RSbXM7XG4gIH1cblxuICBwdWJsaWMgbG9hZFdhdkZpbGUoZmlsZVBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGxldCByZXQgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLl9wY21EYXRhICE9IG51bGwpIHtcbiAgICAgIHRoaXMucmVsZWFzZVBjbURhdGEoKTtcbiAgICB9XG5cbiAgICAvLyDjg5XjgqHjgqTjg6vjg63jg7zjg4lcbiAgICBjb25zdCBhc3luY0ZpbGVMb2FkID0gYXN5bmMgKCkgPT4ge1xuICAgICAgcmV0dXJuIGZldGNoKGZpbGVQYXRoKS50aGVuKHJlc3BvbmNlID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbmNlLmFycmF5QnVmZmVyKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgYXN5bmNXYXZGaWxlTWFuYWdlciA9IChhc3luYyAoKSA9PiB7XG4gICAgICB0aGlzLl9ieXRlUmVhZGVyLl9maWxlQnl0ZSA9IGF3YWl0IGFzeW5jRmlsZUxvYWQoKTtcbiAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVEYXRhVmlldyA9IG5ldyBEYXRhVmlldyh0aGlzLl9ieXRlUmVhZGVyLl9maWxlQnl0ZSk7XG4gICAgICB0aGlzLl9ieXRlUmVhZGVyLl9maWxlU2l6ZSA9IHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVCeXRlLmJ5dGVMZW5ndGg7XG4gICAgICB0aGlzLl9ieXRlUmVhZGVyLl9yZWFkT2Zmc2V0ID0gMDtcblxuICAgICAgLy8g44OV44Kh44Kk44Or44Ot44O844OJ44Gr5aSx5pWX44GX44Gm44GE44KL44GL44CB5YWI6aCt44Gu44K344Kw44ON44OB44OjXCJSSUZGXCLjgpLlhaXjgozjgovjgrXjgqTjgrrjgoLjgarjgYTloLTlkIjjga/lpLHmlZdcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5fZmlsZUJ5dGUgPT0gbnVsbCB8fFxuICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLl9maWxlU2l6ZSA8IDRcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIOODleOCoeOCpOODq+WQjVxuICAgICAgdGhpcy5fd2F2RmlsZUluZm8uX2ZpbGVOYW1lID0gZmlsZVBhdGg7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIOOCt+OCsOODjeODgeODoyBcIlJJRkZcIlxuICAgICAgICBpZiAoIXRoaXMuX2J5dGVSZWFkZXIuZ2V0Q2hlY2tTaWduYXR1cmUoJ1JJRkYnKSkge1xuICAgICAgICAgIHJldCA9IGZhbHNlO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgU2lnbmV0dXJlIFwiUklGRlwiLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIOODleOCoeOCpOODq+OCteOCpOOCui0477yI6Kqt44G/6aOb44Gw44GX77yJXG4gICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuZ2V0MzJMaXR0bGVFbmRpYW4oKTtcbiAgICAgICAgLy8g44K344Kw44ON44OB44OjIFwiV0FWRVwiXG4gICAgICAgIGlmICghdGhpcy5fYnl0ZVJlYWRlci5nZXRDaGVja1NpZ25hdHVyZSgnV0FWRScpKSB7XG4gICAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBTaWduZXR1cmUgXCJXQVZFXCIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g44K344Kw44ON44OB44OjIFwiZm10IFwiXG4gICAgICAgIGlmICghdGhpcy5fYnl0ZVJlYWRlci5nZXRDaGVja1NpZ25hdHVyZSgnZm10ICcpKSB7XG4gICAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBTaWduZXR1cmUgXCJmbXRcIi4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBmbXTjg4Hjg6Pjg7Pjgq/jgrXjgqTjgrpcbiAgICAgICAgY29uc3QgZm10Q2h1bmtTaXplID0gdGhpcy5fYnl0ZVJlYWRlci5nZXQzMkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAvLyDjg5Xjgqnjg7zjg57jg4Pjg4hJROOBrzHvvIjjg6rjg4vjgqJQQ03vvInku6XlpJblj5fjgZHku5jjgZHjgarjgYRcbiAgICAgICAgaWYgKHRoaXMuX2J5dGVSZWFkZXIuZ2V0MTZMaXR0bGVFbmRpYW4oKSAhPSAxKSB7XG4gICAgICAgICAgcmV0ID0gZmFsc2U7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGaWxlIGlzIG5vdCBsaW5lYXIgUENNLicpO1xuICAgICAgICB9XG4gICAgICAgIC8vIOODgeODo+ODs+ODjeODq+aVsFxuICAgICAgICB0aGlzLl93YXZGaWxlSW5mby5fbnVtYmVyT2ZDaGFubmVscyA9XG4gICAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5nZXQxNkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAvLyDjgrXjg7Pjg5fjg6rjg7PjgrDjg6zjg7zjg4hcbiAgICAgICAgdGhpcy5fd2F2RmlsZUluZm8uX3NhbXBsaW5nUmF0ZSA9IHRoaXMuX2J5dGVSZWFkZXIuZ2V0MzJMaXR0bGVFbmRpYW4oKTtcbiAgICAgICAgLy8g44OH44O844K/6YCf5bqmW2J5dGUvc2VjXe+8iOiqreOBv+mjm+OBsOOBl++8iVxuICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLmdldDMyTGl0dGxlRW5kaWFuKCk7XG4gICAgICAgIC8vIOODluODreODg+OCr+OCteOCpOOCuu+8iOiqreOBv+mjm+OBsOOBl++8iVxuICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLmdldDE2TGl0dGxlRW5kaWFuKCk7XG4gICAgICAgIC8vIOmHj+WtkOWMluODk+ODg+ODiOaVsFxuICAgICAgICB0aGlzLl93YXZGaWxlSW5mby5fYml0c1BlclNhbXBsZSA9IHRoaXMuX2J5dGVSZWFkZXIuZ2V0MTZMaXR0bGVFbmRpYW4oKTtcbiAgICAgICAgLy8gZm1044OB44Oj44Oz44Kv44Gu5ouh5by16YOo5YiG44Gu6Kqt44G/6aOb44Gw44GXXG4gICAgICAgIGlmIChmbXRDaHVua1NpemUgPiAxNikge1xuICAgICAgICAgIHRoaXMuX2J5dGVSZWFkZXIuX3JlYWRPZmZzZXQgKz0gZm10Q2h1bmtTaXplIC0gMTY7XG4gICAgICAgIH1cbiAgICAgICAgLy8gXCJkYXRhXCLjg4Hjg6Pjg7Pjgq/jgYzlh7rnj77jgZnjgovjgb7jgafoqq3jgb/po5vjgbDjgZdcbiAgICAgICAgd2hpbGUgKFxuICAgICAgICAgICF0aGlzLl9ieXRlUmVhZGVyLmdldENoZWNrU2lnbmF0dXJlKCdkYXRhJykgJiZcbiAgICAgICAgICB0aGlzLl9ieXRlUmVhZGVyLl9yZWFkT2Zmc2V0IDwgdGhpcy5fYnl0ZVJlYWRlci5fZmlsZVNpemVcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5fcmVhZE9mZnNldCArPVxuICAgICAgICAgICAgdGhpcy5fYnl0ZVJlYWRlci5nZXQzMkxpdHRsZUVuZGlhbigpICsgNDtcbiAgICAgICAgfVxuICAgICAgICAvLyDjg5XjgqHjgqTjg6vlhoXjgatcImRhdGFcIuODgeODo+ODs+OCr+OBjOWHuuePvuOBl+OBquOBi+OBo+OBn1xuICAgICAgICBpZiAodGhpcy5fYnl0ZVJlYWRlci5fcmVhZE9mZnNldCA+PSB0aGlzLl9ieXRlUmVhZGVyLl9maWxlU2l6ZSkge1xuICAgICAgICAgIHJldCA9IGZhbHNlO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgXCJkYXRhXCIgQ2h1bmsuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g44K144Oz44OX44Or5pWwXG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBkYXRhQ2h1bmtTaXplID0gdGhpcy5fYnl0ZVJlYWRlci5nZXQzMkxpdHRsZUVuZGlhbigpO1xuICAgICAgICAgIHRoaXMuX3dhdkZpbGVJbmZvLl9zYW1wbGVzUGVyQ2hhbm5lbCA9XG4gICAgICAgICAgICAoZGF0YUNodW5rU2l6ZSAqIDgpIC9cbiAgICAgICAgICAgICh0aGlzLl93YXZGaWxlSW5mby5fYml0c1BlclNhbXBsZSAqXG4gICAgICAgICAgICAgIHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDpoJjln5/norrkv51cbiAgICAgICAgdGhpcy5fcGNtRGF0YSA9IG5ldyBBcnJheSh0aGlzLl93YXZGaWxlSW5mby5fbnVtYmVyT2ZDaGFubmVscyk7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IGNoYW5uZWxDb3VudCA9IDA7XG4gICAgICAgICAgY2hhbm5lbENvdW50IDwgdGhpcy5fd2F2RmlsZUluZm8uX251bWJlck9mQ2hhbm5lbHM7XG4gICAgICAgICAgY2hhbm5lbENvdW50KytcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5fcGNtRGF0YVtjaGFubmVsQ291bnRdID0gbmV3IEZsb2F0MzJBcnJheShcbiAgICAgICAgICAgIHRoaXMuX3dhdkZpbGVJbmZvLl9zYW1wbGVzUGVyQ2hhbm5lbFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g5rOi5b2i44OH44O844K/5Y+W5b6XXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IHNhbXBsZUNvdW50ID0gMDtcbiAgICAgICAgICBzYW1wbGVDb3VudCA8IHRoaXMuX3dhdkZpbGVJbmZvLl9zYW1wbGVzUGVyQ2hhbm5lbDtcbiAgICAgICAgICBzYW1wbGVDb3VudCsrXG4gICAgICAgICkge1xuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBsZXQgY2hhbm5lbENvdW50ID0gMDtcbiAgICAgICAgICAgIGNoYW5uZWxDb3VudCA8IHRoaXMuX3dhdkZpbGVJbmZvLl9udW1iZXJPZkNoYW5uZWxzO1xuICAgICAgICAgICAgY2hhbm5lbENvdW50KytcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuX3BjbURhdGFbY2hhbm5lbENvdW50XVtzYW1wbGVDb3VudF0gPSB0aGlzLmdldFBjbVNhbXBsZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgfVxuICAgIH0pKCk7XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgcHVibGljIGdldFBjbVNhbXBsZSgpOiBudW1iZXIge1xuICAgIGxldCBwY20zMjtcblxuICAgIC8vIDMy44OT44OD44OI5bmF44Gr5ouh5by144GX44Gm44GL44KJLTHvvZ4x44Gu56+E5Zuy44Gr5Li444KB44KLXG4gICAgc3dpdGNoICh0aGlzLl93YXZGaWxlSW5mby5fYml0c1BlclNhbXBsZSkge1xuICAgICAgY2FzZSA4OlxuICAgICAgICBwY20zMiA9IHRoaXMuX2J5dGVSZWFkZXIuZ2V0OCgpIC0gMTI4O1xuICAgICAgICBwY20zMiA8PD0gMjQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxNjpcbiAgICAgICAgcGNtMzIgPSB0aGlzLl9ieXRlUmVhZGVyLmdldDE2TGl0dGxlRW5kaWFuKCkgPDwgMTY7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNDpcbiAgICAgICAgcGNtMzIgPSB0aGlzLl9ieXRlUmVhZGVyLmdldDI0TGl0dGxlRW5kaWFuKCkgPDwgODtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyDlr77lv5zjgZfjgabjgYTjgarjgYTjg5Pjg4Pjg4jluYVcbiAgICAgICAgcGNtMzIgPSAwO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gcGNtMzIgLyAyMTQ3NDgzNjQ3OyAvL051bWJlci5NQVhfVkFMVUU7XG4gIH1cblxuICBwdWJsaWMgcmVsZWFzZVBjbURhdGEoKTogdm9pZCB7XG4gICAgZm9yIChcbiAgICAgIGxldCBjaGFubmVsQ291bnQgPSAwO1xuICAgICAgY2hhbm5lbENvdW50IDwgdGhpcy5fd2F2RmlsZUluZm8uX251bWJlck9mQ2hhbm5lbHM7XG4gICAgICBjaGFubmVsQ291bnQrK1xuICAgICkge1xuICAgICAgZGVsZXRlIHRoaXMuX3BjbURhdGFbY2hhbm5lbENvdW50XTtcbiAgICB9XG4gICAgZGVsZXRlIHRoaXMuX3BjbURhdGE7XG4gICAgdGhpcy5fcGNtRGF0YSA9IG51bGw7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9wY21EYXRhID0gbnVsbDtcbiAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFJtcyA9IDAuMDtcbiAgICB0aGlzLl9zYW1wbGVPZmZzZXQgPSAwLjA7XG4gICAgdGhpcy5fd2F2RmlsZUluZm8gPSBuZXcgV2F2RmlsZUluZm8oKTtcbiAgICB0aGlzLl9ieXRlUmVhZGVyID0gbmV3IEJ5dGVSZWFkZXIoKTtcbiAgfVxuXG4gIF9wY21EYXRhOiBBcnJheTxGbG9hdDMyQXJyYXk+O1xuICBfdXNlclRpbWVTZWNvbmRzOiBudW1iZXI7XG4gIF9sYXN0Um1zOiBudW1iZXI7XG4gIF9zYW1wbGVPZmZzZXQ6IG51bWJlcjtcbiAgX3dhdkZpbGVJbmZvOiBXYXZGaWxlSW5mbztcbiAgX2J5dGVSZWFkZXI6IEJ5dGVSZWFkZXI7XG4gIF9sb2FkRmlsZXRvQnl0ZXMgPSAoYXJyYXlCdWZmZXI6IEFycmF5QnVmZmVyLCBsZW5ndGg6IG51bWJlcik6IHZvaWQgPT4ge1xuICAgIHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVCeXRlID0gYXJyYXlCdWZmZXI7XG4gICAgdGhpcy5fYnl0ZVJlYWRlci5fZmlsZURhdGFWaWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuX2J5dGVSZWFkZXIuX2ZpbGVCeXRlKTtcbiAgICB0aGlzLl9ieXRlUmVhZGVyLl9maWxlU2l6ZSA9IGxlbmd0aDtcbiAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIFdhdkZpbGVJbmZvIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZmlsZU5hbWUgPSAnJztcbiAgICB0aGlzLl9udW1iZXJPZkNoYW5uZWxzID0gMDtcbiAgICB0aGlzLl9iaXRzUGVyU2FtcGxlID0gMDtcbiAgICB0aGlzLl9zYW1wbGluZ1JhdGUgPSAwO1xuICAgIHRoaXMuX3NhbXBsZXNQZXJDaGFubmVsID0gMDtcbiAgfVxuXG4gIF9maWxlTmFtZTogc3RyaW5nOyAvLy88IOODleOCoeOCpOODq+WQjVxuICBfbnVtYmVyT2ZDaGFubmVsczogbnVtYmVyOyAvLy88IOODgeODo+ODs+ODjeODq+aVsFxuICBfYml0c1BlclNhbXBsZTogbnVtYmVyOyAvLy88IOOCteODs+ODl+ODq+OBguOBn+OCiuODk+ODg+ODiOaVsFxuICBfc2FtcGxpbmdSYXRlOiBudW1iZXI7IC8vLzwg44K144Oz44OX44Oq44Oz44Kw44Os44O844OIXG4gIF9zYW1wbGVzUGVyQ2hhbm5lbDogbnVtYmVyOyAvLy88IDHjg4Hjg6Pjg7Pjg43jg6vjgYLjgZ/jgornt4/jgrXjg7Pjg5fjg6vmlbBcbn1cblxuZXhwb3J0IGNsYXNzIEJ5dGVSZWFkZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9maWxlQnl0ZSA9IG51bGw7XG4gICAgdGhpcy5fZmlsZURhdGFWaWV3ID0gbnVsbDtcbiAgICB0aGlzLl9maWxlU2l6ZSA9IDA7XG4gICAgdGhpcy5fcmVhZE9mZnNldCA9IDA7XG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIDjjg5Pjg4Pjg4joqq3jgb/ovrzjgb9cbiAgICogQHJldHVybiBDc206OmNzbVVpbnQ4IOiqreOBv+WPluOBo+OBnzjjg5Pjg4Pjg4jlgKRcbiAgICovXG4gIHB1YmxpYyBnZXQ4KCk6IG51bWJlciB7XG4gICAgY29uc3QgcmV0ID0gdGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQpO1xuICAgIHRoaXMuX3JlYWRPZmZzZXQrKztcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBicmllZiAxNuODk+ODg+ODiOiqreOBv+i+vOOBv++8iOODquODiOODq+OCqOODs+ODh+OCo+OCouODs++8iVxuICAgKiBAcmV0dXJuIENzbTo6Y3NtVWludDE2IOiqreOBv+WPluOBo+OBnzE244OT44OD44OI5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0MTZMaXR0bGVFbmRpYW4oKTogbnVtYmVyIHtcbiAgICBjb25zdCByZXQgPVxuICAgICAgKHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0ICsgMSkgPDwgOCkgfFxuICAgICAgdGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQpO1xuICAgIHRoaXMuX3JlYWRPZmZzZXQgKz0gMjtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBicmllZiAyNOODk+ODg+ODiOiqreOBv+i+vOOBv++8iOODquODiOODq+OCqOODs+ODh+OCo+OCouODs++8iVxuICAgKiBAcmV0dXJuIENzbTo6Y3NtVWludDMyIOiqreOBv+WPluOBo+OBnzI044OT44OD44OI5YCk77yI5LiL5L2NMjTjg5Pjg4Pjg4jjgavoqK3lrprvvIlcbiAgICovXG4gIHB1YmxpYyBnZXQyNExpdHRsZUVuZGlhbigpOiBudW1iZXIge1xuICAgIGNvbnN0IHJldCA9XG4gICAgICAodGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQgKyAyKSA8PCAxNikgfFxuICAgICAgKHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0ICsgMSkgPDwgOCkgfFxuICAgICAgdGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQpO1xuICAgIHRoaXMuX3JlYWRPZmZzZXQgKz0gMztcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBicmllZiAzMuODk+ODg+ODiOiqreOBv+i+vOOBv++8iOODquODiOODq+OCqOODs+ODh+OCo+OCouODs++8iVxuICAgKiBAcmV0dXJuIENzbTo6Y3NtVWludDMyIOiqreOBv+WPluOBo+OBnzMy44OT44OD44OI5YCkXG4gICAqL1xuICBwdWJsaWMgZ2V0MzJMaXR0bGVFbmRpYW4oKTogbnVtYmVyIHtcbiAgICBjb25zdCByZXQgPVxuICAgICAgKHRoaXMuX2ZpbGVEYXRhVmlldy5nZXRVaW50OCh0aGlzLl9yZWFkT2Zmc2V0ICsgMykgPDwgMjQpIHxcbiAgICAgICh0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCArIDIpIDw8IDE2KSB8XG4gICAgICAodGhpcy5fZmlsZURhdGFWaWV3LmdldFVpbnQ4KHRoaXMuX3JlYWRPZmZzZXQgKyAxKSA8PCA4KSB8XG4gICAgICB0aGlzLl9maWxlRGF0YVZpZXcuZ2V0VWludDgodGhpcy5fcmVhZE9mZnNldCk7XG4gICAgdGhpcy5fcmVhZE9mZnNldCArPSA0O1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvKipcbiAgICogQGJyaWVmIOOCt+OCsOODjeODgeODo+OBruWPluW+l+OBqOWPgueFp+aWh+Wtl+WIl+OBqOOBruS4gOiHtOODgeOCp+ODg+OCr1xuICAgKiBAcGFyYW1baW5dIHJlZmVyZW5jZSDmpJzmn7vlr77osaHjga7jgrfjgrDjg43jg4Hjg6PmloflrZfliJdcbiAgICogQHJldHZhbCAgdHJ1ZSAgICDkuIDoh7TjgZfjgabjgYTjgotcbiAgICogQHJldHZhbCAgZmFsc2UgICDkuIDoh7TjgZfjgabjgYTjgarjgYRcbiAgICovXG4gIHB1YmxpYyBnZXRDaGVja1NpZ25hdHVyZShyZWZlcmVuY2U6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGdldFNpZ25hdHVyZTogVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgIGNvbnN0IHJlZmVyZW5jZVN0cmluZzogVWludDhBcnJheSA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShyZWZlcmVuY2UpO1xuICAgIGlmIChyZWZlcmVuY2UubGVuZ3RoICE9IDQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgc2lnbmF0dXJlT2Zmc2V0ID0gMDsgc2lnbmF0dXJlT2Zmc2V0IDwgNDsgc2lnbmF0dXJlT2Zmc2V0KyspIHtcbiAgICAgIGdldFNpZ25hdHVyZVtzaWduYXR1cmVPZmZzZXRdID0gdGhpcy5nZXQ4KCk7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICBnZXRTaWduYXR1cmVbMF0gPT0gcmVmZXJlbmNlU3RyaW5nWzBdICYmXG4gICAgICBnZXRTaWduYXR1cmVbMV0gPT0gcmVmZXJlbmNlU3RyaW5nWzFdICYmXG4gICAgICBnZXRTaWduYXR1cmVbMl0gPT0gcmVmZXJlbmNlU3RyaW5nWzJdICYmXG4gICAgICBnZXRTaWduYXR1cmVbM10gPT0gcmVmZXJlbmNlU3RyaW5nWzNdXG4gICAgKTtcbiAgfVxuXG4gIF9maWxlQnl0ZTogQXJyYXlCdWZmZXI7IC8vLzwg44Ot44O844OJ44GX44Gf44OV44Kh44Kk44Or44Gu44OQ44Kk44OI5YiXXG4gIF9maWxlRGF0YVZpZXc6IERhdGFWaWV3O1xuICBfZmlsZVNpemU6IG51bWJlcjsgLy8vPCDjg5XjgqHjgqTjg6vjgrXjgqTjgrpcbiAgX3JlYWRPZmZzZXQ6IG51bWJlcjsgLy8vPCDjg5XjgqHjgqTjg6vlj4LnhafkvY3nva5cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxuICovXG5cbmltcG9ydCB7IExBcHBEZWxlZ2F0ZSB9IGZyb20gJy4vbGFwcGRlbGVnYXRlJztcbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcblxuLyoqXG4gKiDjg5bjg6njgqbjgrbjg63jg7zjg4nlvozjga7lh6bnkIZcbiAqL1xud2luZG93Lm9ubG9hZCA9ICgpOiB2b2lkID0+IHtcbiAgLy8gY3JlYXRlIHRoZSBhcHBsaWNhdGlvbiBpbnN0YW5jZVxuICBpZiAoTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuaW5pdGlhbGl6ZSgpID09IGZhbHNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkucnVuKCk7XG59O1xuXG4vKipcbiAqIOe1guS6huaZguOBruWHpueQhlxuICovXG53aW5kb3cub25iZWZvcmV1bmxvYWQgPSAoKTogdm9pZCA9PiBMQXBwRGVsZWdhdGUucmVsZWFzZUluc3RhbmNlKCk7XG5cbi8qKlxuICogUHJvY2VzcyB3aGVuIGNoYW5naW5nIHNjcmVlbiBzaXplLlxuICovXG53aW5kb3cub25yZXNpemUgPSAoKSA9PiB7XG4gIGlmIChMQXBwRGVmaW5lLkNhbnZhc1NpemUgPT09ICdhdXRvJykge1xuICAgIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLm9uUmVzaXplKCk7XG4gIH1cbn07XG4iLCIvKipcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cbiAqL1xuXG5leHBvcnQgY2xhc3MgVG91Y2hNYW5hZ2VyIHtcbiAgLyoqXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fc3RhcnRYID0gMC4wO1xuICAgIHRoaXMuX3N0YXJ0WSA9IDAuMDtcbiAgICB0aGlzLl9sYXN0WCA9IDAuMDtcbiAgICB0aGlzLl9sYXN0WSA9IDAuMDtcbiAgICB0aGlzLl9sYXN0WDEgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFkxID0gMC4wO1xuICAgIHRoaXMuX2xhc3RYMiA9IDAuMDtcbiAgICB0aGlzLl9sYXN0WTIgPSAwLjA7XG4gICAgdGhpcy5fbGFzdFRvdWNoRGlzdGFuY2UgPSAwLjA7XG4gICAgdGhpcy5fZGVsdGFYID0gMC4wO1xuICAgIHRoaXMuX2RlbHRhWSA9IDAuMDtcbiAgICB0aGlzLl9zY2FsZSA9IDEuMDtcbiAgICB0aGlzLl90b3VjaFNpbmdsZSA9IGZhbHNlO1xuICAgIHRoaXMuX2ZsaXBBdmFpbGFibGUgPSBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDZW50ZXJYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RYO1xuICB9XG5cbiAgcHVibGljIGdldENlbnRlclkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFk7XG4gIH1cblxuICBwdWJsaWMgZ2V0RGVsdGFYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbHRhWDtcbiAgfVxuXG4gIHB1YmxpYyBnZXREZWx0YVkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsdGFZO1xuICB9XG5cbiAgcHVibGljIGdldFN0YXJ0WCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zdGFydFg7XG4gIH1cblxuICBwdWJsaWMgZ2V0U3RhcnRZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0WTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTY2FsZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zY2FsZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRYKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RYO1xuICB9XG5cbiAgcHVibGljIGdldFkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFk7XG4gIH1cblxuICBwdWJsaWMgZ2V0WDEoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFgxO1xuICB9XG5cbiAgcHVibGljIGdldFkxKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xhc3RZMTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRYMigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sYXN0WDI7XG4gIH1cblxuICBwdWJsaWMgZ2V0WTIoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFzdFkyO1xuICB9XG5cbiAgcHVibGljIGlzU2luZ2xlVG91Y2goKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3RvdWNoU2luZ2xlO1xuICB9XG5cbiAgcHVibGljIGlzRmxpY2tBdmFpbGFibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2ZsaXBBdmFpbGFibGU7XG4gIH1cblxuICBwdWJsaWMgZGlzYWJsZUZsaWNrKCk6IHZvaWQge1xuICAgIHRoaXMuX2ZsaXBBdmFpbGFibGUgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgr/jg4Pjg4Hplovlp4vmmYLjgqTjg5njg7Pjg4hcbiAgICogQHBhcmFtIGRldmljZVgg44K/44OD44OB44GX44Gf55S76Z2i44GueOOBruWApFxuICAgKiBAcGFyYW0gZGV2aWNlWSDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXG4gICAqL1xuICBwdWJsaWMgdG91Y2hlc0JlZ2FuKGRldmljZVg6IG51bWJlciwgZGV2aWNlWTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbGFzdFggPSBkZXZpY2VYO1xuICAgIHRoaXMuX2xhc3RZID0gZGV2aWNlWTtcbiAgICB0aGlzLl9zdGFydFggPSBkZXZpY2VYO1xuICAgIHRoaXMuX3N0YXJ0WSA9IGRldmljZVk7XG4gICAgdGhpcy5fbGFzdFRvdWNoRGlzdGFuY2UgPSAtMS4wO1xuICAgIHRoaXMuX2ZsaXBBdmFpbGFibGUgPSB0cnVlO1xuICAgIHRoaXMuX3RvdWNoU2luZ2xlID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg4njg6njg4PjgrDmmYLjga7jgqTjg5njg7Pjg4hcbiAgICogQHBhcmFtIGRldmljZVgg44K/44OD44OB44GX44Gf55S76Z2i44GueOOBruWApFxuICAgKiBAcGFyYW0gZGV2aWNlWSDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXG4gICAqL1xuICBwdWJsaWMgdG91Y2hlc01vdmVkKGRldmljZVg6IG51bWJlciwgZGV2aWNlWTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fbGFzdFggPSBkZXZpY2VYO1xuICAgIHRoaXMuX2xhc3RZID0gZGV2aWNlWTtcbiAgICB0aGlzLl9sYXN0VG91Y2hEaXN0YW5jZSA9IC0xLjA7XG4gICAgdGhpcy5fdG91Y2hTaW5nbGUgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIOODleODquODg+OCr+OBrui3nemboua4rOWumlxuICAgKiBAcmV0dXJuIOODleODquODg+OCr+i3nembolxuICAgKi9cbiAgcHVibGljIGdldEZsaWNrRGlzdGFuY2UoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVEaXN0YW5jZShcbiAgICAgIHRoaXMuX3N0YXJ0WCxcbiAgICAgIHRoaXMuX3N0YXJ0WSxcbiAgICAgIHRoaXMuX2xhc3RYLFxuICAgICAgdGhpcy5fbGFzdFlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOeCue+8keOBi+OCieeCue+8kuOBuOOBrui3nembouOCkuaxguOCgeOCi1xuICAgKlxuICAgKiBAcGFyYW0geDEg77yR44Gk55uu44Gu44K/44OD44OB44GX44Gf55S76Z2i44GueOOBruWApFxuICAgKiBAcGFyYW0geTEg77yR44Gk55uu44Gu44K/44OD44OB44GX44Gf55S76Z2i44GueeOBruWApFxuICAgKiBAcGFyYW0geDIg77yS44Gk55uu44Gu44K/44OD44OB44GX44Gf55S76Z2i44GueOOBruWApFxuICAgKiBAcGFyYW0geTIg77yS44Gk55uu44Gu44K/44OD44OB44GX44Gf55S76Z2i44GueeOBruWApFxuICAgKi9cbiAgcHVibGljIGNhbGN1bGF0ZURpc3RhbmNlKFxuICAgIHgxOiBudW1iZXIsXG4gICAgeTE6IG51bWJlcixcbiAgICB4MjogbnVtYmVyLFxuICAgIHkyOiBudW1iZXJcbiAgKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KCh4MSAtIHgyKSAqICh4MSAtIHgyKSArICh5MSAtIHkyKSAqICh5MSAtIHkyKSk7XG4gIH1cblxuICAvKipcbiAgICog77yS44Gk55uu44Gu5YCk44GL44KJ44CB56e75YuV6YeP44KS5rGC44KB44KL44CCXG4gICAqIOmBleOBhuaWueWQkeOBruWgtOWQiOOBr+enu+WLlemHj++8kOOAguWQjOOBmOaWueWQkeOBruWgtOWQiOOBr+OAgee1tuWvvuWApOOBjOWwj+OBleOBhOaWueOBruWApOOCkuWPgueFp+OBmeOCi+OAglxuICAgKlxuICAgKiBAcGFyYW0gdjEg77yR44Gk55uu44Gu56e75YuV6YePXG4gICAqIEBwYXJhbSB2MiDvvJLjgaTnm67jga7np7vli5Xph49cbiAgICpcbiAgICogQHJldHVybiDlsI/jgZXjgYTmlrnjga7np7vli5Xph49cbiAgICovXG4gIHB1YmxpYyBjYWxjdWxhdGVNb3ZpbmdBbW91bnQodjE6IG51bWJlciwgdjI6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKHYxID4gMC4wICE9IHYyID4gMC4wKSB7XG4gICAgICByZXR1cm4gMC4wO1xuICAgIH1cblxuICAgIGNvbnN0IHNpZ246IG51bWJlciA9IHYxID4gMC4wID8gMS4wIDogLTEuMDtcbiAgICBjb25zdCBhYnNvbHV0ZVZhbHVlMSA9IE1hdGguYWJzKHYxKTtcbiAgICBjb25zdCBhYnNvbHV0ZVZhbHVlMiA9IE1hdGguYWJzKHYyKTtcbiAgICByZXR1cm4gKFxuICAgICAgc2lnbiAqIChhYnNvbHV0ZVZhbHVlMSA8IGFic29sdXRlVmFsdWUyID8gYWJzb2x1dGVWYWx1ZTEgOiBhYnNvbHV0ZVZhbHVlMilcbiAgICApO1xuICB9XG5cbiAgX3N0YXJ0WTogbnVtYmVyOyAvLyDjgr/jg4Pjg4HjgpLplovlp4vjgZfjgZ/mmYLjga5444Gu5YCkXG4gIF9zdGFydFg6IG51bWJlcjsgLy8g44K/44OD44OB44KS6ZaL5aeL44GX44Gf5pmC44GueeOBruWApFxuICBfbGFzdFg6IG51bWJlcjsgLy8g44K344Oz44Kw44Or44K/44OD44OB5pmC44GueOOBruWApFxuICBfbGFzdFk6IG51bWJlcjsgLy8g44K344Oz44Kw44Or44K/44OD44OB5pmC44GueeOBruWApFxuICBfbGFzdFgxOiBudW1iZXI7IC8vIOODgOODluODq+OCv+ODg+ODgeaZguOBruS4gOOBpOebruOBrnjjga7lgKRcbiAgX2xhc3RZMTogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuIDjgaTnm67jga5544Gu5YCkXG4gIF9sYXN0WDI6IG51bWJlcjsgLy8g44OA44OW44Or44K/44OD44OB5pmC44Gu5LqM44Gk55uu44GueOOBruWApFxuICBfbGFzdFkyOiBudW1iZXI7IC8vIOODgOODluODq+OCv+ODg+ODgeaZguOBruS6jOOBpOebruOBrnnjga7lgKRcbiAgX2xhc3RUb3VjaERpc3RhbmNlOiBudW1iZXI7IC8vIDLmnKzku6XkuIrjgafjgr/jg4Pjg4HjgZfjgZ/jgajjgY3jga7mjIfjga7ot53pm6JcbiAgX2RlbHRhWDogbnVtYmVyOyAvLyDliY3lm57jga7lgKTjgYvjgonku4rlm57jga7lgKTjgbjjga5444Gu56e75YuV6Led6Zui44CCXG4gIF9kZWx0YVk6IG51bWJlcjsgLy8g5YmN5Zue44Gu5YCk44GL44KJ5LuK5Zue44Gu5YCk44G444GueeOBruenu+WLlei3nembouOAglxuICBfc2NhbGU6IG51bWJlcjsgLy8g44GT44Gu44OV44Os44O844Og44Gn5o6b44GR5ZCI44KP44Gb44KL5ouh5aSn546H44CC5ouh5aSn5pON5L2c5Lit5Lul5aSW44GvMeOAglxuICBfdG91Y2hTaW5nbGU6IGJvb2xlYW47IC8vIOOCt+ODs+OCsOODq+OCv+ODg+ODgeaZguOBr3RydWVcbiAgX2ZsaXBBdmFpbGFibGU6IGJvb2xlYW47IC8vIOODleODquODg+ODl+OBjOacieWKueOBi+OBqeOBhuOBi1xufVxuIiwidmFyIGdsb2JhbCA9XG4gICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmKSB8fFxuICAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsKVxuXG52YXIgc3VwcG9ydCA9IHtcbiAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBnbG9iYWwsXG4gIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBnbG9iYWwgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gIGJsb2I6XG4gICAgJ0ZpbGVSZWFkZXInIGluIGdsb2JhbCAmJlxuICAgICdCbG9iJyBpbiBnbG9iYWwgJiZcbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIGdsb2JhbCxcbiAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gZ2xvYmFsXG59XG5cbmZ1bmN0aW9uIGlzRGF0YVZpZXcob2JqKSB7XG4gIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxufVxuXG5pZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgXVxuXG4gIHZhciBpc0FycmF5QnVmZmVyVmlldyA9XG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3IHx8XG4gICAgZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHZpZXdDbGFzc2VzLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikpID4gLTFcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICB9XG4gIGlmICgvW15hLXowLTlcXC0jJCUmJyorLl5fYHx+IV0vaS50ZXN0KG5hbWUpIHx8IG5hbWUgPT09ICcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWU6IFwiJyArIG5hbWUgKyAnXCInKVxuICB9XG4gIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbmZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gIHZhciBpdGVyYXRvciA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGl0ZXJhdG9yXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdGhpcy5tYXAgPSB7fVxuXG4gIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgIH0sIHRoaXMpXG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV1cbiAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlICsgJywgJyArIHZhbHVlIDogdmFsdWVcbn1cblxuSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpXG4gICAgfVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChuYW1lKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpdGVtcy5wdXNoKHZhbHVlKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbmlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG59XG5cbmZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gIH1cbiAgYm9keS5ib2R5VXNlZCA9IHRydWVcbn1cblxuZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgIH1cbiAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pXG4gIH1cbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICB9IGVsc2Uge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSlcbiAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgfVxufVxuXG5mdW5jdGlvbiBCb2R5KCkge1xuICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAvKlxuICAgICAgZmV0Y2gtbW9jayB3cmFwcyB0aGUgUmVzcG9uc2Ugb2JqZWN0IGluIGFuIEVTNiBQcm94eSB0b1xuICAgICAgcHJvdmlkZSB1c2VmdWwgdGVzdCBoYXJuZXNzIGZlYXR1cmVzIHN1Y2ggYXMgZmx1c2guIEhvd2V2ZXIsIG9uXG4gICAgICBFUzUgYnJvd3NlcnMgd2l0aG91dCBmZXRjaCBvciBQcm94eSBzdXBwb3J0IHBvbGx5ZmlsbHMgbXVzdCBiZSB1c2VkO1xuICAgICAgdGhlIHByb3h5LXBvbGx5ZmlsbCBpcyB1bmFibGUgdG8gcHJveHkgYW4gYXR0cmlidXRlIHVubGVzcyBpdCBleGlzdHNcbiAgICAgIG9uIHRoZSBvYmplY3QgYmVmb3JlIHRoZSBQcm94eSBpcyBjcmVhdGVkLiBUaGlzIGNoYW5nZSBlbnN1cmVzXG4gICAgICBSZXNwb25zZS5ib2R5VXNlZCBleGlzdHMgb24gdGhlIGluc3RhbmNlLCB3aGlsZSBtYWludGFpbmluZyB0aGVcbiAgICAgIHNlbWFudGljIG9mIHNldHRpbmcgUmVxdWVzdC5ib2R5VXNlZCBpbiB0aGUgY29uc3RydWN0b3IgYmVmb3JlXG4gICAgICBfaW5pdEJvZHkgaXMgY2FsbGVkLlxuICAgICovXG4gICAgdGhpcy5ib2R5VXNlZCA9IHRoaXMuYm9keVVzZWRcbiAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSlcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgdmFyIGlzQ29uc3VtZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgICBpZiAoaXNDb25zdW1lZCkge1xuICAgICAgICAgIHJldHVybiBpc0NvbnN1bWVkXG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5idWZmZXIuc2xpY2UoXG4gICAgICAgICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5ieXRlT2Zmc2V0LFxuICAgICAgICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnl0ZU9mZnNldCArIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5ieXRlTGVuZ3RoXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3RlZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxudmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gIHJldHVybiBtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSA/IHVwY2FzZWQgOiBtZXRob2Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlcXVlc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGxlYXNlIHVzZSB0aGUgXCJuZXdcIiBvcGVyYXRvciwgdGhpcyBET00gb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi4nKVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgIH1cbiAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICB0aGlzLnNpZ25hbCA9IGlucHV0LnNpZ25hbFxuICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICB9XG5cbiAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnc2FtZS1vcmlnaW4nXG4gIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgfVxuICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gIHRoaXMuc2lnbmFsID0gb3B0aW9ucy5zaWduYWwgfHwgdGhpcy5zaWduYWxcbiAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICB9XG4gIHRoaXMuX2luaXRCb2R5KGJvZHkpXG5cbiAgaWYgKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSB7XG4gICAgaWYgKG9wdGlvbnMuY2FjaGUgPT09ICduby1zdG9yZScgfHwgb3B0aW9ucy5jYWNoZSA9PT0gJ25vLWNhY2hlJykge1xuICAgICAgLy8gU2VhcmNoIGZvciBhICdfJyBwYXJhbWV0ZXIgaW4gdGhlIHF1ZXJ5IHN0cmluZ1xuICAgICAgdmFyIHJlUGFyYW1TZWFyY2ggPSAvKFs/Jl0pXz1bXiZdKi9cbiAgICAgIGlmIChyZVBhcmFtU2VhcmNoLnRlc3QodGhpcy51cmwpKSB7XG4gICAgICAgIC8vIElmIGl0IGFscmVhZHkgZXhpc3RzIHRoZW4gc2V0IHRoZSB2YWx1ZSB3aXRoIHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgdGhpcy51cmwgPSB0aGlzLnVybC5yZXBsYWNlKHJlUGFyYW1TZWFyY2gsICckMV89JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBhIG5ldyAnXycgcGFyYW1ldGVyIHRvIHRoZSBlbmQgd2l0aCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgIHZhciByZVF1ZXJ5U3RyaW5nID0gL1xcPy9cbiAgICAgICAgdGhpcy51cmwgKz0gKHJlUXVlcnlTdHJpbmcudGVzdCh0aGlzLnVybCkgPyAnJicgOiAnPycpICsgJ189JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7Ym9keTogdGhpcy5fYm9keUluaXR9KVxufVxuXG5mdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gIGJvZHlcbiAgICAudHJpbSgpXG4gICAgLnNwbGl0KCcmJylcbiAgICAuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGZvcm1cbn1cblxuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJylcbiAgLy8gQXZvaWRpbmcgc3BsaXQgdmlhIHJlZ2V4IHRvIHdvcmsgYXJvdW5kIGEgY29tbW9uIElFMTEgYnVnIHdpdGggdGhlIGNvcmUtanMgMy42LjAgcmVnZXggcG9seWZpbGxcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9mZXRjaC9pc3N1ZXMvNzQ4XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy83NTFcbiAgcHJlUHJvY2Vzc2VkSGVhZGVyc1xuICAgIC5zcGxpdCgnXFxyJylcbiAgICAubWFwKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgcmV0dXJuIGhlYWRlci5pbmRleE9mKCdcXG4nKSA9PT0gMCA/IGhlYWRlci5zdWJzdHIoMSwgaGVhZGVyLmxlbmd0aCkgOiBoZWFkZXJcbiAgICB9KVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKVxuICAgICAgdmFyIGtleSA9IHBhcnRzLnNoaWZ0KCkudHJpbSgpXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKClcbiAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICAgIH1cbiAgICB9KVxuICByZXR1cm4gaGVhZGVyc1xufVxuXG5Cb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVzcG9uc2UpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGxlYXNlIHVzZSB0aGUgXCJuZXdcIiBvcGVyYXRvciwgdGhpcyBET00gb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi4nKVxuICB9XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPT09IHVuZGVmaW5lZCA/IDIwMCA6IG9wdGlvbnMuc3RhdHVzXG4gIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDBcbiAgdGhpcy5zdGF0dXNUZXh0ID0gb3B0aW9ucy5zdGF0dXNUZXh0ID09PSB1bmRlZmluZWQgPyAnJyA6ICcnICsgb3B0aW9ucy5zdGF0dXNUZXh0XG4gIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbn1cblxuQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgIHVybDogdGhpcy51cmxcbiAgfSlcbn1cblxuUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgcmV0dXJuIHJlc3BvbnNlXG59XG5cbnZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG5SZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gIH1cblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbn1cblxuZXhwb3J0IHZhciBET01FeGNlcHRpb24gPSBnbG9iYWwuRE9NRXhjZXB0aW9uXG50cnkge1xuICBuZXcgRE9NRXhjZXB0aW9uKClcbn0gY2F0Y2ggKGVycikge1xuICBET01FeGNlcHRpb24gPSBmdW5jdGlvbihtZXNzYWdlLCBuYW1lKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZVxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKVxuICAgIHRoaXMuc3RhY2sgPSBlcnJvci5zdGFja1xuICB9XG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSlcbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERPTUV4Y2VwdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2goaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwgJiYgcmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgIGZ1bmN0aW9uIGFib3J0WGhyKCkge1xuICAgICAgeGhyLmFib3J0KClcbiAgICB9XG5cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMudXJsID0gJ3Jlc3BvbnNlVVJMJyBpbiB4aHIgPyB4aHIucmVzcG9uc2VVUkwgOiBvcHRpb25zLmhlYWRlcnMuZ2V0KCdYLVJlcXVlc3QtVVJMJylcbiAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgICB9LCAwKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpeFVybCh1cmwpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB1cmwgPT09ICcnICYmIGdsb2JhbC5sb2NhdGlvbi5ocmVmID8gZ2xvYmFsLmxvY2F0aW9uLmhyZWYgOiB1cmxcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHVybFxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCBmaXhVcmwocmVxdWVzdC51cmwpLCB0cnVlKVxuXG4gICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICB9IGVsc2UgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdvbWl0Jykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhocikge1xuICAgICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBzdXBwb3J0LmFycmF5QnVmZmVyICYmXG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpICYmXG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpLmluZGV4T2YoJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpICE9PSAtMVxuICAgICAgKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluaXQgJiYgdHlwZW9mIGluaXQuaGVhZGVycyA9PT0gJ29iamVjdCcgJiYgIShpbml0LmhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSkge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaW5pdC5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgbm9ybWFsaXplVmFsdWUoaW5pdC5oZWFkZXJzW25hbWVdKSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwpIHtcbiAgICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG5cbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRE9ORSAoc3VjY2VzcyBvciBmYWlsdXJlKVxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgfSlcbn1cblxuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG5cbmlmICghZ2xvYmFsLmZldGNoKSB7XG4gIGdsb2JhbC5mZXRjaCA9IGZldGNoXG4gIGdsb2JhbC5IZWFkZXJzID0gSGVhZGVyc1xuICBnbG9iYWwuUmVxdWVzdCA9IFJlcXVlc3RcbiAgZ2xvYmFsLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL21haW4udHNcIik7XG4iLCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=